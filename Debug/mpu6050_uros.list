
mpu6050_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001acb8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001400  0801ae98  0801ae98  0001be98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c298  0801c298  0001e740  2**0
                  CONTENTS
  4 .ARM          00000008  0801c298  0801c298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2a0  0801c2a0  0001e740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801c2a0  0801c2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c2ac  0801c2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000740  20000000  0801c2b0  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adf8  20000740  0801c9f0  0001e740  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b538  0801c9f0  0001f538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e740  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a18  00000000  00000000  0001e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000553c  00000000  00000000  00045188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  0004a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001782  00000000  00000000  0004c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd38  00000000  00000000  0004dcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027b5e  00000000  00000000  0007b9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011650a  00000000  00000000  000a3550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b9a5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009204  00000000  00000000  001b9ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001c2cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000740 	.word	0x20000740
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801ae80 	.word	0x0801ae80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000744 	.word	0x20000744
 800021c:	0801ae80 	.word	0x0801ae80

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_ldivmod>:
 8000c18:	b97b      	cbnz	r3, 8000c3a <__aeabi_ldivmod+0x22>
 8000c1a:	b972      	cbnz	r2, 8000c3a <__aeabi_ldivmod+0x22>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bfbe      	ittt	lt
 8000c20:	2000      	movlt	r0, #0
 8000c22:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c26:	e006      	blt.n	8000c36 <__aeabi_ldivmod+0x1e>
 8000c28:	bf08      	it	eq
 8000c2a:	2800      	cmpeq	r0, #0
 8000c2c:	bf1c      	itt	ne
 8000c2e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c32:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c36:	f000 b9b5 	b.w	8000fa4 <__aeabi_idiv0>
 8000c3a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c42:	2900      	cmp	r1, #0
 8000c44:	db09      	blt.n	8000c5a <__aeabi_ldivmod+0x42>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db1a      	blt.n	8000c80 <__aeabi_ldivmod+0x68>
 8000c4a:	f000 f84d 	bl	8000ce8 <__udivmoddi4>
 8000c4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c56:	b004      	add	sp, #16
 8000c58:	4770      	bx	lr
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db1b      	blt.n	8000c9c <__aeabi_ldivmod+0x84>
 8000c64:	f000 f840 	bl	8000ce8 <__udivmoddi4>
 8000c68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c70:	b004      	add	sp, #16
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	4252      	negs	r2, r2
 8000c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f82f 	bl	8000ce8 <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4240      	negs	r0, r0
 8000c96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9a:	4770      	bx	lr
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca2:	f000 f821 	bl	8000ce8 <__udivmoddi4>
 8000ca6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cae:	b004      	add	sp, #16
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <MX_FREERTOS_Init+0x18>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_FREERTOS_Init+0x1c>)
 8000fb2:	f006 fdb9 	bl	8007b28 <osThreadNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a03      	ldr	r2, [pc, #12]	@ (8000fc8 <MX_FREERTOS_Init+0x20>)
 8000fba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	0801af38 	.word	0x0801af38
 8000fc4:	08001b25 	.word	0x08001b25
 8000fc8:	2000075c 	.word	0x2000075c

08000fcc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fd8:	f007 fe7a 	bl	8008cd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <pvPortMallocMicroROS+0x17c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fe4:	f000 f986 	bl	80012f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fe8:	4b58      	ldr	r3, [pc, #352]	@ (800114c <pvPortMallocMicroROS+0x180>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f040 8090 	bne.w	8001116 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d01e      	beq.n	800103a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	2b00      	cmp	r3, #0
 800100c:	d015      	beq.n	800103a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f023 0307 	bic.w	r3, r3, #7
 8001014:	3308      	adds	r3, #8
 8001016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001026:	f383 8811 	msr	BASEPRI, r3
 800102a:	f3bf 8f6f 	isb	sy
 800102e:	f3bf 8f4f 	dsb	sy
 8001032:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	e7fd      	b.n	8001036 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d06a      	beq.n	8001116 <pvPortMallocMicroROS+0x14a>
 8001040:	4b43      	ldr	r3, [pc, #268]	@ (8001150 <pvPortMallocMicroROS+0x184>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d865      	bhi.n	8001116 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800104a:	4b42      	ldr	r3, [pc, #264]	@ (8001154 <pvPortMallocMicroROS+0x188>)
 800104c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <pvPortMallocMicroROS+0x188>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001054:	e004      	b.n	8001060 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	d903      	bls.n	8001072 <pvPortMallocMicroROS+0xa6>
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f1      	bne.n	8001056 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001072:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <pvPortMallocMicroROS+0x17c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001078:	429a      	cmp	r2, r3
 800107a:	d04c      	beq.n	8001116 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2208      	movs	r2, #8
 8001082:	4413      	add	r3, r2
 8001084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1ad2      	subs	r2, r2, r3
 8001096:	2308      	movs	r3, #8
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	429a      	cmp	r2, r3
 800109c:	d920      	bls.n	80010e0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800109e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00b      	beq.n	80010c8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	613b      	str	r3, [r7, #16]
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f000 f96c 	bl	80013b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <pvPortMallocMicroROS+0x184>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <pvPortMallocMicroROS+0x184>)
 80010ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <pvPortMallocMicroROS+0x184>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <pvPortMallocMicroROS+0x18c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d203      	bcs.n	8001102 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <pvPortMallocMicroROS+0x184>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <pvPortMallocMicroROS+0x18c>)
 8001100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <pvPortMallocMicroROS+0x180>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	431a      	orrs	r2, r3
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001116:	f007 fde9 	bl	8008cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	60fb      	str	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800113c:	69fb      	ldr	r3, [r7, #28]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200042a4 	.word	0x200042a4
 800114c:	200042b0 	.word	0x200042b0
 8001150:	200042a8 	.word	0x200042a8
 8001154:	2000429c 	.word	0x2000429c
 8001158:	200042ac 	.word	0x200042ac

0800115c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d04a      	beq.n	8001204 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800116e:	2308      	movs	r3, #8
 8001170:	425b      	negs	r3, r3
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <vPortFreeMicroROS+0xb0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4013      	ands	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10b      	bne.n	80011a2 <vPortFreeMicroROS+0x46>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60fb      	str	r3, [r7, #12]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <vPortFreeMicroROS+0x66>
	__asm volatile
 80011aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	60bb      	str	r3, [r7, #8]
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	e7fd      	b.n	80011be <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <vPortFreeMicroROS+0xb0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d019      	beq.n	8001204 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d115      	bne.n	8001204 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <vPortFreeMicroROS+0xb0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011e8:	f007 fd72 	bl	8008cd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <vPortFreeMicroROS+0xb4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a06      	ldr	r2, [pc, #24]	@ (8001210 <vPortFreeMicroROS+0xb4>)
 80011f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f000 f8dc 	bl	80013b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001200:	f007 fd74 	bl	8008cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200042b0 	.word	0x200042b0
 8001210:	200042a8 	.word	0x200042a8

08001214 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001220:	2308      	movs	r3, #8
 8001222:	425b      	negs	r3, r3
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <getBlockSize+0x38>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	43db      	mvns	r3, r3
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

	return count;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	4618      	mov	r0, r3
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200042b0 	.word	0x200042b0

08001250 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800125a:	f007 fd39 	bl	8008cd0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f7ff feb4 	bl	8000fcc <pvPortMallocMicroROS>
 8001264:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d017      	beq.n	800129c <pvPortReallocMicroROS+0x4c>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d014      	beq.n	800129c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffce 	bl	8001214 <getBlockSize>
 8001278:	4603      	mov	r3, r0
 800127a:	2208      	movs	r2, #8
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d201      	bcs.n	800128c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f017 fbc4 	bl	8018a1e <memcpy>

		vPortFreeMicroROS(pv);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ff60 	bl	800115c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800129c:	f007 fd26 	bl	8008cec <xTaskResumeAll>

	return newmem;
 80012a0:	68bb      	ldr	r3, [r7, #8]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012b4:	f007 fd0c 	bl	8008cd0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff fe82 	bl	8000fcc <pvPortMallocMicroROS>
 80012c8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ce:	e004      	b.n	80012da <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	613a      	str	r2, [r7, #16]
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	617a      	str	r2, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f5      	bne.n	80012d0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012e4:	f007 fd02 	bl	8008cec <xTaskResumeAll>
  	return mem;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <prvHeapInit+0xac>)
 8001302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00c      	beq.n	8001328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3307      	adds	r3, #7
 8001312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <prvHeapInit+0xac>)
 8001324:	4413      	add	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800132c:	4a1d      	ldr	r2, [pc, #116]	@ (80013a4 <prvHeapInit+0xb0>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <prvHeapInit+0xb0>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4413      	add	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001340:	2208      	movs	r2, #8
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1a9b      	subs	r3, r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <prvHeapInit+0xb4>)
 8001354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <prvHeapInit+0xb4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <prvHeapInit+0xb4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <prvHeapInit+0xb4>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <prvHeapInit+0xb8>)
 8001382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <prvHeapInit+0xbc>)
 800138a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <prvHeapInit+0xc0>)
 800138e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	2000369c 	.word	0x2000369c
 80013a4:	2000429c 	.word	0x2000429c
 80013a8:	200042a4 	.word	0x200042a4
 80013ac:	200042ac 	.word	0x200042ac
 80013b0:	200042a8 	.word	0x200042a8
 80013b4:	200042b0 	.word	0x200042b0

080013b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <prvInsertBlockIntoFreeList+0xac>)
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	e002      	b.n	80013cc <prvInsertBlockIntoFreeList+0x14>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d8f7      	bhi.n	80013c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	4413      	add	r3, r2
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d108      	bne.n	80013fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	441a      	add	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d118      	bne.n	8001440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <prvInsertBlockIntoFreeList+0xb0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d00d      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	441a      	add	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e008      	b.n	8001448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001436:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <prvInsertBlockIntoFreeList+0xb0>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e003      	b.n	8001448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d002      	beq.n	8001456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000429c 	.word	0x2000429c
 8001468:	200042a4 	.word	0x200042a4

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_DMA_Init+0x60>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <MX_DMA_Init+0x60>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6493      	str	r3, [r2, #72]	@ 0x48
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <MX_DMA_Init+0x60>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_DMA_Init+0x60>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <MX_DMA_Init+0x60>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6493      	str	r3, [r2, #72]	@ 0x48
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <MX_DMA_Init+0x60>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	200b      	movs	r0, #11
 80014a8:	f001 f9e0 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014ac:	200b      	movs	r0, #11
 80014ae:	f001 f9f7 	bl	80028a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2105      	movs	r1, #5
 80014b6:	200c      	movs	r0, #12
 80014b8:	f001 f9d8 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014bc:	200c      	movs	r0, #12
 80014be:	f001 f9ef 	bl	80028a0 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014de:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e4:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <cubemx_transport_open+0x28>)
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f004 f9e2 	bl	80058b0 <HAL_UART_Receive_DMA>
    return true;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200042b4 	.word	0x200042b4

080014fc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800150a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f004 fa1b 	bl	8005948 <HAL_UART_DMAStop>
    return true;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001530:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001538:	2b20      	cmp	r3, #32
 800153a:	d11b      	bne.n	8001574 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	b29b      	uxth	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	6978      	ldr	r0, [r7, #20]
 8001546:	f004 f933 	bl	80057b0 <HAL_UART_Transmit_DMA>
 800154a:	4603      	mov	r3, r0
 800154c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800154e:	e002      	b.n	8001556 <cubemx_transport_write+0x3a>
            osDelay(1);
 8001550:	2001      	movs	r0, #1
 8001552:	f006 fb7b 	bl	8007c4c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001556:	7cfb      	ldrb	r3, [r7, #19]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <cubemx_transport_write+0x4a>
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	2b20      	cmp	r3, #32
 8001564:	d1f4      	bne.n	8001550 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001566:	7cfb      	ldrb	r3, [r7, #19]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <cubemx_transport_write+0x54>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	e002      	b.n	8001576 <cubemx_transport_write+0x5a>
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001574:	2300      	movs	r3, #0
    }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001594:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
}
 800159c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015ac:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <cubemx_transport_read+0x9c>)
 80015ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b0:	b662      	cpsie	i
}
 80015b2:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f006 fb46 	bl	8007c4c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <cubemx_transport_read+0x9c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d103      	bne.n	80015d4 <cubemx_transport_read+0x54>
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbe2      	blt.n	800159a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015d8:	e011      	b.n	80015fe <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	440b      	add	r3, r1
 80015e4:	490f      	ldr	r1, [pc, #60]	@ (8001624 <cubemx_transport_read+0xa4>)
 80015e6:	5c8a      	ldrb	r2, [r1, r2]
 80015e8:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <cubemx_transport_read+0xa0>)
 80015f6:	6013      	str	r3, [r2, #0]
        wrote++;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <cubemx_transport_read+0xa0>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <cubemx_transport_read+0x9c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d003      	beq.n	8001612 <cubemx_transport_read+0x92>
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	d3e3      	bcc.n	80015da <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001612:	69bb      	ldr	r3, [r7, #24]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20004ab8 	.word	0x20004ab8
 8001620:	20004ab4 	.word	0x20004ab4
 8001624:	200042b4 	.word	0x200042b4

08001628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a2e      	ldr	r2, [pc, #184]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <MX_GPIO_Init+0xd4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a28      	ldr	r2, [pc, #160]	@ (80016fc <MX_GPIO_Init+0xd4>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <MX_GPIO_Init+0xd4>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <MX_GPIO_Init+0xd4>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_GPIO_Init+0xd4>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2120      	movs	r1, #32
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f001 fdc9 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	480f      	ldr	r0, [pc, #60]	@ (8001700 <MX_GPIO_Init+0xd8>)
 80016c2:	f001 fc39 	bl	8002f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016c6:	2320      	movs	r3, #32
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e0:	f001 fc2a 	bl	8002f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2105      	movs	r1, #5
 80016e8:	2028      	movs	r0, #40	@ 0x28
 80016ea:	f001 f8bf 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ee:	2028      	movs	r0, #40	@ 0x28
 80016f0:	f001 f8d6 	bl	80028a0 <HAL_NVIC_EnableIRQ>

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000800 	.word	0x48000800

08001704 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_I2C1_Init+0x74>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <MX_I2C1_Init+0x78>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001710:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <MX_I2C1_Init+0x7c>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <MX_I2C1_Init+0x74>)
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173e:	480e      	ldr	r0, [pc, #56]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001740:	f001 fdb7 	bl	80032b2 <HAL_I2C_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800174a:	f000 fb4b 	bl	8001de4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001752:	f002 fb39 	bl	8003dc8 <HAL_I2CEx_ConfigAnalogFilter>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800175c:	f000 fb42 	bl	8001de4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001764:	f002 fb7b 	bl	8003e5e <HAL_I2CEx_ConfigDigitalFilter>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800176e:	f000 fb39 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20004abc 	.word	0x20004abc
 800177c:	40005400 	.word	0x40005400
 8001780:	40621236 	.word	0x40621236

08001784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09e      	sub	sp, #120	@ 0x78
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2254      	movs	r2, #84	@ 0x54
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f017 f871 	bl	801888c <memset>
  if(i2cHandle->Instance==I2C1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <HAL_I2C_MspInit+0xa8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d136      	bne.n	8001822 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b4:	2340      	movs	r3, #64	@ 0x40
 80017b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fa0b 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017cc:	f000 fb0a 	bl	8001de4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ec:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	2312      	movs	r3, #18
 80017f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fa:	2304      	movs	r3, #4
 80017fc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001802:	4619      	mov	r1, r3
 8001804:	480b      	ldr	r0, [pc, #44]	@ (8001834 <HAL_I2C_MspInit+0xb0>)
 8001806:	f001 fb97 	bl	8002f38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001822:	bf00      	nop
 8001824:	3778      	adds	r7, #120	@ 0x78
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40005400 	.word	0x40005400
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400

08001838 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <MX_IWDG_Init+0x34>)
 800183e:	4a0c      	ldr	r2, [pc, #48]	@ (8001870 <MX_IWDG_Init+0x38>)
 8001840:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_IWDG_Init+0x34>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <MX_IWDG_Init+0x34>)
 800184a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800184e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_IWDG_Init+0x34>)
 8001852:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001856:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_IWDG_Init+0x34>)
 800185a:	f002 fb4c 	bl	8003ef6 <HAL_IWDG_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001864:	f000 fabe 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20004b10 	.word	0x20004b10
 8001870:	40003000 	.word	0x40003000
 8001874:	00000000 	.word	0x00000000

08001878 <convertRollPitchToVelocity>:
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
VelocityOutput convertRollPitchToVelocity(double roll, double pitch) {
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b098      	sub	sp, #96	@ 0x60
 800187c:	af00      	add	r7, sp, #0
 800187e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001882:	ed87 1b04 	vstr	d1, [r7, #16]
    VelocityOutput output;

    // Convert roll and pitch from degrees to radians
    double rollRad = roll * DEG2RAD;
 8001886:	a33c      	add	r3, pc, #240	@ (adr r3, 8001978 <convertRollPitchToVelocity+0x100>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001890:	f7fe feea 	bl	8000668 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <convertRollPitchToVelocity+0x108>)
 80018a2:	f7ff f80b 	bl	80008bc <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double pitchRad = pitch * DEG2RAD;
 80018ae:	a332      	add	r3, pc, #200	@ (adr r3, 8001978 <convertRollPitchToVelocity+0x100>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b8:	f7fe fed6 	bl	8000668 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <convertRollPitchToVelocity+0x108>)
 80018ca:	f7fe fff7 	bl	80008bc <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    // Define a scaling factor for the conversion (tune this as needed)
    double linearScale = 5.0;  // Adjust based on desired speed and response
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <convertRollPitchToVelocity+0x10c>)
 80018dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double angularScale = 3.0;
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <convertRollPitchToVelocity+0x110>)
 80018e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    // Calculate linear velocity in x-axis (m/s) from roll
    output.linearVelocityX = linearScale * cos(pitchRad) * sin(rollRad);
 80018ea:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 80018ee:	f018 f89f 	bl	8019a30 <cos>
 80018f2:	ec51 0b10 	vmov	r0, r1, d0
 80018f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018fa:	f7fe feb5 	bl	8000668 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	461d      	mov	r5, r3
 8001906:	ed97 0b16 	vldr	d0, [r7, #88]	@ 0x58
 800190a:	f018 f8ed 	bl	8019ae8 <sin>
 800190e:	ec53 2b10 	vmov	r2, r3, d0
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fea7 	bl	8000668 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Calculate angular velocity in z-axis (rad/s) from pitch
    output.angularVelocityZ = angularScale * sin(pitchRad);
 8001922:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8001926:	f018 f8df 	bl	8019ae8 <sin>
 800192a:	ec51 0b10 	vmov	r0, r1, d0
 800192e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001932:	f7fe fe99 	bl	8000668 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    return output; // Return the output structure
 800193e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800194c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001954:	ec41 0b16 	vmov	d6, r0, r1
 8001958:	ec43 2b17 	vmov	d7, r2, r3
}
 800195c:	eeb0 0a46 	vmov.f32	s0, s12
 8001960:	eef0 0a66 	vmov.f32	s1, s13
 8001964:	eeb0 1a47 	vmov.f32	s2, s14
 8001968:	eef0 1a67 	vmov.f32	s3, s15
 800196c:	3760      	adds	r7, #96	@ 0x60
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	54442d18 	.word	0x54442d18
 800197c:	400921fb 	.word	0x400921fb
 8001980:	40668000 	.word	0x40668000
 8001984:	40140000 	.word	0x40140000
 8001988:	40080000 	.word	0x40080000
 800198c:	00000000 	.word	0x00000000

08001990 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80a3 	beq.w	8001aea <timer_callback+0x15a>
		// read data in MPU6050 (library)
		MPU6050_Read_All(&hi2c1, &MPU6050);
 80019a4:	4958      	ldr	r1, [pc, #352]	@ (8001b08 <timer_callback+0x178>)
 80019a6:	4859      	ldr	r0, [pc, #356]	@ (8001b0c <timer_callback+0x17c>)
 80019a8:	f005 fcee 	bl	8007388 <MPU6050_Read_All>

		// store sync time in mpu6050_msg time stamp
		mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000; // second unit
 80019ac:	f00c fb0a 	bl	800dfc4 <rmw_uros_epoch_millis>
 80019b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f7ff f92e 	bl	8000c18 <__aeabi_ldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4b53      	ldr	r3, [pc, #332]	@ (8001b10 <timer_callback+0x180>)
 80019c2:	601a      	str	r2, [r3, #0]
		mpu6050_msg.header.stamp.nanosec =  rmw_uros_epoch_nanos(); // nano second unit
 80019c4:	f00c fb0c 	bl	800dfe0 <rmw_uros_epoch_nanos>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <timer_callback+0x180>)
 80019ce:	605a      	str	r2, [r3, #4]

		// store data MPU6050 in mpu6050_msg
		// 	unit m/s^2
		mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax;
 80019d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b08 <timer_callback+0x178>)
 80019d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019d6:	a348      	add	r3, pc, #288	@ (adr r3, 8001af8 <timer_callback+0x168>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fe44 	bl	8000668 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	494a      	ldr	r1, [pc, #296]	@ (8001b10 <timer_callback+0x180>)
 80019e6:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay;
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <timer_callback+0x178>)
 80019ec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019f0:	a341      	add	r3, pc, #260	@ (adr r3, 8001af8 <timer_callback+0x168>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe37 	bl	8000668 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4944      	ldr	r1, [pc, #272]	@ (8001b10 <timer_callback+0x180>)
 8001a00:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az;
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <timer_callback+0x178>)
 8001a06:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a0a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001af8 <timer_callback+0x168>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fe2a 	bl	8000668 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	493d      	ldr	r1, [pc, #244]	@ (8001b10 <timer_callback+0x180>)
 8001a1a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
		// unit rad/s
		mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx;
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b08 <timer_callback+0x178>)
 8001a20:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a24:	a336      	add	r3, pc, #216	@ (adr r3, 8001b00 <timer_callback+0x170>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fe1d 	bl	8000668 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4937      	ldr	r1, [pc, #220]	@ (8001b10 <timer_callback+0x180>)
 8001a34:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy;
 8001a38:	4b33      	ldr	r3, [pc, #204]	@ (8001b08 <timer_callback+0x178>)
 8001a3a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001a3e:	a330      	add	r3, pc, #192	@ (adr r3, 8001b00 <timer_callback+0x170>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fe10 	bl	8000668 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4930      	ldr	r1, [pc, #192]	@ (8001b10 <timer_callback+0x180>)
 8001a4e:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz;
 8001a52:	4b2d      	ldr	r3, [pc, #180]	@ (8001b08 <timer_callback+0x178>)
 8001a54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001a58:	a329      	add	r3, pc, #164	@ (adr r3, 8001b00 <timer_callback+0x170>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fe03 	bl	8000668 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	492a      	ldr	r1, [pc, #168]	@ (8001b10 <timer_callback+0x180>)
 8001a68:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		// Test get Angle
		mpu6050_msg.orientation.x = MPU6050.KalmanAngleX;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <timer_callback+0x178>)
 8001a6e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001a72:	4927      	ldr	r1, [pc, #156]	@ (8001b10 <timer_callback+0x180>)
 8001a74:	e9c1 2306 	strd	r2, r3, [r1, #24]
		mpu6050_msg.orientation.y = MPU6050.KalmanAngleY;
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <timer_callback+0x178>)
 8001a7a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001a7e:	4924      	ldr	r1, [pc, #144]	@ (8001b10 <timer_callback+0x180>)
 8001a80:	e9c1 2308 	strd	r2, r3, [r1, #32]
		rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 8001a84:	2200      	movs	r2, #0
 8001a86:	4922      	ldr	r1, [pc, #136]	@ (8001b10 <timer_callback+0x180>)
 8001a88:	4822      	ldr	r0, [pc, #136]	@ (8001b14 <timer_callback+0x184>)
 8001a8a:	f00a fc5d 	bl	800c348 <rcl_publish>

		VelocityOutput velocities = convertRollPitchToVelocity(mpu6050_msg.orientation.x, mpu6050_msg.orientation.y);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <timer_callback+0x180>)
 8001a90:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <timer_callback+0x180>)
 8001a96:	ed93 6b08 	vldr	d6, [r3, #32]
 8001a9a:	eeb0 1a46 	vmov.f32	s2, s12
 8001a9e:	eef0 1a66 	vmov.f32	s3, s13
 8001aa2:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa6:	eef0 0a67 	vmov.f32	s1, s15
 8001aaa:	f7ff fee5 	bl	8001878 <convertRollPitchToVelocity>
 8001aae:	eeb0 6a40 	vmov.f32	s12, s0
 8001ab2:	eef0 6a60 	vmov.f32	s13, s1
 8001ab6:	eeb0 7a41 	vmov.f32	s14, s2
 8001aba:	eef0 7a61 	vmov.f32	s15, s3
 8001abe:	ed87 6b04 	vstr	d6, [r7, #16]
 8001ac2:	ed87 7b06 	vstr	d7, [r7, #24]
		pub_msg.linear.x = velocities.linearVelocityX;
 8001ac6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aca:	4913      	ldr	r1, [pc, #76]	@ (8001b18 <timer_callback+0x188>)
 8001acc:	e9c1 2300 	strd	r2, r3, [r1]
		pub_msg.angular.z = velocities.angularVelocityZ;
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	4910      	ldr	r1, [pc, #64]	@ (8001b18 <timer_callback+0x188>)
 8001ad6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		rcl_publish(&cmd_vel_publisher, &pub_msg, NULL);
 8001ada:	2200      	movs	r2, #0
 8001adc:	490e      	ldr	r1, [pc, #56]	@ (8001b18 <timer_callback+0x188>)
 8001ade:	480f      	ldr	r0, [pc, #60]	@ (8001b1c <timer_callback+0x18c>)
 8001ae0:	f00a fc32 	bl	800c348 <rcl_publish>

		// Auto Reconnect
		HAL_IWDG_Refresh(&hiwdg);
 8001ae4:	480e      	ldr	r0, [pc, #56]	@ (8001b20 <timer_callback+0x190>)
 8001ae6:	f002 fa55 	bl	8003f94 <HAL_IWDG_Refresh>
	}
}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	51eb851f 	.word	0x51eb851f
 8001afc:	40239eb8 	.word	0x40239eb8
 8001b00:	a2529d39 	.word	0xa2529d39
 8001b04:	3f91df46 	.word	0x3f91df46
 8001b08:	20004d48 	.word	0x20004d48
 8001b0c:	20004abc 	.word	0x20004abc
 8001b10:	20004c08 	.word	0x20004c08
 8001b14:	20004c00 	.word	0x20004c00
 8001b18:	20004da8 	.word	0x20004da8
 8001b1c:	20004da0 	.word	0x20004da0
 8001b20:	20004b10 	.word	0x20004b10

08001b24 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b0b2      	sub	sp, #200	@ 0xc8
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001b2e:	4b52      	ldr	r3, [pc, #328]	@ (8001c78 <StartDefaultTask+0x154>)
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	4b52      	ldr	r3, [pc, #328]	@ (8001c7c <StartDefaultTask+0x158>)
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	4b52      	ldr	r3, [pc, #328]	@ (8001c80 <StartDefaultTask+0x15c>)
 8001b38:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <StartDefaultTask+0x160>)
 8001b3a:	4953      	ldr	r1, [pc, #332]	@ (8001c88 <StartDefaultTask+0x164>)
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f00b fc57 	bl	800d3f0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b42:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00b fb6e 	bl	800d228 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c8c <StartDefaultTask+0x168>)
 8001b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001b52:	4b4f      	ldr	r3, [pc, #316]	@ (8001c90 <StartDefaultTask+0x16c>)
 8001b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001b58:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <StartDefaultTask+0x170>)
 8001b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c98 <StartDefaultTask+0x174>)
 8001b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001b64:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00b fb6b 	bl	800d244 <rcutils_set_default_allocator>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <StartDefaultTask+0x5e>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001b7a:	21b3      	movs	r1, #179	@ 0xb3
 8001b7c:	4847      	ldr	r0, [pc, #284]	@ (8001c9c <StartDefaultTask+0x178>)
 8001b7e:	f016 fd05 	bl	801858c <iprintf>
  }

  // micro-ROS app
  allocator = rcl_get_default_allocator();
 8001b82:	4c47      	ldr	r4, [pc, #284]	@ (8001ca0 <StartDefaultTask+0x17c>)
 8001b84:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00b fb79 	bl	800d280 <rcutils_get_default_allocator>
 8001b8e:	4625      	mov	r5, r4
 8001b90:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	602b      	str	r3, [r5, #0]

  // Initialize and modify options (Set DOMAIN ID to 10)
  init_options = rcl_get_zero_initialized_init_options();
 8001b9c:	f00a fa04 	bl	800bfa8 <rcl_get_zero_initialized_init_options>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a40      	ldr	r2, [pc, #256]	@ (8001ca4 <StartDefaultTask+0x180>)
 8001ba4:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca0 <StartDefaultTask+0x17c>)
 8001ba8:	466c      	mov	r4, sp
 8001baa:	f103 020c 	add.w	r2, r3, #12
 8001bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb8:	483a      	ldr	r0, [pc, #232]	@ (8001ca4 <StartDefaultTask+0x180>)
 8001bba:	f00a f9f7 	bl	800bfac <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, 23);
 8001bbe:	2117      	movs	r1, #23
 8001bc0:	4838      	ldr	r0, [pc, #224]	@ (8001ca4 <StartDefaultTask+0x180>)
 8001bc2:	f00a faef 	bl	800c1a4 <rcl_init_options_set_domain_id>

  //create init_options
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001bc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ca0 <StartDefaultTask+0x17c>)
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <StartDefaultTask+0x180>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4835      	ldr	r0, [pc, #212]	@ (8001ca8 <StartDefaultTask+0x184>)
 8001bd2:	f00b fa19 	bl	800d008 <rclc_support_init_with_options>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001bd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <StartDefaultTask+0x184>)
 8001bd8:	4a34      	ldr	r2, [pc, #208]	@ (8001cac <StartDefaultTask+0x188>)
 8001bda:	4935      	ldr	r1, [pc, #212]	@ (8001cb0 <StartDefaultTask+0x18c>)
 8001bdc:	4835      	ldr	r0, [pc, #212]	@ (8001cb4 <StartDefaultTask+0x190>)
 8001bde:	f00b fa47 	bl	800d070 <rclc_node_init_default>

  // Sync time (for add in timestamp imu)
  rmw_uros_sync_session(1000); // ms unit
 8001be2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be6:	f00c fa09 	bl	800dffc <rmw_uros_sync_session>

  // create timer
  rclc_timer_init_default(
 8001bea:	4b33      	ldr	r3, [pc, #204]	@ (8001cb8 <StartDefaultTask+0x194>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4a33      	ldr	r2, [pc, #204]	@ (8001cbc <StartDefaultTask+0x198>)
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	492c      	ldr	r1, [pc, #176]	@ (8001ca8 <StartDefaultTask+0x184>)
 8001bf6:	4832      	ldr	r0, [pc, #200]	@ (8001cc0 <StartDefaultTask+0x19c>)
 8001bf8:	f00b fade 	bl	800d1b8 <rclc_timer_init_default>
		  RCL_MS_TO_NS(10), // 1000 ms
		  timer_callback
		  );

  // create publisher
  rclc_publisher_init_best_effort(
 8001bfc:	f00c fdae 	bl	800e75c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <StartDefaultTask+0x1a0>)
 8001c04:	492b      	ldr	r1, [pc, #172]	@ (8001cb4 <StartDefaultTask+0x190>)
 8001c06:	4830      	ldr	r0, [pc, #192]	@ (8001cc8 <StartDefaultTask+0x1a4>)
 8001c08:	f00b faa2 	bl	800d150 <rclc_publisher_init_best_effort>
		  &mpu6050_publisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs ,msg ,Imu),
		  "mpu6050_publisher"
  );
  rclc_publisher_init_default(
 8001c0c:	f008 fcec 	bl	800a5e8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <StartDefaultTask+0x1a8>)
 8001c14:	4927      	ldr	r1, [pc, #156]	@ (8001cb4 <StartDefaultTask+0x190>)
 8001c16:	482e      	ldr	r0, [pc, #184]	@ (8001cd0 <StartDefaultTask+0x1ac>)
 8001c18:	f00b fa66 	bl	800d0e8 <rclc_publisher_init_default>
		  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs ,msg ,Twist),
		  "cmd_vel"
  );

  //create  message
  mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001c1c:	4c2d      	ldr	r4, [pc, #180]	@ (8001cd4 <StartDefaultTask+0x1b0>)
 8001c1e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001c22:	492d      	ldr	r1, [pc, #180]	@ (8001cd8 <StartDefaultTask+0x1b4>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f008 fe1b 	bl	800a860 <micro_ros_string_utilities_init>
 8001c2a:	f104 0308 	add.w	r3, r4, #8
 8001c2e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}


  // create executor
  executor = rclc_executor_get_zero_initialized_executor(); // Get default config of executor
 8001c38:	4c28      	ldr	r4, [pc, #160]	@ (8001cdc <StartDefaultTask+0x1b8>)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00a ff11 	bl	800ca64 <rclc_executor_get_zero_initialized_executor>
 8001c42:	4620      	mov	r0, r4
 8001c44:	463b      	mov	r3, r7
 8001c46:	2288      	movs	r2, #136	@ 0x88
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f016 fee8 	bl	8018a1e <memcpy>
  unsigned int num_handles = 1; //num_handles คือ จำนวนของ callback ที่เรา handle ซึ่งตอนนี้มีคือ timer จึงเท่ากับ 1
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <StartDefaultTask+0x17c>)
 8001c56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c5a:	4913      	ldr	r1, [pc, #76]	@ (8001ca8 <StartDefaultTask+0x184>)
 8001c5c:	481f      	ldr	r0, [pc, #124]	@ (8001cdc <StartDefaultTask+0x1b8>)
 8001c5e:	f00a ff0b 	bl	800ca78 <rclc_executor_init>
  // add timer (ถ้า add callback ใดก่อน callback นั้นจะเริ่มทำงานก่อน)
  rclc_executor_add_timer(&executor, &mpu6050_timer);
 8001c62:	4917      	ldr	r1, [pc, #92]	@ (8001cc0 <StartDefaultTask+0x19c>)
 8001c64:	481d      	ldr	r0, [pc, #116]	@ (8001cdc <StartDefaultTask+0x1b8>)
 8001c66:	f00a ff77 	bl	800cb58 <rclc_executor_add_timer>
  // เรียกใช้ spin เพื่อให้ callback ต่างๆทำงาน
  rclc_executor_spin(&executor);
 8001c6a:	481c      	ldr	r0, [pc, #112]	@ (8001cdc <StartDefaultTask+0x1b8>)
 8001c6c:	f00b f98a 	bl	800cf84 <rclc_executor_spin>

  for(;;)
  {
    osDelay(10);
 8001c70:	200a      	movs	r0, #10
 8001c72:	f005 ffeb 	bl	8007c4c <osDelay>
 8001c76:	e7fb      	b.n	8001c70 <StartDefaultTask+0x14c>
 8001c78:	08001581 	.word	0x08001581
 8001c7c:	0800151d 	.word	0x0800151d
 8001c80:	080014fd 	.word	0x080014fd
 8001c84:	080014d1 	.word	0x080014d1
 8001c88:	20004e34 	.word	0x20004e34
 8001c8c:	08001df1 	.word	0x08001df1
 8001c90:	08001e35 	.word	0x08001e35
 8001c94:	08001e6d 	.word	0x08001e6d
 8001c98:	08001ed9 	.word	0x08001ed9
 8001c9c:	0801aea4 	.word	0x0801aea4
 8001ca0:	20004b54 	.word	0x20004b54
 8001ca4:	20004b70 	.word	0x20004b70
 8001ca8:	20004b20 	.word	0x20004b20
 8001cac:	0801aecc 	.word	0x0801aecc
 8001cb0:	0801aed0 	.word	0x0801aed0
 8001cb4:	20004b68 	.word	0x20004b68
 8001cb8:	08001991 	.word	0x08001991
 8001cbc:	00989680 	.word	0x00989680
 8001cc0:	20004b74 	.word	0x20004b74
 8001cc4:	0801aedc 	.word	0x0801aedc
 8001cc8:	20004c00 	.word	0x20004c00
 8001ccc:	0801aef0 	.word	0x0801aef0
 8001cd0:	20004da0 	.word	0x20004da0
 8001cd4:	20004c08 	.word	0x20004c08
 8001cd8:	0801aef8 	.word	0x0801aef8
 8001cdc:	20004b78 	.word	0x20004b78

08001ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce4:	f000 fcd3 	bl	800268e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce8:	f000 f81c 	bl	8001d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cec:	f7ff fc9c 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cf0:	f7ff fbbc 	bl	800146c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001cf4:	f000 fb9a 	bl	800242c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001cf8:	f7ff fd04 	bl	8001704 <MX_I2C1_Init>
  MX_IWDG_Init();
 8001cfc:	f7ff fd9c 	bl	8001838 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  // initialization of the GY-521 (MPU6050)
  while (MPU6050_Init(&hi2c1) == 1);
 8001d00:	bf00      	nop
 8001d02:	4807      	ldr	r0, [pc, #28]	@ (8001d20 <main+0x40>)
 8001d04:	f005 fae8 	bl	80072d8 <MPU6050_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d0f9      	beq.n	8001d02 <main+0x22>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d0e:	f005 fec1 	bl	8007a94 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d12:	f7ff f949 	bl	8000fa8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d16:	f005 fee1 	bl	8007adc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <main+0x3a>
 8001d1e:	bf00      	nop
 8001d20:	20004abc 	.word	0x20004abc

08001d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	@ 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 0318 	add.w	r3, r7, #24
 8001d2e:	2238      	movs	r2, #56	@ 0x38
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f016 fdaa 	bl	801888c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d46:	2000      	movs	r0, #0
 8001d48:	f002 f934 	bl	8003fb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d56:	2340      	movs	r3, #64	@ 0x40
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d62:	2302      	movs	r3, #2
 8001d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d66:	2304      	movs	r3, #4
 8001d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d6a:	2355      	movs	r3, #85	@ 0x55
 8001d6c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d76:	2302      	movs	r3, #2
 8001d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 f9cc 	bl	800411c <HAL_RCC_OscConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001d8a:	f000 f82b 	bl	8001de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8e:	230f      	movs	r3, #15
 8001d90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d92:	2303      	movs	r3, #3
 8001d94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2104      	movs	r1, #4
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fcca 	bl	8004740 <HAL_RCC_ClockConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001db2:	f000 f817 	bl	8001de4 <Error_Handler>
  }
}
 8001db6:	bf00      	nop
 8001db8:	3750      	adds	r7, #80	@ 0x50
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dd2:	f000 fc75 	bl	80026c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40012c00 	.word	0x40012c00

08001de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <Error_Handler+0x8>

08001df0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <microros_allocate+0x3c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <microros_allocate+0x3c>)
 8001e08:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <microros_allocate+0x40>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <microros_allocate+0x40>)
 8001e18:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff f8d6 	bl	8000fcc <pvPortMallocMicroROS>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20004dd8 	.word	0x20004dd8
 8001e30:	20004ddc 	.word	0x20004ddc

08001e34 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00c      	beq.n	8001e5e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff f9e5 	bl	8001214 <getBlockSize>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <microros_deallocate+0x34>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <microros_deallocate+0x34>)
 8001e56:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff f97f 	bl	800115c <vPortFreeMicroROS>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20004ddc 	.word	0x20004ddc

08001e6c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <microros_reallocate+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <microros_reallocate+0x64>)
 8001e86:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <microros_reallocate+0x68>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <microros_reallocate+0x68>)
 8001e96:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f7ff f894 	bl	8000fcc <pvPortMallocMicroROS>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	e00e      	b.n	8001ec6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff f9b3 	bl	8001214 <getBlockSize>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <microros_reallocate+0x68>)
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <microros_reallocate+0x68>)
 8001eba:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff f9c6 	bl	8001250 <pvPortReallocMicroROS>
 8001ec4:	4603      	mov	r3, r0
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20004dd8 	.word	0x20004dd8
 8001ed4:	20004ddc 	.word	0x20004ddc

08001ed8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <microros_zero_allocate+0x48>)
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <microros_zero_allocate+0x48>)
 8001ef6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	4a08      	ldr	r2, [pc, #32]	@ (8001f24 <microros_zero_allocate+0x4c>)
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <microros_zero_allocate+0x4c>)
 8001f0a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff f9cb 	bl	80012aa <pvPortCallocMicroROS>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20004dd8 	.word	0x20004dd8
 8001f24:	20004ddc 	.word	0x20004ddc

08001f28 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f3e:	a320      	add	r3, pc, #128	@ (adr r3, 8001fc0 <UTILS_NanosecondsToTimespec+0x98>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fe68 	bl	8000c18 <__aeabi_ldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f56:	a31a      	add	r3, pc, #104	@ (adr r3, 8001fc0 <UTILS_NanosecondsToTimespec+0x98>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fe5c 	bl	8000c18 <__aeabi_ldivmod>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da20      	bge.n	8001fae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <UTILS_NanosecondsToTimespec+0x90>)
 8001f72:	fb82 1203 	smull	r1, r2, r2, r3
 8001f76:	1712      	asrs	r2, r2, #28
 8001f78:	17db      	asrs	r3, r3, #31
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	6979      	ldr	r1, [r7, #20]
 8001f88:	17c8      	asrs	r0, r1, #31
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	ebb2 0804 	subs.w	r8, r2, r4
 8001f92:	eb63 0905 	sbc.w	r9, r3, r5
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4906      	ldr	r1, [pc, #24]	@ (8001fbc <UTILS_NanosecondsToTimespec+0x94>)
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	609a      	str	r2, [r3, #8]
    }
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb8:	44b82fa1 	.word	0x44b82fa1
 8001fbc:	3b9aca00 	.word	0x3b9aca00
 8001fc0:	3b9aca00 	.word	0x3b9aca00
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fcc:	b08e      	sub	sp, #56	@ 0x38
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001fd2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001fd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f007 f8f8 	bl	80091e4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	17da      	asrs	r2, r3, #31
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	61fa      	str	r2, [r7, #28]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	000b      	movs	r3, r1
 8002008:	2200      	movs	r2, #0
 800200a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800200e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002010:	2200      	movs	r2, #0
 8002012:	461c      	mov	r4, r3
 8002014:	4615      	mov	r5, r2
 8002016:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800201a:	1911      	adds	r1, r2, r4
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	416b      	adcs	r3, r5
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002026:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800202a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	f04f 0400 	mov.w	r4, #0
 8002036:	f04f 0500 	mov.w	r5, #0
 800203a:	015d      	lsls	r5, r3, #5
 800203c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002040:	0154      	lsls	r4, r2, #5
 8002042:	4622      	mov	r2, r4
 8002044:	462b      	mov	r3, r5
 8002046:	ebb2 0800 	subs.w	r8, r2, r0
 800204a:	eb63 0901 	sbc.w	r9, r3, r1
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800205a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800205e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002062:	4690      	mov	r8, r2
 8002064:	4699      	mov	r9, r3
 8002066:	eb18 0a00 	adds.w	sl, r8, r0
 800206a:	eb49 0b01 	adc.w	fp, r9, r1
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800207a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800207e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002082:	ebb2 040a 	subs.w	r4, r2, sl
 8002086:	603c      	str	r4, [r7, #0]
 8002088:	eb63 030b 	sbc.w	r3, r3, fp
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002092:	4623      	mov	r3, r4
 8002094:	181b      	adds	r3, r3, r0
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	462b      	mov	r3, r5
 800209a:	eb41 0303 	adc.w	r3, r1, r3
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020a6:	f7ff ff3f 	bl	8001f28 <UTILS_NanosecondsToTimespec>

    return 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	3738      	adds	r7, #56	@ 0x38
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_MspInit+0x50>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <HAL_MspInit+0x50>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_MspInit+0x50>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <HAL_MspInit+0x50>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a0b      	ldr	r2, [pc, #44]	@ (8002108 <HAL_MspInit+0x50>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_MspInit+0x50>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	210f      	movs	r1, #15
 80020f2:	f06f 0001 	mvn.w	r0, #1
 80020f6:	f000 fbb9 	bl	800286c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020fa:	f001 ffff 	bl	80040fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	@ 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800211c:	4b2c      	ldr	r3, [pc, #176]	@ (80021d0 <HAL_InitTick+0xc4>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002120:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <HAL_InitTick+0xc4>)
 8002122:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002126:	6613      	str	r3, [r2, #96]	@ 0x60
 8002128:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <HAL_InitTick+0xc4>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002134:	f107 020c 	add.w	r2, r7, #12
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fcd4 	bl	8004aec <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002144:	f002 fcbc 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8002148:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214c:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <HAL_InitTick+0xc8>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9b      	lsrs	r3, r3, #18
 8002154:	3b01      	subs	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002158:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_InitTick+0xcc>)
 800215a:	4a20      	ldr	r2, [pc, #128]	@ (80021dc <HAL_InitTick+0xd0>)
 800215c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_InitTick+0xcc>)
 8002160:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002164:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002166:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <HAL_InitTick+0xcc>)
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_InitTick+0xcc>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_InitTick+0xcc>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002178:	4817      	ldr	r0, [pc, #92]	@ (80021d8 <HAL_InitTick+0xcc>)
 800217a:	f002 ff7d 	bl	8005078 <HAL_TIM_Base_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002184:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11b      	bne.n	80021c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800218c:	4812      	ldr	r0, [pc, #72]	@ (80021d8 <HAL_InitTick+0xcc>)
 800218e:	f002 ffd5 	bl	800513c <HAL_TIM_Base_Start_IT>
 8002192:	4603      	mov	r3, r0
 8002194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002198:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021a0:	2019      	movs	r0, #25
 80021a2:	f000 fb7d 	bl	80028a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d808      	bhi.n	80021be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	2019      	movs	r0, #25
 80021b2:	f000 fb5b 	bl	800286c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_InitTick+0xd4>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e002      	b.n	80021c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3730      	adds	r7, #48	@ 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	20004de0 	.word	0x20004de0
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	20000008 	.word	0x20000008

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <NMI_Handler+0x4>

080021ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <MemManage_Handler+0x4>

080021fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <BusFault_Handler+0x4>

08002204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <UsageFault_Handler+0x4>

0800220c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <DMA1_Channel1_IRQHandler+0x10>)
 8002222:	f000 fd2e 	bl	8002c82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20004f28 	.word	0x20004f28

08002230 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DMA1_Channel2_IRQHandler+0x10>)
 8002236:	f000 fd24 	bl	8002c82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20004ec8 	.word	0x20004ec8

08002244 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800224a:	f002 ffef 	bl	800522c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20004de0 	.word	0x20004de0

08002258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800225c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002260:	f001 f804 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <LPUART1_IRQHandler+0x10>)
 800226e:	f003 fc01 	bl	8005a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20004e34 	.word	0x20004e34

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002296:	f016 fb8d 	bl	80189b4 <__errno>
 800229a:	4603      	mov	r3, r0
 800229c:	2216      	movs	r2, #22
 800229e:	601a      	str	r2, [r3, #0]
  return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_exit>:

void _exit (int status)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffe7 	bl	800228c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022be:	bf00      	nop
 80022c0:	e7fd      	b.n	80022be <_exit+0x12>

080022c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e00a      	b.n	80022ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022d4:	f3af 8000 	nop.w
 80022d8:	4601      	mov	r1, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	60ba      	str	r2, [r7, #8]
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbf0      	blt.n	80022d4 <_read+0x12>
  }

  return len;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e009      	b.n	8002322 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	60ba      	str	r2, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbf1      	blt.n	800230e <_write+0x12>
  }
  return len;
 800232a:	687b      	ldr	r3, [r7, #4]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_close>:

int _close(int file)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800235c:	605a      	str	r2, [r3, #4]
  return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_isatty>:

int _isatty(int file)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f016 faf2 	bl	80189b4 <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20020000 	.word	0x20020000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20004e30 	.word	0x20004e30
 8002404:	2000b538 	.word	0x2000b538

08002408 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002430:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002432:	4a21      	ldr	r2, [pc, #132]	@ (80024b8 <MX_LPUART1_UART_Init+0x8c>)
 8002434:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002436:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002438:	4a20      	ldr	r2, [pc, #128]	@ (80024bc <MX_LPUART1_UART_Init+0x90>)
 800243a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002448:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002450:	220c      	movs	r2, #12
 8002452:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800246c:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 800246e:	f003 f94f 	bl	8005710 <HAL_UART_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002478:	f7ff fcb4 	bl	8001de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800247c:	2100      	movs	r1, #0
 800247e:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002480:	f004 fe5f 	bl	8007142 <HAL_UARTEx_SetTxFifoThreshold>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800248a:	f7ff fcab 	bl	8001de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	4808      	ldr	r0, [pc, #32]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 8002492:	f004 fe94 	bl	80071be <HAL_UARTEx_SetRxFifoThreshold>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800249c:	f7ff fca2 	bl	8001de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <MX_LPUART1_UART_Init+0x88>)
 80024a2:	f004 fe15 	bl	80070d0 <HAL_UARTEx_DisableFifoMode>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80024ac:	f7ff fc9a 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20004e34 	.word	0x20004e34
 80024b8:	40008000 	.word	0x40008000
 80024bc:	001e8480 	.word	0x001e8480

080024c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b09e      	sub	sp, #120	@ 0x78
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2254      	movs	r2, #84	@ 0x54
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f016 f9d3 	bl	801888c <memset>
  if(uartHandle->Instance==LPUART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002624 <HAL_UART_MspInit+0x164>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	f040 8094 	bne.w	800261a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024f2:	2320      	movs	r3, #32
 80024f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 fb6c 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800250a:	f7ff fc6b 	bl	8001de4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800250e:	4b46      	ldr	r3, [pc, #280]	@ (8002628 <HAL_UART_MspInit+0x168>)
 8002510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002512:	4a45      	ldr	r2, [pc, #276]	@ (8002628 <HAL_UART_MspInit+0x168>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800251a:	4b43      	ldr	r3, [pc, #268]	@ (8002628 <HAL_UART_MspInit+0x168>)
 800251c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	4b40      	ldr	r3, [pc, #256]	@ (8002628 <HAL_UART_MspInit+0x168>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	4a3f      	ldr	r2, [pc, #252]	@ (8002628 <HAL_UART_MspInit+0x168>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002532:	4b3d      	ldr	r3, [pc, #244]	@ (8002628 <HAL_UART_MspInit+0x168>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800253e:	230c      	movs	r3, #12
 8002540:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800254e:	230c      	movs	r3, #12
 8002550:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255c:	f000 fcec 	bl	8002f38 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_UART_MspInit+0x16c>)
 8002562:	4a33      	ldr	r2, [pc, #204]	@ (8002630 <HAL_UART_MspInit+0x170>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002566:	4b31      	ldr	r3, [pc, #196]	@ (800262c <HAL_UART_MspInit+0x16c>)
 8002568:	2222      	movs	r2, #34	@ 0x22
 800256a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256c:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <HAL_UART_MspInit+0x16c>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	4b2e      	ldr	r3, [pc, #184]	@ (800262c <HAL_UART_MspInit+0x16c>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002578:	4b2c      	ldr	r3, [pc, #176]	@ (800262c <HAL_UART_MspInit+0x16c>)
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257e:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <HAL_UART_MspInit+0x16c>)
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002584:	4b29      	ldr	r3, [pc, #164]	@ (800262c <HAL_UART_MspInit+0x16c>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800258a:	4b28      	ldr	r3, [pc, #160]	@ (800262c <HAL_UART_MspInit+0x16c>)
 800258c:	2220      	movs	r2, #32
 800258e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_UART_MspInit+0x16c>)
 8002592:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002596:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002598:	4824      	ldr	r0, [pc, #144]	@ (800262c <HAL_UART_MspInit+0x16c>)
 800259a:	f000 f98f 	bl	80028bc <HAL_DMA_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80025a4:	f7ff fc1e 	bl	8001de4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a20      	ldr	r2, [pc, #128]	@ (800262c <HAL_UART_MspInit+0x16c>)
 80025ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80025b0:	4a1e      	ldr	r2, [pc, #120]	@ (800262c <HAL_UART_MspInit+0x16c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002638 <HAL_UART_MspInit+0x178>)
 80025ba:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025be:	2223      	movs	r2, #35	@ 0x23
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025c4:	2210      	movs	r2, #16
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ce:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d4:	4b17      	ldr	r3, [pc, #92]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025da:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025e6:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025e8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80025ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80025ee:	4811      	ldr	r0, [pc, #68]	@ (8002634 <HAL_UART_MspInit+0x174>)
 80025f0:	f000 f964 	bl	80028bc <HAL_DMA_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80025fa:	f7ff fbf3 	bl	8001de4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <HAL_UART_MspInit+0x174>)
 8002602:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002604:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <HAL_UART_MspInit+0x174>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2105      	movs	r1, #5
 800260e:	205b      	movs	r0, #91	@ 0x5b
 8002610:	f000 f92c 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002614:	205b      	movs	r0, #91	@ 0x5b
 8002616:	f000 f943 	bl	80028a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800261a:	bf00      	nop
 800261c:	3778      	adds	r7, #120	@ 0x78
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40008000 	.word	0x40008000
 8002628:	40021000 	.word	0x40021000
 800262c:	20004ec8 	.word	0x20004ec8
 8002630:	4002001c 	.word	0x4002001c
 8002634:	20004f28 	.word	0x20004f28
 8002638:	40020008 	.word	0x40020008

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800263c:	480d      	ldr	r0, [pc, #52]	@ (8002674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800263e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002640:	f7ff fee2 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002644:	480c      	ldr	r0, [pc, #48]	@ (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002646:	490d      	ldr	r1, [pc, #52]	@ (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002648:	4a0d      	ldr	r2, [pc, #52]	@ (8002680 <LoopForever+0xe>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800265c:	4c0a      	ldr	r4, [pc, #40]	@ (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266a:	f016 f9a9 	bl	80189c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7ff fb37 	bl	8001ce0 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   r0, =_estack
 8002674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 8002680:	0801c2b0 	.word	0x0801c2b0
  ldr r2, =_sbss
 8002684:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8002688:	2000b538 	.word	0x2000b538

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>

0800268e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f8dc 	bl	8002856 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269e:	200f      	movs	r0, #15
 80026a0:	f7ff fd34 	bl	800210c <HAL_InitTick>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e001      	b.n	80026b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026b0:	f7ff fd02 	bl	80020b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026b4:	79fb      	ldrb	r3, [r7, #7]

}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_IncTick+0x1c>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_IncTick+0x20>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a03      	ldr	r2, [pc, #12]	@ (80026dc <HAL_IncTick+0x1c>)
 80026d0:	6013      	str	r3, [r2, #0]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	20004f88 	.word	0x20004f88
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <HAL_GetTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20004f88 	.word	0x20004f88

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	@ (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	@ (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	@ (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	@ 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff4c 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800287a:	f7ff ff63 	bl	8002744 <__NVIC_GetPriorityGrouping>
 800287e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7ff ffb3 	bl	80027f0 <NVIC_EncodePriority>
 800288a:	4602      	mov	r2, r0
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff82 	bl	800279c <__NVIC_SetPriority>
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff56 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e08d      	b.n	80029ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b47      	ldr	r3, [pc, #284]	@ (80029f4 <HAL_DMA_Init+0x138>)
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d80f      	bhi.n	80028fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <HAL_DMA_Init+0x13c>)
 80028e2:	4413      	add	r3, r2
 80028e4:	4a45      	ldr	r2, [pc, #276]	@ (80029fc <HAL_DMA_Init+0x140>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	009a      	lsls	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a42      	ldr	r2, [pc, #264]	@ (8002a00 <HAL_DMA_Init+0x144>)
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80028f8:	e00e      	b.n	8002918 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b40      	ldr	r3, [pc, #256]	@ (8002a04 <HAL_DMA_Init+0x148>)
 8002902:	4413      	add	r3, r2
 8002904:	4a3d      	ldr	r2, [pc, #244]	@ (80029fc <HAL_DMA_Init+0x140>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	009a      	lsls	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a3c      	ldr	r2, [pc, #240]	@ (8002a08 <HAL_DMA_Init+0x14c>)
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800292e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002932:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800293c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa82 	bl	8002e74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002978:	d102      	bne.n	8002980 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002994:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <HAL_DMA_Init+0x104>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d80c      	bhi.n	80029c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 faa2 	bl	8002ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e008      	b.n	80029d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40020407 	.word	0x40020407
 80029f8:	bffdfff8 	.word	0xbffdfff8
 80029fc:	cccccccd 	.word	0xcccccccd
 8002a00:	40020000 	.word	0x40020000
 8002a04:	bffdfbf8 	.word	0xbffdfbf8
 8002a08:	40020400 	.word	0x40020400

08002a0c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Start_IT+0x20>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e066      	b.n	8002afa <HAL_DMA_Start_IT+0xee>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d155      	bne.n	8002aec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f9c7 	bl	8002df8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 020e 	orr.w	r2, r2, #14
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e00f      	b.n	8002aa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 020a 	orr.w	r2, r2, #10
 8002aa2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e005      	b.n	8002af8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d005      	beq.n	8002b26 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e037      	b.n	8002b96 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 020e 	bic.w	r2, r2, #14
 8002b34:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b44:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f003 021f 	and.w	r2, r3, #31
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b72:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00c      	beq.n	8002b96 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b8a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b94:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d00d      	beq.n	8002be8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e047      	b.n	8002c78 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 020e 	bic.w	r2, r2, #14
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
    }
  }
  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d026      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x7a>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d107      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0204 	bic.w	r2, r2, #4
 8002cd4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d071      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cfa:	e06c      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2202      	movs	r2, #2
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02e      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d029      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10b      	bne.n	8002d40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 020a 	bic.w	r2, r2, #10
 8002d36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d038      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d6c:	e033      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2208      	movs	r2, #8
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d02a      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d025      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 020e 	bic.w	r2, r2, #14
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
}
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d108      	bne.n	8002e58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e56:	e007      	b.n	8002e68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b16      	ldr	r3, [pc, #88]	@ (8002edc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d802      	bhi.n	8002e8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e001      	b.n	8002e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3b08      	subs	r3, #8
 8002e9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40020407 	.word	0x40020407
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020820 	.word	0x40020820
 8002ee8:	cccccccd 	.word	0xcccccccd
 8002eec:	40020880 	.word	0x40020880

08002ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	1000823f 	.word	0x1000823f
 8002f34:	40020940 	.word	0x40020940

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f46:	e15a      	b.n	80031fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 814c 	beq.w	80031f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d005      	beq.n	8002f78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d130      	bne.n	8002fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	2203      	movs	r2, #3
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fae:	2201      	movs	r2, #1
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 0201 	and.w	r2, r3, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d017      	beq.n	8003016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d123      	bne.n	800306a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	6939      	ldr	r1, [r7, #16]
 8003066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0203 	and.w	r2, r3, #3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80a6 	beq.w	80031f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ac:	4b5b      	ldr	r3, [pc, #364]	@ (800321c <HAL_GPIO_Init+0x2e4>)
 80030ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b0:	4a5a      	ldr	r2, [pc, #360]	@ (800321c <HAL_GPIO_Init+0x2e4>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80030b8:	4b58      	ldr	r3, [pc, #352]	@ (800321c <HAL_GPIO_Init+0x2e4>)
 80030ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030c4:	4a56      	ldr	r2, [pc, #344]	@ (8003220 <HAL_GPIO_Init+0x2e8>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	220f      	movs	r2, #15
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030ee:	d01f      	beq.n	8003130 <HAL_GPIO_Init+0x1f8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003224 <HAL_GPIO_Init+0x2ec>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d019      	beq.n	800312c <HAL_GPIO_Init+0x1f4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003228 <HAL_GPIO_Init+0x2f0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_GPIO_Init+0x1f0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a4a      	ldr	r2, [pc, #296]	@ (800322c <HAL_GPIO_Init+0x2f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00d      	beq.n	8003124 <HAL_GPIO_Init+0x1ec>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a49      	ldr	r2, [pc, #292]	@ (8003230 <HAL_GPIO_Init+0x2f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x1e8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a48      	ldr	r2, [pc, #288]	@ (8003234 <HAL_GPIO_Init+0x2fc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_GPIO_Init+0x1e4>
 8003118:	2305      	movs	r3, #5
 800311a:	e00a      	b.n	8003132 <HAL_GPIO_Init+0x1fa>
 800311c:	2306      	movs	r3, #6
 800311e:	e008      	b.n	8003132 <HAL_GPIO_Init+0x1fa>
 8003120:	2304      	movs	r3, #4
 8003122:	e006      	b.n	8003132 <HAL_GPIO_Init+0x1fa>
 8003124:	2303      	movs	r3, #3
 8003126:	e004      	b.n	8003132 <HAL_GPIO_Init+0x1fa>
 8003128:	2302      	movs	r3, #2
 800312a:	e002      	b.n	8003132 <HAL_GPIO_Init+0x1fa>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_GPIO_Init+0x1fa>
 8003130:	2300      	movs	r3, #0
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	f002 0203 	and.w	r2, r2, #3
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	4093      	lsls	r3, r2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003142:	4937      	ldr	r1, [pc, #220]	@ (8003220 <HAL_GPIO_Init+0x2e8>)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003150:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <HAL_GPIO_Init+0x300>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003174:	4a30      	ldr	r2, [pc, #192]	@ (8003238 <HAL_GPIO_Init+0x300>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800317a:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <HAL_GPIO_Init+0x300>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800319e:	4a26      	ldr	r2, [pc, #152]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031a4:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031f2:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <HAL_GPIO_Init+0x300>)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	3301      	adds	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f ae9d 	bne.w	8002f48 <HAL_GPIO_Init+0x10>
  }
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40021000 	.word	0x40021000
 8003220:	40010000 	.word	0x40010000
 8003224:	48000400 	.word	0x48000400
 8003228:	48000800 	.word	0x48000800
 800322c:	48000c00 	.word	0x48000c00
 8003230:	48001000 	.word	0x48001000
 8003234:	48001400 	.word	0x48001400
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003258:	e002      	b.n	8003260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003276:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003282:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f806 	bl	800329c <HAL_GPIO_EXTI_Callback>
  }
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e08d      	b.n	80033e0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fe fa53 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2224      	movs	r2, #36	@ 0x24
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003302:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003312:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d107      	bne.n	800332c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	e006      	b.n	800333a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003338:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d108      	bne.n	8003354 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e007      	b.n	8003364 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003362:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003376:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003386:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69d9      	ldr	r1, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80f9 	bne.w	8003602 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_I2C_Mem_Write+0x34>
 8003416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0ed      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Write+0x4e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0e6      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800343e:	f7ff f951 	bl	80026e4 <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fac3 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0d1      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2221      	movs	r2, #33	@ 0x21
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	@ 0x40
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003488:	88f8      	ldrh	r0, [r7, #6]
 800348a:	893a      	ldrh	r2, [r7, #8]
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4603      	mov	r3, r0
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f9d3 	bl	8003844 <I2C_RequestMemoryWrite>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0a9      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2bff      	cmp	r3, #255	@ 0xff
 80034b8:	d90e      	bls.n	80034d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	@ 0xff
 80034be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fc47 	bl	8003d64 <I2C_TransferConfig>
 80034d6:	e00f      	b.n	80034f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fc36 	bl	8003d64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fac6 	bl	8003a8e <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e07b      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d034      	beq.n	80035b0 <HAL_I2C_Mem_Write+0x1c8>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d130      	bne.n	80035b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fa3f 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e04d      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2bff      	cmp	r3, #255	@ 0xff
 8003570:	d90e      	bls.n	8003590 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357c:	b2da      	uxtb	r2, r3
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fbeb 	bl	8003d64 <I2C_TransferConfig>
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fbda 	bl	8003d64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d19e      	bne.n	80034f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 faac 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e01a      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2220      	movs	r2, #32
 80035d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <HAL_I2C_Mem_Write+0x224>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	fe00e800 	.word	0xfe00e800

08003610 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	817b      	strh	r3, [r7, #10]
 8003622:	460b      	mov	r3, r1
 8003624:	813b      	strh	r3, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	f040 80fd 	bne.w	8003832 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_I2C_Mem_Read+0x34>
 800363e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0f1      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_I2C_Mem_Read+0x4e>
 800365a:	2302      	movs	r3, #2
 800365c:	e0ea      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003666:	f7ff f83d 	bl	80026e4 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2319      	movs	r3, #25
 8003672:	2201      	movs	r2, #1
 8003674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 f9af 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0d5      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2222      	movs	r2, #34	@ 0x22
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b0:	88f8      	ldrh	r0, [r7, #6]
 80036b2:	893a      	ldrh	r2, [r7, #8]
 80036b4:	8979      	ldrh	r1, [r7, #10]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	4603      	mov	r3, r0
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f913 	bl	80038ec <I2C_RequestMemoryRead>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0ad      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2bff      	cmp	r3, #255	@ 0xff
 80036e0:	d90e      	bls.n	8003700 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	22ff      	movs	r2, #255	@ 0xff
 80036e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	4b52      	ldr	r3, [pc, #328]	@ (800383c <HAL_I2C_Mem_Read+0x22c>)
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb33 	bl	8003d64 <I2C_TransferConfig>
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	8979      	ldrh	r1, [r7, #10]
 8003712:	4b4a      	ldr	r3, [pc, #296]	@ (800383c <HAL_I2C_Mem_Read+0x22c>)
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fb22 	bl	8003d64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	2200      	movs	r2, #0
 8003728:	2104      	movs	r1, #4
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f956 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07c      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d034      	beq.n	80037e0 <HAL_I2C_Mem_Read+0x1d0>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d130      	bne.n	80037e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f927 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04d      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2bff      	cmp	r3, #255	@ 0xff
 80037a0:	d90e      	bls.n	80037c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	22ff      	movs	r2, #255	@ 0xff
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	2300      	movs	r3, #0
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fad3 	bl	8003d64 <I2C_TransferConfig>
 80037be:	e00f      	b.n	80037e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fac2 	bl	8003d64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d19a      	bne.n	8003720 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f994 	bl	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e01a      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2220      	movs	r2, #32
 8003804:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <HAL_I2C_Mem_Read+0x230>)
 8003812:	400b      	ands	r3, r1
 8003814:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	80002400 	.word	0x80002400
 8003840:	fe00e800 	.word	0xfe00e800

08003844 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	460b      	mov	r3, r1
 8003858:	813b      	strh	r3, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	4b20      	ldr	r3, [pc, #128]	@ (80038e8 <I2C_RequestMemoryWrite+0xa4>)
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fa79 	bl	8003d64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f909 	bl	8003a8e <I2C_WaitOnTXISFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e02c      	b.n	80038e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	629a      	str	r2, [r3, #40]	@ 0x28
 8003896:	e015      	b.n	80038c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b29b      	uxth	r3, r3
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f8ef 	bl	8003a8e <I2C_WaitOnTXISFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e012      	b.n	80038e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2180      	movs	r1, #128	@ 0x80
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f884 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	80002000 	.word	0x80002000

080038ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	817b      	strh	r3, [r7, #10]
 80038fe:	460b      	mov	r3, r1
 8003900:	813b      	strh	r3, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <I2C_RequestMemoryRead+0xa4>)
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa26 	bl	8003d64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f8b6 	bl	8003a8e <I2C_WaitOnTXISFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e02c      	b.n	8003986 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003932:	893b      	ldrh	r3, [r7, #8]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
 800393c:	e015      	b.n	800396a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800393e:	893b      	ldrh	r3, [r7, #8]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	b29b      	uxth	r3, r3
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	69b9      	ldr	r1, [r7, #24]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f89c 	bl	8003a8e <I2C_WaitOnTXISFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e012      	b.n	8003986 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2200      	movs	r2, #0
 8003972:	2140      	movs	r1, #64	@ 0x40
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f831 	bl	80039dc <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	80002000 	.word	0x80002000

08003994 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d103      	bne.n	80039b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d007      	beq.n	80039d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	619a      	str	r2, [r3, #24]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ec:	e03b      	b.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8d6 	bl	8003ba4 <I2C_IsErrorOccurred>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e041      	b.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a08:	d02d      	beq.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fe fe6b 	bl	80026e4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d122      	bne.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d113      	bne.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00f      	b.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d0b4      	beq.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a9a:	e033      	b.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f87f 	bl	8003ba4 <I2C_IsErrorOccurred>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e031      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ab6:	d025      	beq.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab8:	f7fe fe14 	bl	80026e4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11a      	bne.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d013      	beq.n	8003b04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d1c4      	bne.n	8003a9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b28:	e02f      	b.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f838 	bl	8003ba4 <I2C_IsErrorOccurred>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e02d      	b.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3e:	f7fe fdd1 	bl	80026e4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d11a      	bne.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d013      	beq.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e007      	b.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d1c8      	bne.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	@ 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d068      	beq.n	8003ca2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd8:	e049      	b.n	8003c6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be0:	d045      	beq.n	8003c6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe fd7f 	bl	80026e4 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_IsErrorOccurred+0x54>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d13a      	bne.n	8003c6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c1a:	d121      	bne.n	8003c60 <I2C_IsErrorOccurred+0xbc>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c22:	d01d      	beq.n	8003c60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d01a      	beq.n	8003c60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c3a:	f7fe fd53 	bl	80026e4 <HAL_GetTick>
 8003c3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c40:	e00e      	b.n	8003c60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c42:	f7fe fd4f 	bl	80026e4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b19      	cmp	r3, #25
 8003c4e:	d907      	bls.n	8003c60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	f043 0320 	orr.w	r3, r3, #32
 8003c56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c5e:	e006      	b.n	8003c6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d1e9      	bne.n	8003c42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d003      	beq.n	8003c84 <I2C_IsErrorOccurred+0xe0>
 8003c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0aa      	beq.n	8003bda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2220      	movs	r2, #32
 8003c92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f043 0308 	orr.w	r3, r3, #8
 8003cdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ce6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f043 0302 	orr.w	r3, r3, #2
 8003cfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01c      	beq.n	8003d52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fe3b 	bl	8003994 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <I2C_IsErrorOccurred+0x1bc>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3728      	adds	r7, #40	@ 0x28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	fe00e800 	.word	0xfe00e800

08003d64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	817b      	strh	r3, [r7, #10]
 8003d72:	4613      	mov	r3, r2
 8003d74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d7c:	7a7b      	ldrb	r3, [r7, #9]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	0d5b      	lsrs	r3, r3, #21
 8003d9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003da2:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <I2C_TransferConfig+0x60>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	43db      	mvns	r3, r3
 8003da8:	ea02 0103 	and.w	r1, r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	03ff63ff 	.word	0x03ff63ff

08003dc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d138      	bne.n	8003e50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e032      	b.n	8003e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	@ 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d139      	bne.n	8003ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e033      	b.n	8003eea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2224      	movs	r2, #36	@ 0x24
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e041      	b.n	8003f8c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003f10:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6852      	ldr	r2, [r2, #4]
 8003f24:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6892      	ldr	r2, [r2, #8]
 8003f2e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003f30:	f7fe fbd8 	bl	80026e4 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f36:	e00f      	b.n	8003f58 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f38:	f7fe fbd4 	bl	80026e4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b31      	cmp	r3, #49	@ 0x31
 8003f44:	d908      	bls.n	8003f58 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e019      	b.n	8003f8c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e8      	bne.n	8003f38 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d005      	beq.n	8003f80 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68d2      	ldr	r2, [r2, #12]
 8003f7c:	611a      	str	r2, [r3, #16]
 8003f7e:	e004      	b.n	8003f8a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d141      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d131      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd0:	4b47      	ldr	r3, [pc, #284]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fd6:	4a46      	ldr	r2, [pc, #280]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe0:	4b43      	ldr	r3, [pc, #268]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fe8:	4a41      	ldr	r2, [pc, #260]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff0:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2232      	movs	r2, #50	@ 0x32
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	0c9b      	lsrs	r3, r3, #18
 8004002:	3301      	adds	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004006:	e002      	b.n	800400e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b01      	subs	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400e:	4b38      	ldr	r3, [pc, #224]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d102      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f2      	bne.n	8004008 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004022:	4b33      	ldr	r3, [pc, #204]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d158      	bne.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e057      	b.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004034:	4b2e      	ldr	r3, [pc, #184]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800403a:	4a2d      	ldr	r2, [pc, #180]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004044:	e04d      	b.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404c:	d141      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800404e:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d131      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800405c:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004062:	4a23      	ldr	r2, [pc, #140]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800406c:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004074:	4a1e      	ldr	r2, [pc, #120]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800407a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800407c:	4b1d      	ldr	r3, [pc, #116]	@ (80040f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2232      	movs	r2, #50	@ 0x32
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	0c9b      	lsrs	r3, r3, #18
 800408e:	3301      	adds	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004092:	e002      	b.n	800409a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409a:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d102      	bne.n	80040ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f2      	bne.n	8004094 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d112      	bne.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e011      	b.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c6:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040d0:	e007      	b.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040da:	4a05      	ldr	r2, [pc, #20]	@ (80040f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40007000 	.word	0x40007000
 80040f4:	20000004 	.word	0x20000004
 80040f8:	431bde83 	.word	0x431bde83

080040fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800410a:	6093      	str	r3, [r2, #8]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40007000 	.word	0x40007000

0800411c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e2fe      	b.n	800472c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d075      	beq.n	8004226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b97      	ldr	r3, [pc, #604]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004144:	4b94      	ldr	r3, [pc, #592]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d102      	bne.n	800415a <HAL_RCC_OscConfig+0x3e>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d002      	beq.n	8004160 <HAL_RCC_OscConfig+0x44>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d10b      	bne.n	8004178 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	4b8d      	ldr	r3, [pc, #564]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05b      	beq.n	8004224 <HAL_RCC_OscConfig+0x108>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d157      	bne.n	8004224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e2d9      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d106      	bne.n	8004190 <HAL_RCC_OscConfig+0x74>
 8004182:	4b85      	ldr	r3, [pc, #532]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a84      	ldr	r2, [pc, #528]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e01d      	b.n	80041cc <HAL_RCC_OscConfig+0xb0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x98>
 800419a:	4b7f      	ldr	r3, [pc, #508]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7e      	ldr	r2, [pc, #504]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b7c      	ldr	r3, [pc, #496]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7b      	ldr	r2, [pc, #492]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0xb0>
 80041b4:	4b78      	ldr	r3, [pc, #480]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a77      	ldr	r2, [pc, #476]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b75      	ldr	r3, [pc, #468]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a74      	ldr	r2, [pc, #464]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fe fa86 	bl	80026e4 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fe fa82 	bl	80026e4 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	@ 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e29e      	b.n	800472c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0xc0>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fa72 	bl	80026e4 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe fa6e 	bl	80026e4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	@ 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e28a      	b.n	800472c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004216:	4b60      	ldr	r3, [pc, #384]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0xe8>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d075      	beq.n	800431e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004232:	4b59      	ldr	r3, [pc, #356]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423c:	4b56      	ldr	r3, [pc, #344]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d102      	bne.n	8004252 <HAL_RCC_OscConfig+0x136>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d002      	beq.n	8004258 <HAL_RCC_OscConfig+0x13c>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11f      	bne.n	8004298 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	4b4f      	ldr	r3, [pc, #316]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x154>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e25d      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	4946      	ldr	r1, [pc, #280]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004284:	4b45      	ldr	r3, [pc, #276]	@ (800439c <HAL_RCC_OscConfig+0x280>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fd ff3f 	bl	800210c <HAL_InitTick>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d043      	beq.n	800431c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e249      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d023      	beq.n	80042e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe fa1a 	bl	80026e4 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fe fa16 	bl	80026e4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e232      	b.n	800472c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c6:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d2:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	492d      	ldr	r1, [pc, #180]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
 80042e6:	e01a      	b.n	800431e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe f9f6 	bl	80026e4 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fe f9f2 	bl	80026e4 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e20e      	b.n	800472c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430e:	4b22      	ldr	r3, [pc, #136]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1e0>
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800431c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d041      	beq.n	80043ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01c      	beq.n	800436c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004338:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fe f9cf 	bl	80026e4 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434a:	f7fe f9cb 	bl	80026e4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1e7      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435c:	4b0e      	ldr	r3, [pc, #56]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ef      	beq.n	800434a <HAL_RCC_OscConfig+0x22e>
 800436a:	e020      	b.n	80043ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436c:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004372:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <HAL_RCC_OscConfig+0x27c>)
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe f9b2 	bl	80026e4 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004382:	e00d      	b.n	80043a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004384:	f7fe f9ae 	bl	80026e4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d906      	bls.n	80043a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1ca      	b.n	800472c <HAL_RCC_OscConfig+0x610>
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a0:	4b8c      	ldr	r3, [pc, #560]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80043a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1ea      	bne.n	8004384 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80a6 	beq.w	8004508 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043c0:	4b84      	ldr	r3, [pc, #528]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2b4>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x2b6>
 80043d0:	2300      	movs	r3, #0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00d      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d6:	4b7f      	ldr	r3, [pc, #508]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	4a7e      	ldr	r2, [pc, #504]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043e2:	4b7c      	ldr	r3, [pc, #496]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f2:	4b79      	ldr	r3, [pc, #484]	@ (80045d8 <HAL_RCC_OscConfig+0x4bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d118      	bne.n	8004430 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fe:	4b76      	ldr	r3, [pc, #472]	@ (80045d8 <HAL_RCC_OscConfig+0x4bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	@ (80045d8 <HAL_RCC_OscConfig+0x4bc>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fe f96b 	bl	80026e4 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fe f967 	bl	80026e4 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e183      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004424:	4b6c      	ldr	r3, [pc, #432]	@ (80045d8 <HAL_RCC_OscConfig+0x4bc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d108      	bne.n	800444a <HAL_RCC_OscConfig+0x32e>
 8004438:	4b66      	ldr	r3, [pc, #408]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	4a65      	ldr	r2, [pc, #404]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004448:	e024      	b.n	8004494 <HAL_RCC_OscConfig+0x378>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b05      	cmp	r3, #5
 8004450:	d110      	bne.n	8004474 <HAL_RCC_OscConfig+0x358>
 8004452:	4b60      	ldr	r3, [pc, #384]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004458:	4a5e      	ldr	r2, [pc, #376]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800445a:	f043 0304 	orr.w	r3, r3, #4
 800445e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004462:	4b5c      	ldr	r3, [pc, #368]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004468:	4a5a      	ldr	r2, [pc, #360]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004472:	e00f      	b.n	8004494 <HAL_RCC_OscConfig+0x378>
 8004474:	4b57      	ldr	r3, [pc, #348]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	4a56      	ldr	r2, [pc, #344]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004484:	4b53      	ldr	r3, [pc, #332]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448a:	4a52      	ldr	r2, [pc, #328]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fe f922 	bl	80026e4 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fe f91e 	bl	80026e4 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e138      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ba:	4b46      	ldr	r3, [pc, #280]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ed      	beq.n	80044a4 <HAL_RCC_OscConfig+0x388>
 80044c8:	e015      	b.n	80044f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fe f90b 	bl	80026e4 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d0:	e00a      	b.n	80044e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fe f907 	bl	80026e4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e121      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e8:	4b3a      	ldr	r3, [pc, #232]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ed      	bne.n	80044d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044f6:	7ffb      	ldrb	r3, [r7, #31]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b35      	ldr	r3, [pc, #212]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	4a34      	ldr	r2, [pc, #208]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004506:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d03c      	beq.n	800458e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01c      	beq.n	8004556 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800451c:	4b2d      	ldr	r3, [pc, #180]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800451e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004522:	4a2c      	ldr	r2, [pc, #176]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fe f8da 	bl	80026e4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004534:	f7fe f8d6 	bl	80026e4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0f2      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004546:	4b23      	ldr	r3, [pc, #140]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ef      	beq.n	8004534 <HAL_RCC_OscConfig+0x418>
 8004554:	e01b      	b.n	800458e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004556:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800455c:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fe f8bd 	bl	80026e4 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800456e:	f7fe f8b9 	bl	80026e4 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0d5      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004580:	4b14      	ldr	r3, [pc, #80]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 8004582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ef      	bne.n	800456e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80c9 	beq.w	800472a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004598:	4b0e      	ldr	r3, [pc, #56]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	f000 8083 	beq.w	80046ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d15e      	bne.n	800466c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fe f893 	bl	80026e4 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c0:	e00c      	b.n	80045dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe f88f 	bl	80026e4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d905      	bls.n	80045dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0ab      	b.n	800472c <HAL_RCC_OscConfig+0x610>
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045dc:	4b55      	ldr	r3, [pc, #340]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ec      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e8:	4b52      	ldr	r3, [pc, #328]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	4b52      	ldr	r3, [pc, #328]	@ (8004738 <HAL_RCC_OscConfig+0x61c>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6a11      	ldr	r1, [r2, #32]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004602:	0212      	lsls	r2, r2, #8
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	0552      	lsls	r2, r2, #21
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004616:	0852      	lsrs	r2, r2, #1
 8004618:	3a01      	subs	r2, #1
 800461a:	0652      	lsls	r2, r2, #25
 800461c:	4311      	orrs	r1, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004622:	06d2      	lsls	r2, r2, #27
 8004624:	430a      	orrs	r2, r1
 8004626:	4943      	ldr	r1, [pc, #268]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 8004628:	4313      	orrs	r3, r2
 800462a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462c:	4b41      	ldr	r3, [pc, #260]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a40      	ldr	r2, [pc, #256]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004636:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004638:	4b3e      	ldr	r3, [pc, #248]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4a3d      	ldr	r2, [pc, #244]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 800463e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004642:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe f84e 	bl	80026e4 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe f84a 	bl	80026e4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e066      	b.n	800472c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	4b35      	ldr	r3, [pc, #212]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x530>
 800466a:	e05e      	b.n	800472a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b31      	ldr	r3, [pc, #196]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a30      	ldr	r2, [pc, #192]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe f834 	bl	80026e4 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fe f830 	bl	80026e4 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e04c      	b.n	800472c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004692:	4b28      	ldr	r3, [pc, #160]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800469e:	4b25      	ldr	r3, [pc, #148]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4924      	ldr	r1, [pc, #144]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 80046a4:	4b25      	ldr	r3, [pc, #148]	@ (800473c <HAL_RCC_OscConfig+0x620>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	60cb      	str	r3, [r1, #12]
 80046aa:	e03e      	b.n	800472a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e039      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <HAL_RCC_OscConfig+0x618>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d12c      	bne.n	8004726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	3b01      	subs	r3, #1
 80046d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d123      	bne.n	8004726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d11b      	bne.n	8004726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d113      	bne.n	8004726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d109      	bne.n	8004726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	3b01      	subs	r3, #1
 8004720:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d001      	beq.n	800472a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000
 8004738:	019f800c 	.word	0x019f800c
 800473c:	feeefffc 	.word	0xfeeefffc

08004740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e11e      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004758:	4b91      	ldr	r3, [pc, #580]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d910      	bls.n	8004788 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b8e      	ldr	r3, [pc, #568]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 020f 	bic.w	r2, r3, #15
 800476e:	498c      	ldr	r1, [pc, #560]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b8a      	ldr	r3, [pc, #552]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e106      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d073      	beq.n	800487c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d129      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479c:	4b81      	ldr	r3, [pc, #516]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0f4      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047ac:	f000 f9d0 	bl	8004b50 <RCC_GetSysClockFreqFromPLLSource>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4a7c      	ldr	r2, [pc, #496]	@ (80049a8 <HAL_RCC_ClockConfig+0x268>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d93f      	bls.n	800483a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ba:	4b7a      	ldr	r3, [pc, #488]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d033      	beq.n	800483a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d12f      	bne.n	800483a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047da:	4b72      	ldr	r3, [pc, #456]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047e2:	4a70      	ldr	r2, [pc, #448]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80047e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e024      	b.n	800483a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f8:	4b6a      	ldr	r3, [pc, #424]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0c6      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004808:	4b66      	ldr	r3, [pc, #408]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0be      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004818:	f000 f8ce 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 800481c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4a61      	ldr	r2, [pc, #388]	@ (80049a8 <HAL_RCC_ClockConfig+0x268>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d909      	bls.n	800483a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004826:	4b5f      	ldr	r3, [pc, #380]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800482e:	4a5d      	ldr	r2, [pc, #372]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004834:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004836:	2380      	movs	r3, #128	@ 0x80
 8004838:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b5a      	ldr	r3, [pc, #360]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4957      	ldr	r1, [pc, #348]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484c:	f7fd ff4a 	bl	80026e4 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7fd ff46 	bl	80026e4 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e095      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b4e      	ldr	r3, [pc, #312]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 020c 	and.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1eb      	bne.n	8004854 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d023      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004894:	4b43      	ldr	r3, [pc, #268]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a42      	ldr	r2, [pc, #264]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 800489a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800489e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048ac:	4b3d      	ldr	r3, [pc, #244]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048b4:	4a3b      	ldr	r2, [pc, #236]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b39      	ldr	r3, [pc, #228]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4936      	ldr	r1, [pc, #216]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b80      	cmp	r3, #128	@ 0x80
 80048d4:	d105      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048d6:	4b33      	ldr	r3, [pc, #204]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4a32      	ldr	r2, [pc, #200]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 80048dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e2:	4b2f      	ldr	r3, [pc, #188]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d21d      	bcs.n	800492c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f0:	4b2b      	ldr	r3, [pc, #172]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 020f 	bic.w	r2, r3, #15
 80048f8:	4929      	ldr	r1, [pc, #164]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004900:	f7fd fef0 	bl	80026e4 <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fd feec 	bl	80026e4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03b      	b.n	8004996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_RCC_ClockConfig+0x260>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d1ed      	bne.n	8004908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4917      	ldr	r1, [pc, #92]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004956:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	490f      	ldr	r1, [pc, #60]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800496a:	f000 f825 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 800496e:	4602      	mov	r2, r0
 8004970:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <HAL_RCC_ClockConfig+0x264>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	490c      	ldr	r1, [pc, #48]	@ (80049ac <HAL_RCC_ClockConfig+0x26c>)
 800497c:	5ccb      	ldrb	r3, [r1, r3]
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	4a0a      	ldr	r2, [pc, #40]	@ (80049b0 <HAL_RCC_ClockConfig+0x270>)
 8004988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <HAL_RCC_ClockConfig+0x274>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd fbbc 	bl	800210c <HAL_InitTick>
 8004994:	4603      	mov	r3, r0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40022000 	.word	0x40022000
 80049a4:	40021000 	.word	0x40021000
 80049a8:	04c4b400 	.word	0x04c4b400
 80049ac:	0801af5c 	.word	0x0801af5c
 80049b0:	20000004 	.word	0x20000004
 80049b4:	20000008 	.word	0x20000008

080049b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049be:	4b2c      	ldr	r3, [pc, #176]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d102      	bne.n	80049d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e047      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049d0:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d102      	bne.n	80049e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049dc:	4b26      	ldr	r3, [pc, #152]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e03e      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049e2:	4b23      	ldr	r3, [pc, #140]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d136      	bne.n	8004a5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ee:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	3301      	adds	r3, #1
 8004a04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d10c      	bne.n	8004a26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a16:	68d2      	ldr	r2, [r2, #12]
 8004a18:	0a12      	lsrs	r2, r2, #8
 8004a1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	617b      	str	r3, [r7, #20]
      break;
 8004a24:	e00c      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a26:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2e:	4a10      	ldr	r2, [pc, #64]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	0a12      	lsrs	r2, r2, #8
 8004a34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a38:	fb02 f303 	mul.w	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]
      break;
 8004a3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a40:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	0e5b      	lsrs	r3, r3, #25
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e001      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a60:	693b      	ldr	r3, [r7, #16]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40021000 	.word	0x40021000
 8004a74:	00f42400 	.word	0x00f42400
 8004a78:	016e3600 	.word	0x016e3600

08004a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b03      	ldr	r3, [pc, #12]	@ (8004a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000004 	.word	0x20000004

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a98:	f7ff fff0 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4904      	ldr	r1, [pc, #16]	@ (8004abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	0801af6c 	.word	0x0801af6c

08004ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ac4:	f7ff ffda 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0adb      	lsrs	r3, r3, #11
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4904      	ldr	r1, [pc, #16]	@ (8004ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	0801af6c 	.word	0x0801af6c

08004aec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	220f      	movs	r2, #15
 8004afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004afc:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCC_GetClockConfig+0x5c>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0203 	and.w	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b08:	4b0f      	ldr	r3, [pc, #60]	@ (8004b48 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b14:	4b0c      	ldr	r3, [pc, #48]	@ (8004b48 <HAL_RCC_GetClockConfig+0x5c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b20:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <HAL_RCC_GetClockConfig+0x5c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	08db      	lsrs	r3, r3, #3
 8004b26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <HAL_RCC_GetClockConfig+0x60>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 020f 	and.w	r2, r3, #15
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40022000 	.word	0x40022000

08004b50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b56:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b60:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d10c      	bne.n	8004b8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b74:	4a17      	ldr	r2, [pc, #92]	@ (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	4a14      	ldr	r2, [pc, #80]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b7e:	68d2      	ldr	r2, [r2, #12]
 8004b80:	0a12      	lsrs	r2, r2, #8
 8004b82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	617b      	str	r3, [r7, #20]
    break;
 8004b8c:	e00c      	b.n	8004ba8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b8e:	4a12      	ldr	r2, [pc, #72]	@ (8004bd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	0a12      	lsrs	r2, r2, #8
 8004b9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
    break;
 8004ba6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ba8:	4b09      	ldr	r3, [pc, #36]	@ (8004bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	0e5b      	lsrs	r3, r3, #25
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bc2:	687b      	ldr	r3, [r7, #4]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	016e3600 	.word	0x016e3600
 8004bd8:	00f42400 	.word	0x00f42400

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be8:	2300      	movs	r3, #0
 8004bea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8098 	beq.w	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfe:	4b43      	ldr	r3, [pc, #268]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10d      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	4b40      	ldr	r3, [pc, #256]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c16:	4b3d      	ldr	r3, [pc, #244]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c26:	4b3a      	ldr	r3, [pc, #232]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a39      	ldr	r2, [pc, #228]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c32:	f7fd fd57 	bl	80026e4 <HAL_GetTick>
 8004c36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c38:	e009      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fd fd53 	bl	80026e4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d902      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c4c:	e005      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4e:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ef      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d159      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c60:	4b2a      	ldr	r3, [pc, #168]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01e      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d019      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c7c:	4b23      	ldr	r3, [pc, #140]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c88:	4b20      	ldr	r3, [pc, #128]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c98:	4b1c      	ldr	r3, [pc, #112]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ca8:	4a18      	ldr	r2, [pc, #96]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fd fd13 	bl	80026e4 <HAL_GetTick>
 8004cbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc0:	e00b      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd fd0f 	bl	80026e4 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d902      	bls.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	74fb      	strb	r3, [r7, #19]
            break;
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cda:	4b0c      	ldr	r3, [pc, #48]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0ec      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cee:	4b07      	ldr	r3, [pc, #28]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfc:	4903      	ldr	r1, [pc, #12]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d06:	7cfb      	ldrb	r3, [r7, #19]
 8004d08:	74bb      	strb	r3, [r7, #18]
 8004d0a:	e005      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d18:	7c7b      	ldrb	r3, [r7, #17]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4ba7      	ldr	r3, [pc, #668]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d22:	4aa6      	ldr	r2, [pc, #664]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d36:	4ba1      	ldr	r3, [pc, #644]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3c:	f023 0203 	bic.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	499d      	ldr	r1, [pc, #628]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d58:	4b98      	ldr	r3, [pc, #608]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f023 020c 	bic.w	r2, r3, #12
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4995      	ldr	r1, [pc, #596]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d7a:	4b90      	ldr	r3, [pc, #576]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	498c      	ldr	r1, [pc, #560]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d9c:	4b87      	ldr	r3, [pc, #540]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4984      	ldr	r1, [pc, #528]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	497b      	ldr	r1, [pc, #492]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004de0:	4b76      	ldr	r3, [pc, #472]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	4973      	ldr	r1, [pc, #460]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e02:	4b6e      	ldr	r3, [pc, #440]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	496a      	ldr	r1, [pc, #424]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e24:	4b65      	ldr	r3, [pc, #404]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4962      	ldr	r1, [pc, #392]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e46:	4b5d      	ldr	r3, [pc, #372]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	4959      	ldr	r1, [pc, #356]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e68:	4b54      	ldr	r3, [pc, #336]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	4951      	ldr	r1, [pc, #324]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	4948      	ldr	r1, [pc, #288]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eac:	4b43      	ldr	r3, [pc, #268]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	4940      	ldr	r1, [pc, #256]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ee4:	4b35      	ldr	r3, [pc, #212]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef2:	4932      	ldr	r1, [pc, #200]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b2d      	ldr	r3, [pc, #180]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f1c:	4b27      	ldr	r3, [pc, #156]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	4924      	ldr	r1, [pc, #144]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a1e      	ldr	r2, [pc, #120]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f54:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	4916      	ldr	r1, [pc, #88]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a10      	ldr	r2, [pc, #64]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d019      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	4908      	ldr	r1, [pc, #32]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004faa:	d109      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b03      	ldr	r3, [pc, #12]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a02      	ldr	r2, [pc, #8]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004fcc:	4b29      	ldr	r3, [pc, #164]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fda:	4926      	ldr	r1, [pc, #152]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fec:	4b21      	ldr	r3, [pc, #132]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4a20      	ldr	r2, [pc, #128]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d015      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005004:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005012:	4918      	ldr	r1, [pc, #96]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d105      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005024:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800502a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800502e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800503c:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800503e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504a:	490a      	ldr	r1, [pc, #40]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005066:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005068:	7cbb      	ldrb	r3, [r7, #18]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000

08005078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e049      	b.n	800511e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f841 	bl	8005126 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 fa30 	bl	800551c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e054      	b.n	80051fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a26      	ldr	r2, [pc, #152]	@ (800520c <HAL_TIM_Base_Start_IT+0xd0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517e:	d01d      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a22      	ldr	r2, [pc, #136]	@ (8005210 <HAL_TIM_Base_Start_IT+0xd4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <HAL_TIM_Base_Start_IT+0xd8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1f      	ldr	r2, [pc, #124]	@ (8005218 <HAL_TIM_Base_Start_IT+0xdc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1e      	ldr	r2, [pc, #120]	@ (800521c <HAL_TIM_Base_Start_IT+0xe0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <HAL_TIM_Base_Start_IT+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x80>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005224 <HAL_TIM_Base_Start_IT+0xe8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d115      	bne.n	80051e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <HAL_TIM_Base_Start_IT+0xec>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d015      	beq.n	80051fa <HAL_TIM_Base_Start_IT+0xbe>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d4:	d011      	beq.n	80051fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	e008      	b.n	80051fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e000      	b.n	80051fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40013400 	.word	0x40013400
 8005220:	40014000 	.word	0x40014000
 8005224:	40015000 	.word	0x40015000
 8005228:	00010007 	.word	0x00010007

0800522c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d020      	beq.n	8005290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0202 	mvn.w	r2, #2
 8005260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f931 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f923 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f934 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d020      	beq.n	80052dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0204 	mvn.w	r2, #4
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f90b 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f8fd 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f90e 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d020      	beq.n	8005328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01b      	beq.n	8005328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0208 	mvn.w	r2, #8
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2204      	movs	r2, #4
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8e5 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8d7 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8e8 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0210 	mvn.w	r2, #16
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2208      	movs	r2, #8
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8bf 	bl	80054de <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8b1 	bl	80054ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8c2 	bl	80054f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0201 	mvn.w	r2, #1
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc fd14 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f969 	bl	8005698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f961 	bl	80056ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f87c 	bl	8005506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0220 	mvn.w	r2, #32
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f929 	bl	8005684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00c      	beq.n	8005456 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f935 	bl	80056c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f92d 	bl	80056d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00c      	beq.n	800549e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f925 	bl	80056e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f91d 	bl	80056fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a4c      	ldr	r2, [pc, #304]	@ (8005660 <TIM_Base_SetConfig+0x144>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d017      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553a:	d013      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a49      	ldr	r2, [pc, #292]	@ (8005664 <TIM_Base_SetConfig+0x148>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00f      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a48      	ldr	r2, [pc, #288]	@ (8005668 <TIM_Base_SetConfig+0x14c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00b      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a47      	ldr	r2, [pc, #284]	@ (800566c <TIM_Base_SetConfig+0x150>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a46      	ldr	r2, [pc, #280]	@ (8005670 <TIM_Base_SetConfig+0x154>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0x48>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a45      	ldr	r2, [pc, #276]	@ (8005674 <TIM_Base_SetConfig+0x158>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d108      	bne.n	8005576 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a39      	ldr	r2, [pc, #228]	@ (8005660 <TIM_Base_SetConfig+0x144>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d023      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005584:	d01f      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a36      	ldr	r2, [pc, #216]	@ (8005664 <TIM_Base_SetConfig+0x148>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01b      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a35      	ldr	r2, [pc, #212]	@ (8005668 <TIM_Base_SetConfig+0x14c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d017      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a34      	ldr	r2, [pc, #208]	@ (800566c <TIM_Base_SetConfig+0x150>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a33      	ldr	r2, [pc, #204]	@ (8005670 <TIM_Base_SetConfig+0x154>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <TIM_Base_SetConfig+0x15c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <TIM_Base_SetConfig+0x160>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a31      	ldr	r2, [pc, #196]	@ (8005680 <TIM_Base_SetConfig+0x164>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <TIM_Base_SetConfig+0x158>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <TIM_Base_SetConfig+0x144>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a1a      	ldr	r2, [pc, #104]	@ (8005670 <TIM_Base_SetConfig+0x154>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a1a      	ldr	r2, [pc, #104]	@ (8005678 <TIM_Base_SetConfig+0x15c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a19      	ldr	r2, [pc, #100]	@ (800567c <TIM_Base_SetConfig+0x160>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a18      	ldr	r2, [pc, #96]	@ (8005680 <TIM_Base_SetConfig+0x164>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0x110>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <TIM_Base_SetConfig+0x158>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
  }
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40015000 	.word	0x40015000
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800

08005684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e042      	b.n	80057a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fc fec3 	bl	80024c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2224      	movs	r2, #36	@ 0x24
 800573e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 f806 	bl	800676c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fd07 	bl	8006174 <UART_SetConfig>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e01b      	b.n	80057a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800577e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800578e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f885 	bl	80068b0 <UART_CheckIdleState>
 80057a6:	4603      	mov	r3, r0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	@ 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	4613      	mov	r3, r2
 80057bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d167      	bne.n	8005898 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Transmit_DMA+0x24>
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e060      	b.n	800589a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2221      	movs	r2, #33	@ 0x21
 80057fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d028      	beq.n	8005858 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800580a:	4a26      	ldr	r2, [pc, #152]	@ (80058a4 <HAL_UART_Transmit_DMA+0xf4>)
 800580c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005812:	4a25      	ldr	r2, [pc, #148]	@ (80058a8 <HAL_UART_Transmit_DMA+0xf8>)
 8005814:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800581a:	4a24      	ldr	r2, [pc, #144]	@ (80058ac <HAL_UART_Transmit_DMA+0xfc>)
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005822:	2200      	movs	r2, #0
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582e:	4619      	mov	r1, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3328      	adds	r3, #40	@ 0x28
 8005836:	461a      	mov	r2, r3
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	f7fd f8e7 	bl	8002a0c <HAL_DMA_Start_IT>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2210      	movs	r2, #16
 8005848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e020      	b.n	800589a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2240      	movs	r2, #64	@ 0x40
 800585e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	613b      	str	r3, [r7, #16]
   return(result);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005880:	623a      	str	r2, [r7, #32]
 8005882:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	69f9      	ldr	r1, [r7, #28]
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	61bb      	str	r3, [r7, #24]
   return(result);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	@ 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	08006d7b 	.word	0x08006d7b
 80058a8:	08006e15 	.word	0x08006e15
 80058ac:	08006f9b 	.word	0x08006f9b

080058b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	@ 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d137      	bne.n	8005938 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_UART_Receive_DMA+0x24>
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e030      	b.n	800593a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a18      	ldr	r2, [pc, #96]	@ (8005944 <HAL_UART_Receive_DMA+0x94>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d01f      	beq.n	8005928 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	613b      	str	r3, [r7, #16]
   return(result);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800590a:	627b      	str	r3, [r7, #36]	@ 0x24
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	69f9      	ldr	r1, [r7, #28]
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	61bb      	str	r3, [r7, #24]
   return(result);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	461a      	mov	r2, r3
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f001 f8d6 	bl	8006ae0 <UART_Start_Receive_DMA>
 8005934:	4603      	mov	r3, r0
 8005936:	e000      	b.n	800593a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3728      	adds	r7, #40	@ 0x28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40008000 	.word	0x40008000

08005948 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b090      	sub	sp, #64	@ 0x40
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596a:	2b80      	cmp	r3, #128	@ 0x80
 800596c:	d139      	bne.n	80059e2 <HAL_UART_DMAStop+0x9a>
 800596e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005970:	2b21      	cmp	r3, #33	@ 0x21
 8005972:	d136      	bne.n	80059e2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	61fb      	str	r3, [r7, #28]
   return(result);
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005994:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800599a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e5      	bne.n	8005974 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fd f8a4 	bl	8002b02 <HAL_DMA_Abort>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd fa0b 	bl	8002de0 <HAL_DMA_GetError>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d105      	bne.n	80059dc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2210      	movs	r2, #16
 80059d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e047      	b.n	8005a6c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 f925 	bl	8006c2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d13c      	bne.n	8005a6a <HAL_UART_DMAStop+0x122>
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	2b22      	cmp	r3, #34	@ 0x22
 80059f4:	d139      	bne.n	8005a6a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a16:	61ba      	str	r2, [r7, #24]
 8005a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6979      	ldr	r1, [r7, #20]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	613b      	str	r3, [r7, #16]
   return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e5      	bne.n	80059f6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d017      	beq.n	8005a64 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fd f861 	bl	8002b02 <HAL_DMA_Abort>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd f9c7 	bl	8002de0 <HAL_DMA_GetError>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d105      	bne.n	8005a64 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e003      	b.n	8005a6c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 f922 	bl	8006cae <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3740      	adds	r7, #64	@ 0x40
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b0ba      	sub	sp, #232	@ 0xe8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d11b      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d015      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8300 	beq.w	80060de <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
      }
      return;
 8005ae6:	e2fa      	b.n	80060de <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8123 	beq.w	8005d38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005af2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005af6:	4b8d      	ldr	r3, [pc, #564]	@ (8005d2c <HAL_UART_IRQHandler+0x2b8>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005afe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b02:	4b8b      	ldr	r3, [pc, #556]	@ (8005d30 <HAL_UART_IRQHandler+0x2bc>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8116 	beq.w	8005d38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d011      	beq.n	8005b3c <HAL_UART_IRQHandler+0xc8>
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b32:	f043 0201 	orr.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d011      	beq.n	8005b6c <HAL_UART_IRQHandler+0xf8>
 8005b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b62:	f043 0204 	orr.w	r2, r3, #4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <HAL_UART_IRQHandler+0x128>
 8005b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b92:	f043 0202 	orr.w	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d017      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005bb8:	4b5c      	ldr	r3, [pc, #368]	@ (8005d2c <HAL_UART_IRQHandler+0x2b8>)
 8005bba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bce:	f043 0208 	orr.w	r2, r3, #8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <HAL_UART_IRQHandler+0x196>
 8005be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c00:	f043 0220 	orr.w	r2, r3, #32
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8266 	beq.w	80060e2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d013      	beq.n	8005c4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5e:	2b40      	cmp	r3, #64	@ 0x40
 8005c60:	d005      	beq.n	8005c6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d054      	beq.n	8005d18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 f81d 	bl	8006cae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b40      	cmp	r3, #64	@ 0x40
 8005c80:	d146      	bne.n	8005d10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d9      	bne.n	8005c82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d017      	beq.n	8005d08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cde:	4a15      	ldr	r2, [pc, #84]	@ (8005d34 <HAL_UART_IRQHandler+0x2c0>)
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fc ff63 	bl	8002bb4 <HAL_DMA_Abort_IT>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d019      	beq.n	8005d28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d02:	4610      	mov	r0, r2
 8005d04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d06:	e00f      	b.n	8005d28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa1d 	bl	8006148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0e:	e00b      	b.n	8005d28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa19 	bl	8006148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d16:	e007      	b.n	8005d28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa15 	bl	8006148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005d26:	e1dc      	b.n	80060e2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	bf00      	nop
    return;
 8005d2a:	e1da      	b.n	80060e2 <HAL_UART_IRQHandler+0x66e>
 8005d2c:	10000001 	.word	0x10000001
 8005d30:	04000120 	.word	0x04000120
 8005d34:	0800701b 	.word	0x0800701b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	f040 8170 	bne.w	8006022 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d46:	f003 0310 	and.w	r3, r3, #16
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8169 	beq.w	8006022 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8162 	beq.w	8006022 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2210      	movs	r2, #16
 8005d64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	f040 80d8 	bne.w	8005f26 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80af 	beq.w	8005eec <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	f080 80a7 	bcs.w	8005eec <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005da4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 8087 	bne.w	8005eca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005de6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005dea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1da      	bne.n	8005dbc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e1      	bne.n	8005e06 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e3      	bne.n	8005e42 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005eac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e4      	bne.n	8005e88 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fc fe1c 	bl	8002b02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f939 	bl	800615c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005eea:	e0fc      	b.n	80060e6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	f040 80f5 	bne.w	80060e6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	f040 80eb 	bne.w	80060e6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f91c 	bl	800615c <HAL_UARTEx_RxEventCallback>
      return;
 8005f24:	e0df      	b.n	80060e6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80d1 	beq.w	80060ea <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80cc 	beq.w	80060ea <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e4      	bne.n	8005f52 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	623b      	str	r3, [r7, #32]
   return(result);
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e1      	bne.n	8005f88 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f023 0310 	bic.w	r3, r3, #16
 8005fec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	69b9      	ldr	r1, [r7, #24]
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	617b      	str	r3, [r7, #20]
   return(result);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e4      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f89e 	bl	800615c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006020:	e063      	b.n	80060ea <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <HAL_UART_IRQHandler+0x5d8>
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f825 	bl	8007094 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800604a:	e051      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800604c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006054:	2b00      	cmp	r3, #0
 8006056:	d014      	beq.n	8006082 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800605c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006074:	2b00      	cmp	r3, #0
 8006076:	d03a      	beq.n	80060ee <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
    }
    return;
 8006080:	e035      	b.n	80060ee <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_UART_IRQHandler+0x62e>
 800608e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 ffcf 	bl	800703e <UART_EndTransmit_IT>
    return;
 80060a0:	e026      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <HAL_UART_IRQHandler+0x64e>
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fffe 	bl	80070bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c0:	e016      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d010      	beq.n	80060f0 <HAL_UART_IRQHandler+0x67c>
 80060ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da0c      	bge.n	80060f0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 ffe6 	bl	80070a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060dc:	e008      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80060de:	bf00      	nop
 80060e0:	e006      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80060e2:	bf00      	nop
 80060e4:	e004      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80060ee:	bf00      	nop
  }
}
 80060f0:	37e8      	adds	r7, #232	@ 0xe8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop

080060f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b08c      	sub	sp, #48	@ 0x30
 800617a:	af00      	add	r7, sp, #0
 800617c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	431a      	orrs	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4313      	orrs	r3, r2
 800619a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4baa      	ldr	r3, [pc, #680]	@ (800644c <UART_SetConfig+0x2d8>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a9f      	ldr	r2, [pc, #636]	@ (8006450 <UART_SetConfig+0x2dc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061dc:	4313      	orrs	r3, r2
 80061de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80061ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	f023 010f 	bic.w	r1, r3, #15
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a90      	ldr	r2, [pc, #576]	@ (8006454 <UART_SetConfig+0x2e0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d125      	bne.n	8006264 <UART_SetConfig+0xf0>
 8006218:	4b8f      	ldr	r3, [pc, #572]	@ (8006458 <UART_SetConfig+0x2e4>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b03      	cmp	r3, #3
 8006224:	d81a      	bhi.n	800625c <UART_SetConfig+0xe8>
 8006226:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0xb8>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	0800623d 	.word	0x0800623d
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006245 	.word	0x08006245
 8006238:	08006255 	.word	0x08006255
 800623c:	2301      	movs	r3, #1
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e116      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624a:	e112      	b.n	8006472 <UART_SetConfig+0x2fe>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006252:	e10e      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625a:	e10a      	b.n	8006472 <UART_SetConfig+0x2fe>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006262:	e106      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a7c      	ldr	r2, [pc, #496]	@ (800645c <UART_SetConfig+0x2e8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d138      	bne.n	80062e0 <UART_SetConfig+0x16c>
 800626e:	4b7a      	ldr	r3, [pc, #488]	@ (8006458 <UART_SetConfig+0x2e4>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006274:	f003 030c 	and.w	r3, r3, #12
 8006278:	2b0c      	cmp	r3, #12
 800627a:	d82d      	bhi.n	80062d8 <UART_SetConfig+0x164>
 800627c:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x110>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062b9 	.word	0x080062b9
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062c9 	.word	0x080062c9
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062d9 	.word	0x080062d9
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062c1 	.word	0x080062c1
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e0d8      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062c0:	2302      	movs	r3, #2
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	e0d4      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062c8:	2304      	movs	r3, #4
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ce:	e0d0      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062d0:	2308      	movs	r3, #8
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d6:	e0cc      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062de:	e0c8      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a5e      	ldr	r2, [pc, #376]	@ (8006460 <UART_SetConfig+0x2ec>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d125      	bne.n	8006336 <UART_SetConfig+0x1c2>
 80062ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006458 <UART_SetConfig+0x2e4>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062f4:	2b30      	cmp	r3, #48	@ 0x30
 80062f6:	d016      	beq.n	8006326 <UART_SetConfig+0x1b2>
 80062f8:	2b30      	cmp	r3, #48	@ 0x30
 80062fa:	d818      	bhi.n	800632e <UART_SetConfig+0x1ba>
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d00a      	beq.n	8006316 <UART_SetConfig+0x1a2>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d814      	bhi.n	800632e <UART_SetConfig+0x1ba>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <UART_SetConfig+0x19a>
 8006308:	2b10      	cmp	r3, #16
 800630a:	d008      	beq.n	800631e <UART_SetConfig+0x1aa>
 800630c:	e00f      	b.n	800632e <UART_SetConfig+0x1ba>
 800630e:	2300      	movs	r3, #0
 8006310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006314:	e0ad      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006316:	2302      	movs	r3, #2
 8006318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631c:	e0a9      	b.n	8006472 <UART_SetConfig+0x2fe>
 800631e:	2304      	movs	r3, #4
 8006320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006324:	e0a5      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006326:	2308      	movs	r3, #8
 8006328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632c:	e0a1      	b.n	8006472 <UART_SetConfig+0x2fe>
 800632e:	2310      	movs	r3, #16
 8006330:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006334:	e09d      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a4a      	ldr	r2, [pc, #296]	@ (8006464 <UART_SetConfig+0x2f0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d125      	bne.n	800638c <UART_SetConfig+0x218>
 8006340:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <UART_SetConfig+0x2e4>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006346:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800634a:	2bc0      	cmp	r3, #192	@ 0xc0
 800634c:	d016      	beq.n	800637c <UART_SetConfig+0x208>
 800634e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006350:	d818      	bhi.n	8006384 <UART_SetConfig+0x210>
 8006352:	2b80      	cmp	r3, #128	@ 0x80
 8006354:	d00a      	beq.n	800636c <UART_SetConfig+0x1f8>
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d814      	bhi.n	8006384 <UART_SetConfig+0x210>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x1f0>
 800635e:	2b40      	cmp	r3, #64	@ 0x40
 8006360:	d008      	beq.n	8006374 <UART_SetConfig+0x200>
 8006362:	e00f      	b.n	8006384 <UART_SetConfig+0x210>
 8006364:	2300      	movs	r3, #0
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636a:	e082      	b.n	8006472 <UART_SetConfig+0x2fe>
 800636c:	2302      	movs	r3, #2
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006372:	e07e      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800637a:	e07a      	b.n	8006472 <UART_SetConfig+0x2fe>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006382:	e076      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638a:	e072      	b.n	8006472 <UART_SetConfig+0x2fe>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a35      	ldr	r2, [pc, #212]	@ (8006468 <UART_SetConfig+0x2f4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d12a      	bne.n	80063ec <UART_SetConfig+0x278>
 8006396:	4b30      	ldr	r3, [pc, #192]	@ (8006458 <UART_SetConfig+0x2e4>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a4:	d01a      	beq.n	80063dc <UART_SetConfig+0x268>
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063aa:	d81b      	bhi.n	80063e4 <UART_SetConfig+0x270>
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b0:	d00c      	beq.n	80063cc <UART_SetConfig+0x258>
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b6:	d815      	bhi.n	80063e4 <UART_SetConfig+0x270>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <UART_SetConfig+0x250>
 80063bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c0:	d008      	beq.n	80063d4 <UART_SetConfig+0x260>
 80063c2:	e00f      	b.n	80063e4 <UART_SetConfig+0x270>
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ca:	e052      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063cc:	2302      	movs	r3, #2
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d2:	e04e      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063da:	e04a      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e2:	e046      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ea:	e042      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a17      	ldr	r2, [pc, #92]	@ (8006450 <UART_SetConfig+0x2dc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d13a      	bne.n	800646c <UART_SetConfig+0x2f8>
 80063f6:	4b18      	ldr	r3, [pc, #96]	@ (8006458 <UART_SetConfig+0x2e4>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006404:	d01a      	beq.n	800643c <UART_SetConfig+0x2c8>
 8006406:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800640a:	d81b      	bhi.n	8006444 <UART_SetConfig+0x2d0>
 800640c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006410:	d00c      	beq.n	800642c <UART_SetConfig+0x2b8>
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006416:	d815      	bhi.n	8006444 <UART_SetConfig+0x2d0>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <UART_SetConfig+0x2b0>
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006420:	d008      	beq.n	8006434 <UART_SetConfig+0x2c0>
 8006422:	e00f      	b.n	8006444 <UART_SetConfig+0x2d0>
 8006424:	2300      	movs	r3, #0
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642a:	e022      	b.n	8006472 <UART_SetConfig+0x2fe>
 800642c:	2302      	movs	r3, #2
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006432:	e01e      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006434:	2304      	movs	r3, #4
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643a:	e01a      	b.n	8006472 <UART_SetConfig+0x2fe>
 800643c:	2308      	movs	r3, #8
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006442:	e016      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006444:	2310      	movs	r3, #16
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644a:	e012      	b.n	8006472 <UART_SetConfig+0x2fe>
 800644c:	cfff69f3 	.word	0xcfff69f3
 8006450:	40008000 	.word	0x40008000
 8006454:	40013800 	.word	0x40013800
 8006458:	40021000 	.word	0x40021000
 800645c:	40004400 	.word	0x40004400
 8006460:	40004800 	.word	0x40004800
 8006464:	40004c00 	.word	0x40004c00
 8006468:	40005000 	.word	0x40005000
 800646c:	2310      	movs	r3, #16
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4aae      	ldr	r2, [pc, #696]	@ (8006730 <UART_SetConfig+0x5bc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	f040 8097 	bne.w	80065ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800647e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006482:	2b08      	cmp	r3, #8
 8006484:	d823      	bhi.n	80064ce <UART_SetConfig+0x35a>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0x318>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064bf 	.word	0x080064bf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064cf 	.word	0x080064cf
 80064a8:	080064cf 	.word	0x080064cf
 80064ac:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fe faf0 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 80064b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064b6:	e010      	b.n	80064da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b9e      	ldr	r3, [pc, #632]	@ (8006734 <UART_SetConfig+0x5c0>)
 80064ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064bc:	e00d      	b.n	80064da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fe fa7b 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 80064c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064c4:	e009      	b.n	80064da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064cc:	e005      	b.n	80064da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8130 	beq.w	8006742 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	4a94      	ldr	r2, [pc, #592]	@ (8006738 <UART_SetConfig+0x5c4>)
 80064e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	429a      	cmp	r2, r3
 8006504:	d305      	bcc.n	8006512 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	429a      	cmp	r2, r3
 8006510:	d903      	bls.n	800651a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006518:	e113      	b.n	8006742 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	2200      	movs	r2, #0
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	60fa      	str	r2, [r7, #12]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	4a84      	ldr	r2, [pc, #528]	@ (8006738 <UART_SetConfig+0x5c4>)
 8006528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652c:	b29b      	uxth	r3, r3
 800652e:	2200      	movs	r2, #0
 8006530:	603b      	str	r3, [r7, #0]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800653c:	f7fa fbbc 	bl	8000cb8 <__aeabi_uldivmod>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	020b      	lsls	r3, r1, #8
 8006552:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006556:	0202      	lsls	r2, r0, #8
 8006558:	6979      	ldr	r1, [r7, #20]
 800655a:	6849      	ldr	r1, [r1, #4]
 800655c:	0849      	lsrs	r1, r1, #1
 800655e:	2000      	movs	r0, #0
 8006560:	460c      	mov	r4, r1
 8006562:	4605      	mov	r5, r0
 8006564:	eb12 0804 	adds.w	r8, r2, r4
 8006568:	eb43 0905 	adc.w	r9, r3, r5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	469a      	mov	sl, r3
 8006574:	4693      	mov	fp, r2
 8006576:	4652      	mov	r2, sl
 8006578:	465b      	mov	r3, fp
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa fb9b 	bl	8000cb8 <__aeabi_uldivmod>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4613      	mov	r3, r2
 8006588:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006590:	d308      	bcc.n	80065a4 <UART_SetConfig+0x430>
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006598:	d204      	bcs.n	80065a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	60da      	str	r2, [r3, #12]
 80065a2:	e0ce      	b.n	8006742 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065aa:	e0ca      	b.n	8006742 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b4:	d166      	bne.n	8006684 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d827      	bhi.n	800660e <UART_SetConfig+0x49a>
 80065be:	a201      	add	r2, pc, #4	@ (adr r2, 80065c4 <UART_SetConfig+0x450>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	0800660f 	.word	0x0800660f
 80065d4:	080065ff 	.word	0x080065ff
 80065d8:	0800660f 	.word	0x0800660f
 80065dc:	0800660f 	.word	0x0800660f
 80065e0:	0800660f 	.word	0x0800660f
 80065e4:	08006607 	.word	0x08006607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fe fa54 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 80065ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065ee:	e014      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fe fa66 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 80065f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065f6:	e010      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006734 <UART_SetConfig+0x5c0>)
 80065fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065fc:	e00d      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fe f9db 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 8006602:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006604:	e009      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800660c:	e005      	b.n	800661a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8090 	beq.w	8006742 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	4a44      	ldr	r2, [pc, #272]	@ (8006738 <UART_SetConfig+0x5c4>)
 8006628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800662c:	461a      	mov	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	fbb3 f3f2 	udiv	r3, r3, r2
 8006634:	005a      	lsls	r2, r3, #1
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	441a      	add	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d916      	bls.n	800667c <UART_SetConfig+0x508>
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006654:	d212      	bcs.n	800667c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	b29a      	uxth	r2, r3
 800666c:	8bfb      	ldrh	r3, [r7, #30]
 800666e:	4313      	orrs	r3, r2
 8006670:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	8bfa      	ldrh	r2, [r7, #30]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e062      	b.n	8006742 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006682:	e05e      	b.n	8006742 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006684:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006688:	2b08      	cmp	r3, #8
 800668a:	d828      	bhi.n	80066de <UART_SetConfig+0x56a>
 800668c:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0x520>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066df 	.word	0x080066df
 80066a4:	080066cf 	.word	0x080066cf
 80066a8:	080066df 	.word	0x080066df
 80066ac:	080066df 	.word	0x080066df
 80066b0:	080066df 	.word	0x080066df
 80066b4:	080066d7 	.word	0x080066d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe f9ec 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 80066bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066be:	e014      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c0:	f7fe f9fe 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 80066c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066c6:	e010      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006734 <UART_SetConfig+0x5c0>)
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066cc:	e00d      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fe f973 	bl	80049b8 <HAL_RCC_GetSysClockFreq>
 80066d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066d4:	e009      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066dc:	e005      	b.n	80066ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066e8:	bf00      	nop
    }

    if (pclk != 0U)
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d028      	beq.n	8006742 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	4a10      	ldr	r2, [pc, #64]	@ (8006738 <UART_SetConfig+0x5c4>)
 80066f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066fa:	461a      	mov	r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d910      	bls.n	800673c <UART_SetConfig+0x5c8>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d20c      	bcs.n	800673c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	b29a      	uxth	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60da      	str	r2, [r3, #12]
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0x5ce>
 800672e:	bf00      	nop
 8006730:	40008000 	.word	0x40008000
 8006734:	00f42400 	.word	0x00f42400
 8006738:	0801af74 	.word	0x0801af74
      }
      else
      {
        ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2201      	movs	r2, #1
 8006746:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2201      	movs	r2, #1
 800674e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2200      	movs	r2, #0
 8006756:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800675e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006762:	4618      	mov	r0, r3
 8006764:	3730      	adds	r7, #48	@ 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800676c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006866:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800686a:	d10a      	bne.n	8006882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	605a      	str	r2, [r3, #4]
  }
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b098      	sub	sp, #96	@ 0x60
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c0:	f7fb ff10 	bl	80026e4 <HAL_GetTick>
 80068c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d12f      	bne.n	8006934 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068dc:	2200      	movs	r2, #0
 80068de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f88e 	bl	8006a04 <UART_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d022      	beq.n	8006934 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006902:	653b      	str	r3, [r7, #80]	@ 0x50
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800690c:	647b      	str	r3, [r7, #68]	@ 0x44
 800690e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800691a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e6      	bne.n	80068ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e063      	b.n	80069fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b04      	cmp	r3, #4
 8006940:	d149      	bne.n	80069d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006942:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800694a:	2200      	movs	r2, #0
 800694c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f857 	bl	8006a04 <UART_WaitOnFlagUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d03c      	beq.n	80069d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	623b      	str	r3, [r7, #32]
   return(result);
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800697a:	633b      	str	r3, [r7, #48]	@ 0x30
 800697c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	60fb      	str	r3, [r7, #12]
   return(result);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 0301 	bic.w	r3, r3, #1
 80069a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ae:	61fa      	str	r2, [r7, #28]
 80069b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	69b9      	ldr	r1, [r7, #24]
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	617b      	str	r3, [r7, #20]
   return(result);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e5      	bne.n	800698e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e012      	b.n	80069fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3758      	adds	r7, #88	@ 0x58
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	4613      	mov	r3, r2
 8006a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a14:	e04f      	b.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a1c:	d04b      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fb fe61 	bl	80026e4 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e04e      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0304 	and.w	r3, r3, #4
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d037      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b80      	cmp	r3, #128	@ 0x80
 8006a4a:	d034      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b40      	cmp	r3, #64	@ 0x40
 8006a50:	d031      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d110      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2208      	movs	r2, #8
 8006a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f920 	bl	8006cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2208      	movs	r2, #8
 8006a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e029      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a90:	d111      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f906 	bl	8006cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e00f      	b.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d0a0      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b096      	sub	sp, #88	@ 0x58
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2222      	movs	r2, #34	@ 0x22
 8006b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d02d      	beq.n	8006b72 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b1c:	4a40      	ldr	r2, [pc, #256]	@ (8006c20 <UART_Start_Receive_DMA+0x140>)
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b26:	4a3f      	ldr	r2, [pc, #252]	@ (8006c24 <UART_Start_Receive_DMA+0x144>)
 8006b28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b30:	4a3d      	ldr	r2, [pc, #244]	@ (8006c28 <UART_Start_Receive_DMA+0x148>)
 8006b32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3324      	adds	r3, #36	@ 0x24
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b50:	461a      	mov	r2, r3
 8006b52:	88fb      	ldrh	r3, [r7, #6]
 8006b54:	f7fb ff5a 	bl	8002a0c <HAL_DMA_Start_IT>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d009      	beq.n	8006b72 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2210      	movs	r2, #16
 8006b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e051      	b.n	8006c16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d018      	beq.n	8006bac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b9a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bcc:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c00:	623a      	str	r2, [r7, #32]
 8006c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	69f9      	ldr	r1, [r7, #28]
 8006c06:	6a3a      	ldr	r2, [r7, #32]
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e5      	bne.n	8006be0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3758      	adds	r7, #88	@ 0x58
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006e31 	.word	0x08006e31
 8006c24:	08006f5d 	.word	0x08006f5d
 8006c28:	08006f9b 	.word	0x08006f9b

08006c2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b08f      	sub	sp, #60	@ 0x3c
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c54:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e6      	bne.n	8006c34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c86:	61ba      	str	r2, [r7, #24]
 8006c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006ca2:	bf00      	nop
 8006ca4:	373c      	adds	r7, #60	@ 0x3c
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b095      	sub	sp, #84	@ 0x54
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3308      	adds	r3, #8
 8006d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e3      	bne.n	8006ce8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d118      	bne.n	8006d5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f023 0310 	bic.w	r3, r3, #16
 8006d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6979      	ldr	r1, [r7, #20]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	613b      	str	r3, [r7, #16]
   return(result);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d6e:	bf00      	nop
 8006d70:	3754      	adds	r7, #84	@ 0x54
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b090      	sub	sp, #64	@ 0x40
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d137      	bne.n	8006e06 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	623b      	str	r3, [r7, #32]
   return(result);
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006db4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e5      	bne.n	8006d9e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	69b9      	ldr	r1, [r7, #24]
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e04:	e002      	b.n	8006e0c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e06:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e08:	f7ff f976 	bl	80060f8 <HAL_UART_TxCpltCallback>
}
 8006e0c:	bf00      	nop
 8006e0e:	3740      	adds	r7, #64	@ 0x40
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7ff f972 	bl	800610c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b09c      	sub	sp, #112	@ 0x70
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d171      	bne.n	8006f30 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ea6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e5      	bne.n	8006e86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006eda:	633a      	str	r2, [r7, #48]	@ 0x30
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d118      	bne.n	8006f30 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0310 	bic.w	r3, r3, #16
 8006f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	69b9      	ldr	r1, [r7, #24]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	617b      	str	r3, [r7, #20]
   return(result);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e6      	bne.n	8006efe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f32:	2200      	movs	r2, #0
 8006f34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d107      	bne.n	8006f4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f44:	4619      	mov	r1, r3
 8006f46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f48:	f7ff f908 	bl	800615c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f4c:	e002      	b.n	8006f54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f50:	f7ff f8e6 	bl	8006120 <HAL_UART_RxCpltCallback>
}
 8006f54:	bf00      	nop
 8006f56:	3770      	adds	r7, #112	@ 0x70
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d109      	bne.n	8006f8c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	4619      	mov	r1, r3
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff f8e9 	bl	800615c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f8a:	e002      	b.n	8006f92 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff f8d1 	bl	8006134 <HAL_UART_RxHalfCpltCallback>
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b086      	sub	sp, #24
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc2:	2b80      	cmp	r3, #128	@ 0x80
 8006fc4:	d109      	bne.n	8006fda <UART_DMAError+0x40>
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b21      	cmp	r3, #33	@ 0x21
 8006fca:	d106      	bne.n	8006fda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006fd4:	6978      	ldr	r0, [r7, #20]
 8006fd6:	f7ff fe29 	bl	8006c2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d109      	bne.n	8006ffc <UART_DMAError+0x62>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b22      	cmp	r3, #34	@ 0x22
 8006fec:	d106      	bne.n	8006ffc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006ff6:	6978      	ldr	r0, [r7, #20]
 8006ff8:	f7ff fe59 	bl	8006cae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007002:	f043 0210 	orr.w	r2, r3, #16
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800700c:	6978      	ldr	r0, [r7, #20]
 800700e:	f7ff f89b 	bl	8006148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007012:	bf00      	nop
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff f889 	bl	8006148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b088      	sub	sp, #32
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	60bb      	str	r3, [r7, #8]
   return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	613b      	str	r3, [r7, #16]
   return(result);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff f836 	bl	80060f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800708c:	bf00      	nop
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e027      	b.n	8007136 <HAL_UARTEx_DisableFifoMode+0x66>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2224      	movs	r2, #36	@ 0x24
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007114:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007156:	2302      	movs	r3, #2
 8007158:	e02d      	b.n	80071b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2224      	movs	r2, #36	@ 0x24
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f850 	bl	800723c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e02d      	b.n	8007232 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	@ 0x24
 80071e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f812 	bl	800723c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800725c:	e031      	b.n	80072c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800725e:	2308      	movs	r3, #8
 8007260:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007262:	2308      	movs	r3, #8
 8007264:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	0e5b      	lsrs	r3, r3, #25
 800726e:	b2db      	uxtb	r3, r3
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	0f5b      	lsrs	r3, r3, #29
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	7b3a      	ldrb	r2, [r7, #12]
 800728a:	4911      	ldr	r1, [pc, #68]	@ (80072d0 <UARTEx_SetNbDataToProcess+0x94>)
 800728c:	5c8a      	ldrb	r2, [r1, r2]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007292:	7b3a      	ldrb	r2, [r7, #12]
 8007294:	490f      	ldr	r1, [pc, #60]	@ (80072d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007296:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007298:	fb93 f3f2 	sdiv	r3, r3, r2
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	7b7a      	ldrb	r2, [r7, #13]
 80072a8:	4909      	ldr	r1, [pc, #36]	@ (80072d0 <UARTEx_SetNbDataToProcess+0x94>)
 80072aa:	5c8a      	ldrb	r2, [r1, r2]
 80072ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072b0:	7b7a      	ldrb	r2, [r7, #13]
 80072b2:	4908      	ldr	r1, [pc, #32]	@ (80072d4 <UARTEx_SetNbDataToProcess+0x98>)
 80072b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	0801af8c 	.word	0x0801af8c
 80072d4:	0801af94 	.word	0x0801af94

080072d8 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af04      	add	r7, sp, #16
 80072de:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80072e0:	2364      	movs	r3, #100	@ 0x64
 80072e2:	9302      	str	r3, [sp, #8]
 80072e4:	2301      	movs	r3, #1
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	f107 030f 	add.w	r3, r7, #15
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	2301      	movs	r3, #1
 80072f0:	2275      	movs	r2, #117	@ 0x75
 80072f2:	21d0      	movs	r1, #208	@ 0xd0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7fc f98b 	bl	8003610 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	2b68      	cmp	r3, #104	@ 0x68
 80072fe:	d13d      	bne.n	800737c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007304:	2364      	movs	r3, #100	@ 0x64
 8007306:	9302      	str	r3, [sp, #8]
 8007308:	2301      	movs	r3, #1
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	f107 030e 	add.w	r3, r7, #14
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	2301      	movs	r3, #1
 8007314:	226b      	movs	r2, #107	@ 0x6b
 8007316:	21d0      	movs	r1, #208	@ 0xd0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fc f865 	bl	80033e8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800731e:	2307      	movs	r3, #7
 8007320:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8007322:	2364      	movs	r3, #100	@ 0x64
 8007324:	9302      	str	r3, [sp, #8]
 8007326:	2301      	movs	r3, #1
 8007328:	9301      	str	r3, [sp, #4]
 800732a:	f107 030e 	add.w	r3, r7, #14
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2301      	movs	r3, #1
 8007332:	2219      	movs	r2, #25
 8007334:	21d0      	movs	r1, #208	@ 0xd0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fc f856 	bl	80033e8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800733c:	2300      	movs	r3, #0
 800733e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007340:	2364      	movs	r3, #100	@ 0x64
 8007342:	9302      	str	r3, [sp, #8]
 8007344:	2301      	movs	r3, #1
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	f107 030e 	add.w	r3, r7, #14
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	2301      	movs	r3, #1
 8007350:	221c      	movs	r2, #28
 8007352:	21d0      	movs	r1, #208	@ 0xd0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fc f847 	bl	80033e8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800735a:	2300      	movs	r3, #0
 800735c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800735e:	2364      	movs	r3, #100	@ 0x64
 8007360:	9302      	str	r3, [sp, #8]
 8007362:	2301      	movs	r3, #1
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	f107 030e 	add.w	r3, r7, #14
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	2301      	movs	r3, #1
 800736e:	221b      	movs	r2, #27
 8007370:	21d0      	movs	r1, #208	@ 0xd0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fc f838 	bl	80033e8 <HAL_I2C_Mem_Write>
        return 0;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <MPU6050_Init+0xa6>
    }
    return 1;
 800737c:	2301      	movs	r3, #1
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800738c:	b094      	sub	sp, #80	@ 0x50
 800738e:	af04      	add	r7, sp, #16
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8007394:	2364      	movs	r3, #100	@ 0x64
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	230e      	movs	r3, #14
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	f107 0308 	add.w	r3, r7, #8
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	2301      	movs	r3, #1
 80073a4:	223b      	movs	r2, #59	@ 0x3b
 80073a6:	21d0      	movs	r1, #208	@ 0xd0
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7fc f931 	bl	8003610 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80073ae:	7a3b      	ldrb	r3, [r7, #8]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	b21a      	sxth	r2, r3
 80073b4:	7a7b      	ldrb	r3, [r7, #9]
 80073b6:	b21b      	sxth	r3, r3
 80073b8:	4313      	orrs	r3, r2
 80073ba:	b21a      	sxth	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80073c0:	7abb      	ldrb	r3, [r7, #10]
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	b21a      	sxth	r2, r3
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	b21b      	sxth	r3, r3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	b21a      	sxth	r2, r3
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80073d2:	7b3b      	ldrb	r3, [r7, #12]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	b21a      	sxth	r2, r3
 80073d8:	7b7b      	ldrb	r3, [r7, #13]
 80073da:	b21b      	sxth	r3, r3
 80073dc:	4313      	orrs	r3, r2
 80073de:	b21a      	sxth	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	b21a      	sxth	r2, r3
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	4313      	orrs	r3, r2
 80073f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80073f2:	7c3b      	ldrb	r3, [r7, #16]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	b21a      	sxth	r2, r3
 80073f8:	7c7b      	ldrb	r3, [r7, #17]
 80073fa:	b21b      	sxth	r3, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b21a      	sxth	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007404:	7cbb      	ldrb	r3, [r7, #18]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	b21a      	sxth	r2, r3
 800740a:	7cfb      	ldrb	r3, [r7, #19]
 800740c:	b21b      	sxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	b21a      	sxth	r2, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007416:	7d3b      	ldrb	r3, [r7, #20]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	b21a      	sxth	r2, r3
 800741c:	7d7b      	ldrb	r3, [r7, #21]
 800741e:	b21b      	sxth	r3, r3
 8007420:	4313      	orrs	r3, r2
 8007422:	b21a      	sxth	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 f8b0 	bl	8000594 <__aeabi_i2d>
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	4bbd      	ldr	r3, [pc, #756]	@ (8007730 <MPU6050_Read_All+0x3a8>)
 800743a:	f7f9 fa3f 	bl	80008bc <__aeabi_ddiv>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800744e:	4618      	mov	r0, r3
 8007450:	f7f9 f8a0 	bl	8000594 <__aeabi_i2d>
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	4bb5      	ldr	r3, [pc, #724]	@ (8007730 <MPU6050_Read_All+0x3a8>)
 800745a:	f7f9 fa2f 	bl	80008bc <__aeabi_ddiv>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800746e:	4618      	mov	r0, r3
 8007470:	f7f9 f890 	bl	8000594 <__aeabi_i2d>
 8007474:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007718 <MPU6050_Read_All+0x390>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f9 fa1f 	bl	80008bc <__aeabi_ddiv>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8007488:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800748c:	ee07 3a90 	vmov	s15, r3
 8007490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007494:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8007734 <MPU6050_Read_All+0x3ac>
 8007498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800749c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8007738 <MPU6050_Read_All+0x3b0>
 80074a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7f9 f86f 	bl	8000594 <__aeabi_i2d>
 80074b6:	a39a      	add	r3, pc, #616	@ (adr r3, 8007720 <MPU6050_Read_All+0x398>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f7f9 f9fe 	bl	80008bc <__aeabi_ddiv>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 f85f 	bl	8000594 <__aeabi_i2d>
 80074d6:	a392      	add	r3, pc, #584	@ (adr r3, 8007720 <MPU6050_Read_All+0x398>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f7f9 f9ee 	bl	80008bc <__aeabi_ddiv>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7f9 f84f 	bl	8000594 <__aeabi_i2d>
 80074f6:	a38a      	add	r3, pc, #552	@ (adr r3, 8007720 <MPU6050_Read_All+0x398>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f9 f9de 	bl	80008bc <__aeabi_ddiv>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800750a:	f7fb f8eb 	bl	80026e4 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	4b8a      	ldr	r3, [pc, #552]	@ (800773c <MPU6050_Read_All+0x3b4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	4618      	mov	r0, r3
 8007518:	f7f9 f82c 	bl	8000574 <__aeabi_ui2d>
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	4b87      	ldr	r3, [pc, #540]	@ (8007740 <MPU6050_Read_All+0x3b8>)
 8007522:	f7f9 f9cb 	bl	80008bc <__aeabi_ddiv>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800752e:	f7fb f8d9 	bl	80026e4 <HAL_GetTick>
 8007532:	4603      	mov	r3, r0
 8007534:	4a81      	ldr	r2, [pc, #516]	@ (800773c <MPU6050_Read_All+0x3b4>)
 8007536:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800753e:	461a      	mov	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007546:	fb03 f202 	mul.w	r2, r3, r2
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007550:	4619      	mov	r1, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007558:	fb01 f303 	mul.w	r3, r1, r3
 800755c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800755e:	4618      	mov	r0, r3
 8007560:	f7f9 f818 	bl	8000594 <__aeabi_i2d>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	ec43 2b10 	vmov	d0, r2, r3
 800756c:	f012 f89a 	bl	80196a4 <sqrt>
 8007570:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007580:	f7f9 fada 	bl	8000b38 <__aeabi_dcmpeq>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11f      	bne.n	80075ca <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007590:	4618      	mov	r0, r3
 8007592:	f7f8 ffff 	bl	8000594 <__aeabi_i2d>
 8007596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800759a:	f7f9 f98f 	bl	80008bc <__aeabi_ddiv>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	ec43 2b17 	vmov	d7, r2, r3
 80075a6:	eeb0 0a47 	vmov.f32	s0, s14
 80075aa:	eef0 0a67 	vmov.f32	s1, s15
 80075ae:	f012 f8a7 	bl	8019700 <atan>
 80075b2:	ec51 0b10 	vmov	r0, r1, d0
 80075b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007728 <MPU6050_Read_All+0x3a0>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f9 f854 	bl	8000668 <__aeabi_dmul>
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80075c8:	e005      	b.n	80075d6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075dc:	425b      	negs	r3, r3
 80075de:	4618      	mov	r0, r3
 80075e0:	f7f8 ffd8 	bl	8000594 <__aeabi_i2d>
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7f8 ffd0 	bl	8000594 <__aeabi_i2d>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	ec43 2b11 	vmov	d1, r2, r3
 80075fc:	ec4b ab10 	vmov	d0, sl, fp
 8007600:	f012 f84e 	bl	80196a0 <atan2>
 8007604:	ec51 0b10 	vmov	r0, r1, d0
 8007608:	a347      	add	r3, pc, #284	@ (adr r3, 8007728 <MPU6050_Read_All+0x3a0>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f9 f82b 	bl	8000668 <__aeabi_dmul>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	4b49      	ldr	r3, [pc, #292]	@ (8007744 <MPU6050_Read_All+0x3bc>)
 8007620:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007624:	f7f9 fa92 	bl	8000b4c <__aeabi_dcmplt>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <MPU6050_Read_All+0x2bc>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	4b43      	ldr	r3, [pc, #268]	@ (8007748 <MPU6050_Read_All+0x3c0>)
 800763a:	f7f9 faa5 	bl	8000b88 <__aeabi_dcmpgt>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d114      	bne.n	800766e <MPU6050_Read_All+0x2e6>
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	4b3f      	ldr	r3, [pc, #252]	@ (8007748 <MPU6050_Read_All+0x3c0>)
 800764a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800764e:	f7f9 fa9b 	bl	8000b88 <__aeabi_dcmpgt>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <MPU6050_Read_All+0x2fc>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	4b38      	ldr	r3, [pc, #224]	@ (8007744 <MPU6050_Read_All+0x3bc>)
 8007664:	f7f9 fa72 	bl	8000b4c <__aeabi_dcmplt>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800766e:	4937      	ldr	r1, [pc, #220]	@ (800774c <MPU6050_Read_All+0x3c4>)
 8007670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007674:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800767e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8007682:	e014      	b.n	80076ae <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800768a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800768e:	eeb0 1a47 	vmov.f32	s2, s14
 8007692:	eef0 1a67 	vmov.f32	s3, s15
 8007696:	ed97 0b06 	vldr	d0, [r7, #24]
 800769a:	482c      	ldr	r0, [pc, #176]	@ (800774c <MPU6050_Read_All+0x3c4>)
 800769c:	f000 f85a 	bl	8007754 <Kalman_getAngle>
 80076a0:	eeb0 7a40 	vmov.f32	s14, s0
 80076a4:	eef0 7a60 	vmov.f32	s15, s1
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80076b4:	4690      	mov	r8, r2
 80076b6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	4b22      	ldr	r3, [pc, #136]	@ (8007748 <MPU6050_Read_All+0x3c0>)
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 fa60 	bl	8000b88 <__aeabi_dcmpgt>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80076d4:	4614      	mov	r4, r2
 80076d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80076e6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80076ea:	eeb0 1a47 	vmov.f32	s2, s14
 80076ee:	eef0 1a67 	vmov.f32	s3, s15
 80076f2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80076f6:	4816      	ldr	r0, [pc, #88]	@ (8007750 <MPU6050_Read_All+0x3c8>)
 80076f8:	f000 f82c 	bl	8007754 <Kalman_getAngle>
 80076fc:	eeb0 7a40 	vmov.f32	s14, s0
 8007700:	eef0 7a60 	vmov.f32	s15, s1
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800770a:	bf00      	nop
 800770c:	3740      	adds	r7, #64	@ 0x40
 800770e:	46bd      	mov	sp, r7
 8007710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007714:	f3af 8000 	nop.w
 8007718:	00000000 	.word	0x00000000
 800771c:	40cc2900 	.word	0x40cc2900
 8007720:	00000000 	.word	0x00000000
 8007724:	40606000 	.word	0x40606000
 8007728:	1a63c1f8 	.word	0x1a63c1f8
 800772c:	404ca5dc 	.word	0x404ca5dc
 8007730:	40d00000 	.word	0x40d00000
 8007734:	43aa0000 	.word	0x43aa0000
 8007738:	42121eb8 	.word	0x42121eb8
 800773c:	20004f8c 	.word	0x20004f8c
 8007740:	408f4000 	.word	0x408f4000
 8007744:	c0568000 	.word	0xc0568000
 8007748:	40568000 	.word	0x40568000
 800774c:	20000058 	.word	0x20000058
 8007750:	20000010 	.word	0x20000010

08007754 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8007754:	b5b0      	push	{r4, r5, r7, lr}
 8007756:	b096      	sub	sp, #88	@ 0x58
 8007758:	af00      	add	r7, sp, #0
 800775a:	61f8      	str	r0, [r7, #28]
 800775c:	ed87 0b04 	vstr	d0, [r7, #16]
 8007760:	ed87 1b02 	vstr	d1, [r7, #8]
 8007764:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800776e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007772:	f7f8 fdc1 	bl	80002f8 <__aeabi_dsub>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800778c:	f7f8 ff6c 	bl	8000668 <__aeabi_dmul>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	4620      	mov	r0, r4
 8007796:	4629      	mov	r1, r5
 8007798:	f7f8 fdb0 	bl	80002fc <__adddf3>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	69f9      	ldr	r1, [r7, #28]
 80077a2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80077b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b6:	f7f8 ff57 	bl	8000668 <__aeabi_dmul>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80077c8:	f7f8 fd96 	bl	80002f8 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80077da:	f7f8 fd8d 	bl	80002f8 <__aeabi_dsub>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4610      	mov	r0, r2
 80077e4:	4619      	mov	r1, r3
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f7f8 fd86 	bl	80002fc <__adddf3>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4610      	mov	r0, r2
 80077f6:	4619      	mov	r1, r3
 80077f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fc:	f7f8 ff34 	bl	8000668 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fd78 	bl	80002fc <__adddf3>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	69f9      	ldr	r1, [r7, #28]
 8007812:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007826:	f7f8 ff1f 	bl	8000668 <__aeabi_dmul>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4620      	mov	r0, r4
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 fd61 	bl	80002f8 <__aeabi_dsub>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	69f9      	ldr	r1, [r7, #28]
 800783c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800784c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007850:	f7f8 ff0a 	bl	8000668 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fd4c 	bl	80002f8 <__aeabi_dsub>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	69f9      	ldr	r1, [r7, #28]
 8007866:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787a:	f7f8 fef5 	bl	8000668 <__aeabi_dmul>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4620      	mov	r0, r4
 8007884:	4629      	mov	r1, r5
 8007886:	f7f8 fd39 	bl	80002fc <__adddf3>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	69f9      	ldr	r1, [r7, #28]
 8007890:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078a0:	f7f8 fd2c 	bl	80002fc <__adddf3>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80078b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078b6:	f7f9 f801 	bl	80008bc <__aeabi_ddiv>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80078c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078cc:	f7f8 fff6 	bl	80008bc <__aeabi_ddiv>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80078de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078e2:	f7f8 fd09 	bl	80002f8 <__aeabi_dsub>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80078f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078fc:	f7f8 feb4 	bl	8000668 <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fcf8 	bl	80002fc <__adddf3>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800791c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007920:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007924:	f7f8 fea0 	bl	8000668 <__aeabi_dmul>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f8 fce4 	bl	80002fc <__adddf3>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	69f9      	ldr	r1, [r7, #28]
 800793a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007944:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800794e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007958:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800795c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007960:	f7f8 fe82 	bl	8000668 <__aeabi_dmul>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4620      	mov	r0, r4
 800796a:	4629      	mov	r1, r5
 800796c:	f7f8 fcc4 	bl	80002f8 <__aeabi_dsub>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	69f9      	ldr	r1, [r7, #28]
 8007976:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007980:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007984:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007988:	f7f8 fe6e 	bl	8000668 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fcb0 	bl	80002f8 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80079a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079b0:	f7f8 fe5a 	bl	8000668 <__aeabi_dmul>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4620      	mov	r0, r4
 80079ba:	4629      	mov	r1, r5
 80079bc:	f7f8 fc9c 	bl	80002f8 <__aeabi_dsub>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80079d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80079d8:	f7f8 fe46 	bl	8000668 <__aeabi_dmul>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4620      	mov	r0, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7f8 fc88 	bl	80002f8 <__aeabi_dsub>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	69f9      	ldr	r1, [r7, #28]
 80079ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80079f8:	ec43 2b17 	vmov	d7, r2, r3
};
 80079fc:	eeb0 0a47 	vmov.f32	s0, s14
 8007a00:	eef0 0a67 	vmov.f32	s1, s15
 8007a04:	3758      	adds	r7, #88	@ 0x58
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a0c <__NVIC_SetPriority>:
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	6039      	str	r1, [r7, #0]
 8007a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	db0a      	blt.n	8007a36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	490c      	ldr	r1, [pc, #48]	@ (8007a58 <__NVIC_SetPriority+0x4c>)
 8007a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2a:	0112      	lsls	r2, r2, #4
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	440b      	add	r3, r1
 8007a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a34:	e00a      	b.n	8007a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4908      	ldr	r1, [pc, #32]	@ (8007a5c <__NVIC_SetPriority+0x50>)
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	3b04      	subs	r3, #4
 8007a44:	0112      	lsls	r2, r2, #4
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	440b      	add	r3, r1
 8007a4a:	761a      	strb	r2, [r3, #24]
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	e000e100 	.word	0xe000e100
 8007a5c:	e000ed00 	.word	0xe000ed00

08007a60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a64:	4b05      	ldr	r3, [pc, #20]	@ (8007a7c <SysTick_Handler+0x1c>)
 8007a66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a68:	f001 fd40 	bl	80094ec <xTaskGetSchedulerState>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d001      	beq.n	8007a76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a72:	f002 fb39 	bl	800a0e8 <xPortSysTickHandler>
  }
}
 8007a76:	bf00      	nop
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	e000e010 	.word	0xe000e010

08007a80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a84:	2100      	movs	r1, #0
 8007a86:	f06f 0004 	mvn.w	r0, #4
 8007a8a:	f7ff ffbf 	bl	8007a0c <__NVIC_SetPriority>
#endif
}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a9a:	f3ef 8305 	mrs	r3, IPSR
 8007a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8007aa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007aa6:	f06f 0305 	mvn.w	r3, #5
 8007aaa:	607b      	str	r3, [r7, #4]
 8007aac:	e00c      	b.n	8007ac8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007aae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad8 <osKernelInitialize+0x44>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ab6:	4b08      	ldr	r3, [pc, #32]	@ (8007ad8 <osKernelInitialize+0x44>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	e002      	b.n	8007ac8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ac8:	687b      	ldr	r3, [r7, #4]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20004f90 	.word	0x20004f90

08007adc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae2:	f3ef 8305 	mrs	r3, IPSR
 8007ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ae8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007aee:	f06f 0305 	mvn.w	r3, #5
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	e010      	b.n	8007b18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007af6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <osKernelStart+0x48>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d109      	bne.n	8007b12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007afe:	f7ff ffbf 	bl	8007a80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b02:	4b08      	ldr	r3, [pc, #32]	@ (8007b24 <osKernelStart+0x48>)
 8007b04:	2202      	movs	r2, #2
 8007b06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b08:	f001 f87a 	bl	8008c00 <vTaskStartScheduler>
      stat = osOK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	e002      	b.n	8007b18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b18:	687b      	ldr	r3, [r7, #4]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20004f90 	.word	0x20004f90

08007b28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08e      	sub	sp, #56	@ 0x38
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b38:	f3ef 8305 	mrs	r3, IPSR
 8007b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d17e      	bne.n	8007c42 <osThreadNew+0x11a>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d07b      	beq.n	8007c42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b4a:	2380      	movs	r3, #128	@ 0x80
 8007b4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b4e:	2318      	movs	r3, #24
 8007b50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d045      	beq.n	8007bee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <osThreadNew+0x48>
        name = attr->name;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <osThreadNew+0x6e>
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b38      	cmp	r3, #56	@ 0x38
 8007b88:	d805      	bhi.n	8007b96 <osThreadNew+0x6e>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <osThreadNew+0x72>
        return (NULL);
 8007b96:	2300      	movs	r3, #0
 8007b98:	e054      	b.n	8007c44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <osThreadNew+0xa8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	2b5b      	cmp	r3, #91	@ 0x5b
 8007bb8:	d90a      	bls.n	8007bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d006      	beq.n	8007bd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <osThreadNew+0xa8>
        mem = 1;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	61bb      	str	r3, [r7, #24]
 8007bce:	e010      	b.n	8007bf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10c      	bne.n	8007bf2 <osThreadNew+0xca>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d108      	bne.n	8007bf2 <osThreadNew+0xca>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <osThreadNew+0xca>
          mem = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	e001      	b.n	8007bf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d110      	bne.n	8007c1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c00:	9202      	str	r2, [sp, #8]
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	6a3a      	ldr	r2, [r7, #32]
 8007c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fe1a 	bl	8008848 <xTaskCreateStatic>
 8007c14:	4603      	mov	r3, r0
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	e013      	b.n	8007c42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d110      	bne.n	8007c42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	f107 0310 	add.w	r3, r7, #16
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fe68 	bl	8008908 <xTaskCreate>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d001      	beq.n	8007c42 <osThreadNew+0x11a>
            hTask = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c42:	693b      	ldr	r3, [r7, #16]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3728      	adds	r7, #40	@ 0x28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c54:	f3ef 8305 	mrs	r3, IPSR
 8007c58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <osDelay+0x1c>
    stat = osErrorISR;
 8007c60:	f06f 0305 	mvn.w	r3, #5
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	e007      	b.n	8007c78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 ff8e 	bl	8008b94 <vTaskDelay>
    }
  }

  return (stat);
 8007c78:	68fb      	ldr	r3, [r7, #12]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a07      	ldr	r2, [pc, #28]	@ (8007cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	4a06      	ldr	r2, [pc, #24]	@ (8007cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8007c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2280      	movs	r2, #128	@ 0x80
 8007ca0:	601a      	str	r2, [r3, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20004f94 	.word	0x20004f94
 8007cb4:	20004ff0 	.word	0x20004ff0

08007cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a07      	ldr	r2, [pc, #28]	@ (8007ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4a06      	ldr	r2, [pc, #24]	@ (8007ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8007cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cd6:	601a      	str	r2, [r3, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	200051f0 	.word	0x200051f0
 8007ce8:	2000524c 	.word	0x2000524c

08007cec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f103 0208 	add.w	r2, r3, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f103 0208 	add.w	r2, r3, #8
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f103 0208 	add.w	r2, r3, #8
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
}
 8007d82:	bf00      	nop
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007da4:	d103      	bne.n	8007dae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e00c      	b.n	8007dc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3308      	adds	r3, #8
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e002      	b.n	8007dbc <vListInsert+0x2e>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d2f6      	bcs.n	8007db6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6892      	ldr	r2, [r2, #8]
 8007e16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6852      	ldr	r2, [r2, #4]
 8007e20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d103      	bne.n	8007e34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <xQueueGenericReset+0x2c>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60bb      	str	r3, [r7, #8]
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e80:	f002 f8a2 	bl	8009fc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e8c:	68f9      	ldr	r1, [r7, #12]
 8007e8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e90:	fb01 f303 	mul.w	r3, r1, r3
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007eb6:	fb01 f303 	mul.w	r3, r1, r3
 8007eba:	441a      	add	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	22ff      	movs	r2, #255	@ 0xff
 8007ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	22ff      	movs	r2, #255	@ 0xff
 8007ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d114      	bne.n	8007f00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01a      	beq.n	8007f14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 f91a 	bl	800911c <xTaskRemoveFromEventList>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d012      	beq.n	8007f14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007eee:	4b0d      	ldr	r3, [pc, #52]	@ (8007f24 <xQueueGenericReset+0xd0>)
 8007ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	e009      	b.n	8007f14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3310      	adds	r3, #16
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff fef1 	bl	8007cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3324      	adds	r3, #36	@ 0x24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff feec 	bl	8007cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f14:	f002 f88a 	bl	800a02c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f18:	2301      	movs	r3, #1
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	@ 0x38
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	e7fd      	b.n	8007f50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10b      	bne.n	8007f72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	e7fd      	b.n	8007f6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <xQueueGenericCreateStatic+0x56>
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <xQueueGenericCreateStatic+0x5a>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <xQueueGenericCreateStatic+0x5c>
 8007f82:	2300      	movs	r3, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	623b      	str	r3, [r7, #32]
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <xQueueGenericCreateStatic+0x84>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <xQueueGenericCreateStatic+0x88>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <xQueueGenericCreateStatic+0x8a>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	61fb      	str	r3, [r7, #28]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fce:	2350      	movs	r3, #80	@ 0x50
 8007fd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b50      	cmp	r3, #80	@ 0x50
 8007fd6:	d00b      	beq.n	8007ff0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	61bb      	str	r3, [r7, #24]
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	e7fd      	b.n	8007fec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ff0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00d      	beq.n	8008018 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008004:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f805 	bl	8008022 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800801a:	4618      	mov	r0, r3
 800801c:	3730      	adds	r7, #48	@ 0x30
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d103      	bne.n	800803e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	e002      	b.n	8008044 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008050:	2101      	movs	r1, #1
 8008052:	69b8      	ldr	r0, [r7, #24]
 8008054:	f7ff fefe 	bl	8007e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08e      	sub	sp, #56	@ 0x38
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008076:	2300      	movs	r3, #0
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10b      	bne.n	800809c <xQueueGenericSend+0x34>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	e7fd      	b.n	8008098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <xQueueGenericSend+0x42>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <xQueueGenericSend+0x46>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <xQueueGenericSend+0x48>
 80080ae:	2300      	movs	r3, #0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10b      	bne.n	80080cc <xQueueGenericSend+0x64>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d103      	bne.n	80080da <xQueueGenericSend+0x72>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <xQueueGenericSend+0x76>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <xQueueGenericSend+0x78>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <xQueueGenericSend+0x94>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	e7fd      	b.n	80080f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080fc:	f001 f9f6 	bl	80094ec <xTaskGetSchedulerState>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <xQueueGenericSend+0xa4>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <xQueueGenericSend+0xa8>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <xQueueGenericSend+0xaa>
 8008110:	2300      	movs	r3, #0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <xQueueGenericSend+0xc6>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	61fb      	str	r3, [r7, #28]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800812e:	f001 ff4b 	bl	8009fc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813a:	429a      	cmp	r2, r3
 800813c:	d302      	bcc.n	8008144 <xQueueGenericSend+0xdc>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d129      	bne.n	8008198 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800814a:	f000 fa0f 	bl	800856c <prvCopyDataToQueue>
 800814e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	d010      	beq.n	800817a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815a:	3324      	adds	r3, #36	@ 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f000 ffdd 	bl	800911c <xTaskRemoveFromEventList>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008168:	4b3f      	ldr	r3, [pc, #252]	@ (8008268 <xQueueGenericSend+0x200>)
 800816a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	e00a      	b.n	8008190 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800817a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008180:	4b39      	ldr	r3, [pc, #228]	@ (8008268 <xQueueGenericSend+0x200>)
 8008182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008190:	f001 ff4c 	bl	800a02c <vPortExitCritical>
				return pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	e063      	b.n	8008260 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800819e:	f001 ff45 	bl	800a02c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e05c      	b.n	8008260 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081ac:	f107 0314 	add.w	r3, r7, #20
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f83f 	bl	8009234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ba:	f001 ff37 	bl	800a02c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081be:	f000 fd87 	bl	8008cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081c2:	f001 ff01 	bl	8009fc8 <vPortEnterCritical>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081d2:	d103      	bne.n	80081dc <xQueueGenericSend+0x174>
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081e8:	d103      	bne.n	80081f2 <xQueueGenericSend+0x18a>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081f2:	f001 ff1b 	bl	800a02c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081f6:	1d3a      	adds	r2, r7, #4
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 f82e 	bl	8009260 <xTaskCheckForTimeOut>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d124      	bne.n	8008254 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800820a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800820c:	f000 faa6 	bl	800875c <prvIsQueueFull>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	3310      	adds	r3, #16
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4611      	mov	r1, r2
 800821e:	4618      	mov	r0, r3
 8008220:	f000 ff2a 	bl	8009078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008226:	f000 fa31 	bl	800868c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800822a:	f000 fd5f 	bl	8008cec <xTaskResumeAll>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	f47f af7c 	bne.w	800812e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008236:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <xQueueGenericSend+0x200>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	e772      	b.n	800812e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800824a:	f000 fa1f 	bl	800868c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800824e:	f000 fd4d 	bl	8008cec <xTaskResumeAll>
 8008252:	e76c      	b.n	800812e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008256:	f000 fa19 	bl	800868c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800825a:	f000 fd47 	bl	8008cec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800825e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008260:	4618      	mov	r0, r3
 8008262:	3738      	adds	r7, #56	@ 0x38
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b090      	sub	sp, #64	@ 0x40
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <xQueueGenericSendFromISR+0x3e>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <xQueueGenericSendFromISR+0x42>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <xQueueGenericSendFromISR+0x44>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10b      	bne.n	80082cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	e7fd      	b.n	80082c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d103      	bne.n	80082da <xQueueGenericSendFromISR+0x6e>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <xQueueGenericSendFromISR+0x72>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueGenericSendFromISR+0x74>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	623b      	str	r3, [r7, #32]
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	e7fd      	b.n	80082f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082fc:	f001 ff44 	bl	800a188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008300:	f3ef 8211 	mrs	r2, BASEPRI
 8008304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	61fa      	str	r2, [r7, #28]
 8008316:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008318:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800831a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	429a      	cmp	r2, r3
 8008326:	d302      	bcc.n	800832e <xQueueGenericSendFromISR+0xc2>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d12f      	bne.n	800838e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008334:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008344:	f000 f912 	bl	800856c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008348:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008350:	d112      	bne.n	8008378 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008356:	2b00      	cmp	r3, #0
 8008358:	d016      	beq.n	8008388 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	3324      	adds	r3, #36	@ 0x24
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fedc 	bl	800911c <xTaskRemoveFromEventList>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00e      	beq.n	8008388 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	e007      	b.n	8008388 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008378:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800837c:	3301      	adds	r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	b25a      	sxtb	r2, r3
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008388:	2301      	movs	r3, #1
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800838c:	e001      	b.n	8008392 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800838e:	2300      	movs	r3, #0
 8008390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800839c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800839e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3740      	adds	r7, #64	@ 0x40
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08c      	sub	sp, #48	@ 0x30
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10b      	bne.n	80083da <xQueueReceive+0x32>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	623b      	str	r3, [r7, #32]
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	e7fd      	b.n	80083d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d103      	bne.n	80083e8 <xQueueReceive+0x40>
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <xQueueReceive+0x44>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <xQueueReceive+0x46>
 80083ec:	2300      	movs	r3, #0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10b      	bne.n	800840a <xQueueReceive+0x62>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	61fb      	str	r3, [r7, #28]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800840a:	f001 f86f 	bl	80094ec <xTaskGetSchedulerState>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <xQueueReceive+0x72>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <xQueueReceive+0x76>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <xQueueReceive+0x78>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <xQueueReceive+0x94>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	61bb      	str	r3, [r7, #24]
}
 8008436:	bf00      	nop
 8008438:	bf00      	nop
 800843a:	e7fd      	b.n	8008438 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800843c:	f001 fdc4 	bl	8009fc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01f      	beq.n	800848c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008450:	f000 f8f6 	bl	8008640 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	1e5a      	subs	r2, r3, #1
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00f      	beq.n	8008484 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	3310      	adds	r3, #16
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fe57 	bl	800911c <xTaskRemoveFromEventList>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008474:	4b3c      	ldr	r3, [pc, #240]	@ (8008568 <xQueueReceive+0x1c0>)
 8008476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008484:	f001 fdd2 	bl	800a02c <vPortExitCritical>
				return pdPASS;
 8008488:	2301      	movs	r3, #1
 800848a:	e069      	b.n	8008560 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d103      	bne.n	800849a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008492:	f001 fdcb 	bl	800a02c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008496:	2300      	movs	r3, #0
 8008498:	e062      	b.n	8008560 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800849a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fec5 	bl	8009234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084aa:	2301      	movs	r3, #1
 80084ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084ae:	f001 fdbd 	bl	800a02c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084b2:	f000 fc0d 	bl	8008cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084b6:	f001 fd87 	bl	8009fc8 <vPortEnterCritical>
 80084ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084c0:	b25b      	sxtb	r3, r3
 80084c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084c6:	d103      	bne.n	80084d0 <xQueueReceive+0x128>
 80084c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084d6:	b25b      	sxtb	r3, r3
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084dc:	d103      	bne.n	80084e6 <xQueueReceive+0x13e>
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084e6:	f001 fda1 	bl	800a02c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ea:	1d3a      	adds	r2, r7, #4
 80084ec:	f107 0310 	add.w	r3, r7, #16
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 feb4 	bl	8009260 <xTaskCheckForTimeOut>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d123      	bne.n	8008546 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008500:	f000 f916 	bl	8008730 <prvIsQueueEmpty>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d017      	beq.n	800853a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	3324      	adds	r3, #36	@ 0x24
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fdb0 	bl	8009078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800851a:	f000 f8b7 	bl	800868c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800851e:	f000 fbe5 	bl	8008cec <xTaskResumeAll>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d189      	bne.n	800843c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008528:	4b0f      	ldr	r3, [pc, #60]	@ (8008568 <xQueueReceive+0x1c0>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	e780      	b.n	800843c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800853a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800853c:	f000 f8a6 	bl	800868c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008540:	f000 fbd4 	bl	8008cec <xTaskResumeAll>
 8008544:	e77a      	b.n	800843c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008548:	f000 f8a0 	bl	800868c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800854c:	f000 fbce 	bl	8008cec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008552:	f000 f8ed 	bl	8008730 <prvIsQueueEmpty>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	f43f af6f 	beq.w	800843c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800855e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008560:	4618      	mov	r0, r3
 8008562:	3730      	adds	r7, #48	@ 0x30
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008578:	2300      	movs	r3, #0
 800857a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008580:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10d      	bne.n	80085a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d14d      	bne.n	800862e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 ffc6 	bl	8009528 <xTaskPriorityDisinherit>
 800859c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	e043      	b.n	800862e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d119      	bne.n	80085e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6858      	ldr	r0, [r3, #4]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b4:	461a      	mov	r2, r3
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	f010 fa31 	bl	8018a1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d32b      	bcc.n	800862e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	e026      	b.n	800862e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68d8      	ldr	r0, [r3, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e8:	461a      	mov	r2, r3
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	f010 fa17 	bl	8018a1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f8:	425b      	negs	r3, r3
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d207      	bcs.n	800861c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008614:	425b      	negs	r3, r3
 8008616:	441a      	add	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d105      	bne.n	800862e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3b01      	subs	r3, #1
 800862c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008636:	697b      	ldr	r3, [r7, #20]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d018      	beq.n	8008684 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865a:	441a      	add	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	429a      	cmp	r2, r3
 800866a:	d303      	bcc.n	8008674 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68d9      	ldr	r1, [r3, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	461a      	mov	r2, r3
 800867e:	6838      	ldr	r0, [r7, #0]
 8008680:	f010 f9cd 	bl	8018a1e <memcpy>
	}
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008694:	f001 fc98 	bl	8009fc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800869e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086a0:	e011      	b.n	80086c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d012      	beq.n	80086d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3324      	adds	r3, #36	@ 0x24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fd34 	bl	800911c <xTaskRemoveFromEventList>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086ba:	f000 fe35 	bl	8009328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dce9      	bgt.n	80086a2 <prvUnlockQueue+0x16>
 80086ce:	e000      	b.n	80086d2 <prvUnlockQueue+0x46>
					break;
 80086d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	22ff      	movs	r2, #255	@ 0xff
 80086d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80086da:	f001 fca7 	bl	800a02c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086de:	f001 fc73 	bl	8009fc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086ea:	e011      	b.n	8008710 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d012      	beq.n	800871a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3310      	adds	r3, #16
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fd0f 	bl	800911c <xTaskRemoveFromEventList>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008704:	f000 fe10 	bl	8009328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	3b01      	subs	r3, #1
 800870c:	b2db      	uxtb	r3, r3
 800870e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008714:	2b00      	cmp	r3, #0
 8008716:	dce9      	bgt.n	80086ec <prvUnlockQueue+0x60>
 8008718:	e000      	b.n	800871c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800871a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	22ff      	movs	r2, #255	@ 0xff
 8008720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008724:	f001 fc82 	bl	800a02c <vPortExitCritical>
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008738:	f001 fc46 	bl	8009fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	e001      	b.n	800874e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800874e:	f001 fc6d 	bl	800a02c <vPortExitCritical>

	return xReturn;
 8008752:	68fb      	ldr	r3, [r7, #12]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008764:	f001 fc30 	bl	8009fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	429a      	cmp	r2, r3
 8008772:	d102      	bne.n	800877a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e001      	b.n	800877e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800877e:	f001 fc55 	bl	800a02c <vPortExitCritical>

	return xReturn;
 8008782:	68fb      	ldr	r3, [r7, #12]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	e014      	b.n	80087c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800879c:	4a0f      	ldr	r2, [pc, #60]	@ (80087dc <vQueueAddToRegistry+0x50>)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087a8:	490c      	ldr	r1, [pc, #48]	@ (80087dc <vQueueAddToRegistry+0x50>)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087b2:	4a0a      	ldr	r2, [pc, #40]	@ (80087dc <vQueueAddToRegistry+0x50>)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	4413      	add	r3, r2
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087be:	e006      	b.n	80087ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2b07      	cmp	r3, #7
 80087ca:	d9e7      	bls.n	800879c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	2000564c 	.word	0x2000564c

080087e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087f0:	f001 fbea 	bl	8009fc8 <vPortEnterCritical>
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087fa:	b25b      	sxtb	r3, r3
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008800:	d103      	bne.n	800880a <vQueueWaitForMessageRestricted+0x2a>
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008810:	b25b      	sxtb	r3, r3
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008816:	d103      	bne.n	8008820 <vQueueWaitForMessageRestricted+0x40>
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008820:	f001 fc04 	bl	800a02c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	3324      	adds	r3, #36	@ 0x24
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fc45 	bl	80090c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f7ff ff26 	bl	800868c <prvUnlockQueue>
	}
 8008840:	bf00      	nop
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08e      	sub	sp, #56	@ 0x38
 800884c:	af04      	add	r7, sp, #16
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10b      	bne.n	8008874 <xTaskCreateStatic+0x2c>
	__asm volatile
 800885c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	623b      	str	r3, [r7, #32]
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	e7fd      	b.n	8008870 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <xTaskCreateStatic+0x4a>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008892:	235c      	movs	r3, #92	@ 0x5c
 8008894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b5c      	cmp	r3, #92	@ 0x5c
 800889a:	d00b      	beq.n	80088b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61bb      	str	r3, [r7, #24]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01e      	beq.n	80088fa <xTaskCreateStatic+0xb2>
 80088bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01b      	beq.n	80088fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088d4:	2300      	movs	r3, #0
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088da:	9302      	str	r3, [sp, #8]
 80088dc:	f107 0314 	add.w	r3, r7, #20
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68b9      	ldr	r1, [r7, #8]
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 f850 	bl	8008992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088f4:	f000 f8de 	bl	8008ab4 <prvAddNewTaskToReadyList>
 80088f8:	e001      	b.n	80088fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088fe:	697b      	ldr	r3, [r7, #20]
	}
 8008900:	4618      	mov	r0, r3
 8008902:	3728      	adds	r7, #40	@ 0x28
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08c      	sub	sp, #48	@ 0x30
 800890c:	af04      	add	r7, sp, #16
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	4613      	mov	r3, r2
 8008916:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4618      	mov	r0, r3
 800891e:	f001 fc75 	bl	800a20c <pvPortMalloc>
 8008922:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800892a:	205c      	movs	r0, #92	@ 0x5c
 800892c:	f001 fc6e 	bl	800a20c <pvPortMalloc>
 8008930:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	631a      	str	r2, [r3, #48]	@ 0x30
 800893e:	e005      	b.n	800894c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008940:	6978      	ldr	r0, [r7, #20]
 8008942:	f001 fd31 	bl	800a3a8 <vPortFree>
 8008946:	e001      	b.n	800894c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d017      	beq.n	8008982 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	2300      	movs	r3, #0
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f80e 	bl	8008992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008976:	69f8      	ldr	r0, [r7, #28]
 8008978:	f000 f89c 	bl	8008ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800897c:	2301      	movs	r3, #1
 800897e:	61bb      	str	r3, [r7, #24]
 8008980:	e002      	b.n	8008988 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008986:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008988:	69bb      	ldr	r3, [r7, #24]
	}
 800898a:	4618      	mov	r0, r3
 800898c:	3720      	adds	r7, #32
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	461a      	mov	r2, r3
 80089aa:	21a5      	movs	r1, #165	@ 0xa5
 80089ac:	f00f ff6e 	bl	801888c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089ba:	3b01      	subs	r3, #1
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f023 0307 	bic.w	r3, r3, #7
 80089c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <prvInitialiseNewTask+0x5a>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	617b      	str	r3, [r7, #20]
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01f      	beq.n	8008a32 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
 80089f6:	e012      	b.n	8008a1e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	4413      	add	r3, r2
 80089fe:	7819      	ldrb	r1, [r3, #0]
 8008a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	4413      	add	r3, r2
 8008a06:	3334      	adds	r3, #52	@ 0x34
 8008a08:	460a      	mov	r2, r1
 8008a0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d006      	beq.n	8008a26 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2b0f      	cmp	r3, #15
 8008a22:	d9e9      	bls.n	80089f8 <prvInitialiseNewTask+0x66>
 8008a24:	e000      	b.n	8008a28 <prvInitialiseNewTask+0x96>
			{
				break;
 8008a26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a30:	e003      	b.n	8008a3a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	2b37      	cmp	r3, #55	@ 0x37
 8008a3e:	d901      	bls.n	8008a44 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a40:	2337      	movs	r3, #55	@ 0x37
 8008a42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	2200      	movs	r2, #0
 8008a54:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff f966 	bl	8007d2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	3318      	adds	r3, #24
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff f961 	bl	8007d2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	2200      	movs	r2, #0
 8008a84:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	68f9      	ldr	r1, [r7, #12]
 8008a92:	69b8      	ldr	r0, [r7, #24]
 8008a94:	f001 f966 	bl	8009d64 <pxPortInitialiseStack>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aaa:	bf00      	nop
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008abc:	f001 fa84 	bl	8009fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8008b78 <prvAddNewTaskToReadyList+0xc4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b78 <prvAddNewTaskToReadyList+0xc4>)
 8008ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008aca:	4b2c      	ldr	r3, [pc, #176]	@ (8008b7c <prvAddNewTaskToReadyList+0xc8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b7c <prvAddNewTaskToReadyList+0xc8>)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ad8:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <prvAddNewTaskToReadyList+0xc4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d110      	bne.n	8008b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ae0:	f000 fc46 	bl	8009370 <prvInitialiseTaskLists>
 8008ae4:	e00d      	b.n	8008b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ae6:	4b26      	ldr	r3, [pc, #152]	@ (8008b80 <prvAddNewTaskToReadyList+0xcc>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d109      	bne.n	8008b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aee:	4b23      	ldr	r3, [pc, #140]	@ (8008b7c <prvAddNewTaskToReadyList+0xc8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d802      	bhi.n	8008b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008afc:	4a1f      	ldr	r2, [pc, #124]	@ (8008b7c <prvAddNewTaskToReadyList+0xc8>)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b02:	4b20      	ldr	r3, [pc, #128]	@ (8008b84 <prvAddNewTaskToReadyList+0xd0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	4a1e      	ldr	r2, [pc, #120]	@ (8008b84 <prvAddNewTaskToReadyList+0xd0>)
 8008b0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <prvAddNewTaskToReadyList+0xd0>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b18:	4b1b      	ldr	r3, [pc, #108]	@ (8008b88 <prvAddNewTaskToReadyList+0xd4>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d903      	bls.n	8008b28 <prvAddNewTaskToReadyList+0x74>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	4a18      	ldr	r2, [pc, #96]	@ (8008b88 <prvAddNewTaskToReadyList+0xd4>)
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4a15      	ldr	r2, [pc, #84]	@ (8008b8c <prvAddNewTaskToReadyList+0xd8>)
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f7ff f901 	bl	8007d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b44:	f001 fa72 	bl	800a02c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b48:	4b0d      	ldr	r3, [pc, #52]	@ (8008b80 <prvAddNewTaskToReadyList+0xcc>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00e      	beq.n	8008b6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b50:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <prvAddNewTaskToReadyList+0xc8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d207      	bcs.n	8008b6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b90 <prvAddNewTaskToReadyList+0xdc>)
 8008b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b6e:	bf00      	nop
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20005b60 	.word	0x20005b60
 8008b7c:	2000568c 	.word	0x2000568c
 8008b80:	20005b6c 	.word	0x20005b6c
 8008b84:	20005b7c 	.word	0x20005b7c
 8008b88:	20005b68 	.word	0x20005b68
 8008b8c:	20005690 	.word	0x20005690
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d018      	beq.n	8008bd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ba6:	4b14      	ldr	r3, [pc, #80]	@ (8008bf8 <vTaskDelay+0x64>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00b      	beq.n	8008bc6 <vTaskDelay+0x32>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60bb      	str	r3, [r7, #8]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bc6:	f000 f883 	bl	8008cd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fd1b 	bl	8009608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bd2:	f000 f88b 	bl	8008cec <xTaskResumeAll>
 8008bd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d107      	bne.n	8008bee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008bde:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <vTaskDelay+0x68>)
 8008be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20005b88 	.word	0x20005b88
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08a      	sub	sp, #40	@ 0x28
 8008c04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c0e:	463a      	mov	r2, r7
 8008c10:	1d39      	adds	r1, r7, #4
 8008c12:	f107 0308 	add.w	r3, r7, #8
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7ff f834 	bl	8007c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	9202      	str	r2, [sp, #8]
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	2300      	movs	r3, #0
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	460a      	mov	r2, r1
 8008c2e:	4922      	ldr	r1, [pc, #136]	@ (8008cb8 <vTaskStartScheduler+0xb8>)
 8008c30:	4822      	ldr	r0, [pc, #136]	@ (8008cbc <vTaskStartScheduler+0xbc>)
 8008c32:	f7ff fe09 	bl	8008848 <xTaskCreateStatic>
 8008c36:	4603      	mov	r3, r0
 8008c38:	4a21      	ldr	r2, [pc, #132]	@ (8008cc0 <vTaskStartScheduler+0xc0>)
 8008c3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c3c:	4b20      	ldr	r3, [pc, #128]	@ (8008cc0 <vTaskStartScheduler+0xc0>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c44:	2301      	movs	r3, #1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e001      	b.n	8008c4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d102      	bne.n	8008c5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c54:	f000 fd2c 	bl	80096b0 <xTimerCreateTimerTask>
 8008c58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d116      	bne.n	8008c8e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	613b      	str	r3, [r7, #16]
}
 8008c72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c74:	4b13      	ldr	r3, [pc, #76]	@ (8008cc4 <vTaskStartScheduler+0xc4>)
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c7c:	4b12      	ldr	r3, [pc, #72]	@ (8008cc8 <vTaskStartScheduler+0xc8>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c82:	4b12      	ldr	r3, [pc, #72]	@ (8008ccc <vTaskStartScheduler+0xcc>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c88:	f001 f8fa 	bl	8009e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c8c:	e00f      	b.n	8008cae <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c94:	d10b      	bne.n	8008cae <vTaskStartScheduler+0xae>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	60fb      	str	r3, [r7, #12]
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	e7fd      	b.n	8008caa <vTaskStartScheduler+0xaa>
}
 8008cae:	bf00      	nop
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	0801af04 	.word	0x0801af04
 8008cbc:	08009341 	.word	0x08009341
 8008cc0:	20005b84 	.word	0x20005b84
 8008cc4:	20005b80 	.word	0x20005b80
 8008cc8:	20005b6c 	.word	0x20005b6c
 8008ccc:	20005b64 	.word	0x20005b64

08008cd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008cd4:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <vTaskSuspendAll+0x18>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	4a03      	ldr	r2, [pc, #12]	@ (8008ce8 <vTaskSuspendAll+0x18>)
 8008cdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cde:	bf00      	nop
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20005b88 	.word	0x20005b88

08008cec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cfa:	4b42      	ldr	r3, [pc, #264]	@ (8008e04 <xTaskResumeAll+0x118>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10b      	bne.n	8008d1a <xTaskResumeAll+0x2e>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	603b      	str	r3, [r7, #0]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d1a:	f001 f955 	bl	8009fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d1e:	4b39      	ldr	r3, [pc, #228]	@ (8008e04 <xTaskResumeAll+0x118>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	4a37      	ldr	r2, [pc, #220]	@ (8008e04 <xTaskResumeAll+0x118>)
 8008d26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d28:	4b36      	ldr	r3, [pc, #216]	@ (8008e04 <xTaskResumeAll+0x118>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d162      	bne.n	8008df6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d30:	4b35      	ldr	r3, [pc, #212]	@ (8008e08 <xTaskResumeAll+0x11c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d05e      	beq.n	8008df6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d38:	e02f      	b.n	8008d9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3a:	4b34      	ldr	r3, [pc, #208]	@ (8008e0c <xTaskResumeAll+0x120>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3318      	adds	r3, #24
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff f85a 	bl	8007e00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff f855 	bl	8007e00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8008e10 <xTaskResumeAll+0x124>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d903      	bls.n	8008d6a <xTaskResumeAll+0x7e>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d66:	4a2a      	ldr	r2, [pc, #168]	@ (8008e10 <xTaskResumeAll+0x124>)
 8008d68:	6013      	str	r3, [r2, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4a27      	ldr	r2, [pc, #156]	@ (8008e14 <xTaskResumeAll+0x128>)
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4610      	mov	r0, r2
 8008d82:	f7fe ffe0 	bl	8007d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8a:	4b23      	ldr	r3, [pc, #140]	@ (8008e18 <xTaskResumeAll+0x12c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d302      	bcc.n	8008d9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008d94:	4b21      	ldr	r3, [pc, #132]	@ (8008e1c <xTaskResumeAll+0x130>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8008e0c <xTaskResumeAll+0x120>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1cb      	bne.n	8008d3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008da8:	f000 fb80 	bl	80094ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dac:	4b1c      	ldr	r3, [pc, #112]	@ (8008e20 <xTaskResumeAll+0x134>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d010      	beq.n	8008dda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008db8:	f000 f846 	bl	8008e48 <xTaskIncrementTick>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008dc2:	4b16      	ldr	r3, [pc, #88]	@ (8008e1c <xTaskResumeAll+0x130>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1f1      	bne.n	8008db8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008dd4:	4b12      	ldr	r3, [pc, #72]	@ (8008e20 <xTaskResumeAll+0x134>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dda:	4b10      	ldr	r3, [pc, #64]	@ (8008e1c <xTaskResumeAll+0x130>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d009      	beq.n	8008df6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008de2:	2301      	movs	r3, #1
 8008de4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008de6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e24 <xTaskResumeAll+0x138>)
 8008de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008df6:	f001 f919 	bl	800a02c <vPortExitCritical>

	return xAlreadyYielded;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20005b88 	.word	0x20005b88
 8008e08:	20005b60 	.word	0x20005b60
 8008e0c:	20005b20 	.word	0x20005b20
 8008e10:	20005b68 	.word	0x20005b68
 8008e14:	20005690 	.word	0x20005690
 8008e18:	2000568c 	.word	0x2000568c
 8008e1c:	20005b74 	.word	0x20005b74
 8008e20:	20005b70 	.word	0x20005b70
 8008e24:	e000ed04 	.word	0xe000ed04

08008e28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e2e:	4b05      	ldr	r3, [pc, #20]	@ (8008e44 <xTaskGetTickCount+0x1c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e34:	687b      	ldr	r3, [r7, #4]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20005b64 	.word	0x20005b64

08008e48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e52:	4b4f      	ldr	r3, [pc, #316]	@ (8008f90 <xTaskIncrementTick+0x148>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f040 8090 	bne.w	8008f7c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8008f94 <xTaskIncrementTick+0x14c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3301      	adds	r3, #1
 8008e62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e64:	4a4b      	ldr	r2, [pc, #300]	@ (8008f94 <xTaskIncrementTick+0x14c>)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d121      	bne.n	8008eb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e70:	4b49      	ldr	r3, [pc, #292]	@ (8008f98 <xTaskIncrementTick+0x150>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <xTaskIncrementTick+0x46>
 8008e92:	4b41      	ldr	r3, [pc, #260]	@ (8008f98 <xTaskIncrementTick+0x150>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	4b40      	ldr	r3, [pc, #256]	@ (8008f9c <xTaskIncrementTick+0x154>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8008f98 <xTaskIncrementTick+0x150>)
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8008f9c <xTaskIncrementTick+0x154>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa0 <xTaskIncrementTick+0x158>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	4a3c      	ldr	r2, [pc, #240]	@ (8008fa0 <xTaskIncrementTick+0x158>)
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	f000 fafc 	bl	80094ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fa4 <xTaskIncrementTick+0x15c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d349      	bcc.n	8008f52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ebe:	4b36      	ldr	r3, [pc, #216]	@ (8008f98 <xTaskIncrementTick+0x150>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d104      	bne.n	8008ed2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec8:	4b36      	ldr	r3, [pc, #216]	@ (8008fa4 <xTaskIncrementTick+0x15c>)
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ece:	601a      	str	r2, [r3, #0]
					break;
 8008ed0:	e03f      	b.n	8008f52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed2:	4b31      	ldr	r3, [pc, #196]	@ (8008f98 <xTaskIncrementTick+0x150>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d203      	bcs.n	8008ef2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eea:	4a2e      	ldr	r2, [pc, #184]	@ (8008fa4 <xTaskIncrementTick+0x15c>)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ef0:	e02f      	b.n	8008f52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe ff82 	bl	8007e00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d004      	beq.n	8008f0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	3318      	adds	r3, #24
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe ff79 	bl	8007e00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f12:	4b25      	ldr	r3, [pc, #148]	@ (8008fa8 <xTaskIncrementTick+0x160>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d903      	bls.n	8008f22 <xTaskIncrementTick+0xda>
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1e:	4a22      	ldr	r2, [pc, #136]	@ (8008fa8 <xTaskIncrementTick+0x160>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fac <xTaskIncrementTick+0x164>)
 8008f30:	441a      	add	r2, r3
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fe ff04 	bl	8007d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f42:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb0 <xTaskIncrementTick+0x168>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d3b8      	bcc.n	8008ebe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f50:	e7b5      	b.n	8008ebe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f52:	4b17      	ldr	r3, [pc, #92]	@ (8008fb0 <xTaskIncrementTick+0x168>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f58:	4914      	ldr	r1, [pc, #80]	@ (8008fac <xTaskIncrementTick+0x164>)
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d901      	bls.n	8008f6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f6e:	4b11      	ldr	r3, [pc, #68]	@ (8008fb4 <xTaskIncrementTick+0x16c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d007      	beq.n	8008f86 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f76:	2301      	movs	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
 8008f7a:	e004      	b.n	8008f86 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb8 <xTaskIncrementTick+0x170>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3301      	adds	r3, #1
 8008f82:	4a0d      	ldr	r2, [pc, #52]	@ (8008fb8 <xTaskIncrementTick+0x170>)
 8008f84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f86:	697b      	ldr	r3, [r7, #20]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20005b88 	.word	0x20005b88
 8008f94:	20005b64 	.word	0x20005b64
 8008f98:	20005b18 	.word	0x20005b18
 8008f9c:	20005b1c 	.word	0x20005b1c
 8008fa0:	20005b78 	.word	0x20005b78
 8008fa4:	20005b80 	.word	0x20005b80
 8008fa8:	20005b68 	.word	0x20005b68
 8008fac:	20005690 	.word	0x20005690
 8008fb0:	2000568c 	.word	0x2000568c
 8008fb4:	20005b74 	.word	0x20005b74
 8008fb8:	20005b70 	.word	0x20005b70

08008fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fc2:	4b28      	ldr	r3, [pc, #160]	@ (8009064 <vTaskSwitchContext+0xa8>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fca:	4b27      	ldr	r3, [pc, #156]	@ (8009068 <vTaskSwitchContext+0xac>)
 8008fcc:	2201      	movs	r2, #1
 8008fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fd0:	e042      	b.n	8009058 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008fd2:	4b25      	ldr	r3, [pc, #148]	@ (8009068 <vTaskSwitchContext+0xac>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fd8:	4b24      	ldr	r3, [pc, #144]	@ (800906c <vTaskSwitchContext+0xb0>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	e011      	b.n	8009004 <vTaskSwitchContext+0x48>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10b      	bne.n	8008ffe <vTaskSwitchContext+0x42>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	607b      	str	r3, [r7, #4]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <vTaskSwitchContext+0x3e>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3b01      	subs	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	491a      	ldr	r1, [pc, #104]	@ (8009070 <vTaskSwitchContext+0xb4>)
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0e3      	beq.n	8008fe0 <vTaskSwitchContext+0x24>
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4a13      	ldr	r2, [pc, #76]	@ (8009070 <vTaskSwitchContext+0xb4>)
 8009024:	4413      	add	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	605a      	str	r2, [r3, #4]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	3308      	adds	r3, #8
 800903a:	429a      	cmp	r2, r3
 800903c:	d104      	bne.n	8009048 <vTaskSwitchContext+0x8c>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	605a      	str	r2, [r3, #4]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	4a09      	ldr	r2, [pc, #36]	@ (8009074 <vTaskSwitchContext+0xb8>)
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	4a06      	ldr	r2, [pc, #24]	@ (800906c <vTaskSwitchContext+0xb0>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6013      	str	r3, [r2, #0]
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20005b88 	.word	0x20005b88
 8009068:	20005b74 	.word	0x20005b74
 800906c:	20005b68 	.word	0x20005b68
 8009070:	20005690 	.word	0x20005690
 8009074:	2000568c 	.word	0x2000568c

08009078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800908c:	f383 8811 	msr	BASEPRI, r3
 8009090:	f3bf 8f6f 	isb	sy
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	60fb      	str	r3, [r7, #12]
}
 800909a:	bf00      	nop
 800909c:	bf00      	nop
 800909e:	e7fd      	b.n	800909c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090a0:	4b07      	ldr	r3, [pc, #28]	@ (80090c0 <vTaskPlaceOnEventList+0x48>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3318      	adds	r3, #24
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fe fe70 	bl	8007d8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090ae:	2101      	movs	r1, #1
 80090b0:	6838      	ldr	r0, [r7, #0]
 80090b2:	f000 faa9 	bl	8009608 <prvAddCurrentTaskToDelayedList>
}
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000568c 	.word	0x2000568c

080090c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	617b      	str	r3, [r7, #20]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009118 <vTaskPlaceOnEventListRestricted+0x54>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3318      	adds	r3, #24
 80090f4:	4619      	mov	r1, r3
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f7fe fe25 	bl	8007d46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009106:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	68b8      	ldr	r0, [r7, #8]
 800910c:	f000 fa7c 	bl	8009608 <prvAddCurrentTaskToDelayedList>
	}
 8009110:	bf00      	nop
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	2000568c 	.word	0x2000568c

0800911c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10b      	bne.n	800914a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	e7fd      	b.n	8009146 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3318      	adds	r3, #24
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fe56 	bl	8007e00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009154:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <xTaskRemoveFromEventList+0xb0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11d      	bne.n	8009198 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	3304      	adds	r3, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fe4d 	bl	8007e00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916a:	4b19      	ldr	r3, [pc, #100]	@ (80091d0 <xTaskRemoveFromEventList+0xb4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d903      	bls.n	800917a <xTaskRemoveFromEventList+0x5e>
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <xTaskRemoveFromEventList+0xb4>)
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4a13      	ldr	r2, [pc, #76]	@ (80091d4 <xTaskRemoveFromEventList+0xb8>)
 8009188:	441a      	add	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe fdd8 	bl	8007d46 <vListInsertEnd>
 8009196:	e005      	b.n	80091a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	3318      	adds	r3, #24
 800919c:	4619      	mov	r1, r3
 800919e:	480e      	ldr	r0, [pc, #56]	@ (80091d8 <xTaskRemoveFromEventList+0xbc>)
 80091a0:	f7fe fdd1 	bl	8007d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091a8:	4b0c      	ldr	r3, [pc, #48]	@ (80091dc <xTaskRemoveFromEventList+0xc0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d905      	bls.n	80091be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091b6:	4b0a      	ldr	r3, [pc, #40]	@ (80091e0 <xTaskRemoveFromEventList+0xc4>)
 80091b8:	2201      	movs	r2, #1
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e001      	b.n	80091c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091c2:	697b      	ldr	r3, [r7, #20]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20005b88 	.word	0x20005b88
 80091d0:	20005b68 	.word	0x20005b68
 80091d4:	20005690 	.word	0x20005690
 80091d8:	20005b20 	.word	0x20005b20
 80091dc:	2000568c 	.word	0x2000568c
 80091e0:	20005b74 	.word	0x20005b74

080091e4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <vTaskSetTimeOutState+0x26>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	60fb      	str	r3, [r7, #12]
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	e7fd      	b.n	8009206 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800920a:	f000 fedd 	bl	8009fc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800920e:	4b07      	ldr	r3, [pc, #28]	@ (800922c <vTaskSetTimeOutState+0x48>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009216:	4b06      	ldr	r3, [pc, #24]	@ (8009230 <vTaskSetTimeOutState+0x4c>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800921e:	f000 ff05 	bl	800a02c <vPortExitCritical>
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20005b78 	.word	0x20005b78
 8009230:	20005b64 	.word	0x20005b64

08009234 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800923c:	4b06      	ldr	r3, [pc, #24]	@ (8009258 <vTaskInternalSetTimeOutState+0x24>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009244:	4b05      	ldr	r3, [pc, #20]	@ (800925c <vTaskInternalSetTimeOutState+0x28>)
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	20005b78 	.word	0x20005b78
 800925c:	20005b64 	.word	0x20005b64

08009260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b088      	sub	sp, #32
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	613b      	str	r3, [r7, #16]
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	60fb      	str	r3, [r7, #12]
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	e7fd      	b.n	80092a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092a6:	f000 fe8f 	bl	8009fc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009320 <xTaskCheckForTimeOut+0xc0>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092c2:	d102      	bne.n	80092ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61fb      	str	r3, [r7, #28]
 80092c8:	e023      	b.n	8009312 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4b15      	ldr	r3, [pc, #84]	@ (8009324 <xTaskCheckForTimeOut+0xc4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d007      	beq.n	80092e6 <xTaskCheckForTimeOut+0x86>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d302      	bcc.n	80092e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092e0:	2301      	movs	r3, #1
 80092e2:	61fb      	str	r3, [r7, #28]
 80092e4:	e015      	b.n	8009312 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d20b      	bcs.n	8009308 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	1ad2      	subs	r2, r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff ff99 	bl	8009234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	61fb      	str	r3, [r7, #28]
 8009306:	e004      	b.n	8009312 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800930e:	2301      	movs	r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009312:	f000 fe8b 	bl	800a02c <vPortExitCritical>

	return xReturn;
 8009316:	69fb      	ldr	r3, [r7, #28]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3720      	adds	r7, #32
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20005b64 	.word	0x20005b64
 8009324:	20005b78 	.word	0x20005b78

08009328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800932c:	4b03      	ldr	r3, [pc, #12]	@ (800933c <vTaskMissedYield+0x14>)
 800932e:	2201      	movs	r2, #1
 8009330:	601a      	str	r2, [r3, #0]
}
 8009332:	bf00      	nop
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20005b74 	.word	0x20005b74

08009340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009348:	f000 f852 	bl	80093f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800934c:	4b06      	ldr	r3, [pc, #24]	@ (8009368 <prvIdleTask+0x28>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d9f9      	bls.n	8009348 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <prvIdleTask+0x2c>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009364:	e7f0      	b.n	8009348 <prvIdleTask+0x8>
 8009366:	bf00      	nop
 8009368:	20005690 	.word	0x20005690
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
 800937a:	e00c      	b.n	8009396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4a12      	ldr	r2, [pc, #72]	@ (80093d0 <prvInitialiseTaskLists+0x60>)
 8009388:	4413      	add	r3, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7fe fcae 	bl	8007cec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3301      	adds	r3, #1
 8009394:	607b      	str	r3, [r7, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b37      	cmp	r3, #55	@ 0x37
 800939a:	d9ef      	bls.n	800937c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800939c:	480d      	ldr	r0, [pc, #52]	@ (80093d4 <prvInitialiseTaskLists+0x64>)
 800939e:	f7fe fca5 	bl	8007cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093a2:	480d      	ldr	r0, [pc, #52]	@ (80093d8 <prvInitialiseTaskLists+0x68>)
 80093a4:	f7fe fca2 	bl	8007cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093a8:	480c      	ldr	r0, [pc, #48]	@ (80093dc <prvInitialiseTaskLists+0x6c>)
 80093aa:	f7fe fc9f 	bl	8007cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ae:	480c      	ldr	r0, [pc, #48]	@ (80093e0 <prvInitialiseTaskLists+0x70>)
 80093b0:	f7fe fc9c 	bl	8007cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093b4:	480b      	ldr	r0, [pc, #44]	@ (80093e4 <prvInitialiseTaskLists+0x74>)
 80093b6:	f7fe fc99 	bl	8007cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093ba:	4b0b      	ldr	r3, [pc, #44]	@ (80093e8 <prvInitialiseTaskLists+0x78>)
 80093bc:	4a05      	ldr	r2, [pc, #20]	@ (80093d4 <prvInitialiseTaskLists+0x64>)
 80093be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093c0:	4b0a      	ldr	r3, [pc, #40]	@ (80093ec <prvInitialiseTaskLists+0x7c>)
 80093c2:	4a05      	ldr	r2, [pc, #20]	@ (80093d8 <prvInitialiseTaskLists+0x68>)
 80093c4:	601a      	str	r2, [r3, #0]
}
 80093c6:	bf00      	nop
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20005690 	.word	0x20005690
 80093d4:	20005af0 	.word	0x20005af0
 80093d8:	20005b04 	.word	0x20005b04
 80093dc:	20005b20 	.word	0x20005b20
 80093e0:	20005b34 	.word	0x20005b34
 80093e4:	20005b4c 	.word	0x20005b4c
 80093e8:	20005b18 	.word	0x20005b18
 80093ec:	20005b1c 	.word	0x20005b1c

080093f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f6:	e019      	b.n	800942c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093f8:	f000 fde6 	bl	8009fc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093fc:	4b10      	ldr	r3, [pc, #64]	@ (8009440 <prvCheckTasksWaitingTermination+0x50>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	4618      	mov	r0, r3
 800940a:	f7fe fcf9 	bl	8007e00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <prvCheckTasksWaitingTermination+0x54>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3b01      	subs	r3, #1
 8009414:	4a0b      	ldr	r2, [pc, #44]	@ (8009444 <prvCheckTasksWaitingTermination+0x54>)
 8009416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009418:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <prvCheckTasksWaitingTermination+0x58>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3b01      	subs	r3, #1
 800941e:	4a0a      	ldr	r2, [pc, #40]	@ (8009448 <prvCheckTasksWaitingTermination+0x58>)
 8009420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009422:	f000 fe03 	bl	800a02c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f810 	bl	800944c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800942c:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <prvCheckTasksWaitingTermination+0x58>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1e1      	bne.n	80093f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20005b34 	.word	0x20005b34
 8009444:	20005b60 	.word	0x20005b60
 8009448:	20005b48 	.word	0x20005b48

0800944c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800945a:	2b00      	cmp	r3, #0
 800945c:	d108      	bne.n	8009470 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009462:	4618      	mov	r0, r3
 8009464:	f000 ffa0 	bl	800a3a8 <vPortFree>
				vPortFree( pxTCB );
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 ff9d 	bl	800a3a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800946e:	e019      	b.n	80094a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009476:	2b01      	cmp	r3, #1
 8009478:	d103      	bne.n	8009482 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 ff94 	bl	800a3a8 <vPortFree>
	}
 8009480:	e010      	b.n	80094a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009488:	2b02      	cmp	r3, #2
 800948a:	d00b      	beq.n	80094a4 <prvDeleteTCB+0x58>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	60fb      	str	r3, [r7, #12]
}
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	e7fd      	b.n	80094a0 <prvDeleteTCB+0x54>
	}
 80094a4:	bf00      	nop
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094b2:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <prvResetNextTaskUnblockTime+0x38>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094bc:	4b0a      	ldr	r3, [pc, #40]	@ (80094e8 <prvResetNextTaskUnblockTime+0x3c>)
 80094be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094c4:	e008      	b.n	80094d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c6:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <prvResetNextTaskUnblockTime+0x38>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	4a04      	ldr	r2, [pc, #16]	@ (80094e8 <prvResetNextTaskUnblockTime+0x3c>)
 80094d6:	6013      	str	r3, [r2, #0]
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	20005b18 	.word	0x20005b18
 80094e8:	20005b80 	.word	0x20005b80

080094ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009520 <xTaskGetSchedulerState+0x34>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d102      	bne.n	8009500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094fa:	2301      	movs	r3, #1
 80094fc:	607b      	str	r3, [r7, #4]
 80094fe:	e008      	b.n	8009512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009500:	4b08      	ldr	r3, [pc, #32]	@ (8009524 <xTaskGetSchedulerState+0x38>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009508:	2302      	movs	r3, #2
 800950a:	607b      	str	r3, [r7, #4]
 800950c:	e001      	b.n	8009512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009512:	687b      	ldr	r3, [r7, #4]
	}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20005b6c 	.word	0x20005b6c
 8009524:	20005b88 	.word	0x20005b88

08009528 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009534:	2300      	movs	r3, #0
 8009536:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d058      	beq.n	80095f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800953e:	4b2f      	ldr	r3, [pc, #188]	@ (80095fc <xTaskPriorityDisinherit+0xd4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	693a      	ldr	r2, [r7, #16]
 8009544:	429a      	cmp	r2, r3
 8009546:	d00b      	beq.n	8009560 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	60fb      	str	r3, [r7, #12]
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	e7fd      	b.n	800955c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	60bb      	str	r3, [r7, #8]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009584:	1e5a      	subs	r2, r3, #1
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009592:	429a      	cmp	r2, r3
 8009594:	d02c      	beq.n	80095f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959a:	2b00      	cmp	r3, #0
 800959c:	d128      	bne.n	80095f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fc2c 	bl	8007e00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009600 <xTaskPriorityDisinherit+0xd8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d903      	bls.n	80095d0 <xTaskPriorityDisinherit+0xa8>
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009600 <xTaskPriorityDisinherit+0xd8>)
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4a09      	ldr	r2, [pc, #36]	@ (8009604 <xTaskPriorityDisinherit+0xdc>)
 80095de:	441a      	add	r2, r3
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe fbad 	bl	8007d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095f0:	697b      	ldr	r3, [r7, #20]
	}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000568c 	.word	0x2000568c
 8009600:	20005b68 	.word	0x20005b68
 8009604:	20005690 	.word	0x20005690

08009608 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009612:	4b21      	ldr	r3, [pc, #132]	@ (8009698 <prvAddCurrentTaskToDelayedList+0x90>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009618:	4b20      	ldr	r3, [pc, #128]	@ (800969c <prvAddCurrentTaskToDelayedList+0x94>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fbee 	bl	8007e00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800962a:	d10a      	bne.n	8009642 <prvAddCurrentTaskToDelayedList+0x3a>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d007      	beq.n	8009642 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009632:	4b1a      	ldr	r3, [pc, #104]	@ (800969c <prvAddCurrentTaskToDelayedList+0x94>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4819      	ldr	r0, [pc, #100]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800963c:	f7fe fb83 	bl	8007d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009640:	e026      	b.n	8009690 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4413      	add	r3, r2
 8009648:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800964a:	4b14      	ldr	r3, [pc, #80]	@ (800969c <prvAddCurrentTaskToDelayedList+0x94>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	429a      	cmp	r2, r3
 8009658:	d209      	bcs.n	800966e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800965a:	4b12      	ldr	r3, [pc, #72]	@ (80096a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	4b0f      	ldr	r3, [pc, #60]	@ (800969c <prvAddCurrentTaskToDelayedList+0x94>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fe fb91 	bl	8007d8e <vListInsert>
}
 800966c:	e010      	b.n	8009690 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966e:	4b0e      	ldr	r3, [pc, #56]	@ (80096a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4b0a      	ldr	r3, [pc, #40]	@ (800969c <prvAddCurrentTaskToDelayedList+0x94>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3304      	adds	r3, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f7fe fb87 	bl	8007d8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009680:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	d202      	bcs.n	8009690 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800968a:	4a08      	ldr	r2, [pc, #32]	@ (80096ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6013      	str	r3, [r2, #0]
}
 8009690:	bf00      	nop
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20005b64 	.word	0x20005b64
 800969c:	2000568c 	.word	0x2000568c
 80096a0:	20005b4c 	.word	0x20005b4c
 80096a4:	20005b1c 	.word	0x20005b1c
 80096a8:	20005b18 	.word	0x20005b18
 80096ac:	20005b80 	.word	0x20005b80

080096b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08a      	sub	sp, #40	@ 0x28
 80096b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096ba:	f000 fb13 	bl	8009ce4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096be:	4b1d      	ldr	r3, [pc, #116]	@ (8009734 <xTimerCreateTimerTask+0x84>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d021      	beq.n	800970a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096ce:	1d3a      	adds	r2, r7, #4
 80096d0:	f107 0108 	add.w	r1, r7, #8
 80096d4:	f107 030c 	add.w	r3, r7, #12
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe faed 	bl	8007cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	9202      	str	r2, [sp, #8]
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2302      	movs	r3, #2
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	2300      	movs	r3, #0
 80096ee:	460a      	mov	r2, r1
 80096f0:	4911      	ldr	r1, [pc, #68]	@ (8009738 <xTimerCreateTimerTask+0x88>)
 80096f2:	4812      	ldr	r0, [pc, #72]	@ (800973c <xTimerCreateTimerTask+0x8c>)
 80096f4:	f7ff f8a8 	bl	8008848 <xTaskCreateStatic>
 80096f8:	4603      	mov	r3, r0
 80096fa:	4a11      	ldr	r2, [pc, #68]	@ (8009740 <xTimerCreateTimerTask+0x90>)
 80096fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096fe:	4b10      	ldr	r3, [pc, #64]	@ (8009740 <xTimerCreateTimerTask+0x90>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009706:	2301      	movs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10b      	bne.n	8009728 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	613b      	str	r3, [r7, #16]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009728:	697b      	ldr	r3, [r7, #20]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20005bbc 	.word	0x20005bbc
 8009738:	0801af0c 	.word	0x0801af0c
 800973c:	0800987d 	.word	0x0800987d
 8009740:	20005bc0 	.word	0x20005bc0

08009744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	@ 0x28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009752:	2300      	movs	r3, #0
 8009754:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <xTimerGenericCommand+0x30>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	623b      	str	r3, [r7, #32]
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	e7fd      	b.n	8009770 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009774:	4b19      	ldr	r3, [pc, #100]	@ (80097dc <xTimerGenericCommand+0x98>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d02a      	beq.n	80097d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b05      	cmp	r3, #5
 800978c:	dc18      	bgt.n	80097c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800978e:	f7ff fead 	bl	80094ec <xTaskGetSchedulerState>
 8009792:	4603      	mov	r3, r0
 8009794:	2b02      	cmp	r3, #2
 8009796:	d109      	bne.n	80097ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009798:	4b10      	ldr	r3, [pc, #64]	@ (80097dc <xTimerGenericCommand+0x98>)
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	f107 0110 	add.w	r1, r7, #16
 80097a0:	2300      	movs	r3, #0
 80097a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a4:	f7fe fc60 	bl	8008068 <xQueueGenericSend>
 80097a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80097aa:	e012      	b.n	80097d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097ac:	4b0b      	ldr	r3, [pc, #44]	@ (80097dc <xTimerGenericCommand+0x98>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	f107 0110 	add.w	r1, r7, #16
 80097b4:	2300      	movs	r3, #0
 80097b6:	2200      	movs	r2, #0
 80097b8:	f7fe fc56 	bl	8008068 <xQueueGenericSend>
 80097bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80097be:	e008      	b.n	80097d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097c0:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <xTimerGenericCommand+0x98>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	f107 0110 	add.w	r1, r7, #16
 80097c8:	2300      	movs	r3, #0
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	f7fe fd4e 	bl	800826c <xQueueGenericSendFromISR>
 80097d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3728      	adds	r7, #40	@ 0x28
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20005bbc 	.word	0x20005bbc

080097e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ea:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <prvProcessExpiredTimer+0x98>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fb01 	bl	8007e00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d023      	beq.n	8009854 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	699a      	ldr	r2, [r3, #24]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	18d1      	adds	r1, r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f000 f8d5 	bl	80099c8 <prvInsertTimerInActiveList>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d020      	beq.n	8009866 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009824:	2300      	movs	r3, #0
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2300      	movs	r3, #0
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	2100      	movs	r1, #0
 800982e:	6978      	ldr	r0, [r7, #20]
 8009830:	f7ff ff88 	bl	8009744 <xTimerGenericCommand>
 8009834:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d114      	bne.n	8009866 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60fb      	str	r3, [r7, #12]
}
 800984e:	bf00      	nop
 8009850:	bf00      	nop
 8009852:	e7fd      	b.n	8009850 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	b2da      	uxtb	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	6978      	ldr	r0, [r7, #20]
 800986c:	4798      	blx	r3
}
 800986e:	bf00      	nop
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20005bb4 	.word	0x20005bb4

0800987c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009884:	f107 0308 	add.w	r3, r7, #8
 8009888:	4618      	mov	r0, r3
 800988a:	f000 f859 	bl	8009940 <prvGetNextExpireTime>
 800988e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4619      	mov	r1, r3
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 f805 	bl	80098a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800989a:	f000 f8d7 	bl	8009a4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800989e:	bf00      	nop
 80098a0:	e7f0      	b.n	8009884 <prvTimerTask+0x8>
	...

080098a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098ae:	f7ff fa0f 	bl	8008cd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098b2:	f107 0308 	add.w	r3, r7, #8
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f866 	bl	8009988 <prvSampleTimeNow>
 80098bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d130      	bne.n	8009926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <prvProcessTimerOrBlockTask+0x3c>
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d806      	bhi.n	80098e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098d2:	f7ff fa0b 	bl	8008cec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ff81 	bl	80097e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098de:	e024      	b.n	800992a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d008      	beq.n	80098f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098e6:	4b13      	ldr	r3, [pc, #76]	@ (8009934 <prvProcessTimerOrBlockTask+0x90>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <prvProcessTimerOrBlockTask+0x50>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e000      	b.n	80098f6 <prvProcessTimerOrBlockTask+0x52>
 80098f4:	2300      	movs	r3, #0
 80098f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009938 <prvProcessTimerOrBlockTask+0x94>)
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	4619      	mov	r1, r3
 8009906:	f7fe ff6b 	bl	80087e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800990a:	f7ff f9ef 	bl	8008cec <xTaskResumeAll>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009914:	4b09      	ldr	r3, [pc, #36]	@ (800993c <prvProcessTimerOrBlockTask+0x98>)
 8009916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	f3bf 8f6f 	isb	sy
}
 8009924:	e001      	b.n	800992a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009926:	f7ff f9e1 	bl	8008cec <xTaskResumeAll>
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20005bb8 	.word	0x20005bb8
 8009938:	20005bbc 	.word	0x20005bbc
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009948:	4b0e      	ldr	r3, [pc, #56]	@ (8009984 <prvGetNextExpireTime+0x44>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <prvGetNextExpireTime+0x16>
 8009952:	2201      	movs	r2, #1
 8009954:	e000      	b.n	8009958 <prvGetNextExpireTime+0x18>
 8009956:	2200      	movs	r2, #0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d105      	bne.n	8009970 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009964:	4b07      	ldr	r3, [pc, #28]	@ (8009984 <prvGetNextExpireTime+0x44>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]
 800996e:	e001      	b.n	8009974 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009974:	68fb      	ldr	r3, [r7, #12]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20005bb4 	.word	0x20005bb4

08009988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009990:	f7ff fa4a 	bl	8008e28 <xTaskGetTickCount>
 8009994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009996:	4b0b      	ldr	r3, [pc, #44]	@ (80099c4 <prvSampleTimeNow+0x3c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	429a      	cmp	r2, r3
 800999e:	d205      	bcs.n	80099ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099a0:	f000 f93a 	bl	8009c18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	e002      	b.n	80099b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099b2:	4a04      	ldr	r2, [pc, #16]	@ (80099c4 <prvSampleTimeNow+0x3c>)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20005bc4 	.word	0x20005bc4

080099c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d812      	bhi.n	8009a14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	1ad2      	subs	r2, r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d302      	bcc.n	8009a02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099fc:	2301      	movs	r3, #1
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e01b      	b.n	8009a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a02:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <prvInsertTimerInActiveList+0x7c>)
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7fe f9be 	bl	8007d8e <vListInsert>
 8009a12:	e012      	b.n	8009a3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d206      	bcs.n	8009a2a <prvInsertTimerInActiveList+0x62>
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d302      	bcc.n	8009a2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a24:	2301      	movs	r3, #1
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	e007      	b.n	8009a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a2a:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <prvInsertTimerInActiveList+0x80>)
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7fe f9aa 	bl	8007d8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a3a:	697b      	ldr	r3, [r7, #20]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20005bb8 	.word	0x20005bb8
 8009a48:	20005bb4 	.word	0x20005bb4

08009a4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08e      	sub	sp, #56	@ 0x38
 8009a50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a52:	e0ce      	b.n	8009bf2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da19      	bge.n	8009a8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a5a:	1d3b      	adds	r3, r7, #4
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	61fb      	str	r3, [r7, #28]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a84:	6850      	ldr	r0, [r2, #4]
 8009a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a88:	6892      	ldr	r2, [r2, #8]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f2c0 80ae 	blt.w	8009bf2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe f9aa 	bl	8007e00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aac:	463b      	mov	r3, r7
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff ff6a 	bl	8009988 <prvSampleTimeNow>
 8009ab4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b09      	cmp	r3, #9
 8009aba:	f200 8097 	bhi.w	8009bec <prvProcessReceivedCommands+0x1a0>
 8009abe:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac4 <prvProcessReceivedCommands+0x78>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009aed 	.word	0x08009aed
 8009ad0:	08009b63 	.word	0x08009b63
 8009ad4:	08009b77 	.word	0x08009b77
 8009ad8:	08009bc3 	.word	0x08009bc3
 8009adc:	08009aed 	.word	0x08009aed
 8009ae0:	08009aed 	.word	0x08009aed
 8009ae4:	08009b63 	.word	0x08009b63
 8009ae8:	08009b77 	.word	0x08009b77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af2:	f043 0301 	orr.w	r3, r3, #1
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	18d1      	adds	r1, r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b0c:	f7ff ff5c 	bl	80099c8 <prvInsertTimerInActiveList>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d06c      	beq.n	8009bf0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d061      	beq.n	8009bf0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	441a      	add	r2, r3
 8009b34:	2300      	movs	r3, #0
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b3e:	f7ff fe01 	bl	8009744 <xTimerGenericCommand>
 8009b42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d152      	bne.n	8009bf0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	61bb      	str	r3, [r7, #24]
}
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	e7fd      	b.n	8009b5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b74:	e03d      	b.n	8009bf2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b7c:	f043 0301 	orr.w	r3, r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	617b      	str	r3, [r7, #20]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb4:	18d1      	adds	r1, r2, r3
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bbc:	f7ff ff04 	bl	80099c8 <prvInsertTimerInActiveList>
					break;
 8009bc0:	e017      	b.n	8009bf2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009bd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bd2:	f000 fbe9 	bl	800a3a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bd6:	e00c      	b.n	8009bf2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bde:	f023 0301 	bic.w	r3, r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bea:	e002      	b.n	8009bf2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009bec:	bf00      	nop
 8009bee:	e000      	b.n	8009bf2 <prvProcessReceivedCommands+0x1a6>
					break;
 8009bf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bf2:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <prvProcessReceivedCommands+0x1c8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	1d39      	adds	r1, r7, #4
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe fbd4 	bl	80083a8 <xQueueReceive>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f47f af26 	bne.w	8009a54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	3730      	adds	r7, #48	@ 0x30
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20005bbc 	.word	0x20005bbc

08009c18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c1e:	e049      	b.n	8009cb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c20:	4b2e      	ldr	r3, [pc, #184]	@ (8009cdc <prvSwitchTimerLists+0xc4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8009cdc <prvSwitchTimerLists+0xc4>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3304      	adds	r3, #4
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fe f8e1 	bl	8007e00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d02f      	beq.n	8009cb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d90e      	bls.n	8009c84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c72:	4b1a      	ldr	r3, [pc, #104]	@ (8009cdc <prvSwitchTimerLists+0xc4>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f7fe f886 	bl	8007d8e <vListInsert>
 8009c82:	e017      	b.n	8009cb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c84:	2300      	movs	r3, #0
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f7ff fd58 	bl	8009744 <xTimerGenericCommand>
 8009c94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10b      	bne.n	8009cb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	603b      	str	r3, [r7, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	e7fd      	b.n	8009cb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cb4:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <prvSwitchTimerLists+0xc4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1b0      	bne.n	8009c20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009cbe:	4b07      	ldr	r3, [pc, #28]	@ (8009cdc <prvSwitchTimerLists+0xc4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cc4:	4b06      	ldr	r3, [pc, #24]	@ (8009ce0 <prvSwitchTimerLists+0xc8>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a04      	ldr	r2, [pc, #16]	@ (8009cdc <prvSwitchTimerLists+0xc4>)
 8009cca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ccc:	4a04      	ldr	r2, [pc, #16]	@ (8009ce0 <prvSwitchTimerLists+0xc8>)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	6013      	str	r3, [r2, #0]
}
 8009cd2:	bf00      	nop
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20005bb4 	.word	0x20005bb4
 8009ce0:	20005bb8 	.word	0x20005bb8

08009ce4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cea:	f000 f96d 	bl	8009fc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cee:	4b15      	ldr	r3, [pc, #84]	@ (8009d44 <prvCheckForValidListAndQueue+0x60>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d120      	bne.n	8009d38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cf6:	4814      	ldr	r0, [pc, #80]	@ (8009d48 <prvCheckForValidListAndQueue+0x64>)
 8009cf8:	f7fd fff8 	bl	8007cec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cfc:	4813      	ldr	r0, [pc, #76]	@ (8009d4c <prvCheckForValidListAndQueue+0x68>)
 8009cfe:	f7fd fff5 	bl	8007cec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d02:	4b13      	ldr	r3, [pc, #76]	@ (8009d50 <prvCheckForValidListAndQueue+0x6c>)
 8009d04:	4a10      	ldr	r2, [pc, #64]	@ (8009d48 <prvCheckForValidListAndQueue+0x64>)
 8009d06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d08:	4b12      	ldr	r3, [pc, #72]	@ (8009d54 <prvCheckForValidListAndQueue+0x70>)
 8009d0a:	4a10      	ldr	r2, [pc, #64]	@ (8009d4c <prvCheckForValidListAndQueue+0x68>)
 8009d0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	4b11      	ldr	r3, [pc, #68]	@ (8009d58 <prvCheckForValidListAndQueue+0x74>)
 8009d14:	4a11      	ldr	r2, [pc, #68]	@ (8009d5c <prvCheckForValidListAndQueue+0x78>)
 8009d16:	2110      	movs	r1, #16
 8009d18:	200a      	movs	r0, #10
 8009d1a:	f7fe f905 	bl	8007f28 <xQueueGenericCreateStatic>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4a08      	ldr	r2, [pc, #32]	@ (8009d44 <prvCheckForValidListAndQueue+0x60>)
 8009d22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d24:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <prvCheckForValidListAndQueue+0x60>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d2c:	4b05      	ldr	r3, [pc, #20]	@ (8009d44 <prvCheckForValidListAndQueue+0x60>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	490b      	ldr	r1, [pc, #44]	@ (8009d60 <prvCheckForValidListAndQueue+0x7c>)
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe fd2a 	bl	800878c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d38:	f000 f978 	bl	800a02c <vPortExitCritical>
}
 8009d3c:	bf00      	nop
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20005bbc 	.word	0x20005bbc
 8009d48:	20005b8c 	.word	0x20005b8c
 8009d4c:	20005ba0 	.word	0x20005ba0
 8009d50:	20005bb4 	.word	0x20005bb4
 8009d54:	20005bb8 	.word	0x20005bb8
 8009d58:	20005c68 	.word	0x20005c68
 8009d5c:	20005bc8 	.word	0x20005bc8
 8009d60:	0801af14 	.word	0x0801af14

08009d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3b04      	subs	r3, #4
 8009d74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3b04      	subs	r3, #4
 8009d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f023 0201 	bic.w	r2, r3, #1
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3b04      	subs	r3, #4
 8009d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d94:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc8 <pxPortInitialiseStack+0x64>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3b14      	subs	r3, #20
 8009d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3b04      	subs	r3, #4
 8009daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f06f 0202 	mvn.w	r2, #2
 8009db2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3b20      	subs	r3, #32
 8009db8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dba:	68fb      	ldr	r3, [r7, #12]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	08009dcd 	.word	0x08009dcd

08009dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dd6:	4b13      	ldr	r3, [pc, #76]	@ (8009e24 <prvTaskExitError+0x58>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dde:	d00b      	beq.n	8009df8 <prvTaskExitError+0x2c>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	60fb      	str	r3, [r7, #12]
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	e7fd      	b.n	8009df4 <prvTaskExitError+0x28>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	60bb      	str	r3, [r7, #8]
}
 8009e0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e0c:	bf00      	nop
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0fc      	beq.n	8009e0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	200000a0 	.word	0x200000a0
	...

08009e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e30:	4b07      	ldr	r3, [pc, #28]	@ (8009e50 <pxCurrentTCBConst2>)
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	f380 8809 	msr	PSP, r0
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f04f 0000 	mov.w	r0, #0
 8009e46:	f380 8811 	msr	BASEPRI, r0
 8009e4a:	4770      	bx	lr
 8009e4c:	f3af 8000 	nop.w

08009e50 <pxCurrentTCBConst2>:
 8009e50:	2000568c 	.word	0x2000568c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e58:	4808      	ldr	r0, [pc, #32]	@ (8009e7c <prvPortStartFirstTask+0x24>)
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	6800      	ldr	r0, [r0, #0]
 8009e5e:	f380 8808 	msr	MSP, r0
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8814 	msr	CONTROL, r0
 8009e6a:	b662      	cpsie	i
 8009e6c:	b661      	cpsie	f
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	df00      	svc	0
 8009e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e7a:	bf00      	nop
 8009e7c:	e000ed08 	.word	0xe000ed08

08009e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e86:	4b47      	ldr	r3, [pc, #284]	@ (8009fa4 <xPortStartScheduler+0x124>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a47      	ldr	r2, [pc, #284]	@ (8009fa8 <xPortStartScheduler+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10b      	bne.n	8009ea8 <xPortStartScheduler+0x28>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fa4 <xPortStartScheduler+0x124>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a3f      	ldr	r2, [pc, #252]	@ (8009fac <xPortStartScheduler+0x12c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d10b      	bne.n	8009eca <xPortStartScheduler+0x4a>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	60fb      	str	r3, [r7, #12]
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	e7fd      	b.n	8009ec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eca:	4b39      	ldr	r3, [pc, #228]	@ (8009fb0 <xPortStartScheduler+0x130>)
 8009ecc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	22ff      	movs	r2, #255	@ 0xff
 8009eda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4b31      	ldr	r3, [pc, #196]	@ (8009fb4 <xPortStartScheduler+0x134>)
 8009ef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ef2:	4b31      	ldr	r3, [pc, #196]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009ef4:	2207      	movs	r2, #7
 8009ef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ef8:	e009      	b.n	8009f0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009efa:	4b2f      	ldr	r3, [pc, #188]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	4a2d      	ldr	r2, [pc, #180]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f0e:	78fb      	ldrb	r3, [r7, #3]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f16:	2b80      	cmp	r3, #128	@ 0x80
 8009f18:	d0ef      	beq.n	8009efa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f1a:	4b27      	ldr	r3, [pc, #156]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f1c3 0307 	rsb	r3, r3, #7
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d00b      	beq.n	8009f3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60bb      	str	r3, [r7, #8]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	021b      	lsls	r3, r3, #8
 8009f44:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f48:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f50:	4a19      	ldr	r2, [pc, #100]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f5c:	4b17      	ldr	r3, [pc, #92]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a16      	ldr	r2, [pc, #88]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f68:	4b14      	ldr	r3, [pc, #80]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a13      	ldr	r2, [pc, #76]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f74:	f000 f8da 	bl	800a12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f78:	4b11      	ldr	r3, [pc, #68]	@ (8009fc0 <xPortStartScheduler+0x140>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f7e:	f000 f8f9 	bl	800a174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f82:	4b10      	ldr	r3, [pc, #64]	@ (8009fc4 <xPortStartScheduler+0x144>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a0f      	ldr	r2, [pc, #60]	@ (8009fc4 <xPortStartScheduler+0x144>)
 8009f88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f8e:	f7ff ff63 	bl	8009e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f92:	f7ff f813 	bl	8008fbc <vTaskSwitchContext>
	prvTaskExitError();
 8009f96:	f7ff ff19 	bl	8009dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	e000ed00 	.word	0xe000ed00
 8009fa8:	410fc271 	.word	0x410fc271
 8009fac:	410fc270 	.word	0x410fc270
 8009fb0:	e000e400 	.word	0xe000e400
 8009fb4:	20005cb8 	.word	0x20005cb8
 8009fb8:	20005cbc 	.word	0x20005cbc
 8009fbc:	e000ed20 	.word	0xe000ed20
 8009fc0:	200000a0 	.word	0x200000a0
 8009fc4:	e000ef34 	.word	0xe000ef34

08009fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <vPortEnterCritical+0x5c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	4a0e      	ldr	r2, [pc, #56]	@ (800a024 <vPortEnterCritical+0x5c>)
 8009fea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fec:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <vPortEnterCritical+0x5c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d110      	bne.n	800a016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	@ (800a028 <vPortEnterCritical+0x60>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <vPortEnterCritical+0x4e>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	603b      	str	r3, [r7, #0]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <vPortEnterCritical+0x4a>
	}
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	200000a0 	.word	0x200000a0
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a032:	4b12      	ldr	r3, [pc, #72]	@ (800a07c <vPortExitCritical+0x50>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10b      	bne.n	800a052 <vPortExitCritical+0x26>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	607b      	str	r3, [r7, #4]
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	e7fd      	b.n	800a04e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a052:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <vPortExitCritical+0x50>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3b01      	subs	r3, #1
 800a058:	4a08      	ldr	r2, [pc, #32]	@ (800a07c <vPortExitCritical+0x50>)
 800a05a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a05c:	4b07      	ldr	r3, [pc, #28]	@ (800a07c <vPortExitCritical+0x50>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d105      	bne.n	800a070 <vPortExitCritical+0x44>
 800a064:	2300      	movs	r3, #0
 800a066:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	f383 8811 	msr	BASEPRI, r3
}
 800a06e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	200000a0 	.word	0x200000a0

0800a080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a080:	f3ef 8009 	mrs	r0, PSP
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	4b15      	ldr	r3, [pc, #84]	@ (800a0e0 <pxCurrentTCBConst>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	f01e 0f10 	tst.w	lr, #16
 800a090:	bf08      	it	eq
 800a092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09a:	6010      	str	r0, [r2, #0]
 800a09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0a4:	f380 8811 	msr	BASEPRI, r0
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f7fe ff84 	bl	8008fbc <vTaskSwitchContext>
 800a0b4:	f04f 0000 	mov.w	r0, #0
 800a0b8:	f380 8811 	msr	BASEPRI, r0
 800a0bc:	bc09      	pop	{r0, r3}
 800a0be:	6819      	ldr	r1, [r3, #0]
 800a0c0:	6808      	ldr	r0, [r1, #0]
 800a0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c6:	f01e 0f10 	tst.w	lr, #16
 800a0ca:	bf08      	it	eq
 800a0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0d0:	f380 8809 	msr	PSP, r0
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w

0800a0e0 <pxCurrentTCBConst>:
 800a0e0:	2000568c 	.word	0x2000568c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop

0800a0e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	607b      	str	r3, [r7, #4]
}
 800a100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a102:	f7fe fea1 	bl	8008e48 <xTaskIncrementTick>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a10c:	4b06      	ldr	r3, [pc, #24]	@ (800a128 <xPortSysTickHandler+0x40>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a130:	4b0b      	ldr	r3, [pc, #44]	@ (800a160 <vPortSetupTimerInterrupt+0x34>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a136:	4b0b      	ldr	r3, [pc, #44]	@ (800a164 <vPortSetupTimerInterrupt+0x38>)
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	@ (800a168 <vPortSetupTimerInterrupt+0x3c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a0a      	ldr	r2, [pc, #40]	@ (800a16c <vPortSetupTimerInterrupt+0x40>)
 800a142:	fba2 2303 	umull	r2, r3, r2, r3
 800a146:	099b      	lsrs	r3, r3, #6
 800a148:	4a09      	ldr	r2, [pc, #36]	@ (800a170 <vPortSetupTimerInterrupt+0x44>)
 800a14a:	3b01      	subs	r3, #1
 800a14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a14e:	4b04      	ldr	r3, [pc, #16]	@ (800a160 <vPortSetupTimerInterrupt+0x34>)
 800a150:	2207      	movs	r2, #7
 800a152:	601a      	str	r2, [r3, #0]
}
 800a154:	bf00      	nop
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	e000e010 	.word	0xe000e010
 800a164:	e000e018 	.word	0xe000e018
 800a168:	20000004 	.word	0x20000004
 800a16c:	10624dd3 	.word	0x10624dd3
 800a170:	e000e014 	.word	0xe000e014

0800a174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a184 <vPortEnableVFP+0x10>
 800a178:	6801      	ldr	r1, [r0, #0]
 800a17a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a17e:	6001      	str	r1, [r0, #0]
 800a180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a182:	bf00      	nop
 800a184:	e000ed88 	.word	0xe000ed88

0800a188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a18e:	f3ef 8305 	mrs	r3, IPSR
 800a192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2b0f      	cmp	r3, #15
 800a198:	d915      	bls.n	800a1c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a19a:	4a18      	ldr	r2, [pc, #96]	@ (800a1fc <vPortValidateInterruptPriority+0x74>)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1a4:	4b16      	ldr	r3, [pc, #88]	@ (800a200 <vPortValidateInterruptPriority+0x78>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	7afa      	ldrb	r2, [r7, #11]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d20b      	bcs.n	800a1c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	e7fd      	b.n	800a1c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a204 <vPortValidateInterruptPriority+0x7c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a208 <vPortValidateInterruptPriority+0x80>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d90b      	bls.n	800a1ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	603b      	str	r3, [r7, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vPortValidateInterruptPriority+0x62>
	}
 800a1ee:	bf00      	nop
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	e000e3f0 	.word	0xe000e3f0
 800a200:	20005cb8 	.word	0x20005cb8
 800a204:	e000ed0c 	.word	0xe000ed0c
 800a208:	20005cbc 	.word	0x20005cbc

0800a20c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	@ 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a218:	f7fe fd5a 	bl	8008cd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a21c:	4b5c      	ldr	r3, [pc, #368]	@ (800a390 <pvPortMalloc+0x184>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a224:	f000 f924 	bl	800a470 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a228:	4b5a      	ldr	r3, [pc, #360]	@ (800a394 <pvPortMalloc+0x188>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4013      	ands	r3, r2
 800a230:	2b00      	cmp	r3, #0
 800a232:	f040 8095 	bne.w	800a360 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01e      	beq.n	800a27a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a23c:	2208      	movs	r2, #8
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4413      	add	r3, r2
 800a242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d015      	beq.n	800a27a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f023 0307 	bic.w	r3, r3, #7
 800a254:	3308      	adds	r3, #8
 800a256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00b      	beq.n	800a27a <pvPortMalloc+0x6e>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	617b      	str	r3, [r7, #20]
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	e7fd      	b.n	800a276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d06f      	beq.n	800a360 <pvPortMalloc+0x154>
 800a280:	4b45      	ldr	r3, [pc, #276]	@ (800a398 <pvPortMalloc+0x18c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d86a      	bhi.n	800a360 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a28a:	4b44      	ldr	r3, [pc, #272]	@ (800a39c <pvPortMalloc+0x190>)
 800a28c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a28e:	4b43      	ldr	r3, [pc, #268]	@ (800a39c <pvPortMalloc+0x190>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a294:	e004      	b.n	800a2a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d903      	bls.n	800a2b2 <pvPortMalloc+0xa6>
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f1      	bne.n	800a296 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2b2:	4b37      	ldr	r3, [pc, #220]	@ (800a390 <pvPortMalloc+0x184>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d051      	beq.n	800a360 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	4413      	add	r3, r2
 800a2c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	1ad2      	subs	r2, r2, r3
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d920      	bls.n	800a320 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f003 0307 	and.w	r3, r3, #7
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <pvPortMalloc+0xfc>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	613b      	str	r3, [r7, #16]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a31a:	69b8      	ldr	r0, [r7, #24]
 800a31c:	f000 f90a 	bl	800a534 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a320:	4b1d      	ldr	r3, [pc, #116]	@ (800a398 <pvPortMalloc+0x18c>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	4a1b      	ldr	r2, [pc, #108]	@ (800a398 <pvPortMalloc+0x18c>)
 800a32c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a32e:	4b1a      	ldr	r3, [pc, #104]	@ (800a398 <pvPortMalloc+0x18c>)
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a0 <pvPortMalloc+0x194>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d203      	bcs.n	800a342 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a33a:	4b17      	ldr	r3, [pc, #92]	@ (800a398 <pvPortMalloc+0x18c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a18      	ldr	r2, [pc, #96]	@ (800a3a0 <pvPortMalloc+0x194>)
 800a340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	4b13      	ldr	r3, [pc, #76]	@ (800a394 <pvPortMalloc+0x188>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a356:	4b13      	ldr	r3, [pc, #76]	@ (800a3a4 <pvPortMalloc+0x198>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	4a11      	ldr	r2, [pc, #68]	@ (800a3a4 <pvPortMalloc+0x198>)
 800a35e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a360:	f7fe fcc4 	bl	8008cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00b      	beq.n	800a386 <pvPortMalloc+0x17a>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60fb      	str	r3, [r7, #12]
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	e7fd      	b.n	800a382 <pvPortMalloc+0x176>
	return pvReturn;
 800a386:	69fb      	ldr	r3, [r7, #28]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3728      	adds	r7, #40	@ 0x28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200068c8 	.word	0x200068c8
 800a394:	200068dc 	.word	0x200068dc
 800a398:	200068cc 	.word	0x200068cc
 800a39c:	200068c0 	.word	0x200068c0
 800a3a0:	200068d0 	.word	0x200068d0
 800a3a4:	200068d4 	.word	0x200068d4

0800a3a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d04f      	beq.n	800a45a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3ba:	2308      	movs	r3, #8
 800a3bc:	425b      	negs	r3, r3
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	4b25      	ldr	r3, [pc, #148]	@ (800a464 <vPortFree+0xbc>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10b      	bne.n	800a3ee <vPortFree+0x46>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	60fb      	str	r3, [r7, #12]
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	e7fd      	b.n	800a3ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00b      	beq.n	800a40e <vPortFree+0x66>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	60bb      	str	r3, [r7, #8]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	4b14      	ldr	r3, [pc, #80]	@ (800a464 <vPortFree+0xbc>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4013      	ands	r3, r2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01e      	beq.n	800a45a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d11a      	bne.n	800a45a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	4b0e      	ldr	r3, [pc, #56]	@ (800a464 <vPortFree+0xbc>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	43db      	mvns	r3, r3
 800a42e:	401a      	ands	r2, r3
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a434:	f7fe fc4c 	bl	8008cd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	4b0a      	ldr	r3, [pc, #40]	@ (800a468 <vPortFree+0xc0>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4413      	add	r3, r2
 800a442:	4a09      	ldr	r2, [pc, #36]	@ (800a468 <vPortFree+0xc0>)
 800a444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a446:	6938      	ldr	r0, [r7, #16]
 800a448:	f000 f874 	bl	800a534 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a44c:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <vPortFree+0xc4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	4a06      	ldr	r2, [pc, #24]	@ (800a46c <vPortFree+0xc4>)
 800a454:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a456:	f7fe fc49 	bl	8008cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a45a:	bf00      	nop
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	200068dc 	.word	0x200068dc
 800a468:	200068cc 	.word	0x200068cc
 800a46c:	200068d8 	.word	0x200068d8

0800a470 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a476:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a47a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a47c:	4b27      	ldr	r3, [pc, #156]	@ (800a51c <prvHeapInit+0xac>)
 800a47e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00c      	beq.n	800a4a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3307      	adds	r3, #7
 800a48e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f023 0307 	bic.w	r3, r3, #7
 800a496:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	4a1f      	ldr	r2, [pc, #124]	@ (800a51c <prvHeapInit+0xac>)
 800a4a0:	4413      	add	r3, r2
 800a4a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a520 <prvHeapInit+0xb0>)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a520 <prvHeapInit+0xb0>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4bc:	2208      	movs	r2, #8
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f023 0307 	bic.w	r3, r3, #7
 800a4ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4a15      	ldr	r2, [pc, #84]	@ (800a524 <prvHeapInit+0xb4>)
 800a4d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4d2:	4b14      	ldr	r3, [pc, #80]	@ (800a524 <prvHeapInit+0xb4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4da:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <prvHeapInit+0xb4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	1ad2      	subs	r2, r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a524 <prvHeapInit+0xb4>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a528 <prvHeapInit+0xb8>)
 800a4fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	4a09      	ldr	r2, [pc, #36]	@ (800a52c <prvHeapInit+0xbc>)
 800a506:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a508:	4b09      	ldr	r3, [pc, #36]	@ (800a530 <prvHeapInit+0xc0>)
 800a50a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a50e:	601a      	str	r2, [r3, #0]
}
 800a510:	bf00      	nop
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	20005cc0 	.word	0x20005cc0
 800a520:	200068c0 	.word	0x200068c0
 800a524:	200068c8 	.word	0x200068c8
 800a528:	200068d0 	.word	0x200068d0
 800a52c:	200068cc 	.word	0x200068cc
 800a530:	200068dc 	.word	0x200068dc

0800a534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a53c:	4b28      	ldr	r3, [pc, #160]	@ (800a5e0 <prvInsertBlockIntoFreeList+0xac>)
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e002      	b.n	800a548 <prvInsertBlockIntoFreeList+0x14>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d8f7      	bhi.n	800a542 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	4413      	add	r3, r2
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d108      	bne.n	800a576 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	441a      	add	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	441a      	add	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d118      	bne.n	800a5bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	4b15      	ldr	r3, [pc, #84]	@ (800a5e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	429a      	cmp	r2, r3
 800a594:	d00d      	beq.n	800a5b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	441a      	add	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	e008      	b.n	800a5c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	e003      	b.n	800a5c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d002      	beq.n	800a5d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	200068c0 	.word	0x200068c0
 800a5e4:	200068c8 	.word	0x200068c8

0800a5e8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a5e8:	4b04      	ldr	r3, [pc, #16]	@ (800a5fc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	b10a      	cbz	r2, 800a5f2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a5ee:	4803      	ldr	r0, [pc, #12]	@ (800a5fc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a5f0:	4770      	bx	lr
 800a5f2:	4a03      	ldr	r2, [pc, #12]	@ (800a600 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a5f4:	4801      	ldr	r0, [pc, #4]	@ (800a5fc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a5f6:	6812      	ldr	r2, [r2, #0]
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	4770      	bx	lr
 800a5fc:	200000ac 	.word	0x200000ac
 800a600:	20000260 	.word	0x20000260

0800a604 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a604:	4a02      	ldr	r2, [pc, #8]	@ (800a610 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a606:	4b03      	ldr	r3, [pc, #12]	@ (800a614 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a608:	6812      	ldr	r2, [r2, #0]
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20000260 	.word	0x20000260
 800a614:	200000ac 	.word	0x200000ac

0800a618 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a618:	f004 bb40 	b.w	800ec9c <geometry_msgs__msg__Twist__init>

0800a61c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a61c:	f004 bb62 	b.w	800ece4 <geometry_msgs__msg__Twist__fini>

0800a620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a620:	b510      	push	{r4, lr}
 800a622:	f000 f819 	bl	800a658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a626:	4c07      	ldr	r4, [pc, #28]	@ (800a644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a628:	60e0      	str	r0, [r4, #12]
 800a62a:	f000 f815 	bl	800a658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a62e:	4b06      	ldr	r3, [pc, #24]	@ (800a648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a630:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	b10a      	cbz	r2, 800a63a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a636:	4804      	ldr	r0, [pc, #16]	@ (800a648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a638:	bd10      	pop	{r4, pc}
 800a63a:	4a04      	ldr	r2, [pc, #16]	@ (800a64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a63c:	4802      	ldr	r0, [pc, #8]	@ (800a648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a63e:	6812      	ldr	r2, [r2, #0]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	bd10      	pop	{r4, pc}
 800a644:	200000b8 	.word	0x200000b8
 800a648:	20000130 	.word	0x20000130
 800a64c:	20000264 	.word	0x20000264

0800a650 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a650:	f004 bb54 	b.w	800ecfc <geometry_msgs__msg__Vector3__init>

0800a654 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a654:	f004 bb56 	b.w	800ed04 <geometry_msgs__msg__Vector3__fini>

0800a658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a658:	4b04      	ldr	r3, [pc, #16]	@ (800a66c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	b10a      	cbz	r2, 800a662 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a65e:	4803      	ldr	r0, [pc, #12]	@ (800a66c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a660:	4770      	bx	lr
 800a662:	4a03      	ldr	r2, [pc, #12]	@ (800a670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a664:	4801      	ldr	r0, [pc, #4]	@ (800a66c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	4770      	bx	lr
 800a66c:	200001f0 	.word	0x200001f0
 800a670:	20000264 	.word	0x20000264

0800a674 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4604      	mov	r4, r0
 800a678:	b148      	cbz	r0, 800a68e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a67a:	460d      	mov	r5, r1
 800a67c:	f000 f860 	bl	800a740 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a680:	4606      	mov	r6, r0
 800a682:	1829      	adds	r1, r5, r0
 800a684:	f104 0018 	add.w	r0, r4, #24
 800a688:	f000 f85a 	bl	800a740 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a68c:	4430      	add	r0, r6
 800a68e:	bd70      	pop	{r4, r5, r6, pc}

0800a690 <_Twist__cdr_deserialize>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	460c      	mov	r4, r1
 800a694:	b189      	cbz	r1, 800a6ba <_Twist__cdr_deserialize+0x2a>
 800a696:	4605      	mov	r5, r0
 800a698:	f000 f8de 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a69c:	6843      	ldr	r3, [r0, #4]
 800a69e:	4621      	mov	r1, r4
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	4798      	blx	r3
 800a6a6:	f000 f8d7 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a6aa:	6843      	ldr	r3, [r0, #4]
 800a6ac:	f104 0118 	add.w	r1, r4, #24
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6b8:	4718      	bx	r3
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	bd70      	pop	{r4, r5, r6, pc}
 800a6be:	bf00      	nop

0800a6c0 <_Twist__cdr_serialize>:
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	9101      	str	r1, [sp, #4]
 800a6c6:	b190      	cbz	r0, 800a6ee <_Twist__cdr_serialize+0x2e>
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	f000 f8c5 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a6ce:	6843      	ldr	r3, [r0, #4]
 800a6d0:	9901      	ldr	r1, [sp, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4798      	blx	r3
 800a6d8:	f000 f8be 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a6dc:	6843      	ldr	r3, [r0, #4]
 800a6de:	9901      	ldr	r1, [sp, #4]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f104 0018 	add.w	r0, r4, #24
 800a6e6:	b002      	add	sp, #8
 800a6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ec:	4718      	bx	r3
 800a6ee:	b002      	add	sp, #8
 800a6f0:	bd10      	pop	{r4, pc}
 800a6f2:	bf00      	nop

0800a6f4 <_Twist__get_serialized_size>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	b148      	cbz	r0, 800a70e <_Twist__get_serialized_size+0x1a>
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	f000 f820 	bl	800a740 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a700:	4605      	mov	r5, r0
 800a702:	4601      	mov	r1, r0
 800a704:	f104 0018 	add.w	r0, r4, #24
 800a708:	f000 f81a 	bl	800a740 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a70c:	4428      	add	r0, r5
 800a70e:	bd38      	pop	{r3, r4, r5, pc}

0800a710 <_Twist__max_serialized_size>:
 800a710:	b510      	push	{r4, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	2301      	movs	r3, #1
 800a716:	2100      	movs	r1, #0
 800a718:	f10d 0007 	add.w	r0, sp, #7
 800a71c:	f88d 3007 	strb.w	r3, [sp, #7]
 800a720:	f000 f87e 	bl	800a820 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a724:	4604      	mov	r4, r0
 800a726:	4601      	mov	r1, r0
 800a728:	f10d 0007 	add.w	r0, sp, #7
 800a72c:	f000 f878 	bl	800a820 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a730:	4420      	add	r0, r4
 800a732:	b002      	add	sp, #8
 800a734:	bd10      	pop	{r4, pc}
 800a736:	bf00      	nop

0800a738 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a738:	4800      	ldr	r0, [pc, #0]	@ (800a73c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a73a:	4770      	bx	lr
 800a73c:	200001fc 	.word	0x200001fc

0800a740 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a740:	b1b8      	cbz	r0, 800a772 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a742:	b538      	push	{r3, r4, r5, lr}
 800a744:	460d      	mov	r5, r1
 800a746:	4628      	mov	r0, r5
 800a748:	2108      	movs	r1, #8
 800a74a:	f001 fbc1 	bl	800bed0 <ucdr_alignment>
 800a74e:	f105 0308 	add.w	r3, r5, #8
 800a752:	181c      	adds	r4, r3, r0
 800a754:	2108      	movs	r1, #8
 800a756:	4620      	mov	r0, r4
 800a758:	f001 fbba 	bl	800bed0 <ucdr_alignment>
 800a75c:	3008      	adds	r0, #8
 800a75e:	4404      	add	r4, r0
 800a760:	2108      	movs	r1, #8
 800a762:	4620      	mov	r0, r4
 800a764:	f001 fbb4 	bl	800bed0 <ucdr_alignment>
 800a768:	f1c5 0508 	rsb	r5, r5, #8
 800a76c:	4428      	add	r0, r5
 800a76e:	4420      	add	r0, r4
 800a770:	bd38      	pop	{r3, r4, r5, pc}
 800a772:	4770      	bx	lr

0800a774 <_Vector3__cdr_deserialize>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	460c      	mov	r4, r1
 800a778:	b171      	cbz	r1, 800a798 <_Vector3__cdr_deserialize+0x24>
 800a77a:	4605      	mov	r5, r0
 800a77c:	f001 f9bc 	bl	800baf8 <ucdr_deserialize_double>
 800a780:	f104 0108 	add.w	r1, r4, #8
 800a784:	4628      	mov	r0, r5
 800a786:	f001 f9b7 	bl	800baf8 <ucdr_deserialize_double>
 800a78a:	f104 0110 	add.w	r1, r4, #16
 800a78e:	4628      	mov	r0, r5
 800a790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a794:	f001 b9b0 	b.w	800baf8 <ucdr_deserialize_double>
 800a798:	4608      	mov	r0, r1
 800a79a:	bd38      	pop	{r3, r4, r5, pc}

0800a79c <_Vector3__cdr_serialize>:
 800a79c:	b198      	cbz	r0, 800a7c6 <_Vector3__cdr_serialize+0x2a>
 800a79e:	b538      	push	{r3, r4, r5, lr}
 800a7a0:	ed90 0b00 	vldr	d0, [r0]
 800a7a4:	460d      	mov	r5, r1
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	f001 f803 	bl	800b7b4 <ucdr_serialize_double>
 800a7ae:	ed94 0b02 	vldr	d0, [r4, #8]
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 fffe 	bl	800b7b4 <ucdr_serialize_double>
 800a7b8:	ed94 0b04 	vldr	d0, [r4, #16]
 800a7bc:	4628      	mov	r0, r5
 800a7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c2:	f000 bff7 	b.w	800b7b4 <ucdr_serialize_double>
 800a7c6:	4770      	bx	lr

0800a7c8 <_Vector3__get_serialized_size>:
 800a7c8:	b198      	cbz	r0, 800a7f2 <_Vector3__get_serialized_size+0x2a>
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	2108      	movs	r1, #8
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f001 fb7e 	bl	800bed0 <ucdr_alignment>
 800a7d4:	f100 0408 	add.w	r4, r0, #8
 800a7d8:	2108      	movs	r1, #8
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f001 fb78 	bl	800bed0 <ucdr_alignment>
 800a7e0:	3008      	adds	r0, #8
 800a7e2:	4404      	add	r4, r0
 800a7e4:	2108      	movs	r1, #8
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f001 fb72 	bl	800bed0 <ucdr_alignment>
 800a7ec:	3008      	adds	r0, #8
 800a7ee:	4420      	add	r0, r4
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	4770      	bx	lr

0800a7f4 <_Vector3__max_serialized_size>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	2108      	movs	r1, #8
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	f001 fb69 	bl	800bed0 <ucdr_alignment>
 800a7fe:	f100 0508 	add.w	r5, r0, #8
 800a802:	2108      	movs	r1, #8
 800a804:	4628      	mov	r0, r5
 800a806:	f001 fb63 	bl	800bed0 <ucdr_alignment>
 800a80a:	f100 0408 	add.w	r4, r0, #8
 800a80e:	442c      	add	r4, r5
 800a810:	2108      	movs	r1, #8
 800a812:	4620      	mov	r0, r4
 800a814:	f001 fb5c 	bl	800bed0 <ucdr_alignment>
 800a818:	3008      	adds	r0, #8
 800a81a:	4420      	add	r0, r4
 800a81c:	bd38      	pop	{r3, r4, r5, pc}
 800a81e:	bf00      	nop

0800a820 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	2301      	movs	r3, #1
 800a824:	460c      	mov	r4, r1
 800a826:	7003      	strb	r3, [r0, #0]
 800a828:	2108      	movs	r1, #8
 800a82a:	4620      	mov	r0, r4
 800a82c:	f001 fb50 	bl	800bed0 <ucdr_alignment>
 800a830:	f104 0508 	add.w	r5, r4, #8
 800a834:	1946      	adds	r6, r0, r5
 800a836:	2108      	movs	r1, #8
 800a838:	4630      	mov	r0, r6
 800a83a:	f001 fb49 	bl	800bed0 <ucdr_alignment>
 800a83e:	f100 0508 	add.w	r5, r0, #8
 800a842:	4435      	add	r5, r6
 800a844:	2108      	movs	r1, #8
 800a846:	4628      	mov	r0, r5
 800a848:	f001 fb42 	bl	800bed0 <ucdr_alignment>
 800a84c:	f1c4 0408 	rsb	r4, r4, #8
 800a850:	4420      	add	r0, r4
 800a852:	4428      	add	r0, r5
 800a854:	bd70      	pop	{r4, r5, r6, pc}
 800a856:	bf00      	nop

0800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a858:	4800      	ldr	r0, [pc, #0]	@ (800a85c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a85a:	4770      	bx	lr
 800a85c:	20000224 	.word	0x20000224

0800a860 <micro_ros_string_utilities_init>:
 800a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a864:	b086      	sub	sp, #24
 800a866:	460f      	mov	r7, r1
 800a868:	4604      	mov	r4, r0
 800a86a:	a801      	add	r0, sp, #4
 800a86c:	f002 fd08 	bl	800d280 <rcutils_get_default_allocator>
 800a870:	4638      	mov	r0, r7
 800a872:	f7f5 fcdf 	bl	8000234 <strlen>
 800a876:	f100 0801 	add.w	r8, r0, #1
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	9905      	ldr	r1, [sp, #20]
 800a87e:	4605      	mov	r5, r0
 800a880:	4640      	mov	r0, r8
 800a882:	4798      	blx	r3
 800a884:	4642      	mov	r2, r8
 800a886:	4606      	mov	r6, r0
 800a888:	2100      	movs	r1, #0
 800a88a:	f00d ffff 	bl	801888c <memset>
 800a88e:	462a      	mov	r2, r5
 800a890:	4639      	mov	r1, r7
 800a892:	4630      	mov	r0, r6
 800a894:	f00e f8c3 	bl	8018a1e <memcpy>
 800a898:	4620      	mov	r0, r4
 800a89a:	e9c4 6500 	strd	r6, r5, [r4]
 800a89e:	f8c4 8008 	str.w	r8, [r4, #8]
 800a8a2:	b006      	add	sp, #24
 800a8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8a8 <ucdr_serialize_bool>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	f001 fac2 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800a8b4:	b148      	cbz	r0, 800a8ca <ucdr_serialize_bool+0x22>
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	701d      	strb	r5, [r3, #0]
 800a8ba:	68a2      	ldr	r2, [r4, #8]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	2101      	movs	r1, #1
 800a8c0:	440a      	add	r2, r1
 800a8c2:	440b      	add	r3, r1
 800a8c4:	60a2      	str	r2, [r4, #8]
 800a8c6:	6123      	str	r3, [r4, #16]
 800a8c8:	7561      	strb	r1, [r4, #21]
 800a8ca:	7da0      	ldrb	r0, [r4, #22]
 800a8cc:	f080 0001 	eor.w	r0, r0, #1
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop

0800a8d4 <ucdr_deserialize_bool>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	2101      	movs	r1, #1
 800a8da:	4604      	mov	r4, r0
 800a8dc:	f001 faac 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800a8e0:	b160      	cbz	r0, 800a8fc <ucdr_deserialize_bool+0x28>
 800a8e2:	68a2      	ldr	r2, [r4, #8]
 800a8e4:	6923      	ldr	r3, [r4, #16]
 800a8e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a8ea:	3900      	subs	r1, #0
 800a8ec:	bf18      	it	ne
 800a8ee:	2101      	movne	r1, #1
 800a8f0:	7029      	strb	r1, [r5, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	60a2      	str	r2, [r4, #8]
 800a8f8:	6123      	str	r3, [r4, #16]
 800a8fa:	7561      	strb	r1, [r4, #21]
 800a8fc:	7da0      	ldrb	r0, [r4, #22]
 800a8fe:	f080 0001 	eor.w	r0, r0, #1
 800a902:	bd38      	pop	{r3, r4, r5, pc}

0800a904 <ucdr_serialize_uint8_t>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	460d      	mov	r5, r1
 800a908:	2101      	movs	r1, #1
 800a90a:	4604      	mov	r4, r0
 800a90c:	f001 fa94 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800a910:	b148      	cbz	r0, 800a926 <ucdr_serialize_uint8_t+0x22>
 800a912:	68a3      	ldr	r3, [r4, #8]
 800a914:	701d      	strb	r5, [r3, #0]
 800a916:	68a2      	ldr	r2, [r4, #8]
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	2101      	movs	r1, #1
 800a91c:	440a      	add	r2, r1
 800a91e:	440b      	add	r3, r1
 800a920:	60a2      	str	r2, [r4, #8]
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	7561      	strb	r1, [r4, #21]
 800a926:	7da0      	ldrb	r0, [r4, #22]
 800a928:	f080 0001 	eor.w	r0, r0, #1
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	bf00      	nop

0800a930 <ucdr_deserialize_uint8_t>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	460d      	mov	r5, r1
 800a934:	2101      	movs	r1, #1
 800a936:	4604      	mov	r4, r0
 800a938:	f001 fa7e 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800a93c:	b150      	cbz	r0, 800a954 <ucdr_deserialize_uint8_t+0x24>
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	702b      	strb	r3, [r5, #0]
 800a944:	68a2      	ldr	r2, [r4, #8]
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	2101      	movs	r1, #1
 800a94a:	440a      	add	r2, r1
 800a94c:	440b      	add	r3, r1
 800a94e:	60a2      	str	r2, [r4, #8]
 800a950:	6123      	str	r3, [r4, #16]
 800a952:	7561      	strb	r1, [r4, #21]
 800a954:	7da0      	ldrb	r0, [r4, #22]
 800a956:	f080 0001 	eor.w	r0, r0, #1
 800a95a:	bd38      	pop	{r3, r4, r5, pc}

0800a95c <ucdr_serialize_uint16_t>:
 800a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	460b      	mov	r3, r1
 800a964:	2102      	movs	r1, #2
 800a966:	4604      	mov	r4, r0
 800a968:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a96c:	f001 fab8 	bl	800bee0 <ucdr_buffer_alignment>
 800a970:	4601      	mov	r1, r0
 800a972:	4620      	mov	r0, r4
 800a974:	7d67      	ldrb	r7, [r4, #21]
 800a976:	f001 faf7 	bl	800bf68 <ucdr_advance_buffer>
 800a97a:	2102      	movs	r1, #2
 800a97c:	4620      	mov	r0, r4
 800a97e:	f001 fa4f 	bl	800be20 <ucdr_check_buffer_available_for>
 800a982:	bb78      	cbnz	r0, 800a9e4 <ucdr_serialize_uint16_t+0x88>
 800a984:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a988:	42ab      	cmp	r3, r5
 800a98a:	d926      	bls.n	800a9da <ucdr_serialize_uint16_t+0x7e>
 800a98c:	1b5e      	subs	r6, r3, r5
 800a98e:	60a3      	str	r3, [r4, #8]
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	f1c6 0802 	rsb	r8, r6, #2
 800a996:	4433      	add	r3, r6
 800a998:	6123      	str	r3, [r4, #16]
 800a99a:	4641      	mov	r1, r8
 800a99c:	4620      	mov	r0, r4
 800a99e:	f001 fa4b 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d03b      	beq.n	800aa1e <ucdr_serialize_uint16_t+0xc2>
 800a9a6:	7d23      	ldrb	r3, [r4, #20]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d04a      	beq.n	800aa42 <ucdr_serialize_uint16_t+0xe6>
 800a9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9b0:	702b      	strb	r3, [r5, #0]
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	d040      	beq.n	800aa38 <ucdr_serialize_uint16_t+0xdc>
 800a9b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9ba:	706b      	strb	r3, [r5, #1]
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	68a2      	ldr	r2, [r4, #8]
 800a9c0:	7da0      	ldrb	r0, [r4, #22]
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	1b9e      	subs	r6, r3, r6
 800a9c6:	4442      	add	r2, r8
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	f080 0001 	eor.w	r0, r0, #1
 800a9ce:	60a2      	str	r2, [r4, #8]
 800a9d0:	6126      	str	r6, [r4, #16]
 800a9d2:	7563      	strb	r3, [r4, #21]
 800a9d4:	b002      	add	sp, #8
 800a9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9da:	2102      	movs	r1, #2
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f001 fa2b 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800a9e2:	b190      	cbz	r0, 800aa0a <ucdr_serialize_uint16_t+0xae>
 800a9e4:	7d23      	ldrb	r3, [r4, #20]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	68a3      	ldr	r3, [r4, #8]
 800a9ea:	d014      	beq.n	800aa16 <ucdr_serialize_uint16_t+0xba>
 800a9ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9f8:	705a      	strb	r2, [r3, #1]
 800a9fa:	68a2      	ldr	r2, [r4, #8]
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	3202      	adds	r2, #2
 800aa00:	3302      	adds	r3, #2
 800aa02:	2102      	movs	r1, #2
 800aa04:	60a2      	str	r2, [r4, #8]
 800aa06:	6123      	str	r3, [r4, #16]
 800aa08:	7561      	strb	r1, [r4, #21]
 800aa0a:	7da0      	ldrb	r0, [r4, #22]
 800aa0c:	f080 0001 	eor.w	r0, r0, #1
 800aa10:	b002      	add	sp, #8
 800aa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa1a:	801a      	strh	r2, [r3, #0]
 800aa1c:	e7ed      	b.n	800a9fa <ucdr_serialize_uint16_t+0x9e>
 800aa1e:	68a2      	ldr	r2, [r4, #8]
 800aa20:	6923      	ldr	r3, [r4, #16]
 800aa22:	7da0      	ldrb	r0, [r4, #22]
 800aa24:	7567      	strb	r7, [r4, #21]
 800aa26:	1b92      	subs	r2, r2, r6
 800aa28:	1b9b      	subs	r3, r3, r6
 800aa2a:	f080 0001 	eor.w	r0, r0, #1
 800aa2e:	60a2      	str	r2, [r4, #8]
 800aa30:	6123      	str	r3, [r4, #16]
 800aa32:	b002      	add	sp, #8
 800aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa38:	68a3      	ldr	r3, [r4, #8]
 800aa3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa3e:	701a      	strb	r2, [r3, #0]
 800aa40:	e7bc      	b.n	800a9bc <ucdr_serialize_uint16_t+0x60>
 800aa42:	4628      	mov	r0, r5
 800aa44:	f10d 0506 	add.w	r5, sp, #6
 800aa48:	4629      	mov	r1, r5
 800aa4a:	4632      	mov	r2, r6
 800aa4c:	f00d ffe7 	bl	8018a1e <memcpy>
 800aa50:	68a0      	ldr	r0, [r4, #8]
 800aa52:	4642      	mov	r2, r8
 800aa54:	19a9      	adds	r1, r5, r6
 800aa56:	f00d ffe2 	bl	8018a1e <memcpy>
 800aa5a:	e7af      	b.n	800a9bc <ucdr_serialize_uint16_t+0x60>

0800aa5c <ucdr_serialize_endian_uint16_t>:
 800aa5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa60:	b083      	sub	sp, #12
 800aa62:	460d      	mov	r5, r1
 800aa64:	2102      	movs	r1, #2
 800aa66:	4604      	mov	r4, r0
 800aa68:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aa6c:	f001 fa38 	bl	800bee0 <ucdr_buffer_alignment>
 800aa70:	4601      	mov	r1, r0
 800aa72:	4620      	mov	r0, r4
 800aa74:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa78:	f001 fa76 	bl	800bf68 <ucdr_advance_buffer>
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f001 f9ce 	bl	800be20 <ucdr_check_buffer_available_for>
 800aa84:	bb70      	cbnz	r0, 800aae4 <ucdr_serialize_endian_uint16_t+0x88>
 800aa86:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa8a:	42be      	cmp	r6, r7
 800aa8c:	d925      	bls.n	800aada <ucdr_serialize_endian_uint16_t+0x7e>
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	60a6      	str	r6, [r4, #8]
 800aa92:	1bf6      	subs	r6, r6, r7
 800aa94:	4433      	add	r3, r6
 800aa96:	f1c6 0902 	rsb	r9, r6, #2
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f001 f9ca 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d039      	beq.n	800ab1c <ucdr_serialize_endian_uint16_t+0xc0>
 800aaa8:	2d01      	cmp	r5, #1
 800aaaa:	d04a      	beq.n	800ab42 <ucdr_serialize_endian_uint16_t+0xe6>
 800aaac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aab0:	703b      	strb	r3, [r7, #0]
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	d040      	beq.n	800ab38 <ucdr_serialize_endian_uint16_t+0xdc>
 800aab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aaba:	707b      	strb	r3, [r7, #1]
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	68a2      	ldr	r2, [r4, #8]
 800aac0:	7da0      	ldrb	r0, [r4, #22]
 800aac2:	3302      	adds	r3, #2
 800aac4:	444a      	add	r2, r9
 800aac6:	1b9b      	subs	r3, r3, r6
 800aac8:	2102      	movs	r1, #2
 800aaca:	f080 0001 	eor.w	r0, r0, #1
 800aace:	60a2      	str	r2, [r4, #8]
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	7561      	strb	r1, [r4, #21]
 800aad4:	b003      	add	sp, #12
 800aad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aada:	2102      	movs	r1, #2
 800aadc:	4620      	mov	r0, r4
 800aade:	f001 f9ab 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800aae2:	b188      	cbz	r0, 800ab08 <ucdr_serialize_endian_uint16_t+0xac>
 800aae4:	2d01      	cmp	r5, #1
 800aae6:	68a3      	ldr	r3, [r4, #8]
 800aae8:	d014      	beq.n	800ab14 <ucdr_serialize_endian_uint16_t+0xb8>
 800aaea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	68a3      	ldr	r3, [r4, #8]
 800aaf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aaf6:	705a      	strb	r2, [r3, #1]
 800aaf8:	68a2      	ldr	r2, [r4, #8]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	3202      	adds	r2, #2
 800aafe:	3302      	adds	r3, #2
 800ab00:	2102      	movs	r1, #2
 800ab02:	60a2      	str	r2, [r4, #8]
 800ab04:	6123      	str	r3, [r4, #16]
 800ab06:	7561      	strb	r1, [r4, #21]
 800ab08:	7da0      	ldrb	r0, [r4, #22]
 800ab0a:	f080 0001 	eor.w	r0, r0, #1
 800ab0e:	b003      	add	sp, #12
 800ab10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ab18:	801a      	strh	r2, [r3, #0]
 800ab1a:	e7ed      	b.n	800aaf8 <ucdr_serialize_endian_uint16_t+0x9c>
 800ab1c:	68a2      	ldr	r2, [r4, #8]
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	7da0      	ldrb	r0, [r4, #22]
 800ab22:	f884 8015 	strb.w	r8, [r4, #21]
 800ab26:	1b92      	subs	r2, r2, r6
 800ab28:	1b9b      	subs	r3, r3, r6
 800ab2a:	f080 0001 	eor.w	r0, r0, #1
 800ab2e:	60a2      	str	r2, [r4, #8]
 800ab30:	6123      	str	r3, [r4, #16]
 800ab32:	b003      	add	sp, #12
 800ab34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e7bc      	b.n	800aabc <ucdr_serialize_endian_uint16_t+0x60>
 800ab42:	f10d 0506 	add.w	r5, sp, #6
 800ab46:	4629      	mov	r1, r5
 800ab48:	4632      	mov	r2, r6
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f00d ff67 	bl	8018a1e <memcpy>
 800ab50:	68a0      	ldr	r0, [r4, #8]
 800ab52:	464a      	mov	r2, r9
 800ab54:	19a9      	adds	r1, r5, r6
 800ab56:	f00d ff62 	bl	8018a1e <memcpy>
 800ab5a:	e7af      	b.n	800aabc <ucdr_serialize_endian_uint16_t+0x60>

0800ab5c <ucdr_deserialize_uint16_t>:
 800ab5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab60:	460d      	mov	r5, r1
 800ab62:	2102      	movs	r1, #2
 800ab64:	4604      	mov	r4, r0
 800ab66:	f001 f9bb 	bl	800bee0 <ucdr_buffer_alignment>
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab72:	f001 f9f9 	bl	800bf68 <ucdr_advance_buffer>
 800ab76:	2102      	movs	r1, #2
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f001 f951 	bl	800be20 <ucdr_check_buffer_available_for>
 800ab7e:	bb60      	cbnz	r0, 800abda <ucdr_deserialize_uint16_t+0x7e>
 800ab80:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ab84:	42be      	cmp	r6, r7
 800ab86:	d923      	bls.n	800abd0 <ucdr_deserialize_uint16_t+0x74>
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	60a6      	str	r6, [r4, #8]
 800ab8c:	1bf6      	subs	r6, r6, r7
 800ab8e:	4433      	add	r3, r6
 800ab90:	f1c6 0902 	rsb	r9, r6, #2
 800ab94:	6123      	str	r3, [r4, #16]
 800ab96:	4649      	mov	r1, r9
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f001 f94d 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d034      	beq.n	800ac0c <ucdr_deserialize_uint16_t+0xb0>
 800aba2:	7d23      	ldrb	r3, [r4, #20]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d042      	beq.n	800ac2e <ucdr_deserialize_uint16_t+0xd2>
 800aba8:	787b      	ldrb	r3, [r7, #1]
 800abaa:	702b      	strb	r3, [r5, #0]
 800abac:	2e00      	cmp	r6, #0
 800abae:	d03a      	beq.n	800ac26 <ucdr_deserialize_uint16_t+0xca>
 800abb0:	783b      	ldrb	r3, [r7, #0]
 800abb2:	706b      	strb	r3, [r5, #1]
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	68a2      	ldr	r2, [r4, #8]
 800abb8:	7da0      	ldrb	r0, [r4, #22]
 800abba:	2102      	movs	r1, #2
 800abbc:	3302      	adds	r3, #2
 800abbe:	444a      	add	r2, r9
 800abc0:	1b9b      	subs	r3, r3, r6
 800abc2:	7561      	strb	r1, [r4, #21]
 800abc4:	60a2      	str	r2, [r4, #8]
 800abc6:	6123      	str	r3, [r4, #16]
 800abc8:	f080 0001 	eor.w	r0, r0, #1
 800abcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd0:	2102      	movs	r1, #2
 800abd2:	4620      	mov	r0, r4
 800abd4:	f001 f930 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800abd8:	b180      	cbz	r0, 800abfc <ucdr_deserialize_uint16_t+0xa0>
 800abda:	7d23      	ldrb	r3, [r4, #20]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	d011      	beq.n	800ac06 <ucdr_deserialize_uint16_t+0xaa>
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	702b      	strb	r3, [r5, #0]
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	706b      	strb	r3, [r5, #1]
 800abec:	68a2      	ldr	r2, [r4, #8]
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	3302      	adds	r3, #2
 800abf4:	2102      	movs	r1, #2
 800abf6:	60a2      	str	r2, [r4, #8]
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	7561      	strb	r1, [r4, #21]
 800abfc:	7da0      	ldrb	r0, [r4, #22]
 800abfe:	f080 0001 	eor.w	r0, r0, #1
 800ac02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	802b      	strh	r3, [r5, #0]
 800ac0a:	e7ef      	b.n	800abec <ucdr_deserialize_uint16_t+0x90>
 800ac0c:	68a2      	ldr	r2, [r4, #8]
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	7da0      	ldrb	r0, [r4, #22]
 800ac12:	f884 8015 	strb.w	r8, [r4, #21]
 800ac16:	1b92      	subs	r2, r2, r6
 800ac18:	1b9b      	subs	r3, r3, r6
 800ac1a:	60a2      	str	r2, [r4, #8]
 800ac1c:	6123      	str	r3, [r4, #16]
 800ac1e:	f080 0001 	eor.w	r0, r0, #1
 800ac22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	706b      	strb	r3, [r5, #1]
 800ac2c:	e7c2      	b.n	800abb4 <ucdr_deserialize_uint16_t+0x58>
 800ac2e:	4639      	mov	r1, r7
 800ac30:	4632      	mov	r2, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	f00d fef3 	bl	8018a1e <memcpy>
 800ac38:	68a1      	ldr	r1, [r4, #8]
 800ac3a:	464a      	mov	r2, r9
 800ac3c:	19a8      	adds	r0, r5, r6
 800ac3e:	f00d feee 	bl	8018a1e <memcpy>
 800ac42:	e7b7      	b.n	800abb4 <ucdr_deserialize_uint16_t+0x58>

0800ac44 <ucdr_deserialize_endian_uint16_t>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	460e      	mov	r6, r1
 800ac4a:	2102      	movs	r1, #2
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	4615      	mov	r5, r2
 800ac50:	f001 f946 	bl	800bee0 <ucdr_buffer_alignment>
 800ac54:	4601      	mov	r1, r0
 800ac56:	4620      	mov	r0, r4
 800ac58:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ac5c:	f001 f984 	bl	800bf68 <ucdr_advance_buffer>
 800ac60:	2102      	movs	r1, #2
 800ac62:	4620      	mov	r0, r4
 800ac64:	f001 f8dc 	bl	800be20 <ucdr_check_buffer_available_for>
 800ac68:	bb70      	cbnz	r0, 800acc8 <ucdr_deserialize_endian_uint16_t+0x84>
 800ac6a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ac6e:	4547      	cmp	r7, r8
 800ac70:	d925      	bls.n	800acbe <ucdr_deserialize_endian_uint16_t+0x7a>
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	60a7      	str	r7, [r4, #8]
 800ac76:	eba7 0708 	sub.w	r7, r7, r8
 800ac7a:	443b      	add	r3, r7
 800ac7c:	f1c7 0a02 	rsb	sl, r7, #2
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	4651      	mov	r1, sl
 800ac84:	4620      	mov	r0, r4
 800ac86:	f001 f8d7 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d034      	beq.n	800acf8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ac8e:	2e01      	cmp	r6, #1
 800ac90:	d043      	beq.n	800ad1a <ucdr_deserialize_endian_uint16_t+0xd6>
 800ac92:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac96:	702b      	strb	r3, [r5, #0]
 800ac98:	2f00      	cmp	r7, #0
 800ac9a:	d03a      	beq.n	800ad12 <ucdr_deserialize_endian_uint16_t+0xce>
 800ac9c:	f898 3000 	ldrb.w	r3, [r8]
 800aca0:	706b      	strb	r3, [r5, #1]
 800aca2:	6923      	ldr	r3, [r4, #16]
 800aca4:	68a2      	ldr	r2, [r4, #8]
 800aca6:	7da0      	ldrb	r0, [r4, #22]
 800aca8:	2102      	movs	r1, #2
 800acaa:	3302      	adds	r3, #2
 800acac:	4452      	add	r2, sl
 800acae:	1bdb      	subs	r3, r3, r7
 800acb0:	7561      	strb	r1, [r4, #21]
 800acb2:	60a2      	str	r2, [r4, #8]
 800acb4:	6123      	str	r3, [r4, #16]
 800acb6:	f080 0001 	eor.w	r0, r0, #1
 800acba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbe:	2102      	movs	r1, #2
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 f8b9 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800acc6:	b178      	cbz	r0, 800ace8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800acc8:	2e01      	cmp	r6, #1
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	d011      	beq.n	800acf2 <ucdr_deserialize_endian_uint16_t+0xae>
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	702b      	strb	r3, [r5, #0]
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	706b      	strb	r3, [r5, #1]
 800acd8:	68a2      	ldr	r2, [r4, #8]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	3202      	adds	r2, #2
 800acde:	3302      	adds	r3, #2
 800ace0:	2102      	movs	r1, #2
 800ace2:	60a2      	str	r2, [r4, #8]
 800ace4:	6123      	str	r3, [r4, #16]
 800ace6:	7561      	strb	r1, [r4, #21]
 800ace8:	7da0      	ldrb	r0, [r4, #22]
 800acea:	f080 0001 	eor.w	r0, r0, #1
 800acee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	802b      	strh	r3, [r5, #0]
 800acf6:	e7ef      	b.n	800acd8 <ucdr_deserialize_endian_uint16_t+0x94>
 800acf8:	68a2      	ldr	r2, [r4, #8]
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	7da0      	ldrb	r0, [r4, #22]
 800acfe:	f884 9015 	strb.w	r9, [r4, #21]
 800ad02:	1bd2      	subs	r2, r2, r7
 800ad04:	1bdb      	subs	r3, r3, r7
 800ad06:	60a2      	str	r2, [r4, #8]
 800ad08:	6123      	str	r3, [r4, #16]
 800ad0a:	f080 0001 	eor.w	r0, r0, #1
 800ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	706b      	strb	r3, [r5, #1]
 800ad18:	e7c3      	b.n	800aca2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ad1a:	4641      	mov	r1, r8
 800ad1c:	463a      	mov	r2, r7
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f00d fe7d 	bl	8018a1e <memcpy>
 800ad24:	68a1      	ldr	r1, [r4, #8]
 800ad26:	4652      	mov	r2, sl
 800ad28:	19e8      	adds	r0, r5, r7
 800ad2a:	f00d fe78 	bl	8018a1e <memcpy>
 800ad2e:	e7b8      	b.n	800aca2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ad30 <ucdr_serialize_uint32_t>:
 800ad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad34:	b082      	sub	sp, #8
 800ad36:	4604      	mov	r4, r0
 800ad38:	9101      	str	r1, [sp, #4]
 800ad3a:	2104      	movs	r1, #4
 800ad3c:	f001 f8d0 	bl	800bee0 <ucdr_buffer_alignment>
 800ad40:	4601      	mov	r1, r0
 800ad42:	4620      	mov	r0, r4
 800ad44:	7d67      	ldrb	r7, [r4, #21]
 800ad46:	f001 f90f 	bl	800bf68 <ucdr_advance_buffer>
 800ad4a:	2104      	movs	r1, #4
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f001 f867 	bl	800be20 <ucdr_check_buffer_available_for>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d139      	bne.n	800adca <ucdr_serialize_uint32_t+0x9a>
 800ad56:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ad5a:	42ab      	cmp	r3, r5
 800ad5c:	d930      	bls.n	800adc0 <ucdr_serialize_uint32_t+0x90>
 800ad5e:	1b5e      	subs	r6, r3, r5
 800ad60:	60a3      	str	r3, [r4, #8]
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	f1c6 0804 	rsb	r8, r6, #4
 800ad68:	4433      	add	r3, r6
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	4641      	mov	r1, r8
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f001 f862 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d04c      	beq.n	800ae12 <ucdr_serialize_uint32_t+0xe2>
 800ad78:	7d23      	ldrb	r3, [r4, #20]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d063      	beq.n	800ae46 <ucdr_serialize_uint32_t+0x116>
 800ad7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad82:	702b      	strb	r3, [r5, #0]
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	d051      	beq.n	800ae2c <ucdr_serialize_uint32_t+0xfc>
 800ad88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad8c:	706b      	strb	r3, [r5, #1]
 800ad8e:	2e01      	cmp	r6, #1
 800ad90:	d050      	beq.n	800ae34 <ucdr_serialize_uint32_t+0x104>
 800ad92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad96:	70ab      	strb	r3, [r5, #2]
 800ad98:	2e02      	cmp	r6, #2
 800ad9a:	d04f      	beq.n	800ae3c <ucdr_serialize_uint32_t+0x10c>
 800ad9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ada0:	70eb      	strb	r3, [r5, #3]
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	68a2      	ldr	r2, [r4, #8]
 800ada6:	7da0      	ldrb	r0, [r4, #22]
 800ada8:	3304      	adds	r3, #4
 800adaa:	1b9e      	subs	r6, r3, r6
 800adac:	4442      	add	r2, r8
 800adae:	2304      	movs	r3, #4
 800adb0:	f080 0001 	eor.w	r0, r0, #1
 800adb4:	60a2      	str	r2, [r4, #8]
 800adb6:	6126      	str	r6, [r4, #16]
 800adb8:	7563      	strb	r3, [r4, #21]
 800adba:	b002      	add	sp, #8
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc0:	2104      	movs	r1, #4
 800adc2:	4620      	mov	r0, r4
 800adc4:	f001 f838 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800adc8:	b1d0      	cbz	r0, 800ae00 <ucdr_serialize_uint32_t+0xd0>
 800adca:	7d23      	ldrb	r3, [r4, #20]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	68a3      	ldr	r3, [r4, #8]
 800add0:	d01c      	beq.n	800ae0c <ucdr_serialize_uint32_t+0xdc>
 800add2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	68a3      	ldr	r3, [r4, #8]
 800adda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800adde:	705a      	strb	r2, [r3, #1]
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ade6:	709a      	strb	r2, [r3, #2]
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800adee:	70da      	strb	r2, [r3, #3]
 800adf0:	68a2      	ldr	r2, [r4, #8]
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	3204      	adds	r2, #4
 800adf6:	3304      	adds	r3, #4
 800adf8:	2104      	movs	r1, #4
 800adfa:	60a2      	str	r2, [r4, #8]
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	7561      	strb	r1, [r4, #21]
 800ae00:	7da0      	ldrb	r0, [r4, #22]
 800ae02:	f080 0001 	eor.w	r0, r0, #1
 800ae06:	b002      	add	sp, #8
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	9a01      	ldr	r2, [sp, #4]
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	e7ee      	b.n	800adf0 <ucdr_serialize_uint32_t+0xc0>
 800ae12:	68a2      	ldr	r2, [r4, #8]
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	7da0      	ldrb	r0, [r4, #22]
 800ae18:	7567      	strb	r7, [r4, #21]
 800ae1a:	1b92      	subs	r2, r2, r6
 800ae1c:	1b9b      	subs	r3, r3, r6
 800ae1e:	f080 0001 	eor.w	r0, r0, #1
 800ae22:	60a2      	str	r2, [r4, #8]
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	b002      	add	sp, #8
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae32:	701a      	strb	r2, [r3, #0]
 800ae34:	68a3      	ldr	r3, [r4, #8]
 800ae36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae3a:	701a      	strb	r2, [r3, #0]
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	e7ad      	b.n	800ada2 <ucdr_serialize_uint32_t+0x72>
 800ae46:	4628      	mov	r0, r5
 800ae48:	ad01      	add	r5, sp, #4
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	f00d fde6 	bl	8018a1e <memcpy>
 800ae52:	68a0      	ldr	r0, [r4, #8]
 800ae54:	4642      	mov	r2, r8
 800ae56:	19a9      	adds	r1, r5, r6
 800ae58:	f00d fde1 	bl	8018a1e <memcpy>
 800ae5c:	e7a1      	b.n	800ada2 <ucdr_serialize_uint32_t+0x72>
 800ae5e:	bf00      	nop

0800ae60 <ucdr_serialize_endian_uint32_t>:
 800ae60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae64:	b083      	sub	sp, #12
 800ae66:	460d      	mov	r5, r1
 800ae68:	2104      	movs	r1, #4
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	9201      	str	r2, [sp, #4]
 800ae6e:	f001 f837 	bl	800bee0 <ucdr_buffer_alignment>
 800ae72:	4601      	mov	r1, r0
 800ae74:	4620      	mov	r0, r4
 800ae76:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae7a:	f001 f875 	bl	800bf68 <ucdr_advance_buffer>
 800ae7e:	2104      	movs	r1, #4
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 ffcd 	bl	800be20 <ucdr_check_buffer_available_for>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d138      	bne.n	800aefc <ucdr_serialize_endian_uint32_t+0x9c>
 800ae8a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae8e:	42b7      	cmp	r7, r6
 800ae90:	d92f      	bls.n	800aef2 <ucdr_serialize_endian_uint32_t+0x92>
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	60a7      	str	r7, [r4, #8]
 800ae96:	1bbf      	subs	r7, r7, r6
 800ae98:	443b      	add	r3, r7
 800ae9a:	f1c7 0904 	rsb	r9, r7, #4
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	4649      	mov	r1, r9
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 ffc8 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d04a      	beq.n	800af42 <ucdr_serialize_endian_uint32_t+0xe2>
 800aeac:	2d01      	cmp	r5, #1
 800aeae:	d063      	beq.n	800af78 <ucdr_serialize_endian_uint32_t+0x118>
 800aeb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aeb4:	7033      	strb	r3, [r6, #0]
 800aeb6:	2f00      	cmp	r7, #0
 800aeb8:	d051      	beq.n	800af5e <ucdr_serialize_endian_uint32_t+0xfe>
 800aeba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aebe:	7073      	strb	r3, [r6, #1]
 800aec0:	2f01      	cmp	r7, #1
 800aec2:	d050      	beq.n	800af66 <ucdr_serialize_endian_uint32_t+0x106>
 800aec4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aec8:	70b3      	strb	r3, [r6, #2]
 800aeca:	2f02      	cmp	r7, #2
 800aecc:	d04f      	beq.n	800af6e <ucdr_serialize_endian_uint32_t+0x10e>
 800aece:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aed2:	70f3      	strb	r3, [r6, #3]
 800aed4:	6923      	ldr	r3, [r4, #16]
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	7da0      	ldrb	r0, [r4, #22]
 800aeda:	3304      	adds	r3, #4
 800aedc:	444a      	add	r2, r9
 800aede:	1bdb      	subs	r3, r3, r7
 800aee0:	2104      	movs	r1, #4
 800aee2:	f080 0001 	eor.w	r0, r0, #1
 800aee6:	60a2      	str	r2, [r4, #8]
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	7561      	strb	r1, [r4, #21]
 800aeec:	b003      	add	sp, #12
 800aeee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef2:	2104      	movs	r1, #4
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 ff9f 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800aefa:	b1c8      	cbz	r0, 800af30 <ucdr_serialize_endian_uint32_t+0xd0>
 800aefc:	2d01      	cmp	r5, #1
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	d01c      	beq.n	800af3c <ucdr_serialize_endian_uint32_t+0xdc>
 800af02:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af0e:	705a      	strb	r2, [r3, #1]
 800af10:	68a3      	ldr	r3, [r4, #8]
 800af12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af16:	709a      	strb	r2, [r3, #2]
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af1e:	70da      	strb	r2, [r3, #3]
 800af20:	68a2      	ldr	r2, [r4, #8]
 800af22:	6923      	ldr	r3, [r4, #16]
 800af24:	3204      	adds	r2, #4
 800af26:	3304      	adds	r3, #4
 800af28:	2104      	movs	r1, #4
 800af2a:	60a2      	str	r2, [r4, #8]
 800af2c:	6123      	str	r3, [r4, #16]
 800af2e:	7561      	strb	r1, [r4, #21]
 800af30:	7da0      	ldrb	r0, [r4, #22]
 800af32:	f080 0001 	eor.w	r0, r0, #1
 800af36:	b003      	add	sp, #12
 800af38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af3c:	9a01      	ldr	r2, [sp, #4]
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	e7ee      	b.n	800af20 <ucdr_serialize_endian_uint32_t+0xc0>
 800af42:	68a2      	ldr	r2, [r4, #8]
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	7da0      	ldrb	r0, [r4, #22]
 800af48:	f884 8015 	strb.w	r8, [r4, #21]
 800af4c:	1bd2      	subs	r2, r2, r7
 800af4e:	1bdb      	subs	r3, r3, r7
 800af50:	f080 0001 	eor.w	r0, r0, #1
 800af54:	60a2      	str	r2, [r4, #8]
 800af56:	6123      	str	r3, [r4, #16]
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	68a3      	ldr	r3, [r4, #8]
 800af68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	e7ad      	b.n	800aed4 <ucdr_serialize_endian_uint32_t+0x74>
 800af78:	ad01      	add	r5, sp, #4
 800af7a:	4629      	mov	r1, r5
 800af7c:	463a      	mov	r2, r7
 800af7e:	4630      	mov	r0, r6
 800af80:	f00d fd4d 	bl	8018a1e <memcpy>
 800af84:	68a0      	ldr	r0, [r4, #8]
 800af86:	464a      	mov	r2, r9
 800af88:	19e9      	adds	r1, r5, r7
 800af8a:	f00d fd48 	bl	8018a1e <memcpy>
 800af8e:	e7a1      	b.n	800aed4 <ucdr_serialize_endian_uint32_t+0x74>

0800af90 <ucdr_deserialize_uint32_t>:
 800af90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af94:	460d      	mov	r5, r1
 800af96:	2104      	movs	r1, #4
 800af98:	4604      	mov	r4, r0
 800af9a:	f000 ffa1 	bl	800bee0 <ucdr_buffer_alignment>
 800af9e:	4601      	mov	r1, r0
 800afa0:	4620      	mov	r0, r4
 800afa2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800afa6:	f000 ffdf 	bl	800bf68 <ucdr_advance_buffer>
 800afaa:	2104      	movs	r1, #4
 800afac:	4620      	mov	r0, r4
 800afae:	f000 ff37 	bl	800be20 <ucdr_check_buffer_available_for>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d138      	bne.n	800b028 <ucdr_deserialize_uint32_t+0x98>
 800afb6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800afba:	42b7      	cmp	r7, r6
 800afbc:	d92f      	bls.n	800b01e <ucdr_deserialize_uint32_t+0x8e>
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	60a7      	str	r7, [r4, #8]
 800afc2:	1bbf      	subs	r7, r7, r6
 800afc4:	443b      	add	r3, r7
 800afc6:	f1c7 0904 	rsb	r9, r7, #4
 800afca:	6123      	str	r3, [r4, #16]
 800afcc:	4649      	mov	r1, r9
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 ff32 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d046      	beq.n	800b066 <ucdr_deserialize_uint32_t+0xd6>
 800afd8:	7d23      	ldrb	r3, [r4, #20]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d05c      	beq.n	800b098 <ucdr_deserialize_uint32_t+0x108>
 800afde:	78f3      	ldrb	r3, [r6, #3]
 800afe0:	702b      	strb	r3, [r5, #0]
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	d04c      	beq.n	800b080 <ucdr_deserialize_uint32_t+0xf0>
 800afe6:	78b3      	ldrb	r3, [r6, #2]
 800afe8:	706b      	strb	r3, [r5, #1]
 800afea:	2f01      	cmp	r7, #1
 800afec:	f105 0302 	add.w	r3, r5, #2
 800aff0:	d04a      	beq.n	800b088 <ucdr_deserialize_uint32_t+0xf8>
 800aff2:	7873      	ldrb	r3, [r6, #1]
 800aff4:	70ab      	strb	r3, [r5, #2]
 800aff6:	2f02      	cmp	r7, #2
 800aff8:	f105 0303 	add.w	r3, r5, #3
 800affc:	d048      	beq.n	800b090 <ucdr_deserialize_uint32_t+0x100>
 800affe:	7833      	ldrb	r3, [r6, #0]
 800b000:	70eb      	strb	r3, [r5, #3]
 800b002:	6923      	ldr	r3, [r4, #16]
 800b004:	68a2      	ldr	r2, [r4, #8]
 800b006:	7da0      	ldrb	r0, [r4, #22]
 800b008:	2104      	movs	r1, #4
 800b00a:	3304      	adds	r3, #4
 800b00c:	444a      	add	r2, r9
 800b00e:	1bdb      	subs	r3, r3, r7
 800b010:	7561      	strb	r1, [r4, #21]
 800b012:	60a2      	str	r2, [r4, #8]
 800b014:	6123      	str	r3, [r4, #16]
 800b016:	f080 0001 	eor.w	r0, r0, #1
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	2104      	movs	r1, #4
 800b020:	4620      	mov	r0, r4
 800b022:	f000 ff09 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b026:	b1b0      	cbz	r0, 800b056 <ucdr_deserialize_uint32_t+0xc6>
 800b028:	7d23      	ldrb	r3, [r4, #20]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	68a3      	ldr	r3, [r4, #8]
 800b02e:	d017      	beq.n	800b060 <ucdr_deserialize_uint32_t+0xd0>
 800b030:	78db      	ldrb	r3, [r3, #3]
 800b032:	702b      	strb	r3, [r5, #0]
 800b034:	68a3      	ldr	r3, [r4, #8]
 800b036:	789b      	ldrb	r3, [r3, #2]
 800b038:	706b      	strb	r3, [r5, #1]
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	785b      	ldrb	r3, [r3, #1]
 800b03e:	70ab      	strb	r3, [r5, #2]
 800b040:	68a3      	ldr	r3, [r4, #8]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	70eb      	strb	r3, [r5, #3]
 800b046:	68a2      	ldr	r2, [r4, #8]
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	3204      	adds	r2, #4
 800b04c:	3304      	adds	r3, #4
 800b04e:	2104      	movs	r1, #4
 800b050:	60a2      	str	r2, [r4, #8]
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	7561      	strb	r1, [r4, #21]
 800b056:	7da0      	ldrb	r0, [r4, #22]
 800b058:	f080 0001 	eor.w	r0, r0, #1
 800b05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	e7ef      	b.n	800b046 <ucdr_deserialize_uint32_t+0xb6>
 800b066:	68a2      	ldr	r2, [r4, #8]
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	7da0      	ldrb	r0, [r4, #22]
 800b06c:	f884 8015 	strb.w	r8, [r4, #21]
 800b070:	1bd2      	subs	r2, r2, r7
 800b072:	1bdb      	subs	r3, r3, r7
 800b074:	60a2      	str	r2, [r4, #8]
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	f080 0001 	eor.w	r0, r0, #1
 800b07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b080:	68a3      	ldr	r3, [r4, #8]
 800b082:	789b      	ldrb	r3, [r3, #2]
 800b084:	706b      	strb	r3, [r5, #1]
 800b086:	1cab      	adds	r3, r5, #2
 800b088:	68a2      	ldr	r2, [r4, #8]
 800b08a:	7852      	ldrb	r2, [r2, #1]
 800b08c:	f803 2b01 	strb.w	r2, [r3], #1
 800b090:	68a2      	ldr	r2, [r4, #8]
 800b092:	7812      	ldrb	r2, [r2, #0]
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	e7b4      	b.n	800b002 <ucdr_deserialize_uint32_t+0x72>
 800b098:	4631      	mov	r1, r6
 800b09a:	463a      	mov	r2, r7
 800b09c:	4628      	mov	r0, r5
 800b09e:	f00d fcbe 	bl	8018a1e <memcpy>
 800b0a2:	68a1      	ldr	r1, [r4, #8]
 800b0a4:	464a      	mov	r2, r9
 800b0a6:	19e8      	adds	r0, r5, r7
 800b0a8:	f00d fcb9 	bl	8018a1e <memcpy>
 800b0ac:	e7a9      	b.n	800b002 <ucdr_deserialize_uint32_t+0x72>
 800b0ae:	bf00      	nop

0800b0b0 <ucdr_deserialize_endian_uint32_t>:
 800b0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	460e      	mov	r6, r1
 800b0b6:	2104      	movs	r1, #4
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	4615      	mov	r5, r2
 800b0bc:	f000 ff10 	bl	800bee0 <ucdr_buffer_alignment>
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b0c8:	f000 ff4e 	bl	800bf68 <ucdr_advance_buffer>
 800b0cc:	2104      	movs	r1, #4
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 fea6 	bl	800be20 <ucdr_check_buffer_available_for>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d13c      	bne.n	800b152 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b0d8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b0dc:	42bb      	cmp	r3, r7
 800b0de:	d933      	bls.n	800b148 <ucdr_deserialize_endian_uint32_t+0x98>
 800b0e0:	eba3 0807 	sub.w	r8, r3, r7
 800b0e4:	60a3      	str	r3, [r4, #8]
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	f1c8 0a04 	rsb	sl, r8, #4
 800b0ec:	4443      	add	r3, r8
 800b0ee:	6123      	str	r3, [r4, #16]
 800b0f0:	4651      	mov	r1, sl
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fea0 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d048      	beq.n	800b18e <ucdr_deserialize_endian_uint32_t+0xde>
 800b0fc:	2e01      	cmp	r6, #1
 800b0fe:	d061      	beq.n	800b1c4 <ucdr_deserialize_endian_uint32_t+0x114>
 800b100:	78fb      	ldrb	r3, [r7, #3]
 800b102:	702b      	strb	r3, [r5, #0]
 800b104:	f1b8 0f00 	cmp.w	r8, #0
 800b108:	d050      	beq.n	800b1ac <ucdr_deserialize_endian_uint32_t+0xfc>
 800b10a:	78bb      	ldrb	r3, [r7, #2]
 800b10c:	706b      	strb	r3, [r5, #1]
 800b10e:	f1b8 0f01 	cmp.w	r8, #1
 800b112:	f105 0302 	add.w	r3, r5, #2
 800b116:	d04d      	beq.n	800b1b4 <ucdr_deserialize_endian_uint32_t+0x104>
 800b118:	787b      	ldrb	r3, [r7, #1]
 800b11a:	70ab      	strb	r3, [r5, #2]
 800b11c:	f1b8 0f02 	cmp.w	r8, #2
 800b120:	f105 0303 	add.w	r3, r5, #3
 800b124:	d04a      	beq.n	800b1bc <ucdr_deserialize_endian_uint32_t+0x10c>
 800b126:	783b      	ldrb	r3, [r7, #0]
 800b128:	70eb      	strb	r3, [r5, #3]
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	68a2      	ldr	r2, [r4, #8]
 800b12e:	7da0      	ldrb	r0, [r4, #22]
 800b130:	2104      	movs	r1, #4
 800b132:	3304      	adds	r3, #4
 800b134:	4452      	add	r2, sl
 800b136:	eba3 0308 	sub.w	r3, r3, r8
 800b13a:	7561      	strb	r1, [r4, #21]
 800b13c:	60a2      	str	r2, [r4, #8]
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	f080 0001 	eor.w	r0, r0, #1
 800b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b148:	2104      	movs	r1, #4
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 fe74 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b150:	b1a8      	cbz	r0, 800b17e <ucdr_deserialize_endian_uint32_t+0xce>
 800b152:	2e01      	cmp	r6, #1
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	d017      	beq.n	800b188 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b158:	78db      	ldrb	r3, [r3, #3]
 800b15a:	702b      	strb	r3, [r5, #0]
 800b15c:	68a3      	ldr	r3, [r4, #8]
 800b15e:	789b      	ldrb	r3, [r3, #2]
 800b160:	706b      	strb	r3, [r5, #1]
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	70ab      	strb	r3, [r5, #2]
 800b168:	68a3      	ldr	r3, [r4, #8]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	70eb      	strb	r3, [r5, #3]
 800b16e:	68a2      	ldr	r2, [r4, #8]
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	3204      	adds	r2, #4
 800b174:	3304      	adds	r3, #4
 800b176:	2104      	movs	r1, #4
 800b178:	60a2      	str	r2, [r4, #8]
 800b17a:	6123      	str	r3, [r4, #16]
 800b17c:	7561      	strb	r1, [r4, #21]
 800b17e:	7da0      	ldrb	r0, [r4, #22]
 800b180:	f080 0001 	eor.w	r0, r0, #1
 800b184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	e7ef      	b.n	800b16e <ucdr_deserialize_endian_uint32_t+0xbe>
 800b18e:	68a2      	ldr	r2, [r4, #8]
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	7da0      	ldrb	r0, [r4, #22]
 800b194:	f884 9015 	strb.w	r9, [r4, #21]
 800b198:	eba2 0208 	sub.w	r2, r2, r8
 800b19c:	eba3 0308 	sub.w	r3, r3, r8
 800b1a0:	60a2      	str	r2, [r4, #8]
 800b1a2:	6123      	str	r3, [r4, #16]
 800b1a4:	f080 0001 	eor.w	r0, r0, #1
 800b1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ac:	68a3      	ldr	r3, [r4, #8]
 800b1ae:	789b      	ldrb	r3, [r3, #2]
 800b1b0:	706b      	strb	r3, [r5, #1]
 800b1b2:	1cab      	adds	r3, r5, #2
 800b1b4:	68a2      	ldr	r2, [r4, #8]
 800b1b6:	7852      	ldrb	r2, [r2, #1]
 800b1b8:	f803 2b01 	strb.w	r2, [r3], #1
 800b1bc:	68a2      	ldr	r2, [r4, #8]
 800b1be:	7812      	ldrb	r2, [r2, #0]
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	e7b2      	b.n	800b12a <ucdr_deserialize_endian_uint32_t+0x7a>
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	4642      	mov	r2, r8
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f00d fc28 	bl	8018a1e <memcpy>
 800b1ce:	68a1      	ldr	r1, [r4, #8]
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	eb05 0008 	add.w	r0, r5, r8
 800b1d6:	f00d fc22 	bl	8018a1e <memcpy>
 800b1da:	e7a6      	b.n	800b12a <ucdr_deserialize_endian_uint32_t+0x7a>

0800b1dc <ucdr_serialize_uint64_t>:
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	2108      	movs	r1, #8
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	e9cd 2300 	strd	r2, r3, [sp]
 800b1ea:	f000 fe79 	bl	800bee0 <ucdr_buffer_alignment>
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	7d67      	ldrb	r7, [r4, #21]
 800b1f4:	f000 feb8 	bl	800bf68 <ucdr_advance_buffer>
 800b1f8:	2108      	movs	r1, #8
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fe10 	bl	800be20 <ucdr_check_buffer_available_for>
 800b200:	2800      	cmp	r0, #0
 800b202:	d14e      	bne.n	800b2a2 <ucdr_serialize_uint64_t+0xc6>
 800b204:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b208:	42ab      	cmp	r3, r5
 800b20a:	d945      	bls.n	800b298 <ucdr_serialize_uint64_t+0xbc>
 800b20c:	1b5e      	subs	r6, r3, r5
 800b20e:	60a3      	str	r3, [r4, #8]
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	f1c6 0808 	rsb	r8, r6, #8
 800b216:	4433      	add	r3, r6
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	4641      	mov	r1, r8
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fe0b 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b222:	2800      	cmp	r0, #0
 800b224:	d074      	beq.n	800b310 <ucdr_serialize_uint64_t+0x134>
 800b226:	7d23      	ldrb	r3, [r4, #20]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	f000 809b 	beq.w	800b364 <ucdr_serialize_uint64_t+0x188>
 800b22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b232:	702b      	strb	r3, [r5, #0]
 800b234:	2e00      	cmp	r6, #0
 800b236:	d078      	beq.n	800b32a <ucdr_serialize_uint64_t+0x14e>
 800b238:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b23c:	706b      	strb	r3, [r5, #1]
 800b23e:	2e01      	cmp	r6, #1
 800b240:	d077      	beq.n	800b332 <ucdr_serialize_uint64_t+0x156>
 800b242:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b246:	70ab      	strb	r3, [r5, #2]
 800b248:	2e02      	cmp	r6, #2
 800b24a:	d076      	beq.n	800b33a <ucdr_serialize_uint64_t+0x15e>
 800b24c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b250:	70eb      	strb	r3, [r5, #3]
 800b252:	2e03      	cmp	r6, #3
 800b254:	d075      	beq.n	800b342 <ucdr_serialize_uint64_t+0x166>
 800b256:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b25a:	712b      	strb	r3, [r5, #4]
 800b25c:	2e04      	cmp	r6, #4
 800b25e:	d074      	beq.n	800b34a <ucdr_serialize_uint64_t+0x16e>
 800b260:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b264:	716b      	strb	r3, [r5, #5]
 800b266:	2e05      	cmp	r6, #5
 800b268:	d073      	beq.n	800b352 <ucdr_serialize_uint64_t+0x176>
 800b26a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b26e:	71ab      	strb	r3, [r5, #6]
 800b270:	2e06      	cmp	r6, #6
 800b272:	d072      	beq.n	800b35a <ucdr_serialize_uint64_t+0x17e>
 800b274:	f89d 3000 	ldrb.w	r3, [sp]
 800b278:	71eb      	strb	r3, [r5, #7]
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	68a2      	ldr	r2, [r4, #8]
 800b27e:	7da0      	ldrb	r0, [r4, #22]
 800b280:	3308      	adds	r3, #8
 800b282:	1b9e      	subs	r6, r3, r6
 800b284:	4442      	add	r2, r8
 800b286:	2308      	movs	r3, #8
 800b288:	f080 0001 	eor.w	r0, r0, #1
 800b28c:	60a2      	str	r2, [r4, #8]
 800b28e:	6126      	str	r6, [r4, #16]
 800b290:	7563      	strb	r3, [r4, #21]
 800b292:	b002      	add	sp, #8
 800b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b298:	2108      	movs	r1, #8
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 fdcc 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b2a0:	b350      	cbz	r0, 800b2f8 <ucdr_serialize_uint64_t+0x11c>
 800b2a2:	7d23      	ldrb	r3, [r4, #20]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d02d      	beq.n	800b304 <ucdr_serialize_uint64_t+0x128>
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b2ae:	701a      	strb	r2, [r3, #0]
 800b2b0:	68a3      	ldr	r3, [r4, #8]
 800b2b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2b6:	705a      	strb	r2, [r3, #1]
 800b2b8:	68a3      	ldr	r3, [r4, #8]
 800b2ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2be:	709a      	strb	r2, [r3, #2]
 800b2c0:	68a3      	ldr	r3, [r4, #8]
 800b2c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2c6:	70da      	strb	r2, [r3, #3]
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b2ce:	711a      	strb	r2, [r3, #4]
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b2d6:	715a      	strb	r2, [r3, #5]
 800b2d8:	68a3      	ldr	r3, [r4, #8]
 800b2da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b2de:	719a      	strb	r2, [r3, #6]
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	f89d 2000 	ldrb.w	r2, [sp]
 800b2e6:	71da      	strb	r2, [r3, #7]
 800b2e8:	68a2      	ldr	r2, [r4, #8]
 800b2ea:	6923      	ldr	r3, [r4, #16]
 800b2ec:	3208      	adds	r2, #8
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	2108      	movs	r1, #8
 800b2f2:	60a2      	str	r2, [r4, #8]
 800b2f4:	6123      	str	r3, [r4, #16]
 800b2f6:	7561      	strb	r1, [r4, #21]
 800b2f8:	7da0      	ldrb	r0, [r4, #22]
 800b2fa:	f080 0001 	eor.w	r0, r0, #1
 800b2fe:	b002      	add	sp, #8
 800b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b304:	466b      	mov	r3, sp
 800b306:	cb03      	ldmia	r3!, {r0, r1}
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	6018      	str	r0, [r3, #0]
 800b30c:	6059      	str	r1, [r3, #4]
 800b30e:	e7eb      	b.n	800b2e8 <ucdr_serialize_uint64_t+0x10c>
 800b310:	68a2      	ldr	r2, [r4, #8]
 800b312:	6923      	ldr	r3, [r4, #16]
 800b314:	7da0      	ldrb	r0, [r4, #22]
 800b316:	7567      	strb	r7, [r4, #21]
 800b318:	1b92      	subs	r2, r2, r6
 800b31a:	1b9b      	subs	r3, r3, r6
 800b31c:	f080 0001 	eor.w	r0, r0, #1
 800b320:	60a2      	str	r2, [r4, #8]
 800b322:	6123      	str	r3, [r4, #16]
 800b324:	b002      	add	sp, #8
 800b326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32a:	68a3      	ldr	r3, [r4, #8]
 800b32c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b338:	701a      	strb	r2, [r3, #0]
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	68a3      	ldr	r3, [r4, #8]
 800b344:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	68a3      	ldr	r3, [r4, #8]
 800b35c:	f89d 2000 	ldrb.w	r2, [sp]
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	e78a      	b.n	800b27a <ucdr_serialize_uint64_t+0x9e>
 800b364:	4628      	mov	r0, r5
 800b366:	466d      	mov	r5, sp
 800b368:	4629      	mov	r1, r5
 800b36a:	4632      	mov	r2, r6
 800b36c:	f00d fb57 	bl	8018a1e <memcpy>
 800b370:	68a0      	ldr	r0, [r4, #8]
 800b372:	4642      	mov	r2, r8
 800b374:	19a9      	adds	r1, r5, r6
 800b376:	f00d fb52 	bl	8018a1e <memcpy>
 800b37a:	e77e      	b.n	800b27a <ucdr_serialize_uint64_t+0x9e>

0800b37c <ucdr_serialize_int16_t>:
 800b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	460b      	mov	r3, r1
 800b384:	2102      	movs	r1, #2
 800b386:	4604      	mov	r4, r0
 800b388:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b38c:	f000 fda8 	bl	800bee0 <ucdr_buffer_alignment>
 800b390:	4601      	mov	r1, r0
 800b392:	4620      	mov	r0, r4
 800b394:	7d67      	ldrb	r7, [r4, #21]
 800b396:	f000 fde7 	bl	800bf68 <ucdr_advance_buffer>
 800b39a:	2102      	movs	r1, #2
 800b39c:	4620      	mov	r0, r4
 800b39e:	f000 fd3f 	bl	800be20 <ucdr_check_buffer_available_for>
 800b3a2:	bb78      	cbnz	r0, 800b404 <ucdr_serialize_int16_t+0x88>
 800b3a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	d926      	bls.n	800b3fa <ucdr_serialize_int16_t+0x7e>
 800b3ac:	1b5e      	subs	r6, r3, r5
 800b3ae:	60a3      	str	r3, [r4, #8]
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	f1c6 0802 	rsb	r8, r6, #2
 800b3b6:	4433      	add	r3, r6
 800b3b8:	6123      	str	r3, [r4, #16]
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 fd3b 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d03b      	beq.n	800b43e <ucdr_serialize_int16_t+0xc2>
 800b3c6:	7d23      	ldrb	r3, [r4, #20]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d04a      	beq.n	800b462 <ucdr_serialize_int16_t+0xe6>
 800b3cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3d0:	702b      	strb	r3, [r5, #0]
 800b3d2:	2e00      	cmp	r6, #0
 800b3d4:	d040      	beq.n	800b458 <ucdr_serialize_int16_t+0xdc>
 800b3d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3da:	706b      	strb	r3, [r5, #1]
 800b3dc:	6923      	ldr	r3, [r4, #16]
 800b3de:	68a2      	ldr	r2, [r4, #8]
 800b3e0:	7da0      	ldrb	r0, [r4, #22]
 800b3e2:	3302      	adds	r3, #2
 800b3e4:	1b9e      	subs	r6, r3, r6
 800b3e6:	4442      	add	r2, r8
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	f080 0001 	eor.w	r0, r0, #1
 800b3ee:	60a2      	str	r2, [r4, #8]
 800b3f0:	6126      	str	r6, [r4, #16]
 800b3f2:	7563      	strb	r3, [r4, #21]
 800b3f4:	b002      	add	sp, #8
 800b3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fa:	2102      	movs	r1, #2
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f000 fd1b 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b402:	b190      	cbz	r0, 800b42a <ucdr_serialize_int16_t+0xae>
 800b404:	7d23      	ldrb	r3, [r4, #20]
 800b406:	2b01      	cmp	r3, #1
 800b408:	68a3      	ldr	r3, [r4, #8]
 800b40a:	d014      	beq.n	800b436 <ucdr_serialize_int16_t+0xba>
 800b40c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b410:	701a      	strb	r2, [r3, #0]
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b418:	705a      	strb	r2, [r3, #1]
 800b41a:	68a2      	ldr	r2, [r4, #8]
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	3202      	adds	r2, #2
 800b420:	3302      	adds	r3, #2
 800b422:	2102      	movs	r1, #2
 800b424:	60a2      	str	r2, [r4, #8]
 800b426:	6123      	str	r3, [r4, #16]
 800b428:	7561      	strb	r1, [r4, #21]
 800b42a:	7da0      	ldrb	r0, [r4, #22]
 800b42c:	f080 0001 	eor.w	r0, r0, #1
 800b430:	b002      	add	sp, #8
 800b432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b436:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b43a:	801a      	strh	r2, [r3, #0]
 800b43c:	e7ed      	b.n	800b41a <ucdr_serialize_int16_t+0x9e>
 800b43e:	68a2      	ldr	r2, [r4, #8]
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	7da0      	ldrb	r0, [r4, #22]
 800b444:	7567      	strb	r7, [r4, #21]
 800b446:	1b92      	subs	r2, r2, r6
 800b448:	1b9b      	subs	r3, r3, r6
 800b44a:	f080 0001 	eor.w	r0, r0, #1
 800b44e:	60a2      	str	r2, [r4, #8]
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	b002      	add	sp, #8
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	68a3      	ldr	r3, [r4, #8]
 800b45a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b45e:	701a      	strb	r2, [r3, #0]
 800b460:	e7bc      	b.n	800b3dc <ucdr_serialize_int16_t+0x60>
 800b462:	4628      	mov	r0, r5
 800b464:	f10d 0506 	add.w	r5, sp, #6
 800b468:	4629      	mov	r1, r5
 800b46a:	4632      	mov	r2, r6
 800b46c:	f00d fad7 	bl	8018a1e <memcpy>
 800b470:	68a0      	ldr	r0, [r4, #8]
 800b472:	4642      	mov	r2, r8
 800b474:	19a9      	adds	r1, r5, r6
 800b476:	f00d fad2 	bl	8018a1e <memcpy>
 800b47a:	e7af      	b.n	800b3dc <ucdr_serialize_int16_t+0x60>

0800b47c <ucdr_deserialize_int16_t>:
 800b47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b480:	460d      	mov	r5, r1
 800b482:	2102      	movs	r1, #2
 800b484:	4604      	mov	r4, r0
 800b486:	f000 fd2b 	bl	800bee0 <ucdr_buffer_alignment>
 800b48a:	4601      	mov	r1, r0
 800b48c:	4620      	mov	r0, r4
 800b48e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b492:	f000 fd69 	bl	800bf68 <ucdr_advance_buffer>
 800b496:	2102      	movs	r1, #2
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 fcc1 	bl	800be20 <ucdr_check_buffer_available_for>
 800b49e:	bb60      	cbnz	r0, 800b4fa <ucdr_deserialize_int16_t+0x7e>
 800b4a0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b4a4:	42be      	cmp	r6, r7
 800b4a6:	d923      	bls.n	800b4f0 <ucdr_deserialize_int16_t+0x74>
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	60a6      	str	r6, [r4, #8]
 800b4ac:	1bf6      	subs	r6, r6, r7
 800b4ae:	4433      	add	r3, r6
 800b4b0:	f1c6 0902 	rsb	r9, r6, #2
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fcbd 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d034      	beq.n	800b52c <ucdr_deserialize_int16_t+0xb0>
 800b4c2:	7d23      	ldrb	r3, [r4, #20]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d042      	beq.n	800b54e <ucdr_deserialize_int16_t+0xd2>
 800b4c8:	787b      	ldrb	r3, [r7, #1]
 800b4ca:	702b      	strb	r3, [r5, #0]
 800b4cc:	2e00      	cmp	r6, #0
 800b4ce:	d03a      	beq.n	800b546 <ucdr_deserialize_int16_t+0xca>
 800b4d0:	783b      	ldrb	r3, [r7, #0]
 800b4d2:	706b      	strb	r3, [r5, #1]
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	68a2      	ldr	r2, [r4, #8]
 800b4d8:	7da0      	ldrb	r0, [r4, #22]
 800b4da:	2102      	movs	r1, #2
 800b4dc:	3302      	adds	r3, #2
 800b4de:	444a      	add	r2, r9
 800b4e0:	1b9b      	subs	r3, r3, r6
 800b4e2:	7561      	strb	r1, [r4, #21]
 800b4e4:	60a2      	str	r2, [r4, #8]
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	f080 0001 	eor.w	r0, r0, #1
 800b4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f0:	2102      	movs	r1, #2
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fca0 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b4f8:	b180      	cbz	r0, 800b51c <ucdr_deserialize_int16_t+0xa0>
 800b4fa:	7d23      	ldrb	r3, [r4, #20]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	d011      	beq.n	800b526 <ucdr_deserialize_int16_t+0xaa>
 800b502:	785b      	ldrb	r3, [r3, #1]
 800b504:	702b      	strb	r3, [r5, #0]
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	706b      	strb	r3, [r5, #1]
 800b50c:	68a2      	ldr	r2, [r4, #8]
 800b50e:	6923      	ldr	r3, [r4, #16]
 800b510:	3202      	adds	r2, #2
 800b512:	3302      	adds	r3, #2
 800b514:	2102      	movs	r1, #2
 800b516:	60a2      	str	r2, [r4, #8]
 800b518:	6123      	str	r3, [r4, #16]
 800b51a:	7561      	strb	r1, [r4, #21]
 800b51c:	7da0      	ldrb	r0, [r4, #22]
 800b51e:	f080 0001 	eor.w	r0, r0, #1
 800b522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	802b      	strh	r3, [r5, #0]
 800b52a:	e7ef      	b.n	800b50c <ucdr_deserialize_int16_t+0x90>
 800b52c:	68a2      	ldr	r2, [r4, #8]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	7da0      	ldrb	r0, [r4, #22]
 800b532:	f884 8015 	strb.w	r8, [r4, #21]
 800b536:	1b92      	subs	r2, r2, r6
 800b538:	1b9b      	subs	r3, r3, r6
 800b53a:	60a2      	str	r2, [r4, #8]
 800b53c:	6123      	str	r3, [r4, #16]
 800b53e:	f080 0001 	eor.w	r0, r0, #1
 800b542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b546:	68a3      	ldr	r3, [r4, #8]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	706b      	strb	r3, [r5, #1]
 800b54c:	e7c2      	b.n	800b4d4 <ucdr_deserialize_int16_t+0x58>
 800b54e:	4639      	mov	r1, r7
 800b550:	4632      	mov	r2, r6
 800b552:	4628      	mov	r0, r5
 800b554:	f00d fa63 	bl	8018a1e <memcpy>
 800b558:	68a1      	ldr	r1, [r4, #8]
 800b55a:	464a      	mov	r2, r9
 800b55c:	19a8      	adds	r0, r5, r6
 800b55e:	f00d fa5e 	bl	8018a1e <memcpy>
 800b562:	e7b7      	b.n	800b4d4 <ucdr_deserialize_int16_t+0x58>

0800b564 <ucdr_serialize_int32_t>:
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	4604      	mov	r4, r0
 800b56c:	9101      	str	r1, [sp, #4]
 800b56e:	2104      	movs	r1, #4
 800b570:	f000 fcb6 	bl	800bee0 <ucdr_buffer_alignment>
 800b574:	4601      	mov	r1, r0
 800b576:	4620      	mov	r0, r4
 800b578:	7d67      	ldrb	r7, [r4, #21]
 800b57a:	f000 fcf5 	bl	800bf68 <ucdr_advance_buffer>
 800b57e:	2104      	movs	r1, #4
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fc4d 	bl	800be20 <ucdr_check_buffer_available_for>
 800b586:	2800      	cmp	r0, #0
 800b588:	d139      	bne.n	800b5fe <ucdr_serialize_int32_t+0x9a>
 800b58a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b58e:	42ab      	cmp	r3, r5
 800b590:	d930      	bls.n	800b5f4 <ucdr_serialize_int32_t+0x90>
 800b592:	1b5e      	subs	r6, r3, r5
 800b594:	60a3      	str	r3, [r4, #8]
 800b596:	6923      	ldr	r3, [r4, #16]
 800b598:	f1c6 0804 	rsb	r8, r6, #4
 800b59c:	4433      	add	r3, r6
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	4641      	mov	r1, r8
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 fc48 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d04c      	beq.n	800b646 <ucdr_serialize_int32_t+0xe2>
 800b5ac:	7d23      	ldrb	r3, [r4, #20]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d063      	beq.n	800b67a <ucdr_serialize_int32_t+0x116>
 800b5b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5b6:	702b      	strb	r3, [r5, #0]
 800b5b8:	2e00      	cmp	r6, #0
 800b5ba:	d051      	beq.n	800b660 <ucdr_serialize_int32_t+0xfc>
 800b5bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b5c0:	706b      	strb	r3, [r5, #1]
 800b5c2:	2e01      	cmp	r6, #1
 800b5c4:	d050      	beq.n	800b668 <ucdr_serialize_int32_t+0x104>
 800b5c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b5ca:	70ab      	strb	r3, [r5, #2]
 800b5cc:	2e02      	cmp	r6, #2
 800b5ce:	d04f      	beq.n	800b670 <ucdr_serialize_int32_t+0x10c>
 800b5d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b5d4:	70eb      	strb	r3, [r5, #3]
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	68a2      	ldr	r2, [r4, #8]
 800b5da:	7da0      	ldrb	r0, [r4, #22]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	1b9e      	subs	r6, r3, r6
 800b5e0:	4442      	add	r2, r8
 800b5e2:	2304      	movs	r3, #4
 800b5e4:	f080 0001 	eor.w	r0, r0, #1
 800b5e8:	60a2      	str	r2, [r4, #8]
 800b5ea:	6126      	str	r6, [r4, #16]
 800b5ec:	7563      	strb	r3, [r4, #21]
 800b5ee:	b002      	add	sp, #8
 800b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f4:	2104      	movs	r1, #4
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 fc1e 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b5fc:	b1d0      	cbz	r0, 800b634 <ucdr_serialize_int32_t+0xd0>
 800b5fe:	7d23      	ldrb	r3, [r4, #20]
 800b600:	2b01      	cmp	r3, #1
 800b602:	68a3      	ldr	r3, [r4, #8]
 800b604:	d01c      	beq.n	800b640 <ucdr_serialize_int32_t+0xdc>
 800b606:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b60a:	701a      	strb	r2, [r3, #0]
 800b60c:	68a3      	ldr	r3, [r4, #8]
 800b60e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b612:	705a      	strb	r2, [r3, #1]
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b61a:	709a      	strb	r2, [r3, #2]
 800b61c:	68a3      	ldr	r3, [r4, #8]
 800b61e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b622:	70da      	strb	r2, [r3, #3]
 800b624:	68a2      	ldr	r2, [r4, #8]
 800b626:	6923      	ldr	r3, [r4, #16]
 800b628:	3204      	adds	r2, #4
 800b62a:	3304      	adds	r3, #4
 800b62c:	2104      	movs	r1, #4
 800b62e:	60a2      	str	r2, [r4, #8]
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	7561      	strb	r1, [r4, #21]
 800b634:	7da0      	ldrb	r0, [r4, #22]
 800b636:	f080 0001 	eor.w	r0, r0, #1
 800b63a:	b002      	add	sp, #8
 800b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b640:	9a01      	ldr	r2, [sp, #4]
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	e7ee      	b.n	800b624 <ucdr_serialize_int32_t+0xc0>
 800b646:	68a2      	ldr	r2, [r4, #8]
 800b648:	6923      	ldr	r3, [r4, #16]
 800b64a:	7da0      	ldrb	r0, [r4, #22]
 800b64c:	7567      	strb	r7, [r4, #21]
 800b64e:	1b92      	subs	r2, r2, r6
 800b650:	1b9b      	subs	r3, r3, r6
 800b652:	f080 0001 	eor.w	r0, r0, #1
 800b656:	60a2      	str	r2, [r4, #8]
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	b002      	add	sp, #8
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	68a3      	ldr	r3, [r4, #8]
 800b662:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	68a3      	ldr	r3, [r4, #8]
 800b66a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b676:	701a      	strb	r2, [r3, #0]
 800b678:	e7ad      	b.n	800b5d6 <ucdr_serialize_int32_t+0x72>
 800b67a:	4628      	mov	r0, r5
 800b67c:	ad01      	add	r5, sp, #4
 800b67e:	4629      	mov	r1, r5
 800b680:	4632      	mov	r2, r6
 800b682:	f00d f9cc 	bl	8018a1e <memcpy>
 800b686:	68a0      	ldr	r0, [r4, #8]
 800b688:	4642      	mov	r2, r8
 800b68a:	19a9      	adds	r1, r5, r6
 800b68c:	f00d f9c7 	bl	8018a1e <memcpy>
 800b690:	e7a1      	b.n	800b5d6 <ucdr_serialize_int32_t+0x72>
 800b692:	bf00      	nop

0800b694 <ucdr_deserialize_int32_t>:
 800b694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b698:	460d      	mov	r5, r1
 800b69a:	2104      	movs	r1, #4
 800b69c:	4604      	mov	r4, r0
 800b69e:	f000 fc1f 	bl	800bee0 <ucdr_buffer_alignment>
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b6aa:	f000 fc5d 	bl	800bf68 <ucdr_advance_buffer>
 800b6ae:	2104      	movs	r1, #4
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fbb5 	bl	800be20 <ucdr_check_buffer_available_for>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d138      	bne.n	800b72c <ucdr_deserialize_int32_t+0x98>
 800b6ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b6be:	42b7      	cmp	r7, r6
 800b6c0:	d92f      	bls.n	800b722 <ucdr_deserialize_int32_t+0x8e>
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	60a7      	str	r7, [r4, #8]
 800b6c6:	1bbf      	subs	r7, r7, r6
 800b6c8:	443b      	add	r3, r7
 800b6ca:	f1c7 0904 	rsb	r9, r7, #4
 800b6ce:	6123      	str	r3, [r4, #16]
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 fbb0 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d046      	beq.n	800b76a <ucdr_deserialize_int32_t+0xd6>
 800b6dc:	7d23      	ldrb	r3, [r4, #20]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d05c      	beq.n	800b79c <ucdr_deserialize_int32_t+0x108>
 800b6e2:	78f3      	ldrb	r3, [r6, #3]
 800b6e4:	702b      	strb	r3, [r5, #0]
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	d04c      	beq.n	800b784 <ucdr_deserialize_int32_t+0xf0>
 800b6ea:	78b3      	ldrb	r3, [r6, #2]
 800b6ec:	706b      	strb	r3, [r5, #1]
 800b6ee:	2f01      	cmp	r7, #1
 800b6f0:	f105 0302 	add.w	r3, r5, #2
 800b6f4:	d04a      	beq.n	800b78c <ucdr_deserialize_int32_t+0xf8>
 800b6f6:	7873      	ldrb	r3, [r6, #1]
 800b6f8:	70ab      	strb	r3, [r5, #2]
 800b6fa:	2f02      	cmp	r7, #2
 800b6fc:	f105 0303 	add.w	r3, r5, #3
 800b700:	d048      	beq.n	800b794 <ucdr_deserialize_int32_t+0x100>
 800b702:	7833      	ldrb	r3, [r6, #0]
 800b704:	70eb      	strb	r3, [r5, #3]
 800b706:	6923      	ldr	r3, [r4, #16]
 800b708:	68a2      	ldr	r2, [r4, #8]
 800b70a:	7da0      	ldrb	r0, [r4, #22]
 800b70c:	2104      	movs	r1, #4
 800b70e:	3304      	adds	r3, #4
 800b710:	444a      	add	r2, r9
 800b712:	1bdb      	subs	r3, r3, r7
 800b714:	7561      	strb	r1, [r4, #21]
 800b716:	60a2      	str	r2, [r4, #8]
 800b718:	6123      	str	r3, [r4, #16]
 800b71a:	f080 0001 	eor.w	r0, r0, #1
 800b71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b722:	2104      	movs	r1, #4
 800b724:	4620      	mov	r0, r4
 800b726:	f000 fb87 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b72a:	b1b0      	cbz	r0, 800b75a <ucdr_deserialize_int32_t+0xc6>
 800b72c:	7d23      	ldrb	r3, [r4, #20]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	68a3      	ldr	r3, [r4, #8]
 800b732:	d017      	beq.n	800b764 <ucdr_deserialize_int32_t+0xd0>
 800b734:	78db      	ldrb	r3, [r3, #3]
 800b736:	702b      	strb	r3, [r5, #0]
 800b738:	68a3      	ldr	r3, [r4, #8]
 800b73a:	789b      	ldrb	r3, [r3, #2]
 800b73c:	706b      	strb	r3, [r5, #1]
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	785b      	ldrb	r3, [r3, #1]
 800b742:	70ab      	strb	r3, [r5, #2]
 800b744:	68a3      	ldr	r3, [r4, #8]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	70eb      	strb	r3, [r5, #3]
 800b74a:	68a2      	ldr	r2, [r4, #8]
 800b74c:	6923      	ldr	r3, [r4, #16]
 800b74e:	3204      	adds	r2, #4
 800b750:	3304      	adds	r3, #4
 800b752:	2104      	movs	r1, #4
 800b754:	60a2      	str	r2, [r4, #8]
 800b756:	6123      	str	r3, [r4, #16]
 800b758:	7561      	strb	r1, [r4, #21]
 800b75a:	7da0      	ldrb	r0, [r4, #22]
 800b75c:	f080 0001 	eor.w	r0, r0, #1
 800b760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	602b      	str	r3, [r5, #0]
 800b768:	e7ef      	b.n	800b74a <ucdr_deserialize_int32_t+0xb6>
 800b76a:	68a2      	ldr	r2, [r4, #8]
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	7da0      	ldrb	r0, [r4, #22]
 800b770:	f884 8015 	strb.w	r8, [r4, #21]
 800b774:	1bd2      	subs	r2, r2, r7
 800b776:	1bdb      	subs	r3, r3, r7
 800b778:	60a2      	str	r2, [r4, #8]
 800b77a:	6123      	str	r3, [r4, #16]
 800b77c:	f080 0001 	eor.w	r0, r0, #1
 800b780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	789b      	ldrb	r3, [r3, #2]
 800b788:	706b      	strb	r3, [r5, #1]
 800b78a:	1cab      	adds	r3, r5, #2
 800b78c:	68a2      	ldr	r2, [r4, #8]
 800b78e:	7852      	ldrb	r2, [r2, #1]
 800b790:	f803 2b01 	strb.w	r2, [r3], #1
 800b794:	68a2      	ldr	r2, [r4, #8]
 800b796:	7812      	ldrb	r2, [r2, #0]
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	e7b4      	b.n	800b706 <ucdr_deserialize_int32_t+0x72>
 800b79c:	4631      	mov	r1, r6
 800b79e:	463a      	mov	r2, r7
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	f00d f93c 	bl	8018a1e <memcpy>
 800b7a6:	68a1      	ldr	r1, [r4, #8]
 800b7a8:	464a      	mov	r2, r9
 800b7aa:	19e8      	adds	r0, r5, r7
 800b7ac:	f00d f937 	bl	8018a1e <memcpy>
 800b7b0:	e7a9      	b.n	800b706 <ucdr_deserialize_int32_t+0x72>
 800b7b2:	bf00      	nop

0800b7b4 <ucdr_serialize_double>:
 800b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	2108      	movs	r1, #8
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	4604      	mov	r4, r0
 800b7be:	ed8d 0b00 	vstr	d0, [sp]
 800b7c2:	f000 fb8d 	bl	800bee0 <ucdr_buffer_alignment>
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	7d67      	ldrb	r7, [r4, #21]
 800b7cc:	f000 fbcc 	bl	800bf68 <ucdr_advance_buffer>
 800b7d0:	2108      	movs	r1, #8
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 fb24 	bl	800be20 <ucdr_check_buffer_available_for>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d14e      	bne.n	800b87a <ucdr_serialize_double+0xc6>
 800b7dc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7e0:	42ab      	cmp	r3, r5
 800b7e2:	d945      	bls.n	800b870 <ucdr_serialize_double+0xbc>
 800b7e4:	1b5e      	subs	r6, r3, r5
 800b7e6:	60a3      	str	r3, [r4, #8]
 800b7e8:	6923      	ldr	r3, [r4, #16]
 800b7ea:	f1c6 0808 	rsb	r8, r6, #8
 800b7ee:	4433      	add	r3, r6
 800b7f0:	6123      	str	r3, [r4, #16]
 800b7f2:	4641      	mov	r1, r8
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fb1f 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d074      	beq.n	800b8e8 <ucdr_serialize_double+0x134>
 800b7fe:	7d23      	ldrb	r3, [r4, #20]
 800b800:	2b01      	cmp	r3, #1
 800b802:	f000 809b 	beq.w	800b93c <ucdr_serialize_double+0x188>
 800b806:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b80a:	702b      	strb	r3, [r5, #0]
 800b80c:	2e00      	cmp	r6, #0
 800b80e:	d078      	beq.n	800b902 <ucdr_serialize_double+0x14e>
 800b810:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b814:	706b      	strb	r3, [r5, #1]
 800b816:	2e01      	cmp	r6, #1
 800b818:	d077      	beq.n	800b90a <ucdr_serialize_double+0x156>
 800b81a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b81e:	70ab      	strb	r3, [r5, #2]
 800b820:	2e02      	cmp	r6, #2
 800b822:	d076      	beq.n	800b912 <ucdr_serialize_double+0x15e>
 800b824:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b828:	70eb      	strb	r3, [r5, #3]
 800b82a:	2e03      	cmp	r6, #3
 800b82c:	d075      	beq.n	800b91a <ucdr_serialize_double+0x166>
 800b82e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b832:	712b      	strb	r3, [r5, #4]
 800b834:	2e04      	cmp	r6, #4
 800b836:	d074      	beq.n	800b922 <ucdr_serialize_double+0x16e>
 800b838:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b83c:	716b      	strb	r3, [r5, #5]
 800b83e:	2e05      	cmp	r6, #5
 800b840:	d073      	beq.n	800b92a <ucdr_serialize_double+0x176>
 800b842:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b846:	71ab      	strb	r3, [r5, #6]
 800b848:	2e06      	cmp	r6, #6
 800b84a:	d072      	beq.n	800b932 <ucdr_serialize_double+0x17e>
 800b84c:	f89d 3000 	ldrb.w	r3, [sp]
 800b850:	71eb      	strb	r3, [r5, #7]
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	68a2      	ldr	r2, [r4, #8]
 800b856:	7da0      	ldrb	r0, [r4, #22]
 800b858:	3308      	adds	r3, #8
 800b85a:	1b9e      	subs	r6, r3, r6
 800b85c:	4442      	add	r2, r8
 800b85e:	2308      	movs	r3, #8
 800b860:	f080 0001 	eor.w	r0, r0, #1
 800b864:	60a2      	str	r2, [r4, #8]
 800b866:	6126      	str	r6, [r4, #16]
 800b868:	7563      	strb	r3, [r4, #21]
 800b86a:	b002      	add	sp, #8
 800b86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b870:	2108      	movs	r1, #8
 800b872:	4620      	mov	r0, r4
 800b874:	f000 fae0 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b878:	b350      	cbz	r0, 800b8d0 <ucdr_serialize_double+0x11c>
 800b87a:	7d23      	ldrb	r3, [r4, #20]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d02d      	beq.n	800b8dc <ucdr_serialize_double+0x128>
 800b880:	68a3      	ldr	r3, [r4, #8]
 800b882:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b886:	701a      	strb	r2, [r3, #0]
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b88e:	705a      	strb	r2, [r3, #1]
 800b890:	68a3      	ldr	r3, [r4, #8]
 800b892:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b896:	709a      	strb	r2, [r3, #2]
 800b898:	68a3      	ldr	r3, [r4, #8]
 800b89a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b89e:	70da      	strb	r2, [r3, #3]
 800b8a0:	68a3      	ldr	r3, [r4, #8]
 800b8a2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8a6:	711a      	strb	r2, [r3, #4]
 800b8a8:	68a3      	ldr	r3, [r4, #8]
 800b8aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8ae:	715a      	strb	r2, [r3, #5]
 800b8b0:	68a3      	ldr	r3, [r4, #8]
 800b8b2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8b6:	719a      	strb	r2, [r3, #6]
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	f89d 2000 	ldrb.w	r2, [sp]
 800b8be:	71da      	strb	r2, [r3, #7]
 800b8c0:	68a2      	ldr	r2, [r4, #8]
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	3208      	adds	r2, #8
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	2108      	movs	r1, #8
 800b8ca:	60a2      	str	r2, [r4, #8]
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	7561      	strb	r1, [r4, #21]
 800b8d0:	7da0      	ldrb	r0, [r4, #22]
 800b8d2:	f080 0001 	eor.w	r0, r0, #1
 800b8d6:	b002      	add	sp, #8
 800b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8dc:	466b      	mov	r3, sp
 800b8de:	cb03      	ldmia	r3!, {r0, r1}
 800b8e0:	68a3      	ldr	r3, [r4, #8]
 800b8e2:	6018      	str	r0, [r3, #0]
 800b8e4:	6059      	str	r1, [r3, #4]
 800b8e6:	e7eb      	b.n	800b8c0 <ucdr_serialize_double+0x10c>
 800b8e8:	68a2      	ldr	r2, [r4, #8]
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	7da0      	ldrb	r0, [r4, #22]
 800b8ee:	7567      	strb	r7, [r4, #21]
 800b8f0:	1b92      	subs	r2, r2, r6
 800b8f2:	1b9b      	subs	r3, r3, r6
 800b8f4:	f080 0001 	eor.w	r0, r0, #1
 800b8f8:	60a2      	str	r2, [r4, #8]
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	b002      	add	sp, #8
 800b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b902:	68a3      	ldr	r3, [r4, #8]
 800b904:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	68a3      	ldr	r3, [r4, #8]
 800b914:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b918:	701a      	strb	r2, [r3, #0]
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b920:	701a      	strb	r2, [r3, #0]
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b928:	701a      	strb	r2, [r3, #0]
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	f89d 2000 	ldrb.w	r2, [sp]
 800b938:	701a      	strb	r2, [r3, #0]
 800b93a:	e78a      	b.n	800b852 <ucdr_serialize_double+0x9e>
 800b93c:	4628      	mov	r0, r5
 800b93e:	466d      	mov	r5, sp
 800b940:	4629      	mov	r1, r5
 800b942:	4632      	mov	r2, r6
 800b944:	f00d f86b 	bl	8018a1e <memcpy>
 800b948:	68a0      	ldr	r0, [r4, #8]
 800b94a:	4642      	mov	r2, r8
 800b94c:	19a9      	adds	r1, r5, r6
 800b94e:	f00d f866 	bl	8018a1e <memcpy>
 800b952:	e77e      	b.n	800b852 <ucdr_serialize_double+0x9e>

0800b954 <ucdr_serialize_endian_double>:
 800b954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b958:	460e      	mov	r6, r1
 800b95a:	b083      	sub	sp, #12
 800b95c:	2108      	movs	r1, #8
 800b95e:	4604      	mov	r4, r0
 800b960:	ed8d 0b00 	vstr	d0, [sp]
 800b964:	f000 fabc 	bl	800bee0 <ucdr_buffer_alignment>
 800b968:	4601      	mov	r1, r0
 800b96a:	4620      	mov	r0, r4
 800b96c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b970:	f000 fafa 	bl	800bf68 <ucdr_advance_buffer>
 800b974:	2108      	movs	r1, #8
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fa52 	bl	800be20 <ucdr_check_buffer_available_for>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d14d      	bne.n	800ba1c <ucdr_serialize_endian_double+0xc8>
 800b980:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b984:	42bd      	cmp	r5, r7
 800b986:	d944      	bls.n	800ba12 <ucdr_serialize_endian_double+0xbe>
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	60a5      	str	r5, [r4, #8]
 800b98c:	1bed      	subs	r5, r5, r7
 800b98e:	442b      	add	r3, r5
 800b990:	f1c5 0908 	rsb	r9, r5, #8
 800b994:	6123      	str	r3, [r4, #16]
 800b996:	4649      	mov	r1, r9
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 fa4d 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d072      	beq.n	800ba88 <ucdr_serialize_endian_double+0x134>
 800b9a2:	2e01      	cmp	r6, #1
 800b9a4:	f000 809b 	beq.w	800bade <ucdr_serialize_endian_double+0x18a>
 800b9a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9ac:	703b      	strb	r3, [r7, #0]
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	d078      	beq.n	800baa4 <ucdr_serialize_endian_double+0x150>
 800b9b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9b6:	707b      	strb	r3, [r7, #1]
 800b9b8:	2d01      	cmp	r5, #1
 800b9ba:	d077      	beq.n	800baac <ucdr_serialize_endian_double+0x158>
 800b9bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9c0:	70bb      	strb	r3, [r7, #2]
 800b9c2:	2d02      	cmp	r5, #2
 800b9c4:	d076      	beq.n	800bab4 <ucdr_serialize_endian_double+0x160>
 800b9c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9ca:	70fb      	strb	r3, [r7, #3]
 800b9cc:	2d03      	cmp	r5, #3
 800b9ce:	d075      	beq.n	800babc <ucdr_serialize_endian_double+0x168>
 800b9d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b9d4:	713b      	strb	r3, [r7, #4]
 800b9d6:	2d04      	cmp	r5, #4
 800b9d8:	d074      	beq.n	800bac4 <ucdr_serialize_endian_double+0x170>
 800b9da:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b9de:	717b      	strb	r3, [r7, #5]
 800b9e0:	2d05      	cmp	r5, #5
 800b9e2:	d073      	beq.n	800bacc <ucdr_serialize_endian_double+0x178>
 800b9e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b9e8:	71bb      	strb	r3, [r7, #6]
 800b9ea:	2d06      	cmp	r5, #6
 800b9ec:	d072      	beq.n	800bad4 <ucdr_serialize_endian_double+0x180>
 800b9ee:	f89d 3000 	ldrb.w	r3, [sp]
 800b9f2:	71fb      	strb	r3, [r7, #7]
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	68a2      	ldr	r2, [r4, #8]
 800b9f8:	7da0      	ldrb	r0, [r4, #22]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	1b5d      	subs	r5, r3, r5
 800b9fe:	444a      	add	r2, r9
 800ba00:	2308      	movs	r3, #8
 800ba02:	f080 0001 	eor.w	r0, r0, #1
 800ba06:	60a2      	str	r2, [r4, #8]
 800ba08:	6125      	str	r5, [r4, #16]
 800ba0a:	7563      	strb	r3, [r4, #21]
 800ba0c:	b003      	add	sp, #12
 800ba0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba12:	2108      	movs	r1, #8
 800ba14:	4620      	mov	r0, r4
 800ba16:	f000 fa0f 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800ba1a:	b348      	cbz	r0, 800ba70 <ucdr_serialize_endian_double+0x11c>
 800ba1c:	2e01      	cmp	r6, #1
 800ba1e:	d02d      	beq.n	800ba7c <ucdr_serialize_endian_double+0x128>
 800ba20:	68a3      	ldr	r3, [r4, #8]
 800ba22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	68a3      	ldr	r3, [r4, #8]
 800ba2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba2e:	705a      	strb	r2, [r3, #1]
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba36:	709a      	strb	r2, [r3, #2]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba3e:	70da      	strb	r2, [r3, #3]
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba46:	711a      	strb	r2, [r3, #4]
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba4e:	715a      	strb	r2, [r3, #5]
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba56:	719a      	strb	r2, [r3, #6]
 800ba58:	68a3      	ldr	r3, [r4, #8]
 800ba5a:	f89d 2000 	ldrb.w	r2, [sp]
 800ba5e:	71da      	strb	r2, [r3, #7]
 800ba60:	68a2      	ldr	r2, [r4, #8]
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	3208      	adds	r2, #8
 800ba66:	3308      	adds	r3, #8
 800ba68:	2108      	movs	r1, #8
 800ba6a:	60a2      	str	r2, [r4, #8]
 800ba6c:	6123      	str	r3, [r4, #16]
 800ba6e:	7561      	strb	r1, [r4, #21]
 800ba70:	7da0      	ldrb	r0, [r4, #22]
 800ba72:	f080 0001 	eor.w	r0, r0, #1
 800ba76:	b003      	add	sp, #12
 800ba78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba7c:	466b      	mov	r3, sp
 800ba7e:	cb03      	ldmia	r3!, {r0, r1}
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	6018      	str	r0, [r3, #0]
 800ba84:	6059      	str	r1, [r3, #4]
 800ba86:	e7eb      	b.n	800ba60 <ucdr_serialize_endian_double+0x10c>
 800ba88:	68a2      	ldr	r2, [r4, #8]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	7da0      	ldrb	r0, [r4, #22]
 800ba8e:	f884 8015 	strb.w	r8, [r4, #21]
 800ba92:	1b52      	subs	r2, r2, r5
 800ba94:	1b5b      	subs	r3, r3, r5
 800ba96:	f080 0001 	eor.w	r0, r0, #1
 800ba9a:	60a2      	str	r2, [r4, #8]
 800ba9c:	6123      	str	r3, [r4, #16]
 800ba9e:	b003      	add	sp, #12
 800baa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800baaa:	701a      	strb	r2, [r3, #0]
 800baac:	68a3      	ldr	r3, [r4, #8]
 800baae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	68a3      	ldr	r3, [r4, #8]
 800bab6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800baba:	701a      	strb	r2, [r3, #0]
 800babc:	68a3      	ldr	r3, [r4, #8]
 800babe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bac2:	701a      	strb	r2, [r3, #0]
 800bac4:	68a3      	ldr	r3, [r4, #8]
 800bac6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	68a3      	ldr	r3, [r4, #8]
 800bace:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bad2:	701a      	strb	r2, [r3, #0]
 800bad4:	68a3      	ldr	r3, [r4, #8]
 800bad6:	f89d 2000 	ldrb.w	r2, [sp]
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	e78a      	b.n	800b9f4 <ucdr_serialize_endian_double+0xa0>
 800bade:	466e      	mov	r6, sp
 800bae0:	4631      	mov	r1, r6
 800bae2:	462a      	mov	r2, r5
 800bae4:	4638      	mov	r0, r7
 800bae6:	f00c ff9a 	bl	8018a1e <memcpy>
 800baea:	68a0      	ldr	r0, [r4, #8]
 800baec:	464a      	mov	r2, r9
 800baee:	1971      	adds	r1, r6, r5
 800baf0:	f00c ff95 	bl	8018a1e <memcpy>
 800baf4:	e77e      	b.n	800b9f4 <ucdr_serialize_endian_double+0xa0>
 800baf6:	bf00      	nop

0800baf8 <ucdr_deserialize_double>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	460d      	mov	r5, r1
 800bafe:	2108      	movs	r1, #8
 800bb00:	4604      	mov	r4, r0
 800bb02:	f000 f9ed 	bl	800bee0 <ucdr_buffer_alignment>
 800bb06:	4601      	mov	r1, r0
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bb0e:	f000 fa2b 	bl	800bf68 <ucdr_advance_buffer>
 800bb12:	2108      	movs	r1, #8
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 f983 	bl	800be20 <ucdr_check_buffer_available_for>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d151      	bne.n	800bbc2 <ucdr_deserialize_double+0xca>
 800bb1e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bb22:	42be      	cmp	r6, r7
 800bb24:	d948      	bls.n	800bbb8 <ucdr_deserialize_double+0xc0>
 800bb26:	6923      	ldr	r3, [r4, #16]
 800bb28:	60a6      	str	r6, [r4, #8]
 800bb2a:	1bf6      	subs	r6, r6, r7
 800bb2c:	4433      	add	r3, r6
 800bb2e:	f1c6 0808 	rsb	r8, r6, #8
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	4641      	mov	r1, r8
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 f97e 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d06d      	beq.n	800bc1c <ucdr_deserialize_double+0x124>
 800bb40:	7d23      	ldrb	r3, [r4, #20]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	f000 8093 	beq.w	800bc6e <ucdr_deserialize_double+0x176>
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	702b      	strb	r3, [r5, #0]
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	d072      	beq.n	800bc36 <ucdr_deserialize_double+0x13e>
 800bb50:	79bb      	ldrb	r3, [r7, #6]
 800bb52:	706b      	strb	r3, [r5, #1]
 800bb54:	2e01      	cmp	r6, #1
 800bb56:	f105 0302 	add.w	r3, r5, #2
 800bb5a:	d070      	beq.n	800bc3e <ucdr_deserialize_double+0x146>
 800bb5c:	797b      	ldrb	r3, [r7, #5]
 800bb5e:	70ab      	strb	r3, [r5, #2]
 800bb60:	2e02      	cmp	r6, #2
 800bb62:	f105 0303 	add.w	r3, r5, #3
 800bb66:	d06e      	beq.n	800bc46 <ucdr_deserialize_double+0x14e>
 800bb68:	793b      	ldrb	r3, [r7, #4]
 800bb6a:	70eb      	strb	r3, [r5, #3]
 800bb6c:	2e03      	cmp	r6, #3
 800bb6e:	f105 0304 	add.w	r3, r5, #4
 800bb72:	d06c      	beq.n	800bc4e <ucdr_deserialize_double+0x156>
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	712b      	strb	r3, [r5, #4]
 800bb78:	2e04      	cmp	r6, #4
 800bb7a:	f105 0305 	add.w	r3, r5, #5
 800bb7e:	d06a      	beq.n	800bc56 <ucdr_deserialize_double+0x15e>
 800bb80:	78bb      	ldrb	r3, [r7, #2]
 800bb82:	716b      	strb	r3, [r5, #5]
 800bb84:	2e05      	cmp	r6, #5
 800bb86:	f105 0306 	add.w	r3, r5, #6
 800bb8a:	d068      	beq.n	800bc5e <ucdr_deserialize_double+0x166>
 800bb8c:	787b      	ldrb	r3, [r7, #1]
 800bb8e:	71ab      	strb	r3, [r5, #6]
 800bb90:	2e06      	cmp	r6, #6
 800bb92:	f105 0307 	add.w	r3, r5, #7
 800bb96:	d066      	beq.n	800bc66 <ucdr_deserialize_double+0x16e>
 800bb98:	783b      	ldrb	r3, [r7, #0]
 800bb9a:	71eb      	strb	r3, [r5, #7]
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	68a2      	ldr	r2, [r4, #8]
 800bba0:	7da0      	ldrb	r0, [r4, #22]
 800bba2:	3308      	adds	r3, #8
 800bba4:	1b9e      	subs	r6, r3, r6
 800bba6:	2308      	movs	r3, #8
 800bba8:	4442      	add	r2, r8
 800bbaa:	7563      	strb	r3, [r4, #21]
 800bbac:	60a2      	str	r2, [r4, #8]
 800bbae:	6126      	str	r6, [r4, #16]
 800bbb0:	f080 0001 	eor.w	r0, r0, #1
 800bbb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb8:	2108      	movs	r1, #8
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 f93c 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800bbc0:	b310      	cbz	r0, 800bc08 <ucdr_deserialize_double+0x110>
 800bbc2:	7d23      	ldrb	r3, [r4, #20]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	d023      	beq.n	800bc12 <ucdr_deserialize_double+0x11a>
 800bbca:	79db      	ldrb	r3, [r3, #7]
 800bbcc:	702b      	strb	r3, [r5, #0]
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	799b      	ldrb	r3, [r3, #6]
 800bbd2:	706b      	strb	r3, [r5, #1]
 800bbd4:	68a3      	ldr	r3, [r4, #8]
 800bbd6:	795b      	ldrb	r3, [r3, #5]
 800bbd8:	70ab      	strb	r3, [r5, #2]
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	791b      	ldrb	r3, [r3, #4]
 800bbde:	70eb      	strb	r3, [r5, #3]
 800bbe0:	68a3      	ldr	r3, [r4, #8]
 800bbe2:	78db      	ldrb	r3, [r3, #3]
 800bbe4:	712b      	strb	r3, [r5, #4]
 800bbe6:	68a3      	ldr	r3, [r4, #8]
 800bbe8:	789b      	ldrb	r3, [r3, #2]
 800bbea:	716b      	strb	r3, [r5, #5]
 800bbec:	68a3      	ldr	r3, [r4, #8]
 800bbee:	785b      	ldrb	r3, [r3, #1]
 800bbf0:	71ab      	strb	r3, [r5, #6]
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	71eb      	strb	r3, [r5, #7]
 800bbf8:	68a2      	ldr	r2, [r4, #8]
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	3208      	adds	r2, #8
 800bbfe:	3308      	adds	r3, #8
 800bc00:	2108      	movs	r1, #8
 800bc02:	60a2      	str	r2, [r4, #8]
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	7561      	strb	r1, [r4, #21]
 800bc08:	7da0      	ldrb	r0, [r4, #22]
 800bc0a:	f080 0001 	eor.w	r0, r0, #1
 800bc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	606b      	str	r3, [r5, #4]
 800bc18:	602a      	str	r2, [r5, #0]
 800bc1a:	e7ed      	b.n	800bbf8 <ucdr_deserialize_double+0x100>
 800bc1c:	68a2      	ldr	r2, [r4, #8]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	7da0      	ldrb	r0, [r4, #22]
 800bc22:	f884 9015 	strb.w	r9, [r4, #21]
 800bc26:	1b92      	subs	r2, r2, r6
 800bc28:	1b9b      	subs	r3, r3, r6
 800bc2a:	60a2      	str	r2, [r4, #8]
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	f080 0001 	eor.w	r0, r0, #1
 800bc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	799b      	ldrb	r3, [r3, #6]
 800bc3a:	706b      	strb	r3, [r5, #1]
 800bc3c:	1cab      	adds	r3, r5, #2
 800bc3e:	68a2      	ldr	r2, [r4, #8]
 800bc40:	7952      	ldrb	r2, [r2, #5]
 800bc42:	f803 2b01 	strb.w	r2, [r3], #1
 800bc46:	68a2      	ldr	r2, [r4, #8]
 800bc48:	7912      	ldrb	r2, [r2, #4]
 800bc4a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc4e:	68a2      	ldr	r2, [r4, #8]
 800bc50:	78d2      	ldrb	r2, [r2, #3]
 800bc52:	f803 2b01 	strb.w	r2, [r3], #1
 800bc56:	68a2      	ldr	r2, [r4, #8]
 800bc58:	7892      	ldrb	r2, [r2, #2]
 800bc5a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc5e:	68a2      	ldr	r2, [r4, #8]
 800bc60:	7852      	ldrb	r2, [r2, #1]
 800bc62:	f803 2b01 	strb.w	r2, [r3], #1
 800bc66:	68a2      	ldr	r2, [r4, #8]
 800bc68:	7812      	ldrb	r2, [r2, #0]
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	e796      	b.n	800bb9c <ucdr_deserialize_double+0xa4>
 800bc6e:	4639      	mov	r1, r7
 800bc70:	4632      	mov	r2, r6
 800bc72:	4628      	mov	r0, r5
 800bc74:	f00c fed3 	bl	8018a1e <memcpy>
 800bc78:	68a1      	ldr	r1, [r4, #8]
 800bc7a:	4642      	mov	r2, r8
 800bc7c:	19a8      	adds	r0, r5, r6
 800bc7e:	f00c fece 	bl	8018a1e <memcpy>
 800bc82:	e78b      	b.n	800bb9c <ucdr_deserialize_double+0xa4>

0800bc84 <ucdr_deserialize_endian_double>:
 800bc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	460f      	mov	r7, r1
 800bc8a:	2108      	movs	r1, #8
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4615      	mov	r5, r2
 800bc90:	f000 f926 	bl	800bee0 <ucdr_buffer_alignment>
 800bc94:	4601      	mov	r1, r0
 800bc96:	4620      	mov	r0, r4
 800bc98:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc9c:	f000 f964 	bl	800bf68 <ucdr_advance_buffer>
 800bca0:	2108      	movs	r1, #8
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 f8bc 	bl	800be20 <ucdr_check_buffer_available_for>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d159      	bne.n	800bd60 <ucdr_deserialize_endian_double+0xdc>
 800bcac:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800bcb0:	4546      	cmp	r6, r8
 800bcb2:	d950      	bls.n	800bd56 <ucdr_deserialize_endian_double+0xd2>
 800bcb4:	6923      	ldr	r3, [r4, #16]
 800bcb6:	60a6      	str	r6, [r4, #8]
 800bcb8:	eba6 0608 	sub.w	r6, r6, r8
 800bcbc:	4433      	add	r3, r6
 800bcbe:	f1c6 0a08 	rsb	sl, r6, #8
 800bcc2:	6123      	str	r3, [r4, #16]
 800bcc4:	4651      	mov	r1, sl
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 f8b6 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d073      	beq.n	800bdb8 <ucdr_deserialize_endian_double+0x134>
 800bcd0:	2f01      	cmp	r7, #1
 800bcd2:	f000 809a 	beq.w	800be0a <ucdr_deserialize_endian_double+0x186>
 800bcd6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800bcda:	702b      	strb	r3, [r5, #0]
 800bcdc:	2e00      	cmp	r6, #0
 800bcde:	d078      	beq.n	800bdd2 <ucdr_deserialize_endian_double+0x14e>
 800bce0:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bce4:	706b      	strb	r3, [r5, #1]
 800bce6:	2e01      	cmp	r6, #1
 800bce8:	f105 0302 	add.w	r3, r5, #2
 800bcec:	d075      	beq.n	800bdda <ucdr_deserialize_endian_double+0x156>
 800bcee:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bcf2:	70ab      	strb	r3, [r5, #2]
 800bcf4:	2e02      	cmp	r6, #2
 800bcf6:	f105 0303 	add.w	r3, r5, #3
 800bcfa:	d072      	beq.n	800bde2 <ucdr_deserialize_endian_double+0x15e>
 800bcfc:	f898 3004 	ldrb.w	r3, [r8, #4]
 800bd00:	70eb      	strb	r3, [r5, #3]
 800bd02:	2e03      	cmp	r6, #3
 800bd04:	f105 0304 	add.w	r3, r5, #4
 800bd08:	d06f      	beq.n	800bdea <ucdr_deserialize_endian_double+0x166>
 800bd0a:	f898 3003 	ldrb.w	r3, [r8, #3]
 800bd0e:	712b      	strb	r3, [r5, #4]
 800bd10:	2e04      	cmp	r6, #4
 800bd12:	f105 0305 	add.w	r3, r5, #5
 800bd16:	d06c      	beq.n	800bdf2 <ucdr_deserialize_endian_double+0x16e>
 800bd18:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bd1c:	716b      	strb	r3, [r5, #5]
 800bd1e:	2e05      	cmp	r6, #5
 800bd20:	f105 0306 	add.w	r3, r5, #6
 800bd24:	d069      	beq.n	800bdfa <ucdr_deserialize_endian_double+0x176>
 800bd26:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bd2a:	71ab      	strb	r3, [r5, #6]
 800bd2c:	2e06      	cmp	r6, #6
 800bd2e:	f105 0307 	add.w	r3, r5, #7
 800bd32:	d066      	beq.n	800be02 <ucdr_deserialize_endian_double+0x17e>
 800bd34:	f898 3000 	ldrb.w	r3, [r8]
 800bd38:	71eb      	strb	r3, [r5, #7]
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	68a2      	ldr	r2, [r4, #8]
 800bd3e:	7da0      	ldrb	r0, [r4, #22]
 800bd40:	3308      	adds	r3, #8
 800bd42:	1b9e      	subs	r6, r3, r6
 800bd44:	2308      	movs	r3, #8
 800bd46:	4452      	add	r2, sl
 800bd48:	7563      	strb	r3, [r4, #21]
 800bd4a:	60a2      	str	r2, [r4, #8]
 800bd4c:	6126      	str	r6, [r4, #16]
 800bd4e:	f080 0001 	eor.w	r0, r0, #1
 800bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd56:	2108      	movs	r1, #8
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 f86d 	bl	800be38 <ucdr_check_final_buffer_behavior>
 800bd5e:	b308      	cbz	r0, 800bda4 <ucdr_deserialize_endian_double+0x120>
 800bd60:	2f01      	cmp	r7, #1
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	d023      	beq.n	800bdae <ucdr_deserialize_endian_double+0x12a>
 800bd66:	79db      	ldrb	r3, [r3, #7]
 800bd68:	702b      	strb	r3, [r5, #0]
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	799b      	ldrb	r3, [r3, #6]
 800bd6e:	706b      	strb	r3, [r5, #1]
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	795b      	ldrb	r3, [r3, #5]
 800bd74:	70ab      	strb	r3, [r5, #2]
 800bd76:	68a3      	ldr	r3, [r4, #8]
 800bd78:	791b      	ldrb	r3, [r3, #4]
 800bd7a:	70eb      	strb	r3, [r5, #3]
 800bd7c:	68a3      	ldr	r3, [r4, #8]
 800bd7e:	78db      	ldrb	r3, [r3, #3]
 800bd80:	712b      	strb	r3, [r5, #4]
 800bd82:	68a3      	ldr	r3, [r4, #8]
 800bd84:	789b      	ldrb	r3, [r3, #2]
 800bd86:	716b      	strb	r3, [r5, #5]
 800bd88:	68a3      	ldr	r3, [r4, #8]
 800bd8a:	785b      	ldrb	r3, [r3, #1]
 800bd8c:	71ab      	strb	r3, [r5, #6]
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	71eb      	strb	r3, [r5, #7]
 800bd94:	68a2      	ldr	r2, [r4, #8]
 800bd96:	6923      	ldr	r3, [r4, #16]
 800bd98:	3208      	adds	r2, #8
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	2108      	movs	r1, #8
 800bd9e:	60a2      	str	r2, [r4, #8]
 800bda0:	6123      	str	r3, [r4, #16]
 800bda2:	7561      	strb	r1, [r4, #21]
 800bda4:	7da0      	ldrb	r0, [r4, #22]
 800bda6:	f080 0001 	eor.w	r0, r0, #1
 800bdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	606b      	str	r3, [r5, #4]
 800bdb4:	602a      	str	r2, [r5, #0]
 800bdb6:	e7ed      	b.n	800bd94 <ucdr_deserialize_endian_double+0x110>
 800bdb8:	68a2      	ldr	r2, [r4, #8]
 800bdba:	6923      	ldr	r3, [r4, #16]
 800bdbc:	7da0      	ldrb	r0, [r4, #22]
 800bdbe:	f884 9015 	strb.w	r9, [r4, #21]
 800bdc2:	1b92      	subs	r2, r2, r6
 800bdc4:	1b9b      	subs	r3, r3, r6
 800bdc6:	60a2      	str	r2, [r4, #8]
 800bdc8:	6123      	str	r3, [r4, #16]
 800bdca:	f080 0001 	eor.w	r0, r0, #1
 800bdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd2:	68a3      	ldr	r3, [r4, #8]
 800bdd4:	799b      	ldrb	r3, [r3, #6]
 800bdd6:	706b      	strb	r3, [r5, #1]
 800bdd8:	1cab      	adds	r3, r5, #2
 800bdda:	68a2      	ldr	r2, [r4, #8]
 800bddc:	7952      	ldrb	r2, [r2, #5]
 800bdde:	f803 2b01 	strb.w	r2, [r3], #1
 800bde2:	68a2      	ldr	r2, [r4, #8]
 800bde4:	7912      	ldrb	r2, [r2, #4]
 800bde6:	f803 2b01 	strb.w	r2, [r3], #1
 800bdea:	68a2      	ldr	r2, [r4, #8]
 800bdec:	78d2      	ldrb	r2, [r2, #3]
 800bdee:	f803 2b01 	strb.w	r2, [r3], #1
 800bdf2:	68a2      	ldr	r2, [r4, #8]
 800bdf4:	7892      	ldrb	r2, [r2, #2]
 800bdf6:	f803 2b01 	strb.w	r2, [r3], #1
 800bdfa:	68a2      	ldr	r2, [r4, #8]
 800bdfc:	7852      	ldrb	r2, [r2, #1]
 800bdfe:	f803 2b01 	strb.w	r2, [r3], #1
 800be02:	68a2      	ldr	r2, [r4, #8]
 800be04:	7812      	ldrb	r2, [r2, #0]
 800be06:	701a      	strb	r2, [r3, #0]
 800be08:	e797      	b.n	800bd3a <ucdr_deserialize_endian_double+0xb6>
 800be0a:	4641      	mov	r1, r8
 800be0c:	4632      	mov	r2, r6
 800be0e:	4628      	mov	r0, r5
 800be10:	f00c fe05 	bl	8018a1e <memcpy>
 800be14:	68a1      	ldr	r1, [r4, #8]
 800be16:	4652      	mov	r2, sl
 800be18:	19a8      	adds	r0, r5, r6
 800be1a:	f00c fe00 	bl	8018a1e <memcpy>
 800be1e:	e78c      	b.n	800bd3a <ucdr_deserialize_endian_double+0xb6>

0800be20 <ucdr_check_buffer_available_for>:
 800be20:	7d83      	ldrb	r3, [r0, #22]
 800be22:	b93b      	cbnz	r3, 800be34 <ucdr_check_buffer_available_for+0x14>
 800be24:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800be28:	4419      	add	r1, r3
 800be2a:	4288      	cmp	r0, r1
 800be2c:	bf34      	ite	cc
 800be2e:	2000      	movcc	r0, #0
 800be30:	2001      	movcs	r0, #1
 800be32:	4770      	bx	lr
 800be34:	2000      	movs	r0, #0
 800be36:	4770      	bx	lr

0800be38 <ucdr_check_final_buffer_behavior>:
 800be38:	7d83      	ldrb	r3, [r0, #22]
 800be3a:	b943      	cbnz	r3, 800be4e <ucdr_check_final_buffer_behavior+0x16>
 800be3c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800be40:	4291      	cmp	r1, r2
 800be42:	b510      	push	{r4, lr}
 800be44:	4604      	mov	r4, r0
 800be46:	d205      	bcs.n	800be54 <ucdr_check_final_buffer_behavior+0x1c>
 800be48:	2301      	movs	r3, #1
 800be4a:	4618      	mov	r0, r3
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	2300      	movs	r3, #0
 800be50:	4618      	mov	r0, r3
 800be52:	4770      	bx	lr
 800be54:	6982      	ldr	r2, [r0, #24]
 800be56:	b13a      	cbz	r2, 800be68 <ucdr_check_final_buffer_behavior+0x30>
 800be58:	69c1      	ldr	r1, [r0, #28]
 800be5a:	4790      	blx	r2
 800be5c:	f080 0301 	eor.w	r3, r0, #1
 800be60:	b2db      	uxtb	r3, r3
 800be62:	75a0      	strb	r0, [r4, #22]
 800be64:	4618      	mov	r0, r3
 800be66:	bd10      	pop	{r4, pc}
 800be68:	2001      	movs	r0, #1
 800be6a:	75a0      	strb	r0, [r4, #22]
 800be6c:	e7fa      	b.n	800be64 <ucdr_check_final_buffer_behavior+0x2c>
 800be6e:	bf00      	nop

0800be70 <ucdr_set_on_full_buffer_callback>:
 800be70:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop

0800be78 <ucdr_init_buffer_origin_offset_endian>:
 800be78:	b410      	push	{r4}
 800be7a:	9c01      	ldr	r4, [sp, #4]
 800be7c:	6001      	str	r1, [r0, #0]
 800be7e:	440a      	add	r2, r1
 800be80:	6042      	str	r2, [r0, #4]
 800be82:	190a      	adds	r2, r1, r4
 800be84:	441c      	add	r4, r3
 800be86:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800be8a:	6082      	str	r2, [r0, #8]
 800be8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800be90:	7503      	strb	r3, [r0, #20]
 800be92:	2200      	movs	r2, #0
 800be94:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800be98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be9c:	7542      	strb	r2, [r0, #21]
 800be9e:	7582      	strb	r2, [r0, #22]
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop

0800bea4 <ucdr_init_buffer_origin_offset>:
 800bea4:	b510      	push	{r4, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	9c04      	ldr	r4, [sp, #16]
 800beaa:	9400      	str	r4, [sp, #0]
 800beac:	2401      	movs	r4, #1
 800beae:	9401      	str	r4, [sp, #4]
 800beb0:	f7ff ffe2 	bl	800be78 <ucdr_init_buffer_origin_offset_endian>
 800beb4:	b002      	add	sp, #8
 800beb6:	bd10      	pop	{r4, pc}

0800beb8 <ucdr_init_buffer_origin>:
 800beb8:	b510      	push	{r4, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	2400      	movs	r4, #0
 800bebe:	9400      	str	r4, [sp, #0]
 800bec0:	f7ff fff0 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 800bec4:	b002      	add	sp, #8
 800bec6:	bd10      	pop	{r4, pc}

0800bec8 <ucdr_init_buffer>:
 800bec8:	2300      	movs	r3, #0
 800beca:	f7ff bff5 	b.w	800beb8 <ucdr_init_buffer_origin>
 800bece:	bf00      	nop

0800bed0 <ucdr_alignment>:
 800bed0:	fbb0 f3f1 	udiv	r3, r0, r1
 800bed4:	fb03 0011 	mls	r0, r3, r1, r0
 800bed8:	1a08      	subs	r0, r1, r0
 800beda:	3901      	subs	r1, #1
 800bedc:	4008      	ands	r0, r1
 800bede:	4770      	bx	lr

0800bee0 <ucdr_buffer_alignment>:
 800bee0:	7d43      	ldrb	r3, [r0, #21]
 800bee2:	428b      	cmp	r3, r1
 800bee4:	d208      	bcs.n	800bef8 <ucdr_buffer_alignment+0x18>
 800bee6:	6900      	ldr	r0, [r0, #16]
 800bee8:	fbb0 f3f1 	udiv	r3, r0, r1
 800beec:	fb01 0013 	mls	r0, r1, r3, r0
 800bef0:	1a08      	subs	r0, r1, r0
 800bef2:	3901      	subs	r1, #1
 800bef4:	4008      	ands	r0, r1
 800bef6:	4770      	bx	lr
 800bef8:	2000      	movs	r0, #0
 800befa:	4770      	bx	lr

0800befc <ucdr_align_to>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4604      	mov	r4, r0
 800bf00:	460d      	mov	r5, r1
 800bf02:	f7ff ffed 	bl	800bee0 <ucdr_buffer_alignment>
 800bf06:	68a3      	ldr	r3, [r4, #8]
 800bf08:	6921      	ldr	r1, [r4, #16]
 800bf0a:	7565      	strb	r5, [r4, #21]
 800bf0c:	181a      	adds	r2, r3, r0
 800bf0e:	6863      	ldr	r3, [r4, #4]
 800bf10:	4293      	cmp	r3, r2
 800bf12:	4408      	add	r0, r1
 800bf14:	bf28      	it	cs
 800bf16:	4613      	movcs	r3, r2
 800bf18:	6120      	str	r0, [r4, #16]
 800bf1a:	60a3      	str	r3, [r4, #8]
 800bf1c:	bd38      	pop	{r3, r4, r5, pc}
 800bf1e:	bf00      	nop

0800bf20 <ucdr_buffer_length>:
 800bf20:	6882      	ldr	r2, [r0, #8]
 800bf22:	6800      	ldr	r0, [r0, #0]
 800bf24:	1a10      	subs	r0, r2, r0
 800bf26:	4770      	bx	lr

0800bf28 <ucdr_buffer_remaining>:
 800bf28:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bf2c:	1a10      	subs	r0, r2, r0
 800bf2e:	4770      	bx	lr

0800bf30 <ucdr_check_final_buffer_behavior_array>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	7d83      	ldrb	r3, [r0, #22]
 800bf34:	b963      	cbnz	r3, 800bf50 <ucdr_check_final_buffer_behavior_array+0x20>
 800bf36:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	460d      	mov	r5, r1
 800bf40:	d308      	bcc.n	800bf54 <ucdr_check_final_buffer_behavior_array+0x24>
 800bf42:	b139      	cbz	r1, 800bf54 <ucdr_check_final_buffer_behavior_array+0x24>
 800bf44:	6983      	ldr	r3, [r0, #24]
 800bf46:	b163      	cbz	r3, 800bf62 <ucdr_check_final_buffer_behavior_array+0x32>
 800bf48:	69c1      	ldr	r1, [r0, #28]
 800bf4a:	4798      	blx	r3
 800bf4c:	75a0      	strb	r0, [r4, #22]
 800bf4e:	b108      	cbz	r0, 800bf54 <ucdr_check_final_buffer_behavior_array+0x24>
 800bf50:	2000      	movs	r0, #0
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	4620      	mov	r0, r4
 800bf56:	f7ff ffe7 	bl	800bf28 <ucdr_buffer_remaining>
 800bf5a:	42a8      	cmp	r0, r5
 800bf5c:	bf28      	it	cs
 800bf5e:	4628      	movcs	r0, r5
 800bf60:	bd38      	pop	{r3, r4, r5, pc}
 800bf62:	2301      	movs	r3, #1
 800bf64:	7583      	strb	r3, [r0, #22]
 800bf66:	e7f3      	b.n	800bf50 <ucdr_check_final_buffer_behavior_array+0x20>

0800bf68 <ucdr_advance_buffer>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	f7ff ff57 	bl	800be20 <ucdr_check_buffer_available_for>
 800bf72:	b178      	cbz	r0, 800bf94 <ucdr_advance_buffer+0x2c>
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	68a2      	ldr	r2, [r4, #8]
 800bf78:	442b      	add	r3, r5
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	442a      	add	r2, r5
 800bf80:	7563      	strb	r3, [r4, #21]
 800bf82:	60a2      	str	r2, [r4, #8]
 800bf84:	bd38      	pop	{r3, r4, r5, pc}
 800bf86:	68a2      	ldr	r2, [r4, #8]
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	4402      	add	r2, r0
 800bf8c:	4403      	add	r3, r0
 800bf8e:	1a2d      	subs	r5, r5, r0
 800bf90:	60a2      	str	r2, [r4, #8]
 800bf92:	6123      	str	r3, [r4, #16]
 800bf94:	4629      	mov	r1, r5
 800bf96:	2201      	movs	r2, #1
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7ff ffc9 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d1f1      	bne.n	800bf86 <ucdr_advance_buffer+0x1e>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	7563      	strb	r3, [r4, #21]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}

0800bfa8 <rcl_get_zero_initialized_init_options>:
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	4770      	bx	lr

0800bfac <rcl_init_options_init>:
 800bfac:	b084      	sub	sp, #16
 800bfae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfb0:	b097      	sub	sp, #92	@ 0x5c
 800bfb2:	ae1d      	add	r6, sp, #116	@ 0x74
 800bfb4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d058      	beq.n	800c06e <rcl_init_options_init+0xc2>
 800bfbc:	6803      	ldr	r3, [r0, #0]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	b133      	cbz	r3, 800bfd0 <rcl_init_options_init+0x24>
 800bfc2:	2464      	movs	r4, #100	@ 0x64
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	b017      	add	sp, #92	@ 0x5c
 800bfc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bfcc:	b004      	add	sp, #16
 800bfce:	4770      	bx	lr
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f001 f963 	bl	800d29c <rcutils_allocator_is_valid>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d049      	beq.n	800c06e <rcl_init_options_init+0xc2>
 800bfda:	46b4      	mov	ip, r6
 800bfdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bfe0:	ac11      	add	r4, sp, #68	@ 0x44
 800bfe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfe4:	f8dc 3000 	ldr.w	r3, [ip]
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bfec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bfee:	2050      	movs	r0, #80	@ 0x50
 800bff0:	4798      	blx	r3
 800bff2:	4604      	mov	r4, r0
 800bff4:	6028      	str	r0, [r5, #0]
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d03b      	beq.n	800c072 <rcl_init_options_init+0xc6>
 800bffa:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bffe:	4686      	mov	lr, r0
 800c000:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c004:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c008:	f8dc 3000 	ldr.w	r3, [ip]
 800c00c:	f8ce 3000 	str.w	r3, [lr]
 800c010:	a802      	add	r0, sp, #8
 800c012:	f001 f9d5 	bl	800d3c0 <rmw_get_zero_initialized_init_options>
 800c016:	f10d 0e08 	add.w	lr, sp, #8
 800c01a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c01e:	f104 0c18 	add.w	ip, r4, #24
 800c022:	682f      	ldr	r7, [r5, #0]
 800c024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c028:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c02c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c030:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c038:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c03c:	ac20      	add	r4, sp, #128	@ 0x80
 800c03e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c042:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c046:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c04a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c04e:	f107 0018 	add.w	r0, r7, #24
 800c052:	f001 f9e3 	bl	800d41c <rmw_init_options_init>
 800c056:	4604      	mov	r4, r0
 800c058:	2800      	cmp	r0, #0
 800c05a:	d0b3      	beq.n	800bfc4 <rcl_init_options_init+0x18>
 800c05c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c05e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c060:	6828      	ldr	r0, [r5, #0]
 800c062:	4798      	blx	r3
 800c064:	4620      	mov	r0, r4
 800c066:	f006 fd85 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 800c06a:	4604      	mov	r4, r0
 800c06c:	e7aa      	b.n	800bfc4 <rcl_init_options_init+0x18>
 800c06e:	240b      	movs	r4, #11
 800c070:	e7a8      	b.n	800bfc4 <rcl_init_options_init+0x18>
 800c072:	240a      	movs	r4, #10
 800c074:	e7a6      	b.n	800bfc4 <rcl_init_options_init+0x18>
 800c076:	bf00      	nop

0800c078 <rcl_init_options_fini>:
 800c078:	b530      	push	{r4, r5, lr}
 800c07a:	b087      	sub	sp, #28
 800c07c:	b1f0      	cbz	r0, 800c0bc <rcl_init_options_fini+0x44>
 800c07e:	6803      	ldr	r3, [r0, #0]
 800c080:	4604      	mov	r4, r0
 800c082:	b1db      	cbz	r3, 800c0bc <rcl_init_options_fini+0x44>
 800c084:	469c      	mov	ip, r3
 800c086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c08a:	f10d 0e04 	add.w	lr, sp, #4
 800c08e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c092:	f8dc 3000 	ldr.w	r3, [ip]
 800c096:	f8ce 3000 	str.w	r3, [lr]
 800c09a:	a801      	add	r0, sp, #4
 800c09c:	f001 f8fe 	bl	800d29c <rcutils_allocator_is_valid>
 800c0a0:	b160      	cbz	r0, 800c0bc <rcl_init_options_fini+0x44>
 800c0a2:	6820      	ldr	r0, [r4, #0]
 800c0a4:	3018      	adds	r0, #24
 800c0a6:	f001 fa69 	bl	800d57c <rmw_init_options_fini>
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	b950      	cbnz	r0, 800c0c4 <rcl_init_options_fini+0x4c>
 800c0ae:	6820      	ldr	r0, [r4, #0]
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	9905      	ldr	r1, [sp, #20]
 800c0b4:	4798      	blx	r3
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	b007      	add	sp, #28
 800c0ba:	bd30      	pop	{r4, r5, pc}
 800c0bc:	250b      	movs	r5, #11
 800c0be:	4628      	mov	r0, r5
 800c0c0:	b007      	add	sp, #28
 800c0c2:	bd30      	pop	{r4, r5, pc}
 800c0c4:	f006 fd56 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	e7f8      	b.n	800c0be <rcl_init_options_fini+0x46>

0800c0cc <rcl_init_options_copy>:
 800c0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d0:	b094      	sub	sp, #80	@ 0x50
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d058      	beq.n	800c188 <rcl_init_options_copy+0xbc>
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	6800      	ldr	r0, [r0, #0]
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d054      	beq.n	800c188 <rcl_init_options_copy+0xbc>
 800c0de:	460e      	mov	r6, r1
 800c0e0:	f001 f8dc 	bl	800d29c <rcutils_allocator_is_valid>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d04f      	beq.n	800c188 <rcl_init_options_copy+0xbc>
 800c0e8:	2e00      	cmp	r6, #0
 800c0ea:	d04d      	beq.n	800c188 <rcl_init_options_copy+0xbc>
 800c0ec:	6833      	ldr	r3, [r6, #0]
 800c0ee:	b123      	cbz	r3, 800c0fa <rcl_init_options_copy+0x2e>
 800c0f0:	2464      	movs	r4, #100	@ 0x64
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	b014      	add	sp, #80	@ 0x50
 800c0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fa:	6827      	ldr	r7, [r4, #0]
 800c0fc:	46bc      	mov	ip, r7
 800c0fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c102:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c106:	f8dc 3000 	ldr.w	r3, [ip]
 800c10a:	f8d7 8000 	ldr.w	r8, [r7]
 800c10e:	602b      	str	r3, [r5, #0]
 800c110:	4619      	mov	r1, r3
 800c112:	2050      	movs	r0, #80	@ 0x50
 800c114:	47c0      	blx	r8
 800c116:	4605      	mov	r5, r0
 800c118:	6030      	str	r0, [r6, #0]
 800c11a:	b3d0      	cbz	r0, 800c192 <rcl_init_options_copy+0xc6>
 800c11c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c120:	4686      	mov	lr, r0
 800c122:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c126:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c12a:	f8dc 3000 	ldr.w	r3, [ip]
 800c12e:	f8ce 3000 	str.w	r3, [lr]
 800c132:	4668      	mov	r0, sp
 800c134:	f001 f944 	bl	800d3c0 <rmw_get_zero_initialized_init_options>
 800c138:	46ee      	mov	lr, sp
 800c13a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c13e:	f105 0c18 	add.w	ip, r5, #24
 800c142:	6824      	ldr	r4, [r4, #0]
 800c144:	6835      	ldr	r5, [r6, #0]
 800c146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c14a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c156:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c15a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c15e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c162:	f104 0018 	add.w	r0, r4, #24
 800c166:	f105 0118 	add.w	r1, r5, #24
 800c16a:	f001 f9bf 	bl	800d4ec <rmw_init_options_copy>
 800c16e:	4604      	mov	r4, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d0be      	beq.n	800c0f2 <rcl_init_options_copy+0x26>
 800c174:	f001 f8a0 	bl	800d2b8 <rcutils_get_error_string>
 800c178:	f001 f8b6 	bl	800d2e8 <rcutils_reset_error>
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7ff ff7b 	bl	800c078 <rcl_init_options_fini>
 800c182:	b140      	cbz	r0, 800c196 <rcl_init_options_copy+0xca>
 800c184:	4604      	mov	r4, r0
 800c186:	e7b4      	b.n	800c0f2 <rcl_init_options_copy+0x26>
 800c188:	240b      	movs	r4, #11
 800c18a:	4620      	mov	r0, r4
 800c18c:	b014      	add	sp, #80	@ 0x50
 800c18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c192:	240a      	movs	r4, #10
 800c194:	e7ad      	b.n	800c0f2 <rcl_init_options_copy+0x26>
 800c196:	4620      	mov	r0, r4
 800c198:	b014      	add	sp, #80	@ 0x50
 800c19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c19e:	f006 bce9 	b.w	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 800c1a2:	bf00      	nop

0800c1a4 <rcl_init_options_set_domain_id>:
 800c1a4:	b120      	cbz	r0, 800c1b0 <rcl_init_options_set_domain_id+0xc>
 800c1a6:	6803      	ldr	r3, [r0, #0]
 800c1a8:	b113      	cbz	r3, 800c1b0 <rcl_init_options_set_domain_id+0xc>
 800c1aa:	6259      	str	r1, [r3, #36]	@ 0x24
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	4770      	bx	lr
 800c1b0:	200b      	movs	r0, #11
 800c1b2:	4770      	bx	lr

0800c1b4 <rcl_get_zero_initialized_publisher>:
 800c1b4:	4b01      	ldr	r3, [pc, #4]	@ (800c1bc <rcl_get_zero_initialized_publisher+0x8>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	0801b15c 	.word	0x0801b15c

0800c1c0 <rcl_publisher_init>:
 800c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c4:	b088      	sub	sp, #32
 800c1c6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	d069      	beq.n	800c2a0 <rcl_publisher_init+0xe0>
 800c1cc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	460e      	mov	r6, r1
 800c1d6:	4690      	mov	r8, r2
 800c1d8:	461f      	mov	r7, r3
 800c1da:	f001 f85f 	bl	800d29c <rcutils_allocator_is_valid>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d05e      	beq.n	800c2a0 <rcl_publisher_init+0xe0>
 800c1e2:	2c00      	cmp	r4, #0
 800c1e4:	d05c      	beq.n	800c2a0 <rcl_publisher_init+0xe0>
 800c1e6:	f8d4 a000 	ldr.w	sl, [r4]
 800c1ea:	f1ba 0f00 	cmp.w	sl, #0
 800c1ee:	d004      	beq.n	800c1fa <rcl_publisher_init+0x3a>
 800c1f0:	2764      	movs	r7, #100	@ 0x64
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	b008      	add	sp, #32
 800c1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f006 ffb4 	bl	8013168 <rcl_node_is_valid>
 800c200:	2800      	cmp	r0, #0
 800c202:	d052      	beq.n	800c2aa <rcl_publisher_init+0xea>
 800c204:	f1b8 0f00 	cmp.w	r8, #0
 800c208:	d04a      	beq.n	800c2a0 <rcl_publisher_init+0xe0>
 800c20a:	2f00      	cmp	r7, #0
 800c20c:	d048      	beq.n	800c2a0 <rcl_publisher_init+0xe0>
 800c20e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c212:	aa07      	add	r2, sp, #28
 800c214:	9205      	str	r2, [sp, #20]
 800c216:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c21a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c21e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c222:	f8cd a01c 	str.w	sl, [sp, #28]
 800c226:	4639      	mov	r1, r7
 800c228:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c22c:	4630      	mov	r0, r6
 800c22e:	f006 ffef 	bl	8013210 <rcl_node_resolve_name>
 800c232:	4607      	mov	r7, r0
 800c234:	2800      	cmp	r0, #0
 800c236:	d14f      	bne.n	800c2d8 <rcl_publisher_init+0x118>
 800c238:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c23a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c23c:	20c8      	movs	r0, #200	@ 0xc8
 800c23e:	4798      	blx	r3
 800c240:	6020      	str	r0, [r4, #0]
 800c242:	2800      	cmp	r0, #0
 800c244:	d04e      	beq.n	800c2e4 <rcl_publisher_init+0x124>
 800c246:	4630      	mov	r0, r6
 800c248:	f006 ffb0 	bl	80131ac <rcl_node_get_rmw_handle>
 800c24c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	9a07      	ldr	r2, [sp, #28]
 800c254:	6827      	ldr	r7, [r4, #0]
 800c256:	462b      	mov	r3, r5
 800c258:	4641      	mov	r1, r8
 800c25a:	f001 fcb7 	bl	800dbcc <rmw_create_publisher>
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c264:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c268:	b370      	cbz	r0, 800c2c8 <rcl_publisher_init+0x108>
 800c26a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c26e:	f001 fd8b 	bl	800dd88 <rmw_publisher_get_actual_qos>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	4607      	mov	r7, r0
 800c276:	b9d0      	cbnz	r0, 800c2ae <rcl_publisher_init+0xee>
 800c278:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c27c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c280:	4629      	mov	r1, r5
 800c282:	2270      	movs	r2, #112	@ 0x70
 800c284:	4618      	mov	r0, r3
 800c286:	f00c fbca 	bl	8018a1e <memcpy>
 800c28a:	6832      	ldr	r2, [r6, #0]
 800c28c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c290:	9807      	ldr	r0, [sp, #28]
 800c292:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c294:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c296:	4798      	blx	r3
 800c298:	4638      	mov	r0, r7
 800c29a:	b008      	add	sp, #32
 800c29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a0:	270b      	movs	r7, #11
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	b008      	add	sp, #32
 800c2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2aa:	27c8      	movs	r7, #200	@ 0xc8
 800c2ac:	e7a1      	b.n	800c1f2 <rcl_publisher_init+0x32>
 800c2ae:	b18b      	cbz	r3, 800c2d4 <rcl_publisher_init+0x114>
 800c2b0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c2b4:	b142      	cbz	r2, 800c2c8 <rcl_publisher_init+0x108>
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f006 ff78 	bl	80131ac <rcl_node_get_rmw_handle>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c2c2:	f001 fd71 	bl	800dda8 <rmw_destroy_publisher>
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c2ca:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	4790      	blx	r2
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	6023      	str	r3, [r4, #0]
 800c2d4:	2701      	movs	r7, #1
 800c2d6:	e7db      	b.n	800c290 <rcl_publisher_init+0xd0>
 800c2d8:	2867      	cmp	r0, #103	@ 0x67
 800c2da:	d0d9      	beq.n	800c290 <rcl_publisher_init+0xd0>
 800c2dc:	2869      	cmp	r0, #105	@ 0x69
 800c2de:	d003      	beq.n	800c2e8 <rcl_publisher_init+0x128>
 800c2e0:	280a      	cmp	r0, #10
 800c2e2:	d1f7      	bne.n	800c2d4 <rcl_publisher_init+0x114>
 800c2e4:	270a      	movs	r7, #10
 800c2e6:	e7d3      	b.n	800c290 <rcl_publisher_init+0xd0>
 800c2e8:	2767      	movs	r7, #103	@ 0x67
 800c2ea:	e7d1      	b.n	800c290 <rcl_publisher_init+0xd0>

0800c2ec <rcl_publisher_get_default_options>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	4d14      	ldr	r5, [pc, #80]	@ (800c340 <rcl_publisher_get_default_options+0x54>)
 800c2f0:	4914      	ldr	r1, [pc, #80]	@ (800c344 <rcl_publisher_get_default_options+0x58>)
 800c2f2:	b088      	sub	sp, #32
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2250      	movs	r2, #80	@ 0x50
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	f00c fb90 	bl	8018a1e <memcpy>
 800c2fe:	a802      	add	r0, sp, #8
 800c300:	f000 ffbe 	bl	800d280 <rcutils_get_default_allocator>
 800c304:	f10d 0c08 	add.w	ip, sp, #8
 800c308:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c30c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c310:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c314:	466e      	mov	r6, sp
 800c316:	f8dc 3000 	ldr.w	r3, [ip]
 800c31a:	f8ce 3000 	str.w	r3, [lr]
 800c31e:	4630      	mov	r0, r6
 800c320:	f001 f85e 	bl	800d3e0 <rmw_get_default_publisher_options>
 800c324:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c328:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c32c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c330:	2270      	movs	r2, #112	@ 0x70
 800c332:	4629      	mov	r1, r5
 800c334:	4620      	mov	r0, r4
 800c336:	f00c fb72 	bl	8018a1e <memcpy>
 800c33a:	4620      	mov	r0, r4
 800c33c:	b008      	add	sp, #32
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	200068e0 	.word	0x200068e0
 800c344:	0801b160 	.word	0x0801b160

0800c348 <rcl_publish>:
 800c348:	b1f8      	cbz	r0, 800c38a <rcl_publish+0x42>
 800c34a:	6803      	ldr	r3, [r0, #0]
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4604      	mov	r4, r0
 800c350:	b1b3      	cbz	r3, 800c380 <rcl_publish+0x38>
 800c352:	4616      	mov	r6, r2
 800c354:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c358:	b192      	cbz	r2, 800c380 <rcl_publish+0x38>
 800c35a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c35e:	460d      	mov	r5, r1
 800c360:	f006 fc26 	bl	8012bb0 <rcl_context_is_valid>
 800c364:	b160      	cbz	r0, 800c380 <rcl_publish+0x38>
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c36c:	b140      	cbz	r0, 800c380 <rcl_publish+0x38>
 800c36e:	b155      	cbz	r5, 800c386 <rcl_publish+0x3e>
 800c370:	4632      	mov	r2, r6
 800c372:	4629      	mov	r1, r5
 800c374:	f001 fbca 	bl	800db0c <rmw_publish>
 800c378:	3800      	subs	r0, #0
 800c37a:	bf18      	it	ne
 800c37c:	2001      	movne	r0, #1
 800c37e:	bd70      	pop	{r4, r5, r6, pc}
 800c380:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c384:	bd70      	pop	{r4, r5, r6, pc}
 800c386:	200b      	movs	r0, #11
 800c388:	bd70      	pop	{r4, r5, r6, pc}
 800c38a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c38e:	4770      	bx	lr

0800c390 <rcl_publisher_is_valid>:
 800c390:	b1a0      	cbz	r0, 800c3bc <rcl_publisher_is_valid+0x2c>
 800c392:	6803      	ldr	r3, [r0, #0]
 800c394:	b510      	push	{r4, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	b173      	cbz	r3, 800c3b8 <rcl_publisher_is_valid+0x28>
 800c39a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c39e:	b15a      	cbz	r2, 800c3b8 <rcl_publisher_is_valid+0x28>
 800c3a0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c3a4:	f006 fc04 	bl	8012bb0 <rcl_context_is_valid>
 800c3a8:	b130      	cbz	r0, 800c3b8 <rcl_publisher_is_valid+0x28>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c3b0:	3800      	subs	r0, #0
 800c3b2:	bf18      	it	ne
 800c3b4:	2001      	movne	r0, #1
 800c3b6:	bd10      	pop	{r4, pc}
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	bd10      	pop	{r4, pc}
 800c3bc:	2000      	movs	r0, #0
 800c3be:	4770      	bx	lr

0800c3c0 <rcl_publisher_is_valid_except_context>:
 800c3c0:	b130      	cbz	r0, 800c3d0 <rcl_publisher_is_valid_except_context+0x10>
 800c3c2:	6800      	ldr	r0, [r0, #0]
 800c3c4:	b120      	cbz	r0, 800c3d0 <rcl_publisher_is_valid_except_context+0x10>
 800c3c6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c3ca:	3800      	subs	r0, #0
 800c3cc:	bf18      	it	ne
 800c3ce:	2001      	movne	r0, #1
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop

0800c3d4 <_rclc_check_for_new_data>:
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d046      	beq.n	800c466 <_rclc_check_for_new_data+0x92>
 800c3d8:	b510      	push	{r4, lr}
 800c3da:	7802      	ldrb	r2, [r0, #0]
 800c3dc:	b084      	sub	sp, #16
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2a0a      	cmp	r2, #10
 800c3e2:	d842      	bhi.n	800c46a <_rclc_check_for_new_data+0x96>
 800c3e4:	e8df f002 	tbb	[pc, r2]
 800c3e8:	14181212 	.word	0x14181212
 800c3ec:	06060614 	.word	0x06060614
 800c3f0:	2e1a      	.short	0x2e1a
 800c3f2:	16          	.byte	0x16
 800c3f3:	00          	.byte	0x00
 800c3f4:	6a0a      	ldr	r2, [r1, #32]
 800c3f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c3f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	1a12      	subs	r2, r2, r0
 800c400:	bf18      	it	ne
 800c402:	2201      	movne	r2, #1
 800c404:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c408:	b004      	add	sp, #16
 800c40a:	bd10      	pop	{r4, pc}
 800c40c:	680a      	ldr	r2, [r1, #0]
 800c40e:	e7f2      	b.n	800c3f6 <_rclc_check_for_new_data+0x22>
 800c410:	698a      	ldr	r2, [r1, #24]
 800c412:	e7f0      	b.n	800c3f6 <_rclc_check_for_new_data+0x22>
 800c414:	688a      	ldr	r2, [r1, #8]
 800c416:	e7ee      	b.n	800c3f6 <_rclc_check_for_new_data+0x22>
 800c418:	690a      	ldr	r2, [r1, #16]
 800c41a:	e7ec      	b.n	800c3f6 <_rclc_check_for_new_data+0x22>
 800c41c:	685c      	ldr	r4, [r3, #4]
 800c41e:	4608      	mov	r0, r1
 800c420:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c424:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c428:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c42c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c436:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c43a:	f104 0110 	add.w	r1, r4, #16
 800c43e:	f008 fce3 	bl	8014e08 <rcl_action_client_wait_set_get_entities_ready>
 800c442:	e7e1      	b.n	800c408 <_rclc_check_for_new_data+0x34>
 800c444:	685c      	ldr	r4, [r3, #4]
 800c446:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c44a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c44e:	e9cd 3200 	strd	r3, r2, [sp]
 800c452:	4608      	mov	r0, r1
 800c454:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c458:	f104 0220 	add.w	r2, r4, #32
 800c45c:	f104 0110 	add.w	r1, r4, #16
 800c460:	f008 feea 	bl	8015238 <rcl_action_server_wait_set_get_entities_ready>
 800c464:	e7d0      	b.n	800c408 <_rclc_check_for_new_data+0x34>
 800c466:	200b      	movs	r0, #11
 800c468:	4770      	bx	lr
 800c46a:	2001      	movs	r0, #1
 800c46c:	e7cc      	b.n	800c408 <_rclc_check_for_new_data+0x34>
 800c46e:	bf00      	nop

0800c470 <_rclc_take_new_data>:
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c472:	b09b      	sub	sp, #108	@ 0x6c
 800c474:	2800      	cmp	r0, #0
 800c476:	f000 8088 	beq.w	800c58a <_rclc_take_new_data+0x11a>
 800c47a:	7803      	ldrb	r3, [r0, #0]
 800c47c:	4604      	mov	r4, r0
 800c47e:	2b0a      	cmp	r3, #10
 800c480:	f200 8167 	bhi.w	800c752 <_rclc_take_new_data+0x2e2>
 800c484:	e8df f003 	tbb	[pc, r3]
 800c488:	44152d2d 	.word	0x44152d2d
 800c48c:	19191944 	.word	0x19191944
 800c490:	065a      	.short	0x065a
 800c492:	15          	.byte	0x15
 800c493:	00          	.byte	0x00
 800c494:	6840      	ldr	r0, [r0, #4]
 800c496:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f040 80b2 	bne.w	800c604 <_rclc_take_new_data+0x194>
 800c4a0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f040 80e4 	bne.w	800c672 <_rclc_take_new_data+0x202>
 800c4aa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d16f      	bne.n	800c592 <_rclc_take_new_data+0x122>
 800c4b2:	2500      	movs	r5, #0
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	b01b      	add	sp, #108	@ 0x6c
 800c4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c4bc:	6a0b      	ldr	r3, [r1, #32]
 800c4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d0f5      	beq.n	800c4b2 <_rclc_take_new_data+0x42>
 800c4c6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c4ca:	f104 0110 	add.w	r1, r4, #16
 800c4ce:	f007 f849 	bl	8013564 <rcl_take_request>
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d0ec      	beq.n	800c4b2 <_rclc_take_new_data+0x42>
 800c4d8:	f240 2359 	movw	r3, #601	@ 0x259
 800c4dc:	4298      	cmp	r0, r3
 800c4de:	d013      	beq.n	800c508 <_rclc_take_new_data+0x98>
 800c4e0:	e029      	b.n	800c536 <_rclc_take_new_data+0xc6>
 800c4e2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c4e4:	680b      	ldr	r3, [r1, #0]
 800c4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0e1      	beq.n	800c4b2 <_rclc_take_new_data+0x42>
 800c4ee:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	aa0a      	add	r2, sp, #40	@ 0x28
 800c4f6:	f007 f897 	bl	8013628 <rcl_take>
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d0d9      	beq.n	800c4b4 <_rclc_take_new_data+0x44>
 800c500:	f240 1391 	movw	r3, #401	@ 0x191
 800c504:	4298      	cmp	r0, r3
 800c506:	d116      	bne.n	800c536 <_rclc_take_new_data+0xc6>
 800c508:	2300      	movs	r3, #0
 800c50a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c50e:	e7d1      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c510:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c512:	698b      	ldr	r3, [r1, #24]
 800c514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0ca      	beq.n	800c4b2 <_rclc_take_new_data+0x42>
 800c51c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c520:	f104 0110 	add.w	r1, r4, #16
 800c524:	f006 fad4 	bl	8012ad0 <rcl_take_response>
 800c528:	4605      	mov	r5, r0
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0c1      	beq.n	800c4b2 <_rclc_take_new_data+0x42>
 800c52e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c532:	4298      	cmp	r0, r3
 800c534:	d0be      	beq.n	800c4b4 <_rclc_take_new_data+0x44>
 800c536:	f000 fed7 	bl	800d2e8 <rcutils_reset_error>
 800c53a:	e7bb      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c53c:	6840      	ldr	r0, [r0, #4]
 800c53e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c542:	2b00      	cmp	r3, #0
 800c544:	d17d      	bne.n	800c642 <_rclc_take_new_data+0x1d2>
 800c546:	69c3      	ldr	r3, [r0, #28]
 800c548:	b11b      	cbz	r3, 800c552 <_rclc_take_new_data+0xe2>
 800c54a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d144      	bne.n	800c5dc <_rclc_take_new_data+0x16c>
 800c552:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c556:	2b00      	cmp	r3, #0
 800c558:	f040 80ac 	bne.w	800c6b4 <_rclc_take_new_data+0x244>
 800c55c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c560:	2b00      	cmp	r3, #0
 800c562:	d0a6      	beq.n	800c4b2 <_rclc_take_new_data+0x42>
 800c564:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c566:	a90a      	add	r1, sp, #40	@ 0x28
 800c568:	3010      	adds	r0, #16
 800c56a:	f008 fb25 	bl	8014bb8 <rcl_action_take_result_response>
 800c56e:	4605      	mov	r5, r0
 800c570:	2800      	cmp	r0, #0
 800c572:	d1e0      	bne.n	800c536 <_rclc_take_new_data+0xc6>
 800c574:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c578:	6860      	ldr	r0, [r4, #4]
 800c57a:	f008 ff81 	bl	8015480 <rclc_action_find_handle_by_result_request_sequence_number>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d098      	beq.n	800c4b4 <_rclc_take_new_data+0x44>
 800c582:	2301      	movs	r3, #1
 800c584:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c588:	e794      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c58a:	250b      	movs	r5, #11
 800c58c:	4628      	mov	r0, r5
 800c58e:	b01b      	add	sp, #108	@ 0x6c
 800c590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c592:	ae04      	add	r6, sp, #16
 800c594:	aa0a      	add	r2, sp, #40	@ 0x28
 800c596:	3010      	adds	r0, #16
 800c598:	4631      	mov	r1, r6
 800c59a:	f008 fd81 	bl	80150a0 <rcl_action_take_cancel_request>
 800c59e:	4605      	mov	r5, r0
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1c8      	bne.n	800c536 <_rclc_take_new_data+0xc6>
 800c5a4:	6860      	ldr	r0, [r4, #4]
 800c5a6:	a90a      	add	r1, sp, #40	@ 0x28
 800c5a8:	f008 ff28 	bl	80153fc <rclc_action_find_goal_handle_by_uuid>
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f000 80bb 	beq.w	800c72a <_rclc_take_new_data+0x2ba>
 800c5b4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	f008 fea9 	bl	8015310 <rcl_action_transition_goal_state>
 800c5be:	2803      	cmp	r0, #3
 800c5c0:	4684      	mov	ip, r0
 800c5c2:	f040 80a7 	bne.w	800c714 <_rclc_take_new_data+0x2a4>
 800c5c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c5c8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c5cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c5d2:	e884 0003 	stmia.w	r4, {r0, r1}
 800c5d6:	f887 c008 	strb.w	ip, [r7, #8]
 800c5da:	e76b      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c5dc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c5de:	3010      	adds	r0, #16
 800c5e0:	f008 fb6a 	bl	8014cb8 <rcl_action_take_feedback>
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d1a5      	bne.n	800c536 <_rclc_take_new_data+0xc6>
 800c5ea:	6860      	ldr	r0, [r4, #4]
 800c5ec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c5ee:	f008 ff05 	bl	80153fc <rclc_action_find_goal_handle_by_uuid>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	f000 80a3 	beq.w	800c740 <_rclc_take_new_data+0x2d0>
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	6860      	ldr	r0, [r4, #4]
 800c5fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c602:	e7a6      	b.n	800c552 <_rclc_take_new_data+0xe2>
 800c604:	f008 fed4 	bl	80153b0 <rclc_action_take_goal_handle>
 800c608:	4606      	mov	r6, r0
 800c60a:	6860      	ldr	r0, [r4, #4]
 800c60c:	2e00      	cmp	r6, #0
 800c60e:	f43f af47 	beq.w	800c4a0 <_rclc_take_new_data+0x30>
 800c612:	6070      	str	r0, [r6, #4]
 800c614:	69f2      	ldr	r2, [r6, #28]
 800c616:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c61a:	3010      	adds	r0, #16
 800c61c:	f008 fc88 	bl	8014f30 <rcl_action_take_goal_request>
 800c620:	4605      	mov	r5, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	f040 808e 	bne.w	800c744 <_rclc_take_new_data+0x2d4>
 800c628:	69f7      	ldr	r7, [r6, #28]
 800c62a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c62c:	7235      	strb	r5, [r6, #8]
 800c62e:	f8c6 0009 	str.w	r0, [r6, #9]
 800c632:	f8c6 100d 	str.w	r1, [r6, #13]
 800c636:	6860      	ldr	r0, [r4, #4]
 800c638:	f8c6 2011 	str.w	r2, [r6, #17]
 800c63c:	f8c6 3015 	str.w	r3, [r6, #21]
 800c640:	e72e      	b.n	800c4a0 <_rclc_take_new_data+0x30>
 800c642:	aa04      	add	r2, sp, #16
 800c644:	a90a      	add	r1, sp, #40	@ 0x28
 800c646:	3010      	adds	r0, #16
 800c648:	f008 fa3e 	bl	8014ac8 <rcl_action_take_goal_response>
 800c64c:	4605      	mov	r5, r0
 800c64e:	2800      	cmp	r0, #0
 800c650:	f47f af71 	bne.w	800c536 <_rclc_take_new_data+0xc6>
 800c654:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c658:	6860      	ldr	r0, [r4, #4]
 800c65a:	f008 feff 	bl	801545c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c65e:	b130      	cbz	r0, 800c66e <_rclc_take_new_data+0x1fe>
 800c660:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c664:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c668:	2201      	movs	r2, #1
 800c66a:	f880 2020 	strb.w	r2, [r0, #32]
 800c66e:	6860      	ldr	r0, [r4, #4]
 800c670:	e769      	b.n	800c546 <_rclc_take_new_data+0xd6>
 800c672:	aa04      	add	r2, sp, #16
 800c674:	3010      	adds	r0, #16
 800c676:	a90a      	add	r1, sp, #40	@ 0x28
 800c678:	f008 fcd2 	bl	8015020 <rcl_action_take_result_request>
 800c67c:	4605      	mov	r5, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	f47f af59 	bne.w	800c536 <_rclc_take_new_data+0xc6>
 800c684:	6860      	ldr	r0, [r4, #4]
 800c686:	a904      	add	r1, sp, #16
 800c688:	f008 feb8 	bl	80153fc <rclc_action_find_goal_handle_by_uuid>
 800c68c:	4607      	mov	r7, r0
 800c68e:	b160      	cbz	r0, 800c6aa <_rclc_take_new_data+0x23a>
 800c690:	ad0a      	add	r5, sp, #40	@ 0x28
 800c692:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c698:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c69a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c69e:	f04f 0c02 	mov.w	ip, #2
 800c6a2:	e886 0003 	stmia.w	r6, {r0, r1}
 800c6a6:	f887 c008 	strb.w	ip, [r7, #8]
 800c6aa:	6860      	ldr	r0, [r4, #4]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c6b2:	e6fa      	b.n	800c4aa <_rclc_take_new_data+0x3a>
 800c6b4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c6b8:	a90a      	add	r1, sp, #40	@ 0x28
 800c6ba:	3010      	adds	r0, #16
 800c6bc:	f008 fabc 	bl	8014c38 <rcl_action_take_cancel_response>
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	f47f af37 	bne.w	800c536 <_rclc_take_new_data+0xc6>
 800c6c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6cc:	6860      	ldr	r0, [r4, #4]
 800c6ce:	f008 fee9 	bl	80154a4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	6860      	ldr	r0, [r4, #4]
 800c6d6:	2e00      	cmp	r6, #0
 800c6d8:	f43f af40 	beq.w	800c55c <_rclc_take_new_data+0xec>
 800c6dc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c6de:	2701      	movs	r7, #1
 800c6e0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f43f af3a 	beq.w	800c55c <_rclc_take_new_data+0xec>
 800c6e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c6ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c6ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c6f2:	f008 fe83 	bl	80153fc <rclc_action_find_goal_handle_by_uuid>
 800c6f6:	b138      	cbz	r0, 800c708 <_rclc_take_new_data+0x298>
 800c6f8:	6860      	ldr	r0, [r4, #4]
 800c6fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c6fc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c700:	3501      	adds	r5, #1
 800c702:	42ab      	cmp	r3, r5
 800c704:	d8f0      	bhi.n	800c6e8 <_rclc_take_new_data+0x278>
 800c706:	e729      	b.n	800c55c <_rclc_take_new_data+0xec>
 800c708:	6860      	ldr	r0, [r4, #4]
 800c70a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c70c:	3501      	adds	r5, #1
 800c70e:	42ab      	cmp	r3, r5
 800c710:	d8ea      	bhi.n	800c6e8 <_rclc_take_new_data+0x278>
 800c712:	e723      	b.n	800c55c <_rclc_take_new_data+0xec>
 800c714:	ab06      	add	r3, sp, #24
 800c716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c718:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c71c:	2103      	movs	r1, #3
 800c71e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c722:	6860      	ldr	r0, [r4, #4]
 800c724:	f008 ff34 	bl	8015590 <rclc_action_server_goal_cancel_reject>
 800c728:	e6c4      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c72a:	ab06      	add	r3, sp, #24
 800c72c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c72e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c732:	2102      	movs	r1, #2
 800c734:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c738:	6860      	ldr	r0, [r4, #4]
 800c73a:	f008 ff29 	bl	8015590 <rclc_action_server_goal_cancel_reject>
 800c73e:	e6b9      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c740:	6860      	ldr	r0, [r4, #4]
 800c742:	e706      	b.n	800c552 <_rclc_take_new_data+0xe2>
 800c744:	6860      	ldr	r0, [r4, #4]
 800c746:	4631      	mov	r1, r6
 800c748:	f008 fe42 	bl	80153d0 <rclc_action_remove_used_goal_handle>
 800c74c:	f000 fdcc 	bl	800d2e8 <rcutils_reset_error>
 800c750:	e6b0      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c752:	2501      	movs	r5, #1
 800c754:	e6ae      	b.n	800c4b4 <_rclc_take_new_data+0x44>
 800c756:	bf00      	nop

0800c758 <_rclc_execute.part.0>:
 800c758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c75a:	7803      	ldrb	r3, [r0, #0]
 800c75c:	b087      	sub	sp, #28
 800c75e:	4604      	mov	r4, r0
 800c760:	2b0a      	cmp	r3, #10
 800c762:	f200 8136 	bhi.w	800c9d2 <_rclc_execute.part.0+0x27a>
 800c766:	e8df f003 	tbb	[pc, r3]
 800c76a:	435e      	.short	0x435e
 800c76c:	06a1664f 	.word	0x06a1664f
 800c770:	6c1e0606 	.word	0x6c1e0606
 800c774:	59          	.byte	0x59
 800c775:	00          	.byte	0x00
 800c776:	2b06      	cmp	r3, #6
 800c778:	f000 8122 	beq.w	800c9c0 <_rclc_execute.part.0+0x268>
 800c77c:	2b07      	cmp	r3, #7
 800c77e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c780:	f040 8118 	bne.w	800c9b4 <_rclc_execute.part.0+0x25c>
 800c784:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c788:	6880      	ldr	r0, [r0, #8]
 800c78a:	4798      	blx	r3
 800c78c:	f104 0110 	add.w	r1, r4, #16
 800c790:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c792:	6860      	ldr	r0, [r4, #4]
 800c794:	f006 ff26 	bl	80135e4 <rcl_send_response>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d033      	beq.n	800c804 <_rclc_execute.part.0+0xac>
 800c79c:	9005      	str	r0, [sp, #20]
 800c79e:	f000 fda3 	bl	800d2e8 <rcutils_reset_error>
 800c7a2:	9805      	ldr	r0, [sp, #20]
 800c7a4:	e02e      	b.n	800c804 <_rclc_execute.part.0+0xac>
 800c7a6:	6840      	ldr	r0, [r0, #4]
 800c7a8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8086 	beq.w	800c8be <_rclc_execute.part.0+0x166>
 800c7b2:	2600      	movs	r6, #0
 800c7b4:	2701      	movs	r7, #1
 800c7b6:	e004      	b.n	800c7c2 <_rclc_execute.part.0+0x6a>
 800c7b8:	f008 fdd4 	bl	8015364 <rclc_action_send_result_request>
 800c7bc:	b998      	cbnz	r0, 800c7e6 <_rclc_execute.part.0+0x8e>
 800c7be:	722f      	strb	r7, [r5, #8]
 800c7c0:	6860      	ldr	r0, [r4, #4]
 800c7c2:	f008 fe81 	bl	80154c8 <rclc_action_find_first_handle_with_goal_response>
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d077      	beq.n	800c8bc <_rclc_execute.part.0+0x164>
 800c7cc:	6863      	ldr	r3, [r4, #4]
 800c7ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c7d6:	f885 6020 	strb.w	r6, [r5, #32]
 800c7da:	4798      	blx	r3
 800c7dc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1e8      	bne.n	800c7b8 <_rclc_execute.part.0+0x60>
 800c7e6:	6860      	ldr	r0, [r4, #4]
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	f008 fdf1 	bl	80153d0 <rclc_action_remove_used_goal_handle>
 800c7ee:	e7e7      	b.n	800c7c0 <_rclc_execute.part.0+0x68>
 800c7f0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c7f4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	f000 80c9 	beq.w	800c990 <_rclc_execute.part.0+0x238>
 800c7fe:	6880      	ldr	r0, [r0, #8]
 800c800:	4798      	blx	r3
 800c802:	2000      	movs	r0, #0
 800c804:	b007      	add	sp, #28
 800c806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c808:	6840      	ldr	r0, [r0, #4]
 800c80a:	f007 fa1b 	bl	8013c44 <rcl_timer_call>
 800c80e:	f240 3321 	movw	r3, #801	@ 0x321
 800c812:	4298      	cmp	r0, r3
 800c814:	d004      	beq.n	800c820 <_rclc_execute.part.0+0xc8>
 800c816:	2800      	cmp	r0, #0
 800c818:	d0f4      	beq.n	800c804 <_rclc_execute.part.0+0xac>
 800c81a:	e7bf      	b.n	800c79c <_rclc_execute.part.0+0x44>
 800c81c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c81e:	4798      	blx	r3
 800c820:	2000      	movs	r0, #0
 800c822:	b007      	add	sp, #28
 800c824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c826:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c82a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c82c:	b925      	cbnz	r5, 800c838 <_rclc_execute.part.0+0xe0>
 800c82e:	4628      	mov	r0, r5
 800c830:	4798      	blx	r3
 800c832:	4628      	mov	r0, r5
 800c834:	e7e6      	b.n	800c804 <_rclc_execute.part.0+0xac>
 800c836:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c838:	68a0      	ldr	r0, [r4, #8]
 800c83a:	4798      	blx	r3
 800c83c:	2000      	movs	r0, #0
 800c83e:	b007      	add	sp, #28
 800c840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c842:	6840      	ldr	r0, [r0, #4]
 800c844:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c848:	bb3b      	cbnz	r3, 800c89a <_rclc_execute.part.0+0x142>
 800c84a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d07b      	beq.n	800c94a <_rclc_execute.part.0+0x1f2>
 800c852:	f640 0634 	movw	r6, #2100	@ 0x834
 800c856:	2701      	movs	r7, #1
 800c858:	e007      	b.n	800c86a <_rclc_execute.part.0+0x112>
 800c85a:	4628      	mov	r0, r5
 800c85c:	f008 fe4c 	bl	80154f8 <rclc_action_server_response_goal_request>
 800c860:	6860      	ldr	r0, [r4, #4]
 800c862:	4629      	mov	r1, r5
 800c864:	f008 fdb4 	bl	80153d0 <rclc_action_remove_used_goal_handle>
 800c868:	6860      	ldr	r0, [r4, #4]
 800c86a:	2100      	movs	r1, #0
 800c86c:	f008 fdde 	bl	801542c <rclc_action_find_first_handle_by_status>
 800c870:	4605      	mov	r5, r0
 800c872:	2800      	cmp	r0, #0
 800c874:	d066      	beq.n	800c944 <_rclc_execute.part.0+0x1ec>
 800c876:	6863      	ldr	r3, [r4, #4]
 800c878:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	4798      	blx	r3
 800c87e:	42b0      	cmp	r0, r6
 800c880:	f04f 0100 	mov.w	r1, #0
 800c884:	d1e9      	bne.n	800c85a <_rclc_execute.part.0+0x102>
 800c886:	2101      	movs	r1, #1
 800c888:	4628      	mov	r0, r5
 800c88a:	f008 fe35 	bl	80154f8 <rclc_action_server_response_goal_request>
 800c88e:	722f      	strb	r7, [r5, #8]
 800c890:	e7ea      	b.n	800c868 <_rclc_execute.part.0+0x110>
 800c892:	6848      	ldr	r0, [r1, #4]
 800c894:	f008 fd9c 	bl	80153d0 <rclc_action_remove_used_goal_handle>
 800c898:	6860      	ldr	r0, [r4, #4]
 800c89a:	f008 fdd3 	bl	8015444 <rclc_action_find_first_terminated_handle>
 800c89e:	4601      	mov	r1, r0
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d1f6      	bne.n	800c892 <_rclc_execute.part.0+0x13a>
 800c8a4:	6860      	ldr	r0, [r4, #4]
 800c8a6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c8aa:	e7ce      	b.n	800c84a <_rclc_execute.part.0+0xf2>
 800c8ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c8ae:	6880      	ldr	r0, [r0, #8]
 800c8b0:	f104 0110 	add.w	r1, r4, #16
 800c8b4:	4798      	blx	r3
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	b007      	add	sp, #28
 800c8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8bc:	6860      	ldr	r0, [r4, #4]
 800c8be:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c8c2:	b18b      	cbz	r3, 800c8e8 <_rclc_execute.part.0+0x190>
 800c8c4:	68c5      	ldr	r5, [r0, #12]
 800c8c6:	b32d      	cbz	r5, 800c914 <_rclc_execute.part.0+0x1bc>
 800c8c8:	2600      	movs	r6, #0
 800c8ca:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c8ce:	b143      	cbz	r3, 800c8e2 <_rclc_execute.part.0+0x18a>
 800c8d0:	69c3      	ldr	r3, [r0, #28]
 800c8d2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c8d6:	b123      	cbz	r3, 800c8e2 <_rclc_execute.part.0+0x18a>
 800c8d8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c8da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c8dc:	4628      	mov	r0, r5
 800c8de:	4798      	blx	r3
 800c8e0:	6860      	ldr	r0, [r4, #4]
 800c8e2:	682d      	ldr	r5, [r5, #0]
 800c8e4:	2d00      	cmp	r5, #0
 800c8e6:	d1f0      	bne.n	800c8ca <_rclc_execute.part.0+0x172>
 800c8e8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c8ec:	b193      	cbz	r3, 800c914 <_rclc_execute.part.0+0x1bc>
 800c8ee:	68c5      	ldr	r5, [r0, #12]
 800c8f0:	b185      	cbz	r5, 800c914 <_rclc_execute.part.0+0x1bc>
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c8f8:	b14b      	cbz	r3, 800c90e <_rclc_execute.part.0+0x1b6>
 800c8fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c8fc:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c900:	b12b      	cbz	r3, 800c90e <_rclc_execute.part.0+0x1b6>
 800c902:	4628      	mov	r0, r5
 800c904:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c908:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c90a:	4798      	blx	r3
 800c90c:	6860      	ldr	r0, [r4, #4]
 800c90e:	682d      	ldr	r5, [r5, #0]
 800c910:	2d00      	cmp	r5, #0
 800c912:	d1ef      	bne.n	800c8f4 <_rclc_execute.part.0+0x19c>
 800c914:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d081      	beq.n	800c820 <_rclc_execute.part.0+0xc8>
 800c91c:	2700      	movs	r7, #0
 800c91e:	e00b      	b.n	800c938 <_rclc_execute.part.0+0x1e0>
 800c920:	6863      	ldr	r3, [r4, #4]
 800c922:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c926:	6a1e      	ldr	r6, [r3, #32]
 800c928:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c92c:	47b0      	blx	r6
 800c92e:	6860      	ldr	r0, [r4, #4]
 800c930:	4629      	mov	r1, r5
 800c932:	f008 fd4d 	bl	80153d0 <rclc_action_remove_used_goal_handle>
 800c936:	6860      	ldr	r0, [r4, #4]
 800c938:	f008 fdd2 	bl	80154e0 <rclc_action_find_first_handle_with_result_response>
 800c93c:	4605      	mov	r5, r0
 800c93e:	2800      	cmp	r0, #0
 800c940:	d1ee      	bne.n	800c920 <_rclc_execute.part.0+0x1c8>
 800c942:	e76d      	b.n	800c820 <_rclc_execute.part.0+0xc8>
 800c944:	6860      	ldr	r0, [r4, #4]
 800c946:	f880 5020 	strb.w	r5, [r0, #32]
 800c94a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f43f af66 	beq.w	800c820 <_rclc_execute.part.0+0xc8>
 800c954:	68c5      	ldr	r5, [r0, #12]
 800c956:	b1b5      	cbz	r5, 800c986 <_rclc_execute.part.0+0x22e>
 800c958:	2602      	movs	r6, #2
 800c95a:	e001      	b.n	800c960 <_rclc_execute.part.0+0x208>
 800c95c:	682d      	ldr	r5, [r5, #0]
 800c95e:	b195      	cbz	r5, 800c986 <_rclc_execute.part.0+0x22e>
 800c960:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c964:	2b03      	cmp	r3, #3
 800c966:	d1f9      	bne.n	800c95c <_rclc_execute.part.0+0x204>
 800c968:	69c3      	ldr	r3, [r0, #28]
 800c96a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c96c:	4628      	mov	r0, r5
 800c96e:	4798      	blx	r3
 800c970:	4603      	mov	r3, r0
 800c972:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c976:	4628      	mov	r0, r5
 800c978:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c97c:	b163      	cbz	r3, 800c998 <_rclc_execute.part.0+0x240>
 800c97e:	f008 fddb 	bl	8015538 <rclc_action_server_goal_cancel_accept>
 800c982:	6860      	ldr	r0, [r4, #4]
 800c984:	e7ea      	b.n	800c95c <_rclc_execute.part.0+0x204>
 800c986:	2300      	movs	r3, #0
 800c988:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c98c:	4618      	mov	r0, r3
 800c98e:	e739      	b.n	800c804 <_rclc_execute.part.0+0xac>
 800c990:	4628      	mov	r0, r5
 800c992:	4798      	blx	r3
 800c994:	4628      	mov	r0, r5
 800c996:	e735      	b.n	800c804 <_rclc_execute.part.0+0xac>
 800c998:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c99a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c99e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9a6:	6860      	ldr	r0, [r4, #4]
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	f008 fdf1 	bl	8015590 <rclc_action_server_goal_cancel_reject>
 800c9ae:	722e      	strb	r6, [r5, #8]
 800c9b0:	6860      	ldr	r0, [r4, #4]
 800c9b2:	e7d3      	b.n	800c95c <_rclc_execute.part.0+0x204>
 800c9b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c9b6:	6880      	ldr	r0, [r0, #8]
 800c9b8:	4798      	blx	r3
 800c9ba:	f104 0110 	add.w	r1, r4, #16
 800c9be:	e6e7      	b.n	800c790 <_rclc_execute.part.0+0x38>
 800c9c0:	f100 0110 	add.w	r1, r0, #16
 800c9c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9c6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c9c8:	6880      	ldr	r0, [r0, #8]
 800c9ca:	9105      	str	r1, [sp, #20]
 800c9cc:	4798      	blx	r3
 800c9ce:	9905      	ldr	r1, [sp, #20]
 800c9d0:	e6de      	b.n	800c790 <_rclc_execute.part.0+0x38>
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	e716      	b.n	800c804 <_rclc_execute.part.0+0xac>
 800c9d6:	bf00      	nop

0800c9d8 <rclc_executor_trigger_any>:
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d03f      	beq.n	800ca5c <rclc_executor_trigger_any+0x84>
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	d03e      	beq.n	800ca5e <rclc_executor_trigger_any+0x86>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d037      	beq.n	800ca5c <rclc_executor_trigger_any+0x84>
 800c9ec:	b430      	push	{r4, r5}
 800c9ee:	f893 c000 	ldrb.w	ip, [r3]
 800c9f2:	f1bc 0f08 	cmp.w	ip, #8
 800c9f6:	d11e      	bne.n	800ca36 <rclc_executor_trigger_any+0x5e>
 800c9f8:	685c      	ldr	r4, [r3, #4]
 800c9fa:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c9fc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ca00:	d105      	bne.n	800ca0e <rclc_executor_trigger_any+0x36>
 800ca02:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ca06:	b910      	cbnz	r0, 800ca0e <rclc_executor_trigger_any+0x36>
 800ca08:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ca0c:	b128      	cbz	r0, 800ca1a <rclc_executor_trigger_any+0x42>
 800ca0e:	bc30      	pop	{r4, r5}
 800ca10:	4770      	bx	lr
 800ca12:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d1f9      	bne.n	800ca0e <rclc_executor_trigger_any+0x36>
 800ca1a:	3201      	adds	r2, #1
 800ca1c:	4291      	cmp	r1, r2
 800ca1e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ca22:	d018      	beq.n	800ca56 <rclc_executor_trigger_any+0x7e>
 800ca24:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d0f0      	beq.n	800ca0e <rclc_executor_trigger_any+0x36>
 800ca2c:	f893 c000 	ldrb.w	ip, [r3]
 800ca30:	f1bc 0f08 	cmp.w	ip, #8
 800ca34:	d0e0      	beq.n	800c9f8 <rclc_executor_trigger_any+0x20>
 800ca36:	f1bc 0f09 	cmp.w	ip, #9
 800ca3a:	d1ea      	bne.n	800ca12 <rclc_executor_trigger_any+0x3a>
 800ca3c:	685c      	ldr	r4, [r3, #4]
 800ca3e:	6a25      	ldr	r5, [r4, #32]
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	d1e4      	bne.n	800ca0e <rclc_executor_trigger_any+0x36>
 800ca44:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1e0      	bne.n	800ca0e <rclc_executor_trigger_any+0x36>
 800ca4c:	3201      	adds	r2, #1
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ca54:	d1e6      	bne.n	800ca24 <rclc_executor_trigger_any+0x4c>
 800ca56:	2000      	movs	r0, #0
 800ca58:	bc30      	pop	{r4, r5}
 800ca5a:	4770      	bx	lr
 800ca5c:	4770      	bx	lr
 800ca5e:	4608      	mov	r0, r1
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop

0800ca64 <rclc_executor_get_zero_initialized_executor>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	4903      	ldr	r1, [pc, #12]	@ (800ca74 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ca68:	4604      	mov	r4, r0
 800ca6a:	2288      	movs	r2, #136	@ 0x88
 800ca6c:	f00b ffd7 	bl	8018a1e <memcpy>
 800ca70:	4620      	mov	r0, r4
 800ca72:	bd10      	pop	{r4, pc}
 800ca74:	0801b1b0 	.word	0x0801b1b0

0800ca78 <rclc_executor_init>:
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d05f      	beq.n	800cb3c <rclc_executor_init+0xc4>
 800ca7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca80:	460c      	mov	r4, r1
 800ca82:	b0b0      	sub	sp, #192	@ 0xc0
 800ca84:	2900      	cmp	r1, #0
 800ca86:	d051      	beq.n	800cb2c <rclc_executor_init+0xb4>
 800ca88:	4605      	mov	r5, r0
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	4616      	mov	r6, r2
 800ca8e:	461f      	mov	r7, r3
 800ca90:	f000 fc04 	bl	800d29c <rcutils_allocator_is_valid>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d049      	beq.n	800cb2c <rclc_executor_init+0xb4>
 800ca98:	2e00      	cmp	r6, #0
 800ca9a:	d047      	beq.n	800cb2c <rclc_executor_init+0xb4>
 800ca9c:	492c      	ldr	r1, [pc, #176]	@ (800cb50 <rclc_executor_init+0xd8>)
 800ca9e:	2288      	movs	r2, #136	@ 0x88
 800caa0:	a80e      	add	r0, sp, #56	@ 0x38
 800caa2:	f00b ffbc 	bl	8018a1e <memcpy>
 800caa6:	a90e      	add	r1, sp, #56	@ 0x38
 800caa8:	2288      	movs	r2, #136	@ 0x88
 800caaa:	4628      	mov	r0, r5
 800caac:	f00b ffb7 	bl	8018a1e <memcpy>
 800cab0:	602c      	str	r4, [r5, #0]
 800cab2:	4668      	mov	r0, sp
 800cab4:	60ae      	str	r6, [r5, #8]
 800cab6:	466c      	mov	r4, sp
 800cab8:	f007 fa36 	bl	8013f28 <rcl_get_zero_initialized_wait_set>
 800cabc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cabe:	f105 0c14 	add.w	ip, r5, #20
 800cac2:	f8d7 8000 	ldr.w	r8, [r7]
 800cac6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800caca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cacc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cad6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cb48 <rclc_executor_init+0xd0>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	f8cc 3000 	str.w	r3, [ip]
 800cae0:	6939      	ldr	r1, [r7, #16]
 800cae2:	612f      	str	r7, [r5, #16]
 800cae4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cae8:	01b0      	lsls	r0, r6, #6
 800caea:	47c0      	blx	r8
 800caec:	6068      	str	r0, [r5, #4]
 800caee:	b338      	cbz	r0, 800cb40 <rclc_executor_init+0xc8>
 800caf0:	2400      	movs	r4, #0
 800caf2:	e000      	b.n	800caf6 <rclc_executor_init+0x7e>
 800caf4:	6868      	ldr	r0, [r5, #4]
 800caf6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cafa:	4631      	mov	r1, r6
 800cafc:	3401      	adds	r4, #1
 800cafe:	f000 fa6b 	bl	800cfd8 <rclc_executor_handle_init>
 800cb02:	42a6      	cmp	r6, r4
 800cb04:	d1f6      	bne.n	800caf4 <rclc_executor_init+0x7c>
 800cb06:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cb0a:	f000 fa59 	bl	800cfc0 <rclc_executor_handle_counters_zero_init>
 800cb0e:	4a11      	ldr	r2, [pc, #68]	@ (800cb54 <rclc_executor_init+0xdc>)
 800cb10:	686b      	ldr	r3, [r5, #4]
 800cb12:	2000      	movs	r0, #0
 800cb14:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cb18:	b163      	cbz	r3, 800cb34 <rclc_executor_init+0xbc>
 800cb1a:	692b      	ldr	r3, [r5, #16]
 800cb1c:	b153      	cbz	r3, 800cb34 <rclc_executor_init+0xbc>
 800cb1e:	68ab      	ldr	r3, [r5, #8]
 800cb20:	b143      	cbz	r3, 800cb34 <rclc_executor_init+0xbc>
 800cb22:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cb26:	b030      	add	sp, #192	@ 0xc0
 800cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2c:	200b      	movs	r0, #11
 800cb2e:	b030      	add	sp, #192	@ 0xc0
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb34:	4618      	mov	r0, r3
 800cb36:	b030      	add	sp, #192	@ 0xc0
 800cb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3c:	200b      	movs	r0, #11
 800cb3e:	4770      	bx	lr
 800cb40:	200a      	movs	r0, #10
 800cb42:	e7f4      	b.n	800cb2e <rclc_executor_init+0xb6>
 800cb44:	f3af 8000 	nop.w
 800cb48:	3b9aca00 	.word	0x3b9aca00
 800cb4c:	00000000 	.word	0x00000000
 800cb50:	0801b1b0 	.word	0x0801b1b0
 800cb54:	0800c9d9 	.word	0x0800c9d9

0800cb58 <rclc_executor_add_timer>:
 800cb58:	b300      	cbz	r0, 800cb9c <rclc_executor_add_timer+0x44>
 800cb5a:	b1f9      	cbz	r1, 800cb9c <rclc_executor_add_timer+0x44>
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cb62:	4293      	cmp	r3, r2
 800cb64:	4604      	mov	r4, r0
 800cb66:	d301      	bcc.n	800cb6c <rclc_executor_add_timer+0x14>
 800cb68:	2001      	movs	r0, #1
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	6840      	ldr	r0, [r0, #4]
 800cb6e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800cb72:	019d      	lsls	r5, r3, #6
 800cb74:	6051      	str	r1, [r2, #4]
 800cb76:	2102      	movs	r1, #2
 800cb78:	5341      	strh	r1, [r0, r5]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	2101      	movs	r1, #1
 800cb80:	f104 0514 	add.w	r5, r4, #20
 800cb84:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800cb86:	8711      	strh	r1, [r2, #56]	@ 0x38
 800cb88:	4628      	mov	r0, r5
 800cb8a:	60e3      	str	r3, [r4, #12]
 800cb8c:	f007 f9e0 	bl	8013f50 <rcl_wait_set_is_valid>
 800cb90:	b930      	cbnz	r0, 800cba0 <rclc_executor_add_timer+0x48>
 800cb92:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cb94:	3301      	adds	r3, #1
 800cb96:	2000      	movs	r0, #0
 800cb98:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cb9a:	bd38      	pop	{r3, r4, r5, pc}
 800cb9c:	200b      	movs	r0, #11
 800cb9e:	4770      	bx	lr
 800cba0:	4628      	mov	r0, r5
 800cba2:	f007 f9db 	bl	8013f5c <rcl_wait_set_fini>
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d0f3      	beq.n	800cb92 <rclc_executor_add_timer+0x3a>
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}

0800cbac <rclc_executor_prepare>:
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d044      	beq.n	800cc3a <rclc_executor_prepare+0x8e>
 800cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbb2:	f100 0514 	add.w	r5, r0, #20
 800cbb6:	b09b      	sub	sp, #108	@ 0x6c
 800cbb8:	4604      	mov	r4, r0
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f007 f9c8 	bl	8013f50 <rcl_wait_set_is_valid>
 800cbc0:	b110      	cbz	r0, 800cbc8 <rclc_executor_prepare+0x1c>
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	b01b      	add	sp, #108	@ 0x6c
 800cbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f007 f9c7 	bl	8013f5c <rcl_wait_set_fini>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d130      	bne.n	800cc34 <rclc_executor_prepare+0x88>
 800cbd2:	a80c      	add	r0, sp, #48	@ 0x30
 800cbd4:	f007 f9a8 	bl	8013f28 <rcl_get_zero_initialized_wait_set>
 800cbd8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800cbdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbe0:	46ae      	mov	lr, r5
 800cbe2:	6927      	ldr	r7, [r4, #16]
 800cbe4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cbe8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cbf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbf4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cbf8:	f8dc 3000 	ldr.w	r3, [ip]
 800cbfc:	f8ce 3000 	str.w	r3, [lr]
 800cc00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cc02:	ae04      	add	r6, sp, #16
 800cc04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6822      	ldr	r2, [r4, #0]
 800cc0a:	6033      	str	r3, [r6, #0]
 800cc0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc0e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cc10:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800cc14:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800cc18:	e9cd 2100 	strd	r2, r1, [sp]
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800cc20:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc22:	f007 fc99 	bl	8014558 <rcl_wait_set_init>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d0cc      	beq.n	800cbc4 <rclc_executor_prepare+0x18>
 800cc2a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cc2c:	f000 fb5c 	bl	800d2e8 <rcutils_reset_error>
 800cc30:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cc32:	e7c7      	b.n	800cbc4 <rclc_executor_prepare+0x18>
 800cc34:	f000 fb58 	bl	800d2e8 <rcutils_reset_error>
 800cc38:	e7cb      	b.n	800cbd2 <rclc_executor_prepare+0x26>
 800cc3a:	200b      	movs	r0, #11
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop

0800cc40 <rclc_executor_spin_some.part.0>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	f100 0614 	add.w	r6, r0, #20
 800cc48:	b083      	sub	sp, #12
 800cc4a:	4691      	mov	r9, r2
 800cc4c:	4698      	mov	r8, r3
 800cc4e:	4605      	mov	r5, r0
 800cc50:	f7ff ffac 	bl	800cbac <rclc_executor_prepare>
 800cc54:	4630      	mov	r0, r6
 800cc56:	f007 fa4d 	bl	80140f4 <rcl_wait_set_clear>
 800cc5a:	4607      	mov	r7, r0
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	f040 80ed 	bne.w	800ce3c <rclc_executor_spin_some.part.0+0x1fc>
 800cc62:	68ab      	ldr	r3, [r5, #8]
 800cc64:	4604      	mov	r4, r0
 800cc66:	b303      	cbz	r3, 800ccaa <rclc_executor_spin_some.part.0+0x6a>
 800cc68:	6869      	ldr	r1, [r5, #4]
 800cc6a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cc6e:	01a2      	lsls	r2, r4, #6
 800cc70:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cc74:	b1cb      	cbz	r3, 800ccaa <rclc_executor_spin_some.part.0+0x6a>
 800cc76:	5c8b      	ldrb	r3, [r1, r2]
 800cc78:	2b0a      	cmp	r3, #10
 800cc7a:	f200 80d8 	bhi.w	800ce2e <rclc_executor_spin_some.part.0+0x1ee>
 800cc7e:	e8df f003 	tbb	[pc, r3]
 800cc82:	9c9c      	.short	0x9c9c
 800cc84:	068c8ca7 	.word	0x068c8ca7
 800cc88:	bdc90606 	.word	0xbdc90606
 800cc8c:	b2          	.byte	0xb2
 800cc8d:	00          	.byte	0x00
 800cc8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc92:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc96:	4630      	mov	r0, r6
 800cc98:	f007 fd74 	bl	8014784 <rcl_wait_set_add_service>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f040 8086 	bne.w	800cdae <rclc_executor_spin_some.part.0+0x16e>
 800cca2:	68ab      	ldr	r3, [r5, #8]
 800cca4:	3401      	adds	r4, #1
 800cca6:	429c      	cmp	r4, r3
 800cca8:	d3de      	bcc.n	800cc68 <rclc_executor_spin_some.part.0+0x28>
 800ccaa:	4643      	mov	r3, r8
 800ccac:	464a      	mov	r2, r9
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f007 fd96 	bl	80147e0 <rcl_wait>
 800ccb4:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80c7 	beq.w	800ce4c <rclc_executor_spin_some.part.0+0x20c>
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	f040 80b5 	bne.w	800ce2e <rclc_executor_spin_some.part.0+0x1ee>
 800ccc4:	68ab      	ldr	r3, [r5, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 8159 	beq.w	800cf7e <rclc_executor_spin_some.part.0+0x33e>
 800cccc:	2400      	movs	r4, #0
 800ccce:	46a0      	mov	r8, r4
 800ccd0:	f240 1991 	movw	r9, #401	@ 0x191
 800ccd4:	e00a      	b.n	800ccec <rclc_executor_spin_some.part.0+0xac>
 800ccd6:	f7ff fb7d 	bl	800c3d4 <_rclc_check_for_new_data>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	b110      	cbz	r0, 800cce4 <rclc_executor_spin_some.part.0+0xa4>
 800ccde:	4548      	cmp	r0, r9
 800cce0:	f040 80b2 	bne.w	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800cce4:	68ab      	ldr	r3, [r5, #8]
 800cce6:	4598      	cmp	r8, r3
 800cce8:	f080 8126 	bcs.w	800cf38 <rclc_executor_spin_some.part.0+0x2f8>
 800ccec:	686a      	ldr	r2, [r5, #4]
 800ccee:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ccf8:	f108 0801 	add.w	r8, r8, #1
 800ccfc:	f1bc 0f00 	cmp.w	ip, #0
 800cd00:	d1e9      	bne.n	800ccd6 <rclc_executor_spin_some.part.0+0x96>
 800cd02:	4619      	mov	r1, r3
 800cd04:	4610      	mov	r0, r2
 800cd06:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cd0a:	4798      	blx	r3
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	f000 809b 	beq.w	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800cd12:	68ab      	ldr	r3, [r5, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 8097 	beq.w	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800cd1a:	f04f 0800 	mov.w	r8, #0
 800cd1e:	f240 1991 	movw	r9, #401	@ 0x191
 800cd22:	e009      	b.n	800cd38 <rclc_executor_spin_some.part.0+0xf8>
 800cd24:	f7ff fba4 	bl	800c470 <_rclc_take_new_data>
 800cd28:	4604      	mov	r4, r0
 800cd2a:	b110      	cbz	r0, 800cd32 <rclc_executor_spin_some.part.0+0xf2>
 800cd2c:	4548      	cmp	r0, r9
 800cd2e:	f040 808b 	bne.w	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800cd32:	68ab      	ldr	r3, [r5, #8]
 800cd34:	4598      	cmp	r8, r3
 800cd36:	d209      	bcs.n	800cd4c <rclc_executor_spin_some.part.0+0x10c>
 800cd38:	6868      	ldr	r0, [r5, #4]
 800cd3a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cd3e:	4631      	mov	r1, r6
 800cd40:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cd44:	f108 0801 	add.w	r8, r8, #1
 800cd48:	2a00      	cmp	r2, #0
 800cd4a:	d1eb      	bne.n	800cd24 <rclc_executor_spin_some.part.0+0xe4>
 800cd4c:	2600      	movs	r6, #0
 800cd4e:	b97b      	cbnz	r3, 800cd70 <rclc_executor_spin_some.part.0+0x130>
 800cd50:	e07a      	b.n	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800cd52:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cd56:	2a08      	cmp	r2, #8
 800cd58:	f000 80fd 	beq.w	800cf56 <rclc_executor_spin_some.part.0+0x316>
 800cd5c:	2a09      	cmp	r2, #9
 800cd5e:	f000 80ef 	beq.w	800cf40 <rclc_executor_spin_some.part.0+0x300>
 800cd62:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cd66:	b98a      	cbnz	r2, 800cd8c <rclc_executor_spin_some.part.0+0x14c>
 800cd68:	3601      	adds	r6, #1
 800cd6a:	429e      	cmp	r6, r3
 800cd6c:	d262      	bcs.n	800ce34 <rclc_executor_spin_some.part.0+0x1f4>
 800cd6e:	2400      	movs	r4, #0
 800cd70:	686a      	ldr	r2, [r5, #4]
 800cd72:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cd76:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cd7a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cd7e:	2900      	cmp	r1, #0
 800cd80:	d062      	beq.n	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800cd82:	7841      	ldrb	r1, [r0, #1]
 800cd84:	2900      	cmp	r1, #0
 800cd86:	d0e4      	beq.n	800cd52 <rclc_executor_spin_some.part.0+0x112>
 800cd88:	2901      	cmp	r1, #1
 800cd8a:	d1ed      	bne.n	800cd68 <rclc_executor_spin_some.part.0+0x128>
 800cd8c:	f7ff fce4 	bl	800c758 <_rclc_execute.part.0>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	f040 80b6 	bne.w	800cf02 <rclc_executor_spin_some.part.0+0x2c2>
 800cd96:	68ab      	ldr	r3, [r5, #8]
 800cd98:	e7e6      	b.n	800cd68 <rclc_executor_spin_some.part.0+0x128>
 800cd9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd9e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cda2:	4630      	mov	r0, r6
 800cda4:	f007 fcc2 	bl	801472c <rcl_wait_set_add_client>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	f43f af7a 	beq.w	800cca2 <rclc_executor_spin_some.part.0+0x62>
 800cdae:	9001      	str	r0, [sp, #4]
 800cdb0:	f000 fa9a 	bl	800d2e8 <rcutils_reset_error>
 800cdb4:	9801      	ldr	r0, [sp, #4]
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	e03c      	b.n	800ce34 <rclc_executor_spin_some.part.0+0x1f4>
 800cdba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cdbe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f007 f96a 	bl	801409c <rcl_wait_set_add_subscription>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f af6a 	beq.w	800cca2 <rclc_executor_spin_some.part.0+0x62>
 800cdce:	e7ee      	b.n	800cdae <rclc_executor_spin_some.part.0+0x16e>
 800cdd0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cdd4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f007 fc77 	bl	80146cc <rcl_wait_set_add_timer>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f43f af5f 	beq.w	800cca2 <rclc_executor_spin_some.part.0+0x62>
 800cde4:	e7e3      	b.n	800cdae <rclc_executor_spin_some.part.0+0x16e>
 800cde6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cdea:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f007 fc40 	bl	8014674 <rcl_wait_set_add_guard_condition>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f43f af54 	beq.w	800cca2 <rclc_executor_spin_some.part.0+0x62>
 800cdfa:	e7d8      	b.n	800cdae <rclc_executor_spin_some.part.0+0x16e>
 800cdfc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce00:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce04:	3110      	adds	r1, #16
 800ce06:	4630      	mov	r0, r6
 800ce08:	f008 f9c2 	bl	8015190 <rcl_action_wait_set_add_action_server>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f43f af48 	beq.w	800cca2 <rclc_executor_spin_some.part.0+0x62>
 800ce12:	e7cc      	b.n	800cdae <rclc_executor_spin_some.part.0+0x16e>
 800ce14:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce18:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce1c:	3110      	adds	r1, #16
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4630      	mov	r0, r6
 800ce22:	f007 ff8d 	bl	8014d40 <rcl_action_wait_set_add_action_client>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	f43f af3b 	beq.w	800cca2 <rclc_executor_spin_some.part.0+0x62>
 800ce2c:	e7bf      	b.n	800cdae <rclc_executor_spin_some.part.0+0x16e>
 800ce2e:	f000 fa5b 	bl	800d2e8 <rcutils_reset_error>
 800ce32:	2701      	movs	r7, #1
 800ce34:	4638      	mov	r0, r7
 800ce36:	b003      	add	sp, #12
 800ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3c:	f000 fa54 	bl	800d2e8 <rcutils_reset_error>
 800ce40:	4638      	mov	r0, r7
 800ce42:	b003      	add	sp, #12
 800ce44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce48:	4627      	mov	r7, r4
 800ce4a:	e7f3      	b.n	800ce34 <rclc_executor_spin_some.part.0+0x1f4>
 800ce4c:	68ab      	ldr	r3, [r5, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 8092 	beq.w	800cf78 <rclc_executor_spin_some.part.0+0x338>
 800ce54:	2400      	movs	r4, #0
 800ce56:	46a0      	mov	r8, r4
 800ce58:	f240 1991 	movw	r9, #401	@ 0x191
 800ce5c:	e008      	b.n	800ce70 <rclc_executor_spin_some.part.0+0x230>
 800ce5e:	f7ff fab9 	bl	800c3d4 <_rclc_check_for_new_data>
 800ce62:	4604      	mov	r4, r0
 800ce64:	b108      	cbz	r0, 800ce6a <rclc_executor_spin_some.part.0+0x22a>
 800ce66:	4548      	cmp	r0, r9
 800ce68:	d1ee      	bne.n	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800ce6a:	68ab      	ldr	r3, [r5, #8]
 800ce6c:	4598      	cmp	r8, r3
 800ce6e:	d265      	bcs.n	800cf3c <rclc_executor_spin_some.part.0+0x2fc>
 800ce70:	686a      	ldr	r2, [r5, #4]
 800ce72:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ce76:	4631      	mov	r1, r6
 800ce78:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ce7c:	f108 0801 	add.w	r8, r8, #1
 800ce80:	f1bc 0f00 	cmp.w	ip, #0
 800ce84:	d1eb      	bne.n	800ce5e <rclc_executor_spin_some.part.0+0x21e>
 800ce86:	4619      	mov	r1, r3
 800ce88:	4610      	mov	r0, r2
 800ce8a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ce8e:	4798      	blx	r3
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d0d9      	beq.n	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800ce94:	68ab      	ldr	r3, [r5, #8]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0d6      	beq.n	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800ce9a:	f04f 0800 	mov.w	r8, #0
 800ce9e:	f240 1991 	movw	r9, #401	@ 0x191
 800cea2:	f240 2a59 	movw	sl, #601	@ 0x259
 800cea6:	e00e      	b.n	800cec6 <rclc_executor_spin_some.part.0+0x286>
 800cea8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ceac:	2b08      	cmp	r3, #8
 800ceae:	d033      	beq.n	800cf18 <rclc_executor_spin_some.part.0+0x2d8>
 800ceb0:	2b09      	cmp	r3, #9
 800ceb2:	d028      	beq.n	800cf06 <rclc_executor_spin_some.part.0+0x2c6>
 800ceb4:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ceb8:	b9fb      	cbnz	r3, 800cefa <rclc_executor_spin_some.part.0+0x2ba>
 800ceba:	68ab      	ldr	r3, [r5, #8]
 800cebc:	f108 0801 	add.w	r8, r8, #1
 800cec0:	4598      	cmp	r8, r3
 800cec2:	d2b7      	bcs.n	800ce34 <rclc_executor_spin_some.part.0+0x1f4>
 800cec4:	2400      	movs	r4, #0
 800cec6:	6868      	ldr	r0, [r5, #4]
 800cec8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cecc:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ced0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d0b7      	beq.n	800ce48 <rclc_executor_spin_some.part.0+0x208>
 800ced8:	4631      	mov	r1, r6
 800ceda:	f7ff fac9 	bl	800c470 <_rclc_take_new_data>
 800cede:	b118      	cbz	r0, 800cee8 <rclc_executor_spin_some.part.0+0x2a8>
 800cee0:	4548      	cmp	r0, r9
 800cee2:	d001      	beq.n	800cee8 <rclc_executor_spin_some.part.0+0x2a8>
 800cee4:	4550      	cmp	r0, sl
 800cee6:	d10c      	bne.n	800cf02 <rclc_executor_spin_some.part.0+0x2c2>
 800cee8:	686b      	ldr	r3, [r5, #4]
 800ceea:	eb13 000b 	adds.w	r0, r3, fp
 800ceee:	d021      	beq.n	800cf34 <rclc_executor_spin_some.part.0+0x2f4>
 800cef0:	7842      	ldrb	r2, [r0, #1]
 800cef2:	2a00      	cmp	r2, #0
 800cef4:	d0d8      	beq.n	800cea8 <rclc_executor_spin_some.part.0+0x268>
 800cef6:	2a01      	cmp	r2, #1
 800cef8:	d1df      	bne.n	800ceba <rclc_executor_spin_some.part.0+0x27a>
 800cefa:	f7ff fc2d 	bl	800c758 <_rclc_execute.part.0>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d0db      	beq.n	800ceba <rclc_executor_spin_some.part.0+0x27a>
 800cf02:	4607      	mov	r7, r0
 800cf04:	e796      	b.n	800ce34 <rclc_executor_spin_some.part.0+0x1f4>
 800cf06:	6843      	ldr	r3, [r0, #4]
 800cf08:	6a1a      	ldr	r2, [r3, #32]
 800cf0a:	2a00      	cmp	r2, #0
 800cf0c:	d1f5      	bne.n	800cefa <rclc_executor_spin_some.part.0+0x2ba>
 800cf0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d0d1      	beq.n	800ceba <rclc_executor_spin_some.part.0+0x27a>
 800cf16:	e7f0      	b.n	800cefa <rclc_executor_spin_some.part.0+0x2ba>
 800cf18:	6843      	ldr	r3, [r0, #4]
 800cf1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf1c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cf20:	d1eb      	bne.n	800cefa <rclc_executor_spin_some.part.0+0x2ba>
 800cf22:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cf26:	2a00      	cmp	r2, #0
 800cf28:	d1e7      	bne.n	800cefa <rclc_executor_spin_some.part.0+0x2ba>
 800cf2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0c3      	beq.n	800ceba <rclc_executor_spin_some.part.0+0x27a>
 800cf32:	e7e2      	b.n	800cefa <rclc_executor_spin_some.part.0+0x2ba>
 800cf34:	270b      	movs	r7, #11
 800cf36:	e77d      	b.n	800ce34 <rclc_executor_spin_some.part.0+0x1f4>
 800cf38:	686a      	ldr	r2, [r5, #4]
 800cf3a:	e6e2      	b.n	800cd02 <rclc_executor_spin_some.part.0+0xc2>
 800cf3c:	686a      	ldr	r2, [r5, #4]
 800cf3e:	e7a2      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x246>
 800cf40:	6842      	ldr	r2, [r0, #4]
 800cf42:	6a11      	ldr	r1, [r2, #32]
 800cf44:	2900      	cmp	r1, #0
 800cf46:	f47f af21 	bne.w	800cd8c <rclc_executor_spin_some.part.0+0x14c>
 800cf4a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cf4e:	2a00      	cmp	r2, #0
 800cf50:	f43f af0a 	beq.w	800cd68 <rclc_executor_spin_some.part.0+0x128>
 800cf54:	e71a      	b.n	800cd8c <rclc_executor_spin_some.part.0+0x14c>
 800cf56:	6842      	ldr	r2, [r0, #4]
 800cf58:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cf5a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cf5e:	f47f af15 	bne.w	800cd8c <rclc_executor_spin_some.part.0+0x14c>
 800cf62:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cf66:	2900      	cmp	r1, #0
 800cf68:	f47f af10 	bne.w	800cd8c <rclc_executor_spin_some.part.0+0x14c>
 800cf6c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	f43f aef9 	beq.w	800cd68 <rclc_executor_spin_some.part.0+0x128>
 800cf76:	e709      	b.n	800cd8c <rclc_executor_spin_some.part.0+0x14c>
 800cf78:	686a      	ldr	r2, [r5, #4]
 800cf7a:	461c      	mov	r4, r3
 800cf7c:	e783      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x246>
 800cf7e:	686a      	ldr	r2, [r5, #4]
 800cf80:	461c      	mov	r4, r3
 800cf82:	e6be      	b.n	800cd02 <rclc_executor_spin_some.part.0+0xc2>

0800cf84 <rclc_executor_spin>:
 800cf84:	b1d0      	cbz	r0, 800cfbc <rclc_executor_spin+0x38>
 800cf86:	b510      	push	{r4, lr}
 800cf88:	4604      	mov	r4, r0
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800cf90:	6820      	ldr	r0, [r4, #0]
 800cf92:	e9cd 2300 	strd	r2, r3, [sp]
 800cf96:	f005 fe0b 	bl	8012bb0 <rcl_context_is_valid>
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	b131      	cbz	r1, 800cfb2 <rclc_executor_spin+0x2e>
 800cfa4:	f7ff fe4c 	bl	800cc40 <rclc_executor_spin_some.part.0>
 800cfa8:	f030 0302 	bics.w	r3, r0, #2
 800cfac:	d0ee      	beq.n	800cf8c <rclc_executor_spin+0x8>
 800cfae:	b002      	add	sp, #8
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	f000 f999 	bl	800d2e8 <rcutils_reset_error>
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	b002      	add	sp, #8
 800cfba:	bd10      	pop	{r4, pc}
 800cfbc:	200b      	movs	r0, #11
 800cfbe:	4770      	bx	lr

0800cfc0 <rclc_executor_handle_counters_zero_init>:
 800cfc0:	b130      	cbz	r0, 800cfd0 <rclc_executor_handle_counters_zero_init+0x10>
 800cfc2:	b508      	push	{r3, lr}
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	f00b fc60 	bl	801888c <memset>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	bd08      	pop	{r3, pc}
 800cfd0:	200b      	movs	r0, #11
 800cfd2:	4770      	bx	lr
 800cfd4:	0000      	movs	r0, r0
	...

0800cfd8 <rclc_executor_handle_init>:
 800cfd8:	b168      	cbz	r0, 800cff6 <rclc_executor_handle_init+0x1e>
 800cfda:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d000 <rclc_executor_handle_init+0x28>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	220b      	movs	r2, #11
 800cfe2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800cfe6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cfea:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cfee:	8002      	strh	r2, [r0, #0]
 800cff0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cff2:	4618      	mov	r0, r3
 800cff4:	4770      	bx	lr
 800cff6:	200b      	movs	r0, #11
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	f3af 8000 	nop.w
	...

0800d008 <rclc_support_init_with_options>:
 800d008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d00c:	b083      	sub	sp, #12
 800d00e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d010:	b340      	cbz	r0, 800d064 <rclc_support_init_with_options+0x5c>
 800d012:	461d      	mov	r5, r3
 800d014:	b333      	cbz	r3, 800d064 <rclc_support_init_with_options+0x5c>
 800d016:	b32e      	cbz	r6, 800d064 <rclc_support_init_with_options+0x5c>
 800d018:	46e9      	mov	r9, sp
 800d01a:	4604      	mov	r4, r0
 800d01c:	4648      	mov	r0, r9
 800d01e:	460f      	mov	r7, r1
 800d020:	4690      	mov	r8, r2
 800d022:	f005 fdbb 	bl	8012b9c <rcl_get_zero_initialized_context>
 800d026:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d02a:	462a      	mov	r2, r5
 800d02c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d030:	4623      	mov	r3, r4
 800d032:	4641      	mov	r1, r8
 800d034:	4638      	mov	r0, r7
 800d036:	f005 fe21 	bl	8012c7c <rcl_init>
 800d03a:	4605      	mov	r5, r0
 800d03c:	b960      	cbnz	r0, 800d058 <rclc_support_init_with_options+0x50>
 800d03e:	60a6      	str	r6, [r4, #8]
 800d040:	4632      	mov	r2, r6
 800d042:	f104 010c 	add.w	r1, r4, #12
 800d046:	2003      	movs	r0, #3
 800d048:	f006 fb6e 	bl	8013728 <rcl_clock_init>
 800d04c:	4605      	mov	r5, r0
 800d04e:	b918      	cbnz	r0, 800d058 <rclc_support_init_with_options+0x50>
 800d050:	4628      	mov	r0, r5
 800d052:	b003      	add	sp, #12
 800d054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d058:	f000 f946 	bl	800d2e8 <rcutils_reset_error>
 800d05c:	4628      	mov	r0, r5
 800d05e:	b003      	add	sp, #12
 800d060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d064:	250b      	movs	r5, #11
 800d066:	4628      	mov	r0, r5
 800d068:	b003      	add	sp, #12
 800d06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d06e:	bf00      	nop

0800d070 <rclc_node_init_default>:
 800d070:	b3b8      	cbz	r0, 800d0e2 <rclc_node_init_default+0x72>
 800d072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d076:	460d      	mov	r5, r1
 800d078:	b0a1      	sub	sp, #132	@ 0x84
 800d07a:	b329      	cbz	r1, 800d0c8 <rclc_node_init_default+0x58>
 800d07c:	4616      	mov	r6, r2
 800d07e:	b31a      	cbz	r2, 800d0c8 <rclc_node_init_default+0x58>
 800d080:	461f      	mov	r7, r3
 800d082:	b30b      	cbz	r3, 800d0c8 <rclc_node_init_default+0x58>
 800d084:	f10d 0810 	add.w	r8, sp, #16
 800d088:	4604      	mov	r4, r0
 800d08a:	4640      	mov	r0, r8
 800d08c:	f005 ff1c 	bl	8012ec8 <rcl_get_zero_initialized_node>
 800d090:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d094:	f10d 0918 	add.w	r9, sp, #24
 800d098:	e884 0003 	stmia.w	r4, {r0, r1}
 800d09c:	4648      	mov	r0, r9
 800d09e:	f006 f88b 	bl	80131b8 <rcl_node_get_default_options>
 800d0a2:	4640      	mov	r0, r8
 800d0a4:	f005 ff10 	bl	8012ec8 <rcl_get_zero_initialized_node>
 800d0a8:	f8cd 9000 	str.w	r9, [sp]
 800d0ac:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d0b0:	463b      	mov	r3, r7
 800d0b2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f005 ff0e 	bl	8012edc <rcl_node_init>
 800d0c0:	b930      	cbnz	r0, 800d0d0 <rclc_node_init_default+0x60>
 800d0c2:	b021      	add	sp, #132	@ 0x84
 800d0c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0c8:	200b      	movs	r0, #11
 800d0ca:	b021      	add	sp, #132	@ 0x84
 800d0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0d0:	9003      	str	r0, [sp, #12]
 800d0d2:	f000 f909 	bl	800d2e8 <rcutils_reset_error>
 800d0d6:	f000 f907 	bl	800d2e8 <rcutils_reset_error>
 800d0da:	9803      	ldr	r0, [sp, #12]
 800d0dc:	b021      	add	sp, #132	@ 0x84
 800d0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	200b      	movs	r0, #11
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop

0800d0e8 <rclc_publisher_init_default>:
 800d0e8:	b368      	cbz	r0, 800d146 <rclc_publisher_init_default+0x5e>
 800d0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	b0a0      	sub	sp, #128	@ 0x80
 800d0f2:	b321      	cbz	r1, 800d13e <rclc_publisher_init_default+0x56>
 800d0f4:	4616      	mov	r6, r2
 800d0f6:	b312      	cbz	r2, 800d13e <rclc_publisher_init_default+0x56>
 800d0f8:	461f      	mov	r7, r3
 800d0fa:	b303      	cbz	r3, 800d13e <rclc_publisher_init_default+0x56>
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	f7ff f859 	bl	800c1b4 <rcl_get_zero_initialized_publisher>
 800d102:	f10d 0810 	add.w	r8, sp, #16
 800d106:	6020      	str	r0, [r4, #0]
 800d108:	4640      	mov	r0, r8
 800d10a:	f7ff f8ef 	bl	800c2ec <rcl_publisher_get_default_options>
 800d10e:	490f      	ldr	r1, [pc, #60]	@ (800d14c <rclc_publisher_init_default+0x64>)
 800d110:	2250      	movs	r2, #80	@ 0x50
 800d112:	4640      	mov	r0, r8
 800d114:	f00b fc83 	bl	8018a1e <memcpy>
 800d118:	f8cd 8000 	str.w	r8, [sp]
 800d11c:	463b      	mov	r3, r7
 800d11e:	4632      	mov	r2, r6
 800d120:	4629      	mov	r1, r5
 800d122:	4620      	mov	r0, r4
 800d124:	f7ff f84c 	bl	800c1c0 <rcl_publisher_init>
 800d128:	b910      	cbnz	r0, 800d130 <rclc_publisher_init_default+0x48>
 800d12a:	b020      	add	sp, #128	@ 0x80
 800d12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d130:	9003      	str	r0, [sp, #12]
 800d132:	f000 f8d9 	bl	800d2e8 <rcutils_reset_error>
 800d136:	9803      	ldr	r0, [sp, #12]
 800d138:	b020      	add	sp, #128	@ 0x80
 800d13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13e:	200b      	movs	r0, #11
 800d140:	b020      	add	sp, #128	@ 0x80
 800d142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d146:	200b      	movs	r0, #11
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	0801b238 	.word	0x0801b238

0800d150 <rclc_publisher_init_best_effort>:
 800d150:	b368      	cbz	r0, 800d1ae <rclc_publisher_init_best_effort+0x5e>
 800d152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	460d      	mov	r5, r1
 800d158:	b0a0      	sub	sp, #128	@ 0x80
 800d15a:	b321      	cbz	r1, 800d1a6 <rclc_publisher_init_best_effort+0x56>
 800d15c:	4616      	mov	r6, r2
 800d15e:	b312      	cbz	r2, 800d1a6 <rclc_publisher_init_best_effort+0x56>
 800d160:	461f      	mov	r7, r3
 800d162:	b303      	cbz	r3, 800d1a6 <rclc_publisher_init_best_effort+0x56>
 800d164:	4604      	mov	r4, r0
 800d166:	f7ff f825 	bl	800c1b4 <rcl_get_zero_initialized_publisher>
 800d16a:	f10d 0810 	add.w	r8, sp, #16
 800d16e:	6020      	str	r0, [r4, #0]
 800d170:	4640      	mov	r0, r8
 800d172:	f7ff f8bb 	bl	800c2ec <rcl_publisher_get_default_options>
 800d176:	490f      	ldr	r1, [pc, #60]	@ (800d1b4 <rclc_publisher_init_best_effort+0x64>)
 800d178:	2250      	movs	r2, #80	@ 0x50
 800d17a:	4640      	mov	r0, r8
 800d17c:	f00b fc4f 	bl	8018a1e <memcpy>
 800d180:	f8cd 8000 	str.w	r8, [sp]
 800d184:	463b      	mov	r3, r7
 800d186:	4632      	mov	r2, r6
 800d188:	4629      	mov	r1, r5
 800d18a:	4620      	mov	r0, r4
 800d18c:	f7ff f818 	bl	800c1c0 <rcl_publisher_init>
 800d190:	b910      	cbnz	r0, 800d198 <rclc_publisher_init_best_effort+0x48>
 800d192:	b020      	add	sp, #128	@ 0x80
 800d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d198:	9003      	str	r0, [sp, #12]
 800d19a:	f000 f8a5 	bl	800d2e8 <rcutils_reset_error>
 800d19e:	9803      	ldr	r0, [sp, #12]
 800d1a0:	b020      	add	sp, #128	@ 0x80
 800d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a6:	200b      	movs	r0, #11
 800d1a8:	b020      	add	sp, #128	@ 0x80
 800d1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ae:	200b      	movs	r0, #11
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	0801b288 	.word	0x0801b288

0800d1b8 <rclc_timer_init_default>:
 800d1b8:	b360      	cbz	r0, 800d214 <rclc_timer_init_default+0x5c>
 800d1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1be:	460e      	mov	r6, r1
 800d1c0:	b08a      	sub	sp, #40	@ 0x28
 800d1c2:	b319      	cbz	r1, 800d20c <rclc_timer_init_default+0x54>
 800d1c4:	4690      	mov	r8, r2
 800d1c6:	461f      	mov	r7, r3
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	f006 fc8b 	bl	8013ae4 <rcl_get_zero_initialized_timer>
 800d1ce:	68b4      	ldr	r4, [r6, #8]
 800d1d0:	6028      	str	r0, [r5, #0]
 800d1d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1d4:	f10d 0c0c 	add.w	ip, sp, #12
 800d1d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	f8cc 3000 	str.w	r3, [ip]
 800d1e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1e4:	9302      	str	r3, [sp, #8]
 800d1e6:	e9cd 8700 	strd	r8, r7, [sp]
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	f106 010c 	add.w	r1, r6, #12
 800d1f2:	f006 fc7d 	bl	8013af0 <rcl_timer_init>
 800d1f6:	b910      	cbnz	r0, 800d1fe <rclc_timer_init_default+0x46>
 800d1f8:	b00a      	add	sp, #40	@ 0x28
 800d1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1fe:	9009      	str	r0, [sp, #36]	@ 0x24
 800d200:	f000 f872 	bl	800d2e8 <rcutils_reset_error>
 800d204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d206:	b00a      	add	sp, #40	@ 0x28
 800d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20c:	200b      	movs	r0, #11
 800d20e:	b00a      	add	sp, #40	@ 0x28
 800d210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d214:	200b      	movs	r0, #11
 800d216:	4770      	bx	lr

0800d218 <__default_zero_allocate>:
 800d218:	f00a be4e 	b.w	8017eb8 <calloc>

0800d21c <__default_reallocate>:
 800d21c:	f00a bfec 	b.w	80181f8 <realloc>

0800d220 <__default_deallocate>:
 800d220:	f00a bec8 	b.w	8017fb4 <free>

0800d224 <__default_allocate>:
 800d224:	f00a bebe 	b.w	8017fa4 <malloc>

0800d228 <rcutils_get_zero_initialized_allocator>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	4c05      	ldr	r4, [pc, #20]	@ (800d240 <rcutils_get_zero_initialized_allocator+0x18>)
 800d22c:	4686      	mov	lr, r0
 800d22e:	4684      	mov	ip, r0
 800d230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	f8cc 3000 	str.w	r3, [ip]
 800d23c:	4670      	mov	r0, lr
 800d23e:	bd10      	pop	{r4, pc}
 800d240:	0801b2d8 	.word	0x0801b2d8

0800d244 <rcutils_set_default_allocator>:
 800d244:	b1a8      	cbz	r0, 800d272 <rcutils_set_default_allocator+0x2e>
 800d246:	6802      	ldr	r2, [r0, #0]
 800d248:	b1a2      	cbz	r2, 800d274 <rcutils_set_default_allocator+0x30>
 800d24a:	6841      	ldr	r1, [r0, #4]
 800d24c:	b1a1      	cbz	r1, 800d278 <rcutils_set_default_allocator+0x34>
 800d24e:	b410      	push	{r4}
 800d250:	68c4      	ldr	r4, [r0, #12]
 800d252:	b164      	cbz	r4, 800d26e <rcutils_set_default_allocator+0x2a>
 800d254:	6880      	ldr	r0, [r0, #8]
 800d256:	b138      	cbz	r0, 800d268 <rcutils_set_default_allocator+0x24>
 800d258:	4b08      	ldr	r3, [pc, #32]	@ (800d27c <rcutils_set_default_allocator+0x38>)
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	2200      	movs	r2, #0
 800d25e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d262:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d266:	2001      	movs	r0, #1
 800d268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	4620      	mov	r0, r4
 800d270:	e7fa      	b.n	800d268 <rcutils_set_default_allocator+0x24>
 800d272:	4770      	bx	lr
 800d274:	4610      	mov	r0, r2
 800d276:	4770      	bx	lr
 800d278:	4608      	mov	r0, r1
 800d27a:	4770      	bx	lr
 800d27c:	2000024c 	.word	0x2000024c

0800d280 <rcutils_get_default_allocator>:
 800d280:	b510      	push	{r4, lr}
 800d282:	4c05      	ldr	r4, [pc, #20]	@ (800d298 <rcutils_get_default_allocator+0x18>)
 800d284:	4686      	mov	lr, r0
 800d286:	4684      	mov	ip, r0
 800d288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d28a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d28e:	6823      	ldr	r3, [r4, #0]
 800d290:	f8cc 3000 	str.w	r3, [ip]
 800d294:	4670      	mov	r0, lr
 800d296:	bd10      	pop	{r4, pc}
 800d298:	2000024c 	.word	0x2000024c

0800d29c <rcutils_allocator_is_valid>:
 800d29c:	b158      	cbz	r0, 800d2b6 <rcutils_allocator_is_valid+0x1a>
 800d29e:	6803      	ldr	r3, [r0, #0]
 800d2a0:	b143      	cbz	r3, 800d2b4 <rcutils_allocator_is_valid+0x18>
 800d2a2:	6843      	ldr	r3, [r0, #4]
 800d2a4:	b133      	cbz	r3, 800d2b4 <rcutils_allocator_is_valid+0x18>
 800d2a6:	68c3      	ldr	r3, [r0, #12]
 800d2a8:	b123      	cbz	r3, 800d2b4 <rcutils_allocator_is_valid+0x18>
 800d2aa:	6880      	ldr	r0, [r0, #8]
 800d2ac:	3800      	subs	r0, #0
 800d2ae:	bf18      	it	ne
 800d2b0:	2001      	movne	r0, #1
 800d2b2:	4770      	bx	lr
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	4770      	bx	lr

0800d2b8 <rcutils_get_error_string>:
 800d2b8:	4b06      	ldr	r3, [pc, #24]	@ (800d2d4 <rcutils_get_error_string+0x1c>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	b13b      	cbz	r3, 800d2ce <rcutils_get_error_string+0x16>
 800d2be:	4b06      	ldr	r3, [pc, #24]	@ (800d2d8 <rcutils_get_error_string+0x20>)
 800d2c0:	781a      	ldrb	r2, [r3, #0]
 800d2c2:	b90a      	cbnz	r2, 800d2c8 <rcutils_get_error_string+0x10>
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	701a      	strb	r2, [r3, #0]
 800d2c8:	4b04      	ldr	r3, [pc, #16]	@ (800d2dc <rcutils_get_error_string+0x24>)
 800d2ca:	7818      	ldrb	r0, [r3, #0]
 800d2cc:	4770      	bx	lr
 800d2ce:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <rcutils_get_error_string+0x28>)
 800d2d0:	7818      	ldrb	r0, [r3, #0]
 800d2d2:	4770      	bx	lr
 800d2d4:	20006950 	.word	0x20006950
 800d2d8:	20006969 	.word	0x20006969
 800d2dc:	20006968 	.word	0x20006968
 800d2e0:	0801b2ec 	.word	0x0801b2ec
 800d2e4:	00000000 	.word	0x00000000

0800d2e8 <rcutils_reset_error>:
 800d2e8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d308 <rcutils_reset_error+0x20>
 800d2ec:	4a08      	ldr	r2, [pc, #32]	@ (800d310 <rcutils_reset_error+0x28>)
 800d2ee:	4809      	ldr	r0, [pc, #36]	@ (800d314 <rcutils_reset_error+0x2c>)
 800d2f0:	4909      	ldr	r1, [pc, #36]	@ (800d318 <rcutils_reset_error+0x30>)
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	8013      	strh	r3, [r2, #0]
 800d2f6:	ed82 7b02 	vstr	d7, [r2, #8]
 800d2fa:	4a08      	ldr	r2, [pc, #32]	@ (800d31c <rcutils_reset_error+0x34>)
 800d2fc:	7003      	strb	r3, [r0, #0]
 800d2fe:	700b      	strb	r3, [r1, #0]
 800d300:	7013      	strb	r3, [r2, #0]
 800d302:	4770      	bx	lr
 800d304:	f3af 8000 	nop.w
	...
 800d310:	20006958 	.word	0x20006958
 800d314:	20006969 	.word	0x20006969
 800d318:	20006968 	.word	0x20006968
 800d31c:	20006950 	.word	0x20006950

0800d320 <rcutils_system_time_now>:
 800d320:	b308      	cbz	r0, 800d366 <rcutils_system_time_now+0x46>
 800d322:	b570      	push	{r4, r5, r6, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	4604      	mov	r4, r0
 800d328:	4669      	mov	r1, sp
 800d32a:	2001      	movs	r0, #1
 800d32c:	f7f4 fe4c 	bl	8001fc8 <clock_gettime>
 800d330:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d334:	2d00      	cmp	r5, #0
 800d336:	db13      	blt.n	800d360 <rcutils_system_time_now+0x40>
 800d338:	9902      	ldr	r1, [sp, #8]
 800d33a:	2900      	cmp	r1, #0
 800d33c:	db0d      	blt.n	800d35a <rcutils_system_time_now+0x3a>
 800d33e:	4e0b      	ldr	r6, [pc, #44]	@ (800d36c <rcutils_system_time_now+0x4c>)
 800d340:	fba3 3206 	umull	r3, r2, r3, r6
 800d344:	185b      	adds	r3, r3, r1
 800d346:	fb06 2205 	mla	r2, r6, r5, r2
 800d34a:	f04f 0000 	mov.w	r0, #0
 800d34e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d352:	e9c4 3200 	strd	r3, r2, [r4]
 800d356:	b004      	add	sp, #16
 800d358:	bd70      	pop	{r4, r5, r6, pc}
 800d35a:	ea53 0205 	orrs.w	r2, r3, r5
 800d35e:	d1ee      	bne.n	800d33e <rcutils_system_time_now+0x1e>
 800d360:	2002      	movs	r0, #2
 800d362:	b004      	add	sp, #16
 800d364:	bd70      	pop	{r4, r5, r6, pc}
 800d366:	200b      	movs	r0, #11
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	3b9aca00 	.word	0x3b9aca00

0800d370 <rcutils_steady_time_now>:
 800d370:	b308      	cbz	r0, 800d3b6 <rcutils_steady_time_now+0x46>
 800d372:	b570      	push	{r4, r5, r6, lr}
 800d374:	b084      	sub	sp, #16
 800d376:	4604      	mov	r4, r0
 800d378:	4669      	mov	r1, sp
 800d37a:	2000      	movs	r0, #0
 800d37c:	f7f4 fe24 	bl	8001fc8 <clock_gettime>
 800d380:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d384:	2d00      	cmp	r5, #0
 800d386:	db13      	blt.n	800d3b0 <rcutils_steady_time_now+0x40>
 800d388:	9902      	ldr	r1, [sp, #8]
 800d38a:	2900      	cmp	r1, #0
 800d38c:	db0d      	blt.n	800d3aa <rcutils_steady_time_now+0x3a>
 800d38e:	4e0b      	ldr	r6, [pc, #44]	@ (800d3bc <rcutils_steady_time_now+0x4c>)
 800d390:	fba3 3206 	umull	r3, r2, r3, r6
 800d394:	185b      	adds	r3, r3, r1
 800d396:	fb06 2205 	mla	r2, r6, r5, r2
 800d39a:	f04f 0000 	mov.w	r0, #0
 800d39e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d3a2:	e9c4 3200 	strd	r3, r2, [r4]
 800d3a6:	b004      	add	sp, #16
 800d3a8:	bd70      	pop	{r4, r5, r6, pc}
 800d3aa:	ea53 0205 	orrs.w	r2, r3, r5
 800d3ae:	d1ee      	bne.n	800d38e <rcutils_steady_time_now+0x1e>
 800d3b0:	2002      	movs	r0, #2
 800d3b2:	b004      	add	sp, #16
 800d3b4:	bd70      	pop	{r4, r5, r6, pc}
 800d3b6:	200b      	movs	r0, #11
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	3b9aca00 	.word	0x3b9aca00

0800d3c0 <rmw_get_zero_initialized_init_options>:
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	2238      	movs	r2, #56	@ 0x38
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	f00b fa60 	bl	801888c <memset>
 800d3cc:	f104 0010 	add.w	r0, r4, #16
 800d3d0:	f000 f80a 	bl	800d3e8 <rmw_get_default_security_options>
 800d3d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d3d8:	60e3      	str	r3, [r4, #12]
 800d3da:	4620      	mov	r0, r4
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	bf00      	nop

0800d3e0 <rmw_get_default_publisher_options>:
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	6002      	str	r2, [r0, #0]
 800d3e4:	7102      	strb	r2, [r0, #4]
 800d3e6:	4770      	bx	lr

0800d3e8 <rmw_get_default_security_options>:
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	7002      	strb	r2, [r0, #0]
 800d3ec:	6042      	str	r2, [r0, #4]
 800d3ee:	4770      	bx	lr

0800d3f0 <rmw_uros_set_custom_transport>:
 800d3f0:	b470      	push	{r4, r5, r6}
 800d3f2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d3f6:	b162      	cbz	r2, 800d412 <rmw_uros_set_custom_transport+0x22>
 800d3f8:	b15b      	cbz	r3, 800d412 <rmw_uros_set_custom_transport+0x22>
 800d3fa:	b155      	cbz	r5, 800d412 <rmw_uros_set_custom_transport+0x22>
 800d3fc:	b14e      	cbz	r6, 800d412 <rmw_uros_set_custom_transport+0x22>
 800d3fe:	4c06      	ldr	r4, [pc, #24]	@ (800d418 <rmw_uros_set_custom_transport+0x28>)
 800d400:	7020      	strb	r0, [r4, #0]
 800d402:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d406:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d40a:	6166      	str	r6, [r4, #20]
 800d40c:	2000      	movs	r0, #0
 800d40e:	bc70      	pop	{r4, r5, r6}
 800d410:	4770      	bx	lr
 800d412:	200b      	movs	r0, #11
 800d414:	bc70      	pop	{r4, r5, r6}
 800d416:	4770      	bx	lr
 800d418:	2000696c 	.word	0x2000696c

0800d41c <rmw_init_options_init>:
 800d41c:	b084      	sub	sp, #16
 800d41e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d420:	b083      	sub	sp, #12
 800d422:	ad09      	add	r5, sp, #36	@ 0x24
 800d424:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d428:	b130      	cbz	r0, 800d438 <rmw_init_options_init+0x1c>
 800d42a:	4604      	mov	r4, r0
 800d42c:	4628      	mov	r0, r5
 800d42e:	f7ff ff35 	bl	800d29c <rcutils_allocator_is_valid>
 800d432:	b108      	cbz	r0, 800d438 <rmw_init_options_init+0x1c>
 800d434:	68a6      	ldr	r6, [r4, #8]
 800d436:	b12e      	cbz	r6, 800d444 <rmw_init_options_init+0x28>
 800d438:	200b      	movs	r0, #11
 800d43a:	b003      	add	sp, #12
 800d43c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d440:	b004      	add	sp, #16
 800d442:	4770      	bx	lr
 800d444:	2200      	movs	r2, #0
 800d446:	2300      	movs	r3, #0
 800d448:	e9c4 2300 	strd	r2, r3, [r4]
 800d44c:	4b22      	ldr	r3, [pc, #136]	@ (800d4d8 <rmw_init_options_init+0xbc>)
 800d44e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d4e8 <rmw_init_options_init+0xcc>
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	60a3      	str	r3, [r4, #8]
 800d456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d458:	f104 0c20 	add.w	ip, r4, #32
 800d45c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d460:	466f      	mov	r7, sp
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	f8cc 3000 	str.w	r3, [ip]
 800d468:	4638      	mov	r0, r7
 800d46a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d46e:	60e6      	str	r6, [r4, #12]
 800d470:	f7ff ffba 	bl	800d3e8 <rmw_get_default_security_options>
 800d474:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d478:	f104 0310 	add.w	r3, r4, #16
 800d47c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d480:	2203      	movs	r2, #3
 800d482:	4816      	ldr	r0, [pc, #88]	@ (800d4dc <rmw_init_options_init+0xc0>)
 800d484:	4916      	ldr	r1, [pc, #88]	@ (800d4e0 <rmw_init_options_init+0xc4>)
 800d486:	7626      	strb	r6, [r4, #24]
 800d488:	f000 feca 	bl	800e220 <rmw_uxrce_init_init_options_impl_memory>
 800d48c:	4813      	ldr	r0, [pc, #76]	@ (800d4dc <rmw_init_options_init+0xc0>)
 800d48e:	f008 feb3 	bl	80161f8 <get_memory>
 800d492:	b1f0      	cbz	r0, 800d4d2 <rmw_init_options_init+0xb6>
 800d494:	4a13      	ldr	r2, [pc, #76]	@ (800d4e4 <rmw_init_options_init+0xc8>)
 800d496:	6883      	ldr	r3, [r0, #8]
 800d498:	6851      	ldr	r1, [r2, #4]
 800d49a:	7810      	ldrb	r0, [r2, #0]
 800d49c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d49e:	7418      	strb	r0, [r3, #16]
 800d4a0:	6159      	str	r1, [r3, #20]
 800d4a2:	68d1      	ldr	r1, [r2, #12]
 800d4a4:	61d9      	str	r1, [r3, #28]
 800d4a6:	6911      	ldr	r1, [r2, #16]
 800d4a8:	6219      	str	r1, [r3, #32]
 800d4aa:	6951      	ldr	r1, [r2, #20]
 800d4ac:	6892      	ldr	r2, [r2, #8]
 800d4ae:	619a      	str	r2, [r3, #24]
 800d4b0:	6259      	str	r1, [r3, #36]	@ 0x24
 800d4b2:	f004 f987 	bl	80117c4 <uxr_nanos>
 800d4b6:	f00a fe33 	bl	8018120 <srand>
 800d4ba:	f00a fe5f 	bl	801817c <rand>
 800d4be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4c0:	6298      	str	r0, [r3, #40]	@ 0x28
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	d0f9      	beq.n	800d4ba <rmw_init_options_init+0x9e>
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	b003      	add	sp, #12
 800d4ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d4ce:	b004      	add	sp, #16
 800d4d0:	4770      	bx	lr
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	e7b1      	b.n	800d43a <rmw_init_options_init+0x1e>
 800d4d6:	bf00      	nop
 800d4d8:	0801bd38 	.word	0x0801bd38
 800d4dc:	2000b284 	.word	0x2000b284
 800d4e0:	20006b20 	.word	0x20006b20
 800d4e4:	2000696c 	.word	0x2000696c
 800d4e8:	0801b2f0 	.word	0x0801b2f0

0800d4ec <rmw_init_options_copy>:
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	b158      	cbz	r0, 800d508 <rmw_init_options_copy+0x1c>
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	b149      	cbz	r1, 800d508 <rmw_init_options_copy+0x1c>
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	6880      	ldr	r0, [r0, #8]
 800d4f8:	b120      	cbz	r0, 800d504 <rmw_init_options_copy+0x18>
 800d4fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d574 <rmw_init_options_copy+0x88>)
 800d4fc:	6819      	ldr	r1, [r3, #0]
 800d4fe:	f7f2 fe8f 	bl	8000220 <strcmp>
 800d502:	bb90      	cbnz	r0, 800d56a <rmw_init_options_copy+0x7e>
 800d504:	68ab      	ldr	r3, [r5, #8]
 800d506:	b113      	cbz	r3, 800d50e <rmw_init_options_copy+0x22>
 800d508:	250b      	movs	r5, #11
 800d50a:	4628      	mov	r0, r5
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
 800d50e:	4623      	mov	r3, r4
 800d510:	462a      	mov	r2, r5
 800d512:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d516:	f8d3 c000 	ldr.w	ip, [r3]
 800d51a:	6858      	ldr	r0, [r3, #4]
 800d51c:	6899      	ldr	r1, [r3, #8]
 800d51e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d522:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d526:	3310      	adds	r3, #16
 800d528:	42b3      	cmp	r3, r6
 800d52a:	f8c2 c000 	str.w	ip, [r2]
 800d52e:	6050      	str	r0, [r2, #4]
 800d530:	6091      	str	r1, [r2, #8]
 800d532:	f102 0210 	add.w	r2, r2, #16
 800d536:	d1ee      	bne.n	800d516 <rmw_init_options_copy+0x2a>
 800d538:	6819      	ldr	r1, [r3, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	480e      	ldr	r0, [pc, #56]	@ (800d578 <rmw_init_options_copy+0x8c>)
 800d53e:	6053      	str	r3, [r2, #4]
 800d540:	6011      	str	r1, [r2, #0]
 800d542:	f008 fe59 	bl	80161f8 <get_memory>
 800d546:	b198      	cbz	r0, 800d570 <rmw_init_options_copy+0x84>
 800d548:	6883      	ldr	r3, [r0, #8]
 800d54a:	636b      	str	r3, [r5, #52]	@ 0x34
 800d54c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d54e:	f102 0c10 	add.w	ip, r2, #16
 800d552:	f103 0410 	add.w	r4, r3, #16
 800d556:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d55a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d55c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d560:	2500      	movs	r5, #0
 800d562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d566:	4628      	mov	r0, r5
 800d568:	bd70      	pop	{r4, r5, r6, pc}
 800d56a:	250c      	movs	r5, #12
 800d56c:	4628      	mov	r0, r5
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	2501      	movs	r5, #1
 800d572:	e7ca      	b.n	800d50a <rmw_init_options_copy+0x1e>
 800d574:	0801bd38 	.word	0x0801bd38
 800d578:	2000b284 	.word	0x2000b284

0800d57c <rmw_init_options_fini>:
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d03d      	beq.n	800d5fc <rmw_init_options_fini+0x80>
 800d580:	b510      	push	{r4, lr}
 800d582:	4604      	mov	r4, r0
 800d584:	b08e      	sub	sp, #56	@ 0x38
 800d586:	3020      	adds	r0, #32
 800d588:	f7ff fe88 	bl	800d29c <rcutils_allocator_is_valid>
 800d58c:	b360      	cbz	r0, 800d5e8 <rmw_init_options_fini+0x6c>
 800d58e:	68a0      	ldr	r0, [r4, #8]
 800d590:	b120      	cbz	r0, 800d59c <rmw_init_options_fini+0x20>
 800d592:	4b1c      	ldr	r3, [pc, #112]	@ (800d604 <rmw_init_options_fini+0x88>)
 800d594:	6819      	ldr	r1, [r3, #0]
 800d596:	f7f2 fe43 	bl	8000220 <strcmp>
 800d59a:	bb68      	cbnz	r0, 800d5f8 <rmw_init_options_fini+0x7c>
 800d59c:	4b1a      	ldr	r3, [pc, #104]	@ (800d608 <rmw_init_options_fini+0x8c>)
 800d59e:	6819      	ldr	r1, [r3, #0]
 800d5a0:	b331      	cbz	r1, 800d5f0 <rmw_init_options_fini+0x74>
 800d5a2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d5a4:	e001      	b.n	800d5aa <rmw_init_options_fini+0x2e>
 800d5a6:	6849      	ldr	r1, [r1, #4]
 800d5a8:	b311      	cbz	r1, 800d5f0 <rmw_init_options_fini+0x74>
 800d5aa:	688b      	ldr	r3, [r1, #8]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d1fa      	bne.n	800d5a6 <rmw_init_options_fini+0x2a>
 800d5b0:	4815      	ldr	r0, [pc, #84]	@ (800d608 <rmw_init_options_fini+0x8c>)
 800d5b2:	f008 fe31 	bl	8016218 <put_memory>
 800d5b6:	4668      	mov	r0, sp
 800d5b8:	f7ff ff02 	bl	800d3c0 <rmw_get_zero_initialized_init_options>
 800d5bc:	46ee      	mov	lr, sp
 800d5be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5c2:	46a4      	mov	ip, r4
 800d5c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d5dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	b00e      	add	sp, #56	@ 0x38
 800d5e6:	bd10      	pop	{r4, pc}
 800d5e8:	230b      	movs	r3, #11
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	b00e      	add	sp, #56	@ 0x38
 800d5ee:	bd10      	pop	{r4, pc}
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	b00e      	add	sp, #56	@ 0x38
 800d5f6:	bd10      	pop	{r4, pc}
 800d5f8:	230c      	movs	r3, #12
 800d5fa:	e7f2      	b.n	800d5e2 <rmw_init_options_fini+0x66>
 800d5fc:	230b      	movs	r3, #11
 800d5fe:	4618      	mov	r0, r3
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	0801bd38 	.word	0x0801bd38
 800d608:	2000b284 	.word	0x2000b284

0800d60c <rmw_init>:
 800d60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d610:	b083      	sub	sp, #12
 800d612:	2800      	cmp	r0, #0
 800d614:	f000 80d3 	beq.w	800d7be <rmw_init+0x1b2>
 800d618:	460e      	mov	r6, r1
 800d61a:	2900      	cmp	r1, #0
 800d61c:	f000 80cf 	beq.w	800d7be <rmw_init+0x1b2>
 800d620:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d622:	4605      	mov	r5, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 80ca 	beq.w	800d7be <rmw_init+0x1b2>
 800d62a:	4b78      	ldr	r3, [pc, #480]	@ (800d80c <rmw_init+0x200>)
 800d62c:	6880      	ldr	r0, [r0, #8]
 800d62e:	681f      	ldr	r7, [r3, #0]
 800d630:	b128      	cbz	r0, 800d63e <rmw_init+0x32>
 800d632:	4639      	mov	r1, r7
 800d634:	f7f2 fdf4 	bl	8000220 <strcmp>
 800d638:	2800      	cmp	r0, #0
 800d63a:	f040 80ca 	bne.w	800d7d2 <rmw_init+0x1c6>
 800d63e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d642:	4c73      	ldr	r4, [pc, #460]	@ (800d810 <rmw_init+0x204>)
 800d644:	4973      	ldr	r1, [pc, #460]	@ (800d814 <rmw_init+0x208>)
 800d646:	4874      	ldr	r0, [pc, #464]	@ (800d818 <rmw_init+0x20c>)
 800d648:	60b7      	str	r7, [r6, #8]
 800d64a:	e9c6 2300 	strd	r2, r3, [r6]
 800d64e:	68eb      	ldr	r3, [r5, #12]
 800d650:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d652:	2201      	movs	r2, #1
 800d654:	f000 fd84 	bl	800e160 <rmw_uxrce_init_session_memory>
 800d658:	4620      	mov	r0, r4
 800d65a:	4970      	ldr	r1, [pc, #448]	@ (800d81c <rmw_init+0x210>)
 800d65c:	2204      	movs	r2, #4
 800d65e:	f000 fdbf 	bl	800e1e0 <rmw_uxrce_init_static_input_buffer_memory>
 800d662:	f04f 0800 	mov.w	r8, #0
 800d666:	486c      	ldr	r0, [pc, #432]	@ (800d818 <rmw_init+0x20c>)
 800d668:	f884 800d 	strb.w	r8, [r4, #13]
 800d66c:	f008 fdc4 	bl	80161f8 <get_memory>
 800d670:	2800      	cmp	r0, #0
 800d672:	f000 80a9 	beq.w	800d7c8 <rmw_init+0x1bc>
 800d676:	6884      	ldr	r4, [r0, #8]
 800d678:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d67a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d67c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d680:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d684:	9101      	str	r1, [sp, #4]
 800d686:	6a00      	ldr	r0, [r0, #32]
 800d688:	9000      	str	r0, [sp, #0]
 800d68a:	f104 0910 	add.w	r9, r4, #16
 800d68e:	4661      	mov	r1, ip
 800d690:	4648      	mov	r0, r9
 800d692:	f002 f807 	bl	800f6a4 <uxr_set_custom_transport_callbacks>
 800d696:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d69a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d69e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d6a2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d6a6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d6aa:	495d      	ldr	r1, [pc, #372]	@ (800d820 <rmw_init+0x214>)
 800d6ac:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d6b0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d6b4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d6b8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d6bc:	4859      	ldr	r0, [pc, #356]	@ (800d824 <rmw_init+0x218>)
 800d6be:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d6c6:	f000 fd2b 	bl	800e120 <rmw_uxrce_init_node_memory>
 800d6ca:	4957      	ldr	r1, [pc, #348]	@ (800d828 <rmw_init+0x21c>)
 800d6cc:	4857      	ldr	r0, [pc, #348]	@ (800d82c <rmw_init+0x220>)
 800d6ce:	2205      	movs	r2, #5
 800d6d0:	f000 fd06 	bl	800e0e0 <rmw_uxrce_init_subscription_memory>
 800d6d4:	4956      	ldr	r1, [pc, #344]	@ (800d830 <rmw_init+0x224>)
 800d6d6:	4857      	ldr	r0, [pc, #348]	@ (800d834 <rmw_init+0x228>)
 800d6d8:	220a      	movs	r2, #10
 800d6da:	f000 fce1 	bl	800e0a0 <rmw_uxrce_init_publisher_memory>
 800d6de:	4956      	ldr	r1, [pc, #344]	@ (800d838 <rmw_init+0x22c>)
 800d6e0:	4856      	ldr	r0, [pc, #344]	@ (800d83c <rmw_init+0x230>)
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f000 fc9c 	bl	800e020 <rmw_uxrce_init_service_memory>
 800d6e8:	4955      	ldr	r1, [pc, #340]	@ (800d840 <rmw_init+0x234>)
 800d6ea:	4856      	ldr	r0, [pc, #344]	@ (800d844 <rmw_init+0x238>)
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f000 fcb7 	bl	800e060 <rmw_uxrce_init_client_memory>
 800d6f2:	4955      	ldr	r1, [pc, #340]	@ (800d848 <rmw_init+0x23c>)
 800d6f4:	4855      	ldr	r0, [pc, #340]	@ (800d84c <rmw_init+0x240>)
 800d6f6:	220f      	movs	r2, #15
 800d6f8:	f000 fd52 	bl	800e1a0 <rmw_uxrce_init_topic_memory>
 800d6fc:	4954      	ldr	r1, [pc, #336]	@ (800d850 <rmw_init+0x244>)
 800d6fe:	4855      	ldr	r0, [pc, #340]	@ (800d854 <rmw_init+0x248>)
 800d700:	2203      	movs	r2, #3
 800d702:	f000 fd8d 	bl	800e220 <rmw_uxrce_init_init_options_impl_memory>
 800d706:	4954      	ldr	r1, [pc, #336]	@ (800d858 <rmw_init+0x24c>)
 800d708:	4854      	ldr	r0, [pc, #336]	@ (800d85c <rmw_init+0x250>)
 800d70a:	2204      	movs	r2, #4
 800d70c:	f000 fda8 	bl	800e260 <rmw_uxrce_init_wait_set_memory>
 800d710:	4953      	ldr	r1, [pc, #332]	@ (800d860 <rmw_init+0x254>)
 800d712:	4854      	ldr	r0, [pc, #336]	@ (800d864 <rmw_init+0x258>)
 800d714:	2204      	movs	r2, #4
 800d716:	f000 fdc3 	bl	800e2a0 <rmw_uxrce_init_guard_condition_memory>
 800d71a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d71c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d71e:	4642      	mov	r2, r8
 800d720:	f000 fc38 	bl	800df94 <rmw_uxrce_transport_init>
 800d724:	4607      	mov	r7, r0
 800d726:	2800      	cmp	r0, #0
 800d728:	d158      	bne.n	800d7dc <rmw_init+0x1d0>
 800d72a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d72c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d732:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d736:	4628      	mov	r0, r5
 800d738:	f002 f9ae 	bl	800fa98 <uxr_init_session>
 800d73c:	494a      	ldr	r1, [pc, #296]	@ (800d868 <rmw_init+0x25c>)
 800d73e:	4622      	mov	r2, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f002 f9cd 	bl	800fae0 <uxr_set_topic_callback>
 800d746:	4949      	ldr	r1, [pc, #292]	@ (800d86c <rmw_init+0x260>)
 800d748:	463a      	mov	r2, r7
 800d74a:	4628      	mov	r0, r5
 800d74c:	f002 f9c4 	bl	800fad8 <uxr_set_status_callback>
 800d750:	4947      	ldr	r1, [pc, #284]	@ (800d870 <rmw_init+0x264>)
 800d752:	463a      	mov	r2, r7
 800d754:	4628      	mov	r0, r5
 800d756:	f002 f9c7 	bl	800fae8 <uxr_set_request_callback>
 800d75a:	4946      	ldr	r1, [pc, #280]	@ (800d874 <rmw_init+0x268>)
 800d75c:	463a      	mov	r2, r7
 800d75e:	4628      	mov	r0, r5
 800d760:	f002 f9c6 	bl	800faf0 <uxr_set_reply_callback>
 800d764:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d768:	2304      	movs	r3, #4
 800d76a:	0092      	lsls	r2, r2, #2
 800d76c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d770:	4628      	mov	r0, r5
 800d772:	f002 f9fb 	bl	800fb6c <uxr_create_input_reliable_stream>
 800d776:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d77a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d77e:	0092      	lsls	r2, r2, #2
 800d780:	2304      	movs	r3, #4
 800d782:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d786:	4628      	mov	r0, r5
 800d788:	f002 f9c8 	bl	800fb1c <uxr_create_output_reliable_stream>
 800d78c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d790:	4628      	mov	r0, r5
 800d792:	f002 f9e5 	bl	800fb60 <uxr_create_input_best_effort_stream>
 800d796:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d79a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d79e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d7a2:	3114      	adds	r1, #20
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	f002 f9a7 	bl	800faf8 <uxr_create_output_best_effort_stream>
 800d7aa:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f002 ff9a 	bl	80106e8 <uxr_create_session>
 800d7b4:	b1f8      	cbz	r0, 800d7f6 <rmw_init+0x1ea>
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	b003      	add	sp, #12
 800d7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7be:	270b      	movs	r7, #11
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	b003      	add	sp, #12
 800d7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	2701      	movs	r7, #1
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	b003      	add	sp, #12
 800d7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7d2:	270c      	movs	r7, #12
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	b003      	add	sp, #12
 800d7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7dc:	4648      	mov	r0, r9
 800d7de:	f001 ffa3 	bl	800f728 <uxr_close_custom_transport>
 800d7e2:	480d      	ldr	r0, [pc, #52]	@ (800d818 <rmw_init+0x20c>)
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	f008 fd17 	bl	8016218 <put_memory>
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d7f0:	b003      	add	sp, #12
 800d7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7f6:	4648      	mov	r0, r9
 800d7f8:	f001 ff96 	bl	800f728 <uxr_close_custom_transport>
 800d7fc:	4806      	ldr	r0, [pc, #24]	@ (800d818 <rmw_init+0x20c>)
 800d7fe:	4621      	mov	r1, r4
 800d800:	f008 fd0a 	bl	8016218 <put_memory>
 800d804:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d806:	2701      	movs	r7, #1
 800d808:	e7d5      	b.n	800d7b6 <rmw_init+0x1aa>
 800d80a:	bf00      	nop
 800d80c:	0801bd38 	.word	0x0801bd38
 800d810:	2000b2d4 	.word	0x2000b2d4
 800d814:	20007580 	.word	0x20007580
 800d818:	2000b2c4 	.word	0x2000b2c4
 800d81c:	20008b28 	.word	0x20008b28
 800d820:	20006ba4 	.word	0x20006ba4
 800d824:	2000b294 	.word	0x2000b294
 800d828:	2000ac28 	.word	0x2000ac28
 800d82c:	2000b2e4 	.word	0x2000b2e4
 800d830:	20006c48 	.word	0x20006c48
 800d834:	2000b2a4 	.word	0x2000b2a4
 800d838:	200074b8 	.word	0x200074b8
 800d83c:	2000b2b4 	.word	0x2000b2b4
 800d840:	200069d8 	.word	0x200069d8
 800d844:	200069c4 	.word	0x200069c4
 800d848:	2000b060 	.word	0x2000b060
 800d84c:	2000b2f4 	.word	0x2000b2f4
 800d850:	20006b20 	.word	0x20006b20
 800d854:	2000b284 	.word	0x2000b284
 800d858:	2000b204 	.word	0x2000b204
 800d85c:	2000b304 	.word	0x2000b304
 800d860:	20006aa0 	.word	0x20006aa0
 800d864:	2000b274 	.word	0x2000b274
 800d868:	08016031 	.word	0x08016031
 800d86c:	08016029 	.word	0x08016029
 800d870:	080160c9 	.word	0x080160c9
 800d874:	08016165 	.word	0x08016165

0800d878 <rmw_context_fini>:
 800d878:	4b17      	ldr	r3, [pc, #92]	@ (800d8d8 <rmw_context_fini+0x60>)
 800d87a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	681c      	ldr	r4, [r3, #0]
 800d880:	4605      	mov	r5, r0
 800d882:	b334      	cbz	r4, 800d8d2 <rmw_context_fini+0x5a>
 800d884:	2600      	movs	r6, #0
 800d886:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d88a:	6902      	ldr	r2, [r0, #16]
 800d88c:	428a      	cmp	r2, r1
 800d88e:	d018      	beq.n	800d8c2 <rmw_context_fini+0x4a>
 800d890:	2c00      	cmp	r4, #0
 800d892:	d1f8      	bne.n	800d886 <rmw_context_fini+0xe>
 800d894:	b189      	cbz	r1, 800d8ba <rmw_context_fini+0x42>
 800d896:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d89a:	789b      	ldrb	r3, [r3, #2]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d8a2:	bf14      	ite	ne
 800d8a4:	210a      	movne	r1, #10
 800d8a6:	2100      	moveq	r1, #0
 800d8a8:	f002 fef6 	bl	8010698 <uxr_delete_session_retries>
 800d8ac:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d8ae:	f000 fd17 	bl	800e2e0 <rmw_uxrce_fini_session_memory>
 800d8b2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d8b4:	3010      	adds	r0, #16
 800d8b6:	f001 ff37 	bl	800f728 <uxr_close_custom_transport>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d8be:	4630      	mov	r0, r6
 800d8c0:	bd70      	pop	{r4, r5, r6, pc}
 800d8c2:	3018      	adds	r0, #24
 800d8c4:	f000 f89c 	bl	800da00 <rmw_destroy_node>
 800d8c8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	2c00      	cmp	r4, #0
 800d8ce:	d1da      	bne.n	800d886 <rmw_context_fini+0xe>
 800d8d0:	e7e0      	b.n	800d894 <rmw_context_fini+0x1c>
 800d8d2:	4626      	mov	r6, r4
 800d8d4:	e7de      	b.n	800d894 <rmw_context_fini+0x1c>
 800d8d6:	bf00      	nop
 800d8d8:	2000b294 	.word	0x2000b294

0800d8dc <create_node>:
 800d8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d05f      	beq.n	800d9a6 <create_node+0xca>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	4835      	ldr	r0, [pc, #212]	@ (800d9c0 <create_node+0xe4>)
 800d8ea:	460f      	mov	r7, r1
 800d8ec:	4690      	mov	r8, r2
 800d8ee:	461d      	mov	r5, r3
 800d8f0:	f008 fc82 	bl	80161f8 <get_memory>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d056      	beq.n	800d9a6 <create_node+0xca>
 800d8f8:	6884      	ldr	r4, [r0, #8]
 800d8fa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d8fc:	6123      	str	r3, [r4, #16]
 800d8fe:	f008 fce3 	bl	80162c8 <rmw_get_implementation_identifier>
 800d902:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d906:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d90a:	f8c4 9020 	str.w	r9, [r4, #32]
 800d90e:	4630      	mov	r0, r6
 800d910:	f7f2 fc90 	bl	8000234 <strlen>
 800d914:	1c42      	adds	r2, r0, #1
 800d916:	2a3c      	cmp	r2, #60	@ 0x3c
 800d918:	f104 0518 	add.w	r5, r4, #24
 800d91c:	d840      	bhi.n	800d9a0 <create_node+0xc4>
 800d91e:	4648      	mov	r0, r9
 800d920:	4631      	mov	r1, r6
 800d922:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d926:	f00b f87a 	bl	8018a1e <memcpy>
 800d92a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d92e:	4638      	mov	r0, r7
 800d930:	f7f2 fc80 	bl	8000234 <strlen>
 800d934:	1c42      	adds	r2, r0, #1
 800d936:	2a3c      	cmp	r2, #60	@ 0x3c
 800d938:	d832      	bhi.n	800d9a0 <create_node+0xc4>
 800d93a:	4639      	mov	r1, r7
 800d93c:	4648      	mov	r0, r9
 800d93e:	f00b f86e 	bl	8018a1e <memcpy>
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d948:	2101      	movs	r1, #1
 800d94a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d94e:	1842      	adds	r2, r0, r1
 800d950:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d954:	f001 feec 	bl	800f730 <uxr_object_id>
 800d958:	6160      	str	r0, [r4, #20]
 800d95a:	783b      	ldrb	r3, [r7, #0]
 800d95c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d95e:	d127      	bne.n	800d9b0 <create_node+0xd4>
 800d960:	787b      	ldrb	r3, [r7, #1]
 800d962:	bb2b      	cbnz	r3, 800d9b0 <create_node+0xd4>
 800d964:	4a17      	ldr	r2, [pc, #92]	@ (800d9c4 <create_node+0xe8>)
 800d966:	4818      	ldr	r0, [pc, #96]	@ (800d9c8 <create_node+0xec>)
 800d968:	4633      	mov	r3, r6
 800d96a:	213c      	movs	r1, #60	@ 0x3c
 800d96c:	f00a fe20 	bl	80185b0 <sniprintf>
 800d970:	6920      	ldr	r0, [r4, #16]
 800d972:	4915      	ldr	r1, [pc, #84]	@ (800d9c8 <create_node+0xec>)
 800d974:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d978:	9100      	str	r1, [sp, #0]
 800d97a:	2106      	movs	r1, #6
 800d97c:	9101      	str	r1, [sp, #4]
 800d97e:	6811      	ldr	r1, [r2, #0]
 800d980:	6962      	ldr	r2, [r4, #20]
 800d982:	fa1f f388 	uxth.w	r3, r8
 800d986:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d98a:	f001 fd01 	bl	800f390 <uxr_buffer_create_participant_bin>
 800d98e:	4602      	mov	r2, r0
 800d990:	6920      	ldr	r0, [r4, #16]
 800d992:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d996:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d99a:	f000 fe17 	bl	800e5cc <run_xrce_session>
 800d99e:	b918      	cbnz	r0, 800d9a8 <create_node+0xcc>
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f000 fca3 	bl	800e2ec <rmw_uxrce_fini_node_memory>
 800d9a6:	2500      	movs	r5, #0
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	b003      	add	sp, #12
 800d9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9b0:	4a06      	ldr	r2, [pc, #24]	@ (800d9cc <create_node+0xf0>)
 800d9b2:	9600      	str	r6, [sp, #0]
 800d9b4:	463b      	mov	r3, r7
 800d9b6:	213c      	movs	r1, #60	@ 0x3c
 800d9b8:	4803      	ldr	r0, [pc, #12]	@ (800d9c8 <create_node+0xec>)
 800d9ba:	f00a fdf9 	bl	80185b0 <sniprintf>
 800d9be:	e7d7      	b.n	800d970 <create_node+0x94>
 800d9c0:	2000b294 	.word	0x2000b294
 800d9c4:	0801b30c 	.word	0x0801b30c
 800d9c8:	20006988 	.word	0x20006988
 800d9cc:	0801b2f4 	.word	0x0801b2f4

0800d9d0 <rmw_create_node>:
 800d9d0:	b199      	cbz	r1, 800d9fa <rmw_create_node+0x2a>
 800d9d2:	780b      	ldrb	r3, [r1, #0]
 800d9d4:	468c      	mov	ip, r1
 800d9d6:	b183      	cbz	r3, 800d9fa <rmw_create_node+0x2a>
 800d9d8:	b410      	push	{r4}
 800d9da:	4614      	mov	r4, r2
 800d9dc:	b14a      	cbz	r2, 800d9f2 <rmw_create_node+0x22>
 800d9de:	7813      	ldrb	r3, [r2, #0]
 800d9e0:	b13b      	cbz	r3, 800d9f2 <rmw_create_node+0x22>
 800d9e2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	4660      	mov	r0, ip
 800d9ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ee:	f7ff bf75 	b.w	800d8dc <create_node>
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop

0800da00 <rmw_destroy_node>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	b328      	cbz	r0, 800da50 <rmw_destroy_node+0x50>
 800da04:	4607      	mov	r7, r0
 800da06:	6800      	ldr	r0, [r0, #0]
 800da08:	b120      	cbz	r0, 800da14 <rmw_destroy_node+0x14>
 800da0a:	4b36      	ldr	r3, [pc, #216]	@ (800dae4 <rmw_destroy_node+0xe4>)
 800da0c:	6819      	ldr	r1, [r3, #0]
 800da0e:	f7f2 fc07 	bl	8000220 <strcmp>
 800da12:	b9e8      	cbnz	r0, 800da50 <rmw_destroy_node+0x50>
 800da14:	687d      	ldr	r5, [r7, #4]
 800da16:	b1dd      	cbz	r5, 800da50 <rmw_destroy_node+0x50>
 800da18:	4b33      	ldr	r3, [pc, #204]	@ (800dae8 <rmw_destroy_node+0xe8>)
 800da1a:	681c      	ldr	r4, [r3, #0]
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	d05f      	beq.n	800dae0 <rmw_destroy_node+0xe0>
 800da20:	2600      	movs	r6, #0
 800da22:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da26:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800da2a:	429d      	cmp	r5, r3
 800da2c:	d013      	beq.n	800da56 <rmw_destroy_node+0x56>
 800da2e:	2c00      	cmp	r4, #0
 800da30:	d1f7      	bne.n	800da22 <rmw_destroy_node+0x22>
 800da32:	4b2e      	ldr	r3, [pc, #184]	@ (800daec <rmw_destroy_node+0xec>)
 800da34:	681c      	ldr	r4, [r3, #0]
 800da36:	b1c4      	cbz	r4, 800da6a <rmw_destroy_node+0x6a>
 800da38:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da3c:	6a0b      	ldr	r3, [r1, #32]
 800da3e:	429d      	cmp	r5, r3
 800da40:	d1f9      	bne.n	800da36 <rmw_destroy_node+0x36>
 800da42:	317c      	adds	r1, #124	@ 0x7c
 800da44:	4638      	mov	r0, r7
 800da46:	f000 fa45 	bl	800ded4 <rmw_destroy_subscription>
 800da4a:	2801      	cmp	r0, #1
 800da4c:	4606      	mov	r6, r0
 800da4e:	d1f2      	bne.n	800da36 <rmw_destroy_node+0x36>
 800da50:	2601      	movs	r6, #1
 800da52:	4630      	mov	r0, r6
 800da54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da56:	3184      	adds	r1, #132	@ 0x84
 800da58:	4638      	mov	r0, r7
 800da5a:	f000 f9a5 	bl	800dda8 <rmw_destroy_publisher>
 800da5e:	2801      	cmp	r0, #1
 800da60:	4606      	mov	r6, r0
 800da62:	d0f5      	beq.n	800da50 <rmw_destroy_node+0x50>
 800da64:	2c00      	cmp	r4, #0
 800da66:	d1dc      	bne.n	800da22 <rmw_destroy_node+0x22>
 800da68:	e7e3      	b.n	800da32 <rmw_destroy_node+0x32>
 800da6a:	4b21      	ldr	r3, [pc, #132]	@ (800daf0 <rmw_destroy_node+0xf0>)
 800da6c:	681c      	ldr	r4, [r3, #0]
 800da6e:	b16c      	cbz	r4, 800da8c <rmw_destroy_node+0x8c>
 800da70:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da74:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800da76:	429d      	cmp	r5, r3
 800da78:	d1f9      	bne.n	800da6e <rmw_destroy_node+0x6e>
 800da7a:	317c      	adds	r1, #124	@ 0x7c
 800da7c:	4638      	mov	r0, r7
 800da7e:	f000 f9e5 	bl	800de4c <rmw_destroy_service>
 800da82:	2801      	cmp	r0, #1
 800da84:	4606      	mov	r6, r0
 800da86:	d0e3      	beq.n	800da50 <rmw_destroy_node+0x50>
 800da88:	2c00      	cmp	r4, #0
 800da8a:	d1f1      	bne.n	800da70 <rmw_destroy_node+0x70>
 800da8c:	4b19      	ldr	r3, [pc, #100]	@ (800daf4 <rmw_destroy_node+0xf4>)
 800da8e:	681c      	ldr	r4, [r3, #0]
 800da90:	b16c      	cbz	r4, 800daae <rmw_destroy_node+0xae>
 800da92:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da96:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800da98:	429d      	cmp	r5, r3
 800da9a:	d1f9      	bne.n	800da90 <rmw_destroy_node+0x90>
 800da9c:	317c      	adds	r1, #124	@ 0x7c
 800da9e:	4638      	mov	r0, r7
 800daa0:	f008 fbce 	bl	8016240 <rmw_destroy_client>
 800daa4:	2801      	cmp	r0, #1
 800daa6:	4606      	mov	r6, r0
 800daa8:	d0d2      	beq.n	800da50 <rmw_destroy_node+0x50>
 800daaa:	2c00      	cmp	r4, #0
 800daac:	d1f1      	bne.n	800da92 <rmw_destroy_node+0x92>
 800daae:	6928      	ldr	r0, [r5, #16]
 800dab0:	696a      	ldr	r2, [r5, #20]
 800dab2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dab6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800daba:	6819      	ldr	r1, [r3, #0]
 800dabc:	f001 fc1c 	bl	800f2f8 <uxr_buffer_delete_entity>
 800dac0:	4602      	mov	r2, r0
 800dac2:	6928      	ldr	r0, [r5, #16]
 800dac4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dac8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dacc:	f000 fd7e 	bl	800e5cc <run_xrce_session>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	bf08      	it	eq
 800dad4:	2602      	moveq	r6, #2
 800dad6:	4638      	mov	r0, r7
 800dad8:	f000 fc08 	bl	800e2ec <rmw_uxrce_fini_node_memory>
 800dadc:	4630      	mov	r0, r6
 800dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae0:	4626      	mov	r6, r4
 800dae2:	e7a6      	b.n	800da32 <rmw_destroy_node+0x32>
 800dae4:	0801bd38 	.word	0x0801bd38
 800dae8:	2000b2a4 	.word	0x2000b2a4
 800daec:	2000b2e4 	.word	0x2000b2e4
 800daf0:	2000b2b4 	.word	0x2000b2b4
 800daf4:	200069c4 	.word	0x200069c4

0800daf8 <rmw_node_get_graph_guard_condition>:
 800daf8:	6843      	ldr	r3, [r0, #4]
 800dafa:	6918      	ldr	r0, [r3, #16]
 800dafc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop

0800db04 <flush_session>:
 800db04:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800db06:	f002 bc29 	b.w	801035c <uxr_run_session_until_confirm_delivery>
 800db0a:	bf00      	nop

0800db0c <rmw_publish>:
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d053      	beq.n	800dbb8 <rmw_publish+0xac>
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	460d      	mov	r5, r1
 800db14:	b08e      	sub	sp, #56	@ 0x38
 800db16:	2900      	cmp	r1, #0
 800db18:	d04b      	beq.n	800dbb2 <rmw_publish+0xa6>
 800db1a:	4604      	mov	r4, r0
 800db1c:	6800      	ldr	r0, [r0, #0]
 800db1e:	f000 fdd5 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800db22:	2800      	cmp	r0, #0
 800db24:	d045      	beq.n	800dbb2 <rmw_publish+0xa6>
 800db26:	6866      	ldr	r6, [r4, #4]
 800db28:	2e00      	cmp	r6, #0
 800db2a:	d042      	beq.n	800dbb2 <rmw_publish+0xa6>
 800db2c:	69b4      	ldr	r4, [r6, #24]
 800db2e:	4628      	mov	r0, r5
 800db30:	6923      	ldr	r3, [r4, #16]
 800db32:	4798      	blx	r3
 800db34:	69f3      	ldr	r3, [r6, #28]
 800db36:	9005      	str	r0, [sp, #20]
 800db38:	b113      	cbz	r3, 800db40 <rmw_publish+0x34>
 800db3a:	a805      	add	r0, sp, #20
 800db3c:	4798      	blx	r3
 800db3e:	9805      	ldr	r0, [sp, #20]
 800db40:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	9000      	str	r0, [sp, #0]
 800db48:	6972      	ldr	r2, [r6, #20]
 800db4a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800db4c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800db50:	ab06      	add	r3, sp, #24
 800db52:	f003 fed7 	bl	8011904 <uxr_prepare_output_stream>
 800db56:	b1d8      	cbz	r0, 800db90 <rmw_publish+0x84>
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	a906      	add	r1, sp, #24
 800db5c:	4628      	mov	r0, r5
 800db5e:	4798      	blx	r3
 800db60:	6a33      	ldr	r3, [r6, #32]
 800db62:	4604      	mov	r4, r0
 800db64:	b10b      	cbz	r3, 800db6a <rmw_publish+0x5e>
 800db66:	a806      	add	r0, sp, #24
 800db68:	4798      	blx	r3
 800db6a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800db6e:	2b01      	cmp	r3, #1
 800db70:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800db74:	d022      	beq.n	800dbbc <rmw_publish+0xb0>
 800db76:	6918      	ldr	r0, [r3, #16]
 800db78:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800db7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db7e:	f002 fbed 	bl	801035c <uxr_run_session_until_confirm_delivery>
 800db82:	4020      	ands	r0, r4
 800db84:	b2c4      	uxtb	r4, r0
 800db86:	f084 0001 	eor.w	r0, r4, #1
 800db8a:	b2c0      	uxtb	r0, r0
 800db8c:	b00e      	add	sp, #56	@ 0x38
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800db94:	6918      	ldr	r0, [r3, #16]
 800db96:	9b05      	ldr	r3, [sp, #20]
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc8 <rmw_publish+0xbc>)
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	9602      	str	r6, [sp, #8]
 800dba0:	6972      	ldr	r2, [r6, #20]
 800dba2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dba4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dba8:	ab06      	add	r3, sp, #24
 800dbaa:	f003 fedb 	bl	8011964 <uxr_prepare_output_stream_fragmented>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d1d2      	bne.n	800db58 <rmw_publish+0x4c>
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	b00e      	add	sp, #56	@ 0x38
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}
 800dbb8:	2001      	movs	r0, #1
 800dbba:	4770      	bx	lr
 800dbbc:	6918      	ldr	r0, [r3, #16]
 800dbbe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbc2:	f002 f80b 	bl	800fbdc <uxr_flash_output_streams>
 800dbc6:	e7de      	b.n	800db86 <rmw_publish+0x7a>
 800dbc8:	0800db05 	.word	0x0800db05

0800dbcc <rmw_create_publisher>:
 800dbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	b087      	sub	sp, #28
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	f000 80cc 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dbd8:	460e      	mov	r6, r1
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	f000 80c8 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	6800      	ldr	r0, [r0, #0]
 800dbe4:	4615      	mov	r5, r2
 800dbe6:	4698      	mov	r8, r3
 800dbe8:	f000 fd70 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	f000 80bf 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dbf2:	2d00      	cmp	r5, #0
 800dbf4:	f000 80bc 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dbf8:	782b      	ldrb	r3, [r5, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 80b8 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dc00:	f1b8 0f00 	cmp.w	r8, #0
 800dc04:	f000 80b4 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dc08:	485c      	ldr	r0, [pc, #368]	@ (800dd7c <rmw_create_publisher+0x1b0>)
 800dc0a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dc0e:	f008 faf3 	bl	80161f8 <get_memory>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f000 80ac 	beq.w	800dd70 <rmw_create_publisher+0x1a4>
 800dc18:	6884      	ldr	r4, [r0, #8]
 800dc1a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dc1e:	f008 fb53 	bl	80162c8 <rmw_get_implementation_identifier>
 800dc22:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dc26:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dc2a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f7f2 fb00 	bl	8000234 <strlen>
 800dc34:	3001      	adds	r0, #1
 800dc36:	283c      	cmp	r0, #60	@ 0x3c
 800dc38:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dc3c:	f200 8091 	bhi.w	800dd62 <rmw_create_publisher+0x196>
 800dc40:	4a4f      	ldr	r2, [pc, #316]	@ (800dd80 <rmw_create_publisher+0x1b4>)
 800dc42:	462b      	mov	r3, r5
 800dc44:	213c      	movs	r1, #60	@ 0x3c
 800dc46:	4650      	mov	r0, sl
 800dc48:	f00a fcb2 	bl	80185b0 <sniprintf>
 800dc4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dc50:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dc52:	4641      	mov	r1, r8
 800dc54:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dc58:	2250      	movs	r2, #80	@ 0x50
 800dc5a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dc5e:	f00a fede 	bl	8018a1e <memcpy>
 800dc62:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dc66:	4947      	ldr	r1, [pc, #284]	@ (800dd84 <rmw_create_publisher+0x1b8>)
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc6e:	bf0c      	ite	eq
 800dc70:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dc74:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dc78:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dc80:	4630      	mov	r0, r6
 800dc82:	f000 fd31 	bl	800e6e8 <get_message_typesupport_handle>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d06b      	beq.n	800dd62 <rmw_create_publisher+0x196>
 800dc8a:	6842      	ldr	r2, [r0, #4]
 800dc8c:	61a2      	str	r2, [r4, #24]
 800dc8e:	2a00      	cmp	r2, #0
 800dc90:	d067      	beq.n	800dd62 <rmw_create_publisher+0x196>
 800dc92:	4629      	mov	r1, r5
 800dc94:	4643      	mov	r3, r8
 800dc96:	4648      	mov	r0, r9
 800dc98:	f008 fb1c 	bl	80162d4 <create_topic>
 800dc9c:	6260      	str	r0, [r4, #36]	@ 0x24
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d063      	beq.n	800dd6a <rmw_create_publisher+0x19e>
 800dca2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcaa:	2103      	movs	r1, #3
 800dcac:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dcb0:	1c42      	adds	r2, r0, #1
 800dcb2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dcb6:	f001 fd3b 	bl	800f730 <uxr_object_id>
 800dcba:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dcbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcc2:	6120      	str	r0, [r4, #16]
 800dcc4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dcc8:	6910      	ldr	r0, [r2, #16]
 800dcca:	2506      	movs	r5, #6
 800dccc:	9500      	str	r5, [sp, #0]
 800dcce:	6819      	ldr	r1, [r3, #0]
 800dcd0:	6922      	ldr	r2, [r4, #16]
 800dcd2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dcd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcda:	f001 fbc1 	bl	800f460 <uxr_buffer_create_publisher_bin>
 800dcde:	4602      	mov	r2, r0
 800dce0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dce4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dce8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dcec:	f000 fc6e 	bl	800e5cc <run_xrce_session>
 800dcf0:	b3b8      	cbz	r0, 800dd62 <rmw_create_publisher+0x196>
 800dcf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcfa:	2105      	movs	r1, #5
 800dcfc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800dd00:	1c42      	adds	r2, r0, #1
 800dd02:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800dd06:	f001 fd13 	bl	800f730 <uxr_object_id>
 800dd0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dd0e:	6160      	str	r0, [r4, #20]
 800dd10:	691e      	ldr	r6, [r3, #16]
 800dd12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd16:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dd1a:	f10d 0a10 	add.w	sl, sp, #16
 800dd1e:	4641      	mov	r1, r8
 800dd20:	4650      	mov	r0, sl
 800dd22:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800dd26:	f000 fc6d 	bl	800e604 <convert_qos_profile>
 800dd2a:	9503      	str	r5, [sp, #12]
 800dd2c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dd30:	9001      	str	r0, [sp, #4]
 800dd32:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dd36:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dd40:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dd44:	f8d8 1000 	ldr.w	r1, [r8]
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f001 fbb9 	bl	800f4c0 <uxr_buffer_create_datawriter_bin>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dd54:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dd58:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dd5c:	f000 fc36 	bl	800e5cc <run_xrce_session>
 800dd60:	b938      	cbnz	r0, 800dd72 <rmw_create_publisher+0x1a6>
 800dd62:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dd64:	b108      	cbz	r0, 800dd6a <rmw_create_publisher+0x19e>
 800dd66:	f000 fb31 	bl	800e3cc <rmw_uxrce_fini_topic_memory>
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	f000 fad6 	bl	800e31c <rmw_uxrce_fini_publisher_memory>
 800dd70:	2700      	movs	r7, #0
 800dd72:	4638      	mov	r0, r7
 800dd74:	b007      	add	sp, #28
 800dd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7a:	bf00      	nop
 800dd7c:	2000b2a4 	.word	0x2000b2a4
 800dd80:	0801b30c 	.word	0x0801b30c
 800dd84:	0801b090 	.word	0x0801b090

0800dd88 <rmw_publisher_get_actual_qos>:
 800dd88:	b150      	cbz	r0, 800dda0 <rmw_publisher_get_actual_qos+0x18>
 800dd8a:	b508      	push	{r3, lr}
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	b149      	cbz	r1, 800dda4 <rmw_publisher_get_actual_qos+0x1c>
 800dd90:	6841      	ldr	r1, [r0, #4]
 800dd92:	2250      	movs	r2, #80	@ 0x50
 800dd94:	3128      	adds	r1, #40	@ 0x28
 800dd96:	4618      	mov	r0, r3
 800dd98:	f00a fe41 	bl	8018a1e <memcpy>
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	bd08      	pop	{r3, pc}
 800dda0:	200b      	movs	r0, #11
 800dda2:	4770      	bx	lr
 800dda4:	200b      	movs	r0, #11
 800dda6:	bd08      	pop	{r3, pc}

0800dda8 <rmw_destroy_publisher>:
 800dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddaa:	b128      	cbz	r0, 800ddb8 <rmw_destroy_publisher+0x10>
 800ddac:	4604      	mov	r4, r0
 800ddae:	6800      	ldr	r0, [r0, #0]
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	f000 fc8b 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800ddb6:	b910      	cbnz	r0, 800ddbe <rmw_destroy_publisher+0x16>
 800ddb8:	2401      	movs	r4, #1
 800ddba:	4620      	mov	r0, r4
 800ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddbe:	6863      	ldr	r3, [r4, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d0f9      	beq.n	800ddb8 <rmw_destroy_publisher+0x10>
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	d0f7      	beq.n	800ddb8 <rmw_destroy_publisher+0x10>
 800ddc8:	6828      	ldr	r0, [r5, #0]
 800ddca:	f000 fc7f 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d0f2      	beq.n	800ddb8 <rmw_destroy_publisher+0x10>
 800ddd2:	686c      	ldr	r4, [r5, #4]
 800ddd4:	2c00      	cmp	r4, #0
 800ddd6:	d0ef      	beq.n	800ddb8 <rmw_destroy_publisher+0x10>
 800ddd8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ddda:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ddde:	f008 fac9 	bl	8016374 <destroy_topic>
 800dde2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dde6:	6962      	ldr	r2, [r4, #20]
 800dde8:	6918      	ldr	r0, [r3, #16]
 800ddea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ddee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ddf2:	6819      	ldr	r1, [r3, #0]
 800ddf4:	f001 fa80 	bl	800f2f8 <uxr_buffer_delete_entity>
 800ddf8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ddfc:	6922      	ldr	r2, [r4, #16]
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800de04:	4604      	mov	r4, r0
 800de06:	6809      	ldr	r1, [r1, #0]
 800de08:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800de0c:	f001 fa74 	bl	800f2f8 <uxr_buffer_delete_entity>
 800de10:	693e      	ldr	r6, [r7, #16]
 800de12:	4622      	mov	r2, r4
 800de14:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de18:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de1c:	4604      	mov	r4, r0
 800de1e:	4630      	mov	r0, r6
 800de20:	f000 fbd4 	bl	800e5cc <run_xrce_session>
 800de24:	693e      	ldr	r6, [r7, #16]
 800de26:	4622      	mov	r2, r4
 800de28:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de2c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de30:	4604      	mov	r4, r0
 800de32:	4630      	mov	r0, r6
 800de34:	f000 fbca 	bl	800e5cc <run_xrce_session>
 800de38:	b12c      	cbz	r4, 800de46 <rmw_destroy_publisher+0x9e>
 800de3a:	b120      	cbz	r0, 800de46 <rmw_destroy_publisher+0x9e>
 800de3c:	2400      	movs	r4, #0
 800de3e:	4628      	mov	r0, r5
 800de40:	f000 fa6c 	bl	800e31c <rmw_uxrce_fini_publisher_memory>
 800de44:	e7b9      	b.n	800ddba <rmw_destroy_publisher+0x12>
 800de46:	2402      	movs	r4, #2
 800de48:	e7f9      	b.n	800de3e <rmw_destroy_publisher+0x96>
 800de4a:	bf00      	nop

0800de4c <rmw_destroy_service>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	b128      	cbz	r0, 800de5c <rmw_destroy_service+0x10>
 800de50:	4604      	mov	r4, r0
 800de52:	6800      	ldr	r0, [r0, #0]
 800de54:	460d      	mov	r5, r1
 800de56:	f000 fc39 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800de5a:	b910      	cbnz	r0, 800de62 <rmw_destroy_service+0x16>
 800de5c:	2401      	movs	r4, #1
 800de5e:	4620      	mov	r0, r4
 800de60:	bd70      	pop	{r4, r5, r6, pc}
 800de62:	6863      	ldr	r3, [r4, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0f9      	beq.n	800de5c <rmw_destroy_service+0x10>
 800de68:	2d00      	cmp	r5, #0
 800de6a:	d0f7      	beq.n	800de5c <rmw_destroy_service+0x10>
 800de6c:	6828      	ldr	r0, [r5, #0]
 800de6e:	f000 fc2d 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800de72:	2800      	cmp	r0, #0
 800de74:	d0f2      	beq.n	800de5c <rmw_destroy_service+0x10>
 800de76:	686e      	ldr	r6, [r5, #4]
 800de78:	2e00      	cmp	r6, #0
 800de7a:	d0ef      	beq.n	800de5c <rmw_destroy_service+0x10>
 800de7c:	6864      	ldr	r4, [r4, #4]
 800de7e:	6932      	ldr	r2, [r6, #16]
 800de80:	6920      	ldr	r0, [r4, #16]
 800de82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de8a:	6819      	ldr	r1, [r3, #0]
 800de8c:	f001 fc80 	bl	800f790 <uxr_buffer_cancel_data>
 800de90:	4602      	mov	r2, r0
 800de92:	6920      	ldr	r0, [r4, #16]
 800de94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800de98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800de9c:	f000 fb96 	bl	800e5cc <run_xrce_session>
 800dea0:	6920      	ldr	r0, [r4, #16]
 800dea2:	6932      	ldr	r2, [r6, #16]
 800dea4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dea8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800deac:	6819      	ldr	r1, [r3, #0]
 800deae:	f001 fa23 	bl	800f2f8 <uxr_buffer_delete_entity>
 800deb2:	4602      	mov	r2, r0
 800deb4:	6920      	ldr	r0, [r4, #16]
 800deb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800deba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800debe:	f000 fb85 	bl	800e5cc <run_xrce_session>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	4628      	mov	r0, r5
 800dec6:	bf14      	ite	ne
 800dec8:	2400      	movne	r4, #0
 800deca:	2402      	moveq	r4, #2
 800decc:	f000 fa52 	bl	800e374 <rmw_uxrce_fini_service_memory>
 800ded0:	e7c5      	b.n	800de5e <rmw_destroy_service+0x12>
 800ded2:	bf00      	nop

0800ded4 <rmw_destroy_subscription>:
 800ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded6:	b128      	cbz	r0, 800dee4 <rmw_destroy_subscription+0x10>
 800ded8:	4604      	mov	r4, r0
 800deda:	6800      	ldr	r0, [r0, #0]
 800dedc:	460d      	mov	r5, r1
 800dede:	f000 fbf5 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800dee2:	b910      	cbnz	r0, 800deea <rmw_destroy_subscription+0x16>
 800dee4:	2401      	movs	r4, #1
 800dee6:	4620      	mov	r0, r4
 800dee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deea:	6863      	ldr	r3, [r4, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d0f9      	beq.n	800dee4 <rmw_destroy_subscription+0x10>
 800def0:	2d00      	cmp	r5, #0
 800def2:	d0f7      	beq.n	800dee4 <rmw_destroy_subscription+0x10>
 800def4:	6828      	ldr	r0, [r5, #0]
 800def6:	f000 fbe9 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 800defa:	2800      	cmp	r0, #0
 800defc:	d0f2      	beq.n	800dee4 <rmw_destroy_subscription+0x10>
 800defe:	686c      	ldr	r4, [r5, #4]
 800df00:	2c00      	cmp	r4, #0
 800df02:	d0ef      	beq.n	800dee4 <rmw_destroy_subscription+0x10>
 800df04:	6a26      	ldr	r6, [r4, #32]
 800df06:	6962      	ldr	r2, [r4, #20]
 800df08:	6930      	ldr	r0, [r6, #16]
 800df0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	f001 fc3c 	bl	800f790 <uxr_buffer_cancel_data>
 800df18:	4602      	mov	r2, r0
 800df1a:	6930      	ldr	r0, [r6, #16]
 800df1c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df20:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df24:	f000 fb52 	bl	800e5cc <run_xrce_session>
 800df28:	69e0      	ldr	r0, [r4, #28]
 800df2a:	f008 fa23 	bl	8016374 <destroy_topic>
 800df2e:	6a23      	ldr	r3, [r4, #32]
 800df30:	6962      	ldr	r2, [r4, #20]
 800df32:	6918      	ldr	r0, [r3, #16]
 800df34:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df3c:	6819      	ldr	r1, [r3, #0]
 800df3e:	f001 f9db 	bl	800f2f8 <uxr_buffer_delete_entity>
 800df42:	6a23      	ldr	r3, [r4, #32]
 800df44:	6922      	ldr	r2, [r4, #16]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800df4c:	4604      	mov	r4, r0
 800df4e:	6809      	ldr	r1, [r1, #0]
 800df50:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800df54:	f001 f9d0 	bl	800f2f8 <uxr_buffer_delete_entity>
 800df58:	6937      	ldr	r7, [r6, #16]
 800df5a:	4622      	mov	r2, r4
 800df5c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800df60:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800df64:	4604      	mov	r4, r0
 800df66:	4638      	mov	r0, r7
 800df68:	f000 fb30 	bl	800e5cc <run_xrce_session>
 800df6c:	6936      	ldr	r6, [r6, #16]
 800df6e:	4622      	mov	r2, r4
 800df70:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800df74:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800df78:	4604      	mov	r4, r0
 800df7a:	4630      	mov	r0, r6
 800df7c:	f000 fb26 	bl	800e5cc <run_xrce_session>
 800df80:	b12c      	cbz	r4, 800df8e <rmw_destroy_subscription+0xba>
 800df82:	b120      	cbz	r0, 800df8e <rmw_destroy_subscription+0xba>
 800df84:	2400      	movs	r4, #0
 800df86:	4628      	mov	r0, r5
 800df88:	f000 f9de 	bl	800e348 <rmw_uxrce_fini_subscription_memory>
 800df8c:	e7ab      	b.n	800dee6 <rmw_destroy_subscription+0x12>
 800df8e:	2402      	movs	r4, #2
 800df90:	e7f9      	b.n	800df86 <rmw_destroy_subscription+0xb2>
 800df92:	bf00      	nop

0800df94 <rmw_uxrce_transport_init>:
 800df94:	b508      	push	{r3, lr}
 800df96:	b108      	cbz	r0, 800df9c <rmw_uxrce_transport_init+0x8>
 800df98:	f100 0210 	add.w	r2, r0, #16
 800df9c:	b139      	cbz	r1, 800dfae <rmw_uxrce_transport_init+0x1a>
 800df9e:	6949      	ldr	r1, [r1, #20]
 800dfa0:	4610      	mov	r0, r2
 800dfa2:	f001 fb8d 	bl	800f6c0 <uxr_init_custom_transport>
 800dfa6:	f080 0001 	eor.w	r0, r0, #1
 800dfaa:	b2c0      	uxtb	r0, r0
 800dfac:	bd08      	pop	{r3, pc}
 800dfae:	4b04      	ldr	r3, [pc, #16]	@ (800dfc0 <rmw_uxrce_transport_init+0x2c>)
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	6859      	ldr	r1, [r3, #4]
 800dfb4:	f001 fb84 	bl	800f6c0 <uxr_init_custom_transport>
 800dfb8:	f080 0001 	eor.w	r0, r0, #1
 800dfbc:	b2c0      	uxtb	r0, r0
 800dfbe:	bd08      	pop	{r3, pc}
 800dfc0:	2000696c 	.word	0x2000696c

0800dfc4 <rmw_uros_epoch_millis>:
 800dfc4:	4b05      	ldr	r3, [pc, #20]	@ (800dfdc <rmw_uros_epoch_millis+0x18>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	b123      	cbz	r3, 800dfd4 <rmw_uros_epoch_millis+0x10>
 800dfca:	6898      	ldr	r0, [r3, #8]
 800dfcc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfd0:	f001 bde8 	b.w	800fba4 <uxr_epoch_millis>
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop
 800dfdc:	2000b2c4 	.word	0x2000b2c4

0800dfe0 <rmw_uros_epoch_nanos>:
 800dfe0:	4b05      	ldr	r3, [pc, #20]	@ (800dff8 <rmw_uros_epoch_nanos+0x18>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	b123      	cbz	r3, 800dff0 <rmw_uros_epoch_nanos+0x10>
 800dfe6:	6898      	ldr	r0, [r3, #8]
 800dfe8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dfec:	f001 bdec 	b.w	800fbc8 <uxr_epoch_nanos>
 800dff0:	2000      	movs	r0, #0
 800dff2:	2100      	movs	r1, #0
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	2000b2c4 	.word	0x2000b2c4

0800dffc <rmw_uros_sync_session>:
 800dffc:	b508      	push	{r3, lr}
 800dffe:	4b07      	ldr	r3, [pc, #28]	@ (800e01c <rmw_uros_sync_session+0x20>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	b14b      	cbz	r3, 800e018 <rmw_uros_sync_session+0x1c>
 800e004:	4601      	mov	r1, r0
 800e006:	6898      	ldr	r0, [r3, #8]
 800e008:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e00c:	f002 fa20 	bl	8010450 <uxr_sync_session>
 800e010:	f080 0001 	eor.w	r0, r0, #1
 800e014:	b2c0      	uxtb	r0, r0
 800e016:	bd08      	pop	{r3, pc}
 800e018:	2001      	movs	r0, #1
 800e01a:	bd08      	pop	{r3, pc}
 800e01c:	2000b2c4 	.word	0x2000b2c4

0800e020 <rmw_uxrce_init_service_memory>:
 800e020:	b1e2      	cbz	r2, 800e05c <rmw_uxrce_init_service_memory+0x3c>
 800e022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e026:	7b05      	ldrb	r5, [r0, #12]
 800e028:	4606      	mov	r6, r0
 800e02a:	b9ad      	cbnz	r5, 800e058 <rmw_uxrce_init_service_memory+0x38>
 800e02c:	23c8      	movs	r3, #200	@ 0xc8
 800e02e:	e9c0 5500 	strd	r5, r5, [r0]
 800e032:	6083      	str	r3, [r0, #8]
 800e034:	f240 1301 	movw	r3, #257	@ 0x101
 800e038:	4617      	mov	r7, r2
 800e03a:	8183      	strh	r3, [r0, #12]
 800e03c:	460c      	mov	r4, r1
 800e03e:	46a8      	mov	r8, r5
 800e040:	4621      	mov	r1, r4
 800e042:	4630      	mov	r0, r6
 800e044:	3501      	adds	r5, #1
 800e046:	f008 f8e7 	bl	8016218 <put_memory>
 800e04a:	42af      	cmp	r7, r5
 800e04c:	60a4      	str	r4, [r4, #8]
 800e04e:	f884 800c 	strb.w	r8, [r4, #12]
 800e052:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e056:	d1f3      	bne.n	800e040 <rmw_uxrce_init_service_memory+0x20>
 800e058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop

0800e060 <rmw_uxrce_init_client_memory>:
 800e060:	b1e2      	cbz	r2, 800e09c <rmw_uxrce_init_client_memory+0x3c>
 800e062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e066:	7b05      	ldrb	r5, [r0, #12]
 800e068:	4606      	mov	r6, r0
 800e06a:	b9ad      	cbnz	r5, 800e098 <rmw_uxrce_init_client_memory+0x38>
 800e06c:	23c8      	movs	r3, #200	@ 0xc8
 800e06e:	e9c0 5500 	strd	r5, r5, [r0]
 800e072:	6083      	str	r3, [r0, #8]
 800e074:	f240 1301 	movw	r3, #257	@ 0x101
 800e078:	4617      	mov	r7, r2
 800e07a:	8183      	strh	r3, [r0, #12]
 800e07c:	460c      	mov	r4, r1
 800e07e:	46a8      	mov	r8, r5
 800e080:	4621      	mov	r1, r4
 800e082:	4630      	mov	r0, r6
 800e084:	3501      	adds	r5, #1
 800e086:	f008 f8c7 	bl	8016218 <put_memory>
 800e08a:	42af      	cmp	r7, r5
 800e08c:	60a4      	str	r4, [r4, #8]
 800e08e:	f884 800c 	strb.w	r8, [r4, #12]
 800e092:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e096:	d1f3      	bne.n	800e080 <rmw_uxrce_init_client_memory+0x20>
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop

0800e0a0 <rmw_uxrce_init_publisher_memory>:
 800e0a0:	b1e2      	cbz	r2, 800e0dc <rmw_uxrce_init_publisher_memory+0x3c>
 800e0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a6:	7b05      	ldrb	r5, [r0, #12]
 800e0a8:	4606      	mov	r6, r0
 800e0aa:	b9ad      	cbnz	r5, 800e0d8 <rmw_uxrce_init_publisher_memory+0x38>
 800e0ac:	23d8      	movs	r3, #216	@ 0xd8
 800e0ae:	e9c0 5500 	strd	r5, r5, [r0]
 800e0b2:	6083      	str	r3, [r0, #8]
 800e0b4:	f240 1301 	movw	r3, #257	@ 0x101
 800e0b8:	4617      	mov	r7, r2
 800e0ba:	8183      	strh	r3, [r0, #12]
 800e0bc:	460c      	mov	r4, r1
 800e0be:	46a8      	mov	r8, r5
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	3501      	adds	r5, #1
 800e0c6:	f008 f8a7 	bl	8016218 <put_memory>
 800e0ca:	42af      	cmp	r7, r5
 800e0cc:	60a4      	str	r4, [r4, #8]
 800e0ce:	f884 800c 	strb.w	r8, [r4, #12]
 800e0d2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e0d6:	d1f3      	bne.n	800e0c0 <rmw_uxrce_init_publisher_memory+0x20>
 800e0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop

0800e0e0 <rmw_uxrce_init_subscription_memory>:
 800e0e0:	b1e2      	cbz	r2, 800e11c <rmw_uxrce_init_subscription_memory+0x3c>
 800e0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e6:	7b05      	ldrb	r5, [r0, #12]
 800e0e8:	4606      	mov	r6, r0
 800e0ea:	b9ad      	cbnz	r5, 800e118 <rmw_uxrce_init_subscription_memory+0x38>
 800e0ec:	23d8      	movs	r3, #216	@ 0xd8
 800e0ee:	e9c0 5500 	strd	r5, r5, [r0]
 800e0f2:	6083      	str	r3, [r0, #8]
 800e0f4:	f240 1301 	movw	r3, #257	@ 0x101
 800e0f8:	4617      	mov	r7, r2
 800e0fa:	8183      	strh	r3, [r0, #12]
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	46a8      	mov	r8, r5
 800e100:	4621      	mov	r1, r4
 800e102:	4630      	mov	r0, r6
 800e104:	3501      	adds	r5, #1
 800e106:	f008 f887 	bl	8016218 <put_memory>
 800e10a:	42af      	cmp	r7, r5
 800e10c:	60a4      	str	r4, [r4, #8]
 800e10e:	f884 800c 	strb.w	r8, [r4, #12]
 800e112:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e116:	d1f3      	bne.n	800e100 <rmw_uxrce_init_subscription_memory+0x20>
 800e118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop

0800e120 <rmw_uxrce_init_node_memory>:
 800e120:	b1e2      	cbz	r2, 800e15c <rmw_uxrce_init_node_memory+0x3c>
 800e122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e126:	7b05      	ldrb	r5, [r0, #12]
 800e128:	4606      	mov	r6, r0
 800e12a:	b9ad      	cbnz	r5, 800e158 <rmw_uxrce_init_node_memory+0x38>
 800e12c:	23a4      	movs	r3, #164	@ 0xa4
 800e12e:	e9c0 5500 	strd	r5, r5, [r0]
 800e132:	6083      	str	r3, [r0, #8]
 800e134:	f240 1301 	movw	r3, #257	@ 0x101
 800e138:	4617      	mov	r7, r2
 800e13a:	8183      	strh	r3, [r0, #12]
 800e13c:	460c      	mov	r4, r1
 800e13e:	46a8      	mov	r8, r5
 800e140:	4621      	mov	r1, r4
 800e142:	4630      	mov	r0, r6
 800e144:	3501      	adds	r5, #1
 800e146:	f008 f867 	bl	8016218 <put_memory>
 800e14a:	42af      	cmp	r7, r5
 800e14c:	60a4      	str	r4, [r4, #8]
 800e14e:	f884 800c 	strb.w	r8, [r4, #12]
 800e152:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e156:	d1f3      	bne.n	800e140 <rmw_uxrce_init_node_memory+0x20>
 800e158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop

0800e160 <rmw_uxrce_init_session_memory>:
 800e160:	b1ea      	cbz	r2, 800e19e <rmw_uxrce_init_session_memory+0x3e>
 800e162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e166:	7b05      	ldrb	r5, [r0, #12]
 800e168:	4606      	mov	r6, r0
 800e16a:	b9b5      	cbnz	r5, 800e19a <rmw_uxrce_init_session_memory+0x3a>
 800e16c:	e9c0 5500 	strd	r5, r5, [r0]
 800e170:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e174:	f240 1301 	movw	r3, #257	@ 0x101
 800e178:	4617      	mov	r7, r2
 800e17a:	f8c0 8008 	str.w	r8, [r0, #8]
 800e17e:	460c      	mov	r4, r1
 800e180:	8183      	strh	r3, [r0, #12]
 800e182:	46a9      	mov	r9, r5
 800e184:	4621      	mov	r1, r4
 800e186:	4630      	mov	r0, r6
 800e188:	3501      	adds	r5, #1
 800e18a:	f008 f845 	bl	8016218 <put_memory>
 800e18e:	42af      	cmp	r7, r5
 800e190:	60a4      	str	r4, [r4, #8]
 800e192:	f884 900c 	strb.w	r9, [r4, #12]
 800e196:	4444      	add	r4, r8
 800e198:	d1f4      	bne.n	800e184 <rmw_uxrce_init_session_memory+0x24>
 800e19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19e:	4770      	bx	lr

0800e1a0 <rmw_uxrce_init_topic_memory>:
 800e1a0:	b1e2      	cbz	r2, 800e1dc <rmw_uxrce_init_topic_memory+0x3c>
 800e1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a6:	7b05      	ldrb	r5, [r0, #12]
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	b9ad      	cbnz	r5, 800e1d8 <rmw_uxrce_init_topic_memory+0x38>
 800e1ac:	231c      	movs	r3, #28
 800e1ae:	e9c0 5500 	strd	r5, r5, [r0]
 800e1b2:	6083      	str	r3, [r0, #8]
 800e1b4:	f240 1301 	movw	r3, #257	@ 0x101
 800e1b8:	4617      	mov	r7, r2
 800e1ba:	8183      	strh	r3, [r0, #12]
 800e1bc:	460c      	mov	r4, r1
 800e1be:	46a8      	mov	r8, r5
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	3501      	adds	r5, #1
 800e1c6:	f008 f827 	bl	8016218 <put_memory>
 800e1ca:	42af      	cmp	r7, r5
 800e1cc:	60a4      	str	r4, [r4, #8]
 800e1ce:	f884 800c 	strb.w	r8, [r4, #12]
 800e1d2:	f104 041c 	add.w	r4, r4, #28
 800e1d6:	d1f3      	bne.n	800e1c0 <rmw_uxrce_init_topic_memory+0x20>
 800e1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop

0800e1e0 <rmw_uxrce_init_static_input_buffer_memory>:
 800e1e0:	b1ea      	cbz	r2, 800e21e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e6:	7b05      	ldrb	r5, [r0, #12]
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	b9b5      	cbnz	r5, 800e21a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e1ec:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e1f0:	e9c0 5500 	strd	r5, r5, [r0]
 800e1f4:	6083      	str	r3, [r0, #8]
 800e1f6:	f240 1301 	movw	r3, #257	@ 0x101
 800e1fa:	4617      	mov	r7, r2
 800e1fc:	8183      	strh	r3, [r0, #12]
 800e1fe:	460c      	mov	r4, r1
 800e200:	46a8      	mov	r8, r5
 800e202:	4621      	mov	r1, r4
 800e204:	4630      	mov	r0, r6
 800e206:	3501      	adds	r5, #1
 800e208:	f008 f806 	bl	8016218 <put_memory>
 800e20c:	42af      	cmp	r7, r5
 800e20e:	60a4      	str	r4, [r4, #8]
 800e210:	f884 800c 	strb.w	r8, [r4, #12]
 800e214:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e218:	d1f3      	bne.n	800e202 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e21e:	4770      	bx	lr

0800e220 <rmw_uxrce_init_init_options_impl_memory>:
 800e220:	b1e2      	cbz	r2, 800e25c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e226:	7b05      	ldrb	r5, [r0, #12]
 800e228:	4606      	mov	r6, r0
 800e22a:	b9ad      	cbnz	r5, 800e258 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e22c:	232c      	movs	r3, #44	@ 0x2c
 800e22e:	e9c0 5500 	strd	r5, r5, [r0]
 800e232:	6083      	str	r3, [r0, #8]
 800e234:	f240 1301 	movw	r3, #257	@ 0x101
 800e238:	4617      	mov	r7, r2
 800e23a:	8183      	strh	r3, [r0, #12]
 800e23c:	460c      	mov	r4, r1
 800e23e:	46a8      	mov	r8, r5
 800e240:	4621      	mov	r1, r4
 800e242:	4630      	mov	r0, r6
 800e244:	3501      	adds	r5, #1
 800e246:	f007 ffe7 	bl	8016218 <put_memory>
 800e24a:	42af      	cmp	r7, r5
 800e24c:	60a4      	str	r4, [r4, #8]
 800e24e:	f884 800c 	strb.w	r8, [r4, #12]
 800e252:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e256:	d1f3      	bne.n	800e240 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop

0800e260 <rmw_uxrce_init_wait_set_memory>:
 800e260:	b1e2      	cbz	r2, 800e29c <rmw_uxrce_init_wait_set_memory+0x3c>
 800e262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e266:	7b05      	ldrb	r5, [r0, #12]
 800e268:	4606      	mov	r6, r0
 800e26a:	b9ad      	cbnz	r5, 800e298 <rmw_uxrce_init_wait_set_memory+0x38>
 800e26c:	231c      	movs	r3, #28
 800e26e:	e9c0 5500 	strd	r5, r5, [r0]
 800e272:	6083      	str	r3, [r0, #8]
 800e274:	f240 1301 	movw	r3, #257	@ 0x101
 800e278:	4617      	mov	r7, r2
 800e27a:	8183      	strh	r3, [r0, #12]
 800e27c:	460c      	mov	r4, r1
 800e27e:	46a8      	mov	r8, r5
 800e280:	4621      	mov	r1, r4
 800e282:	4630      	mov	r0, r6
 800e284:	3501      	adds	r5, #1
 800e286:	f007 ffc7 	bl	8016218 <put_memory>
 800e28a:	42af      	cmp	r7, r5
 800e28c:	60a4      	str	r4, [r4, #8]
 800e28e:	f884 800c 	strb.w	r8, [r4, #12]
 800e292:	f104 041c 	add.w	r4, r4, #28
 800e296:	d1f3      	bne.n	800e280 <rmw_uxrce_init_wait_set_memory+0x20>
 800e298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop

0800e2a0 <rmw_uxrce_init_guard_condition_memory>:
 800e2a0:	b1e2      	cbz	r2, 800e2dc <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a6:	7b05      	ldrb	r5, [r0, #12]
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	b9ad      	cbnz	r5, 800e2d8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e2ac:	2320      	movs	r3, #32
 800e2ae:	e9c0 5500 	strd	r5, r5, [r0]
 800e2b2:	6083      	str	r3, [r0, #8]
 800e2b4:	f240 1301 	movw	r3, #257	@ 0x101
 800e2b8:	4617      	mov	r7, r2
 800e2ba:	8183      	strh	r3, [r0, #12]
 800e2bc:	460c      	mov	r4, r1
 800e2be:	46a8      	mov	r8, r5
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	3501      	adds	r5, #1
 800e2c6:	f007 ffa7 	bl	8016218 <put_memory>
 800e2ca:	42af      	cmp	r7, r5
 800e2cc:	60a4      	str	r4, [r4, #8]
 800e2ce:	f884 800c 	strb.w	r8, [r4, #12]
 800e2d2:	f104 0420 	add.w	r4, r4, #32
 800e2d6:	d1f3      	bne.n	800e2c0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop

0800e2e0 <rmw_uxrce_fini_session_memory>:
 800e2e0:	4601      	mov	r1, r0
 800e2e2:	4801      	ldr	r0, [pc, #4]	@ (800e2e8 <rmw_uxrce_fini_session_memory+0x8>)
 800e2e4:	f007 bf98 	b.w	8016218 <put_memory>
 800e2e8:	2000b2c4 	.word	0x2000b2c4

0800e2ec <rmw_uxrce_fini_node_memory>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	6800      	ldr	r0, [r0, #0]
 800e2f2:	b128      	cbz	r0, 800e300 <rmw_uxrce_fini_node_memory+0x14>
 800e2f4:	4b07      	ldr	r3, [pc, #28]	@ (800e314 <rmw_uxrce_fini_node_memory+0x28>)
 800e2f6:	6819      	ldr	r1, [r3, #0]
 800e2f8:	f7f1 ff92 	bl	8000220 <strcmp>
 800e2fc:	b940      	cbnz	r0, 800e310 <rmw_uxrce_fini_node_memory+0x24>
 800e2fe:	6020      	str	r0, [r4, #0]
 800e300:	6861      	ldr	r1, [r4, #4]
 800e302:	b129      	cbz	r1, 800e310 <rmw_uxrce_fini_node_memory+0x24>
 800e304:	2500      	movs	r5, #0
 800e306:	4804      	ldr	r0, [pc, #16]	@ (800e318 <rmw_uxrce_fini_node_memory+0x2c>)
 800e308:	610d      	str	r5, [r1, #16]
 800e30a:	f007 ff85 	bl	8016218 <put_memory>
 800e30e:	6065      	str	r5, [r4, #4]
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	0801bd38 	.word	0x0801bd38
 800e318:	2000b294 	.word	0x2000b294

0800e31c <rmw_uxrce_fini_publisher_memory>:
 800e31c:	b510      	push	{r4, lr}
 800e31e:	4604      	mov	r4, r0
 800e320:	6800      	ldr	r0, [r0, #0]
 800e322:	b128      	cbz	r0, 800e330 <rmw_uxrce_fini_publisher_memory+0x14>
 800e324:	4b06      	ldr	r3, [pc, #24]	@ (800e340 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e326:	6819      	ldr	r1, [r3, #0]
 800e328:	f7f1 ff7a 	bl	8000220 <strcmp>
 800e32c:	b938      	cbnz	r0, 800e33e <rmw_uxrce_fini_publisher_memory+0x22>
 800e32e:	6020      	str	r0, [r4, #0]
 800e330:	6861      	ldr	r1, [r4, #4]
 800e332:	b121      	cbz	r1, 800e33e <rmw_uxrce_fini_publisher_memory+0x22>
 800e334:	4803      	ldr	r0, [pc, #12]	@ (800e344 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e336:	f007 ff6f 	bl	8016218 <put_memory>
 800e33a:	2300      	movs	r3, #0
 800e33c:	6063      	str	r3, [r4, #4]
 800e33e:	bd10      	pop	{r4, pc}
 800e340:	0801bd38 	.word	0x0801bd38
 800e344:	2000b2a4 	.word	0x2000b2a4

0800e348 <rmw_uxrce_fini_subscription_memory>:
 800e348:	b510      	push	{r4, lr}
 800e34a:	4604      	mov	r4, r0
 800e34c:	6800      	ldr	r0, [r0, #0]
 800e34e:	b128      	cbz	r0, 800e35c <rmw_uxrce_fini_subscription_memory+0x14>
 800e350:	4b06      	ldr	r3, [pc, #24]	@ (800e36c <rmw_uxrce_fini_subscription_memory+0x24>)
 800e352:	6819      	ldr	r1, [r3, #0]
 800e354:	f7f1 ff64 	bl	8000220 <strcmp>
 800e358:	b938      	cbnz	r0, 800e36a <rmw_uxrce_fini_subscription_memory+0x22>
 800e35a:	6020      	str	r0, [r4, #0]
 800e35c:	6861      	ldr	r1, [r4, #4]
 800e35e:	b121      	cbz	r1, 800e36a <rmw_uxrce_fini_subscription_memory+0x22>
 800e360:	4803      	ldr	r0, [pc, #12]	@ (800e370 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e362:	f007 ff59 	bl	8016218 <put_memory>
 800e366:	2300      	movs	r3, #0
 800e368:	6063      	str	r3, [r4, #4]
 800e36a:	bd10      	pop	{r4, pc}
 800e36c:	0801bd38 	.word	0x0801bd38
 800e370:	2000b2e4 	.word	0x2000b2e4

0800e374 <rmw_uxrce_fini_service_memory>:
 800e374:	b510      	push	{r4, lr}
 800e376:	4604      	mov	r4, r0
 800e378:	6800      	ldr	r0, [r0, #0]
 800e37a:	b128      	cbz	r0, 800e388 <rmw_uxrce_fini_service_memory+0x14>
 800e37c:	4b06      	ldr	r3, [pc, #24]	@ (800e398 <rmw_uxrce_fini_service_memory+0x24>)
 800e37e:	6819      	ldr	r1, [r3, #0]
 800e380:	f7f1 ff4e 	bl	8000220 <strcmp>
 800e384:	b938      	cbnz	r0, 800e396 <rmw_uxrce_fini_service_memory+0x22>
 800e386:	6020      	str	r0, [r4, #0]
 800e388:	6861      	ldr	r1, [r4, #4]
 800e38a:	b121      	cbz	r1, 800e396 <rmw_uxrce_fini_service_memory+0x22>
 800e38c:	4803      	ldr	r0, [pc, #12]	@ (800e39c <rmw_uxrce_fini_service_memory+0x28>)
 800e38e:	f007 ff43 	bl	8016218 <put_memory>
 800e392:	2300      	movs	r3, #0
 800e394:	6063      	str	r3, [r4, #4]
 800e396:	bd10      	pop	{r4, pc}
 800e398:	0801bd38 	.word	0x0801bd38
 800e39c:	2000b2b4 	.word	0x2000b2b4

0800e3a0 <rmw_uxrce_fini_client_memory>:
 800e3a0:	b510      	push	{r4, lr}
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	6800      	ldr	r0, [r0, #0]
 800e3a6:	b128      	cbz	r0, 800e3b4 <rmw_uxrce_fini_client_memory+0x14>
 800e3a8:	4b06      	ldr	r3, [pc, #24]	@ (800e3c4 <rmw_uxrce_fini_client_memory+0x24>)
 800e3aa:	6819      	ldr	r1, [r3, #0]
 800e3ac:	f7f1 ff38 	bl	8000220 <strcmp>
 800e3b0:	b938      	cbnz	r0, 800e3c2 <rmw_uxrce_fini_client_memory+0x22>
 800e3b2:	6020      	str	r0, [r4, #0]
 800e3b4:	6861      	ldr	r1, [r4, #4]
 800e3b6:	b121      	cbz	r1, 800e3c2 <rmw_uxrce_fini_client_memory+0x22>
 800e3b8:	4803      	ldr	r0, [pc, #12]	@ (800e3c8 <rmw_uxrce_fini_client_memory+0x28>)
 800e3ba:	f007 ff2d 	bl	8016218 <put_memory>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	bd10      	pop	{r4, pc}
 800e3c4:	0801bd38 	.word	0x0801bd38
 800e3c8:	200069c4 	.word	0x200069c4

0800e3cc <rmw_uxrce_fini_topic_memory>:
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	4803      	ldr	r0, [pc, #12]	@ (800e3e0 <rmw_uxrce_fini_topic_memory+0x14>)
 800e3d4:	f007 ff20 	bl	8016218 <put_memory>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	61a3      	str	r3, [r4, #24]
 800e3dc:	bd10      	pop	{r4, pc}
 800e3de:	bf00      	nop
 800e3e0:	2000b2f4 	.word	0x2000b2f4

0800e3e4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e3e4:	b082      	sub	sp, #8
 800e3e6:	b530      	push	{r4, r5, lr}
 800e3e8:	4925      	ldr	r1, [pc, #148]	@ (800e480 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e3ea:	680d      	ldr	r5, [r1, #0]
 800e3ec:	ac03      	add	r4, sp, #12
 800e3ee:	e884 000c 	stmia.w	r4, {r2, r3}
 800e3f2:	461c      	mov	r4, r3
 800e3f4:	2d00      	cmp	r5, #0
 800e3f6:	d041      	beq.n	800e47c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e3f8:	462b      	mov	r3, r5
 800e3fa:	2100      	movs	r1, #0
 800e3fc:	689a      	ldr	r2, [r3, #8]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e404:	4290      	cmp	r0, r2
 800e406:	bf08      	it	eq
 800e408:	3101      	addeq	r1, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1f6      	bne.n	800e3fc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e40e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e412:	2b02      	cmp	r3, #2
 800e414:	d029      	beq.n	800e46a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e416:	d907      	bls.n	800e428 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e418:	2b03      	cmp	r3, #3
 800e41a:	d005      	beq.n	800e428 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e41c:	2100      	movs	r1, #0
 800e41e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e422:	4608      	mov	r0, r1
 800e424:	b002      	add	sp, #8
 800e426:	4770      	bx	lr
 800e428:	b314      	cbz	r4, 800e470 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e42a:	428c      	cmp	r4, r1
 800e42c:	d820      	bhi.n	800e470 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e42e:	2d00      	cmp	r5, #0
 800e430:	d0f4      	beq.n	800e41c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e432:	2100      	movs	r1, #0
 800e434:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e438:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e43c:	e002      	b.n	800e444 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e43e:	686d      	ldr	r5, [r5, #4]
 800e440:	2d00      	cmp	r5, #0
 800e442:	d0ec      	beq.n	800e41e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e444:	68ab      	ldr	r3, [r5, #8]
 800e446:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e44a:	4290      	cmp	r0, r2
 800e44c:	d1f7      	bne.n	800e43e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e44e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e452:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e456:	4562      	cmp	r2, ip
 800e458:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e45c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e460:	daed      	bge.n	800e43e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e462:	4694      	mov	ip, r2
 800e464:	461c      	mov	r4, r3
 800e466:	4629      	mov	r1, r5
 800e468:	e7e9      	b.n	800e43e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e46a:	b10c      	cbz	r4, 800e470 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e46c:	428c      	cmp	r4, r1
 800e46e:	d9d5      	bls.n	800e41c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e474:	4802      	ldr	r0, [pc, #8]	@ (800e480 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e476:	b002      	add	sp, #8
 800e478:	f007 bebe 	b.w	80161f8 <get_memory>
 800e47c:	4629      	mov	r1, r5
 800e47e:	e7c6      	b.n	800e40e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e480:	2000b2d4 	.word	0x2000b2d4

0800e484 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e484:	4b11      	ldr	r3, [pc, #68]	@ (800e4cc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	b530      	push	{r4, r5, lr}
 800e48a:	b1e3      	cbz	r3, 800e4c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e48c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e490:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e494:	2400      	movs	r4, #0
 800e496:	e001      	b.n	800e49c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	b193      	cbz	r3, 800e4c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e49c:	689a      	ldr	r2, [r3, #8]
 800e49e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e4a2:	4288      	cmp	r0, r1
 800e4a4:	d1f8      	bne.n	800e498 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e4a6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e4aa:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e4ae:	4571      	cmp	r1, lr
 800e4b0:	eb72 050c 	sbcs.w	r5, r2, ip
 800e4b4:	daf0      	bge.n	800e498 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e4b6:	461c      	mov	r4, r3
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	468e      	mov	lr, r1
 800e4bc:	4694      	mov	ip, r2
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1ec      	bne.n	800e49c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	bd30      	pop	{r4, r5, pc}
 800e4c6:	461c      	mov	r4, r3
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	bd30      	pop	{r4, r5, pc}
 800e4cc:	2000b2d4 	.word	0x2000b2d4

0800e4d0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	4b3c      	ldr	r3, [pc, #240]	@ (800e5c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e4d6:	ed2d 8b06 	vpush	{d8-d10}
 800e4da:	681f      	ldr	r7, [r3, #0]
 800e4dc:	b08d      	sub	sp, #52	@ 0x34
 800e4de:	f7ff fd7f 	bl	800dfe0 <rmw_uros_epoch_nanos>
 800e4e2:	2f00      	cmp	r7, #0
 800e4e4:	d05d      	beq.n	800e5a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e4e6:	46b8      	mov	r8, r7
 800e4e8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e5b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e4ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e4f0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e4f4:	2b04      	cmp	r3, #4
 800e4f6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e5b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e4fa:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e5c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e4fe:	4681      	mov	r9, r0
 800e500:	468a      	mov	sl, r1
 800e502:	ac04      	add	r4, sp, #16
 800e504:	d03f      	beq.n	800e586 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e506:	2b05      	cmp	r3, #5
 800e508:	d044      	beq.n	800e594 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e50a:	2b03      	cmp	r3, #3
 800e50c:	d03b      	beq.n	800e586 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e50e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e512:	ed8d ab06 	vstr	d10, [sp, #24]
 800e516:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e51a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e51e:	ab08      	add	r3, sp, #32
 800e520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e522:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e52a:	f007 fbb1 	bl	8015c90 <rmw_time_equal>
 800e52e:	b118      	cbz	r0, 800e538 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e530:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e534:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e538:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e53c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e540:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e544:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e548:	f007 fbf6 	bl	8015d38 <rmw_time_total_nsec>
 800e54c:	1830      	adds	r0, r6, r0
 800e54e:	eb47 0101 	adc.w	r1, r7, r1
 800e552:	4548      	cmp	r0, r9
 800e554:	eb71 030a 	sbcs.w	r3, r1, sl
 800e558:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e55c:	db05      	blt.n	800e56a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e55e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e562:	4591      	cmp	r9, r2
 800e564:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e568:	da03      	bge.n	800e572 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e56a:	4817      	ldr	r0, [pc, #92]	@ (800e5c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e56c:	4641      	mov	r1, r8
 800e56e:	f007 fe53 	bl	8016218 <put_memory>
 800e572:	f1bb 0f00 	cmp.w	fp, #0
 800e576:	d014      	beq.n	800e5a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e578:	46d8      	mov	r8, fp
 800e57a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e57e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e582:	2b04      	cmp	r3, #4
 800e584:	d1bf      	bne.n	800e506 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e586:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e58a:	3340      	adds	r3, #64	@ 0x40
 800e58c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e58e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e592:	e7c0      	b.n	800e516 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e594:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e598:	3348      	adds	r3, #72	@ 0x48
 800e59a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e59c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5a0:	e7b9      	b.n	800e516 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e5a2:	b00d      	add	sp, #52	@ 0x34
 800e5a4:	ecbd 8b06 	vpop	{d8-d10}
 800e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ac:	f3af 8000 	nop.w
	...
 800e5b8:	00000001 	.word	0x00000001
 800e5bc:	00000000 	.word	0x00000000
 800e5c0:	0000001e 	.word	0x0000001e
 800e5c4:	00000000 	.word	0x00000000
 800e5c8:	2000b2d4 	.word	0x2000b2d4

0800e5cc <run_xrce_session>:
 800e5cc:	b510      	push	{r4, lr}
 800e5ce:	788c      	ldrb	r4, [r1, #2]
 800e5d0:	b086      	sub	sp, #24
 800e5d2:	2c01      	cmp	r4, #1
 800e5d4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e5d8:	d00c      	beq.n	800e5f4 <run_xrce_session+0x28>
 800e5da:	4619      	mov	r1, r3
 800e5dc:	2301      	movs	r3, #1
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	f10d 020e 	add.w	r2, sp, #14
 800e5e4:	f10d 0317 	add.w	r3, sp, #23
 800e5e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5ec:	f001 fedc 	bl	80103a8 <uxr_run_session_until_all_status>
 800e5f0:	b006      	add	sp, #24
 800e5f2:	bd10      	pop	{r4, pc}
 800e5f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5f8:	f001 faf0 	bl	800fbdc <uxr_flash_output_streams>
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	b006      	add	sp, #24
 800e600:	bd10      	pop	{r4, pc}
 800e602:	bf00      	nop

0800e604 <convert_qos_profile>:
 800e604:	7a4a      	ldrb	r2, [r1, #9]
 800e606:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e60a:	2a02      	cmp	r2, #2
 800e60c:	bf18      	it	ne
 800e60e:	2200      	movne	r2, #0
 800e610:	7002      	strb	r2, [r0, #0]
 800e612:	780a      	ldrb	r2, [r1, #0]
 800e614:	8889      	ldrh	r1, [r1, #4]
 800e616:	8081      	strh	r1, [r0, #4]
 800e618:	f1ac 0c02 	sub.w	ip, ip, #2
 800e61c:	f1a2 0202 	sub.w	r2, r2, #2
 800e620:	fabc fc8c 	clz	ip, ip
 800e624:	fab2 f282 	clz	r2, r2
 800e628:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e62c:	0952      	lsrs	r2, r2, #5
 800e62e:	f880 c001 	strb.w	ip, [r0, #1]
 800e632:	7082      	strb	r2, [r0, #2]
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop

0800e638 <generate_type_name>:
 800e638:	b530      	push	{r4, r5, lr}
 800e63a:	2300      	movs	r3, #0
 800e63c:	700b      	strb	r3, [r1, #0]
 800e63e:	6803      	ldr	r3, [r0, #0]
 800e640:	b087      	sub	sp, #28
 800e642:	4614      	mov	r4, r2
 800e644:	b1d3      	cbz	r3, 800e67c <generate_type_name+0x44>
 800e646:	4a0f      	ldr	r2, [pc, #60]	@ (800e684 <generate_type_name+0x4c>)
 800e648:	4615      	mov	r5, r2
 800e64a:	9203      	str	r2, [sp, #12]
 800e64c:	9500      	str	r5, [sp, #0]
 800e64e:	6842      	ldr	r2, [r0, #4]
 800e650:	480d      	ldr	r0, [pc, #52]	@ (800e688 <generate_type_name+0x50>)
 800e652:	9001      	str	r0, [sp, #4]
 800e654:	4608      	mov	r0, r1
 800e656:	490d      	ldr	r1, [pc, #52]	@ (800e68c <generate_type_name+0x54>)
 800e658:	9204      	str	r2, [sp, #16]
 800e65a:	9105      	str	r1, [sp, #20]
 800e65c:	9102      	str	r1, [sp, #8]
 800e65e:	4a0c      	ldr	r2, [pc, #48]	@ (800e690 <generate_type_name+0x58>)
 800e660:	4621      	mov	r1, r4
 800e662:	f009 ffa5 	bl	80185b0 <sniprintf>
 800e666:	2800      	cmp	r0, #0
 800e668:	db05      	blt.n	800e676 <generate_type_name+0x3e>
 800e66a:	4284      	cmp	r4, r0
 800e66c:	bfd4      	ite	le
 800e66e:	2000      	movle	r0, #0
 800e670:	2001      	movgt	r0, #1
 800e672:	b007      	add	sp, #28
 800e674:	bd30      	pop	{r4, r5, pc}
 800e676:	2000      	movs	r0, #0
 800e678:	b007      	add	sp, #28
 800e67a:	bd30      	pop	{r4, r5, pc}
 800e67c:	4b05      	ldr	r3, [pc, #20]	@ (800e694 <generate_type_name+0x5c>)
 800e67e:	4a01      	ldr	r2, [pc, #4]	@ (800e684 <generate_type_name+0x4c>)
 800e680:	461d      	mov	r5, r3
 800e682:	e7e2      	b.n	800e64a <generate_type_name+0x12>
 800e684:	0801b2fc 	.word	0x0801b2fc
 800e688:	0801b314 	.word	0x0801b314
 800e68c:	0801b310 	.word	0x0801b310
 800e690:	0801b300 	.word	0x0801b300
 800e694:	0801bdc4 	.word	0x0801bdc4

0800e698 <generate_topic_name>:
 800e698:	b510      	push	{r4, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	4614      	mov	r4, r2
 800e69e:	9000      	str	r0, [sp, #0]
 800e6a0:	4b08      	ldr	r3, [pc, #32]	@ (800e6c4 <generate_topic_name+0x2c>)
 800e6a2:	4a09      	ldr	r2, [pc, #36]	@ (800e6c8 <generate_topic_name+0x30>)
 800e6a4:	4608      	mov	r0, r1
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	f009 ff82 	bl	80185b0 <sniprintf>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	db05      	blt.n	800e6bc <generate_topic_name+0x24>
 800e6b0:	4284      	cmp	r4, r0
 800e6b2:	bfd4      	ite	le
 800e6b4:	2000      	movle	r0, #0
 800e6b6:	2001      	movgt	r0, #1
 800e6b8:	b002      	add	sp, #8
 800e6ba:	bd10      	pop	{r4, pc}
 800e6bc:	2000      	movs	r0, #0
 800e6be:	b002      	add	sp, #8
 800e6c0:	bd10      	pop	{r4, pc}
 800e6c2:	bf00      	nop
 800e6c4:	0801b320 	.word	0x0801b320
 800e6c8:	0801b318 	.word	0x0801b318

0800e6cc <is_uxrce_rmw_identifier_valid>:
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	b140      	cbz	r0, 800e6e4 <is_uxrce_rmw_identifier_valid+0x18>
 800e6d2:	f007 fdf9 	bl	80162c8 <rmw_get_implementation_identifier>
 800e6d6:	4601      	mov	r1, r0
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f7f1 fda1 	bl	8000220 <strcmp>
 800e6de:	fab0 f080 	clz	r0, r0
 800e6e2:	0940      	lsrs	r0, r0, #5
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	bf00      	nop

0800e6e8 <get_message_typesupport_handle>:
 800e6e8:	6883      	ldr	r3, [r0, #8]
 800e6ea:	4718      	bx	r3

0800e6ec <get_message_typesupport_handle_function>:
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	6800      	ldr	r0, [r0, #0]
 800e6f2:	f7f1 fd95 	bl	8000220 <strcmp>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	bf0c      	ite	eq
 800e6fa:	4620      	moveq	r0, r4
 800e6fc:	2000      	movne	r0, #0
 800e6fe:	bd10      	pop	{r4, pc}

0800e700 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e704:	6805      	ldr	r5, [r0, #0]
 800e706:	4604      	mov	r4, r0
 800e708:	4628      	mov	r0, r5
 800e70a:	460e      	mov	r6, r1
 800e70c:	f7f1 fd88 	bl	8000220 <strcmp>
 800e710:	b1c8      	cbz	r0, 800e746 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e712:	4b11      	ldr	r3, [pc, #68]	@ (800e758 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	429d      	cmp	r5, r3
 800e718:	d112      	bne.n	800e740 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e71a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e71e:	f8d8 4000 	ldr.w	r4, [r8]
 800e722:	b16c      	cbz	r4, 800e740 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e724:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e728:	2700      	movs	r7, #0
 800e72a:	3d04      	subs	r5, #4
 800e72c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e730:	4631      	mov	r1, r6
 800e732:	f7f1 fd75 	bl	8000220 <strcmp>
 800e736:	00bb      	lsls	r3, r7, #2
 800e738:	b140      	cbz	r0, 800e74c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e73a:	3701      	adds	r7, #1
 800e73c:	42bc      	cmp	r4, r7
 800e73e:	d1f5      	bne.n	800e72c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e740:	2000      	movs	r0, #0
 800e742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e746:	4620      	mov	r0, r4
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e754:	58d3      	ldr	r3, [r2, r3]
 800e756:	4718      	bx	r3
 800e758:	20000260 	.word	0x20000260

0800e75c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e75c:	4b04      	ldr	r3, [pc, #16]	@ (800e770 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	b10a      	cbz	r2, 800e766 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800e762:	4803      	ldr	r0, [pc, #12]	@ (800e770 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800e764:	4770      	bx	lr
 800e766:	4a03      	ldr	r2, [pc, #12]	@ (800e774 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800e768:	4801      	ldr	r0, [pc, #4]	@ (800e770 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800e76a:	6812      	ldr	r2, [r2, #0]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	4770      	bx	lr
 800e770:	20000270 	.word	0x20000270
 800e774:	20000260 	.word	0x20000260

0800e778 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e778:	4a02      	ldr	r2, [pc, #8]	@ (800e784 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800e77a:	4b03      	ldr	r3, [pc, #12]	@ (800e788 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800e77c:	6812      	ldr	r2, [r2, #0]
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	20000260 	.word	0x20000260
 800e788:	20000270 	.word	0x20000270

0800e78c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800e78c:	2009      	movs	r0, #9
 800e78e:	4770      	bx	lr

0800e790 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800e790:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop

0800e798 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800e798:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7a0:	e9c2 0100 	strd	r0, r1, [r2]
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop

0800e7a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800e7a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e7ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e7b0:	e9c1 2300 	strd	r2, r3, [r1]
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop

0800e7b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800e7b8:	f008 b93a 	b.w	8016a30 <sensor_msgs__msg__Imu__init>

0800e7bc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800e7bc:	f008 b98e 	b.w	8016adc <sensor_msgs__msg__Imu__fini>

0800e7c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800e7c0:	2009      	movs	r0, #9
 800e7c2:	4770      	bx	lr

0800e7c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800e7c4:	2009      	movs	r0, #9
 800e7c6:	4770      	bx	lr

0800e7c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800e7c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop

0800e7d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800e7d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop

0800e7d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800e7d8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop

0800e7e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800e7e0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop

0800e7e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800e7e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop

0800e7f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800e7f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e7f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7f8:	e9c2 0100 	strd	r0, r1, [r2]
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop

0800e800 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800e800:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e804:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e808:	e9c1 2300 	strd	r2, r3, [r1]
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop

0800e810 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800e810:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e814:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e818:	e9c2 0100 	strd	r0, r1, [r2]
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop

0800e820 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800e820:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e824:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e828:	e9c1 2300 	strd	r2, r3, [r1]
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop

0800e830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800e830:	b510      	push	{r4, lr}
 800e832:	f000 f90f 	bl	800ea54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e836:	4c0b      	ldr	r4, [pc, #44]	@ (800e864 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800e838:	60e0      	str	r0, [r4, #12]
 800e83a:	f000 fa69 	bl	800ed10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e83e:	64a0      	str	r0, [r4, #72]	@ 0x48
 800e840:	f7fb ff0a 	bl	800a658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e844:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e848:	f7fb ff06 	bl	800a658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e84c:	4b06      	ldr	r3, [pc, #24]	@ (800e868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e84e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	b10a      	cbz	r2, 800e85a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800e856:	4804      	ldr	r0, [pc, #16]	@ (800e868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e858:	bd10      	pop	{r4, pc}
 800e85a:	4a04      	ldr	r2, [pc, #16]	@ (800e86c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800e85c:	4802      	ldr	r0, [pc, #8]	@ (800e868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800e85e:	6812      	ldr	r2, [r2, #0]
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	bd10      	pop	{r4, pc}
 800e864:	2000027c 	.word	0x2000027c
 800e868:	20000420 	.word	0x20000420
 800e86c:	20000264 	.word	0x20000264

0800e870 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800e870:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800e874:	4680      	mov	r8, r0
 800e876:	460f      	mov	r7, r1
 800e878:	f000 f910 	bl	800ea9c <get_serialized_size_std_msgs__msg__Header>
 800e87c:	183c      	adds	r4, r7, r0
 800e87e:	4621      	mov	r1, r4
 800e880:	f108 0018 	add.w	r0, r8, #24
 800e884:	f000 fa52 	bl	800ed2c <get_serialized_size_geometry_msgs__msg__Quaternion>
 800e888:	4404      	add	r4, r0
 800e88a:	2108      	movs	r1, #8
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7fd fb1f 	bl	800bed0 <ucdr_alignment>
 800e892:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800e896:	4425      	add	r5, r4
 800e898:	4629      	mov	r1, r5
 800e89a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800e89e:	f7fb ff4f 	bl	800a740 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e8a2:	4405      	add	r5, r0
 800e8a4:	2108      	movs	r1, #8
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f7fd fb12 	bl	800bed0 <ucdr_alignment>
 800e8ac:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800e8b0:	4425      	add	r5, r4
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800e8b8:	f7fb ff42 	bl	800a740 <get_serialized_size_geometry_msgs__msg__Vector3>
 800e8bc:	4405      	add	r5, r0
 800e8be:	2108      	movs	r1, #8
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f7fd fb05 	bl	800bed0 <ucdr_alignment>
 800e8c6:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800e8ca:	4438      	add	r0, r7
 800e8cc:	4428      	add	r0, r5
 800e8ce:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800e8d2:	bf00      	nop

0800e8d4 <get_serialized_size_sensor_msgs__msg__Imu>:
 800e8d4:	b108      	cbz	r0, 800e8da <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800e8d6:	f7ff bfcb 	b.w	800e870 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800e8da:	4770      	bx	lr

0800e8dc <_Imu__get_serialized_size>:
 800e8dc:	b110      	cbz	r0, 800e8e4 <_Imu__get_serialized_size+0x8>
 800e8de:	2100      	movs	r1, #0
 800e8e0:	f7ff bfc6 	b.w	800e870 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop

0800e8e8 <_Imu__cdr_deserialize>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	460c      	mov	r4, r1
 800e8ec:	b399      	cbz	r1, 800e956 <_Imu__cdr_deserialize+0x6e>
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	f000 f956 	bl	800eba0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e8f4:	6843      	ldr	r3, [r0, #4]
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	4798      	blx	r3
 800e8fe:	f000 fac9 	bl	800ee94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e902:	6843      	ldr	r3, [r0, #4]
 800e904:	f104 0118 	add.w	r1, r4, #24
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	4628      	mov	r0, r5
 800e90c:	4798      	blx	r3
 800e90e:	2209      	movs	r2, #9
 800e910:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e914:	4628      	mov	r0, r5
 800e916:	f000 fc41 	bl	800f19c <ucdr_deserialize_array_double>
 800e91a:	f7fb ff9d 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e91e:	6843      	ldr	r3, [r0, #4]
 800e920:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	4628      	mov	r0, r5
 800e928:	4798      	blx	r3
 800e92a:	2209      	movs	r2, #9
 800e92c:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800e930:	4628      	mov	r0, r5
 800e932:	f000 fc33 	bl	800f19c <ucdr_deserialize_array_double>
 800e936:	f7fb ff8f 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e93a:	6843      	ldr	r3, [r0, #4]
 800e93c:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	4628      	mov	r0, r5
 800e944:	4798      	blx	r3
 800e946:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e94a:	4628      	mov	r0, r5
 800e94c:	2209      	movs	r2, #9
 800e94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e952:	f000 bc23 	b.w	800f19c <ucdr_deserialize_array_double>
 800e956:	4608      	mov	r0, r1
 800e958:	bd38      	pop	{r3, r4, r5, pc}
 800e95a:	bf00      	nop

0800e95c <_Imu__cdr_serialize>:
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d035      	beq.n	800e9cc <_Imu__cdr_serialize+0x70>
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	460d      	mov	r5, r1
 800e964:	4604      	mov	r4, r0
 800e966:	f000 f91b 	bl	800eba0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e96a:	6843      	ldr	r3, [r0, #4]
 800e96c:	4629      	mov	r1, r5
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	4620      	mov	r0, r4
 800e972:	4798      	blx	r3
 800e974:	f000 fa8e 	bl	800ee94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800e978:	6843      	ldr	r3, [r0, #4]
 800e97a:	4629      	mov	r1, r5
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f104 0018 	add.w	r0, r4, #24
 800e982:	4798      	blx	r3
 800e984:	2209      	movs	r2, #9
 800e986:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e98a:	4628      	mov	r0, r5
 800e98c:	f000 fbb2 	bl	800f0f4 <ucdr_serialize_array_double>
 800e990:	f7fb ff62 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e994:	6843      	ldr	r3, [r0, #4]
 800e996:	4629      	mov	r1, r5
 800e998:	689b      	ldr	r3, [r3, #8]
 800e99a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800e99e:	4798      	blx	r3
 800e9a0:	2209      	movs	r2, #9
 800e9a2:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f000 fba4 	bl	800f0f4 <ucdr_serialize_array_double>
 800e9ac:	f7fb ff54 	bl	800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800e9b0:	6843      	ldr	r3, [r0, #4]
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800e9ba:	4798      	blx	r3
 800e9bc:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800e9c0:	4628      	mov	r0, r5
 800e9c2:	2209      	movs	r2, #9
 800e9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9c8:	f000 bb94 	b.w	800f0f4 <ucdr_serialize_array_double>
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop

0800e9d0 <max_serialized_size_sensor_msgs__msg__Imu>:
 800e9d0:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	7003      	strb	r3, [r0, #0]
 800e9d8:	4680      	mov	r8, r0
 800e9da:	460f      	mov	r7, r1
 800e9dc:	f000 f8d6 	bl	800eb8c <max_serialized_size_std_msgs__msg__Header>
 800e9e0:	183c      	adds	r4, r7, r0
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	f000 fa33 	bl	800ee50 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800e9ea:	4404      	add	r4, r0
 800e9ec:	2108      	movs	r1, #8
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f7fd fa6e 	bl	800bed0 <ucdr_alignment>
 800e9f4:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800e9f8:	4425      	add	r5, r4
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	f7fb ff0f 	bl	800a820 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ea02:	4405      	add	r5, r0
 800ea04:	2108      	movs	r1, #8
 800ea06:	4628      	mov	r0, r5
 800ea08:	f7fd fa62 	bl	800bed0 <ucdr_alignment>
 800ea0c:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800ea10:	4425      	add	r5, r4
 800ea12:	4629      	mov	r1, r5
 800ea14:	4640      	mov	r0, r8
 800ea16:	f7fb ff03 	bl	800a820 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ea1a:	4405      	add	r5, r0
 800ea1c:	2108      	movs	r1, #8
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f7fd fa56 	bl	800bed0 <ucdr_alignment>
 800ea24:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800ea28:	4438      	add	r0, r7
 800ea2a:	4428      	add	r0, r5
 800ea2c:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800ea30 <_Imu__max_serialized_size>:
 800ea30:	b500      	push	{lr}
 800ea32:	b083      	sub	sp, #12
 800ea34:	2100      	movs	r1, #0
 800ea36:	f10d 0007 	add.w	r0, sp, #7
 800ea3a:	f7ff ffc9 	bl	800e9d0 <max_serialized_size_sensor_msgs__msg__Imu>
 800ea3e:	b003      	add	sp, #12
 800ea40:	f85d fb04 	ldr.w	pc, [sp], #4

0800ea44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ea44:	4800      	ldr	r0, [pc, #0]	@ (800ea48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800ea46:	4770      	bx	lr
 800ea48:	2000042c 	.word	0x2000042c

0800ea4c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800ea4c:	f008 b85a 	b.w	8016b04 <std_msgs__msg__Header__init>

0800ea50 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800ea50:	f008 b87c 	b.w	8016b4c <std_msgs__msg__Header__fini>

0800ea54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ea54:	b508      	push	{r3, lr}
 800ea56:	f000 f8ab 	bl	800ebb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea5a:	4b06      	ldr	r3, [pc, #24]	@ (800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ea5c:	4906      	ldr	r1, [pc, #24]	@ (800ea78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	60c8      	str	r0, [r1, #12]
 800ea62:	b10a      	cbz	r2, 800ea68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800ea64:	4803      	ldr	r0, [pc, #12]	@ (800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ea66:	bd08      	pop	{r3, pc}
 800ea68:	4a04      	ldr	r2, [pc, #16]	@ (800ea7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800ea6a:	4802      	ldr	r0, [pc, #8]	@ (800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800ea6c:	6812      	ldr	r2, [r2, #0]
 800ea6e:	601a      	str	r2, [r3, #0]
 800ea70:	bd08      	pop	{r3, pc}
 800ea72:	bf00      	nop
 800ea74:	200004cc 	.word	0x200004cc
 800ea78:	20000454 	.word	0x20000454
 800ea7c:	20000264 	.word	0x20000264

0800ea80 <_Header__max_serialized_size>:
 800ea80:	b500      	push	{lr}
 800ea82:	b083      	sub	sp, #12
 800ea84:	2301      	movs	r3, #1
 800ea86:	2100      	movs	r1, #0
 800ea88:	f10d 0007 	add.w	r0, sp, #7
 800ea8c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ea90:	f000 f8ec 	bl	800ec6c <max_serialized_size_builtin_interfaces__msg__Time>
 800ea94:	b003      	add	sp, #12
 800ea96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea9a:	bf00      	nop

0800ea9c <get_serialized_size_std_msgs__msg__Header>:
 800ea9c:	b570      	push	{r4, r5, r6, lr}
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	b168      	cbz	r0, 800eabe <get_serialized_size_std_msgs__msg__Header+0x22>
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	f000 f892 	bl	800ebcc <get_serialized_size_builtin_interfaces__msg__Time>
 800eaa8:	1826      	adds	r6, r4, r0
 800eaaa:	2104      	movs	r1, #4
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7fd fa0f 	bl	800bed0 <ucdr_alignment>
 800eab2:	68e9      	ldr	r1, [r5, #12]
 800eab4:	f1c4 0405 	rsb	r4, r4, #5
 800eab8:	440c      	add	r4, r1
 800eaba:	4404      	add	r4, r0
 800eabc:	19a0      	adds	r0, r4, r6
 800eabe:	bd70      	pop	{r4, r5, r6, pc}

0800eac0 <_Header__cdr_deserialize>:
 800eac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac2:	460c      	mov	r4, r1
 800eac4:	b083      	sub	sp, #12
 800eac6:	b1e1      	cbz	r1, 800eb02 <_Header__cdr_deserialize+0x42>
 800eac8:	4606      	mov	r6, r0
 800eaca:	f000 f8e3 	bl	800ec94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eace:	6843      	ldr	r3, [r0, #4]
 800ead0:	4621      	mov	r1, r4
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	4630      	mov	r0, r6
 800ead6:	4798      	blx	r3
 800ead8:	6927      	ldr	r7, [r4, #16]
 800eada:	68a1      	ldr	r1, [r4, #8]
 800eadc:	ab01      	add	r3, sp, #4
 800eade:	463a      	mov	r2, r7
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 fbc3 	bl	800f26c <ucdr_deserialize_sequence_char>
 800eae6:	9b01      	ldr	r3, [sp, #4]
 800eae8:	4605      	mov	r5, r0
 800eaea:	b920      	cbnz	r0, 800eaf6 <_Header__cdr_deserialize+0x36>
 800eaec:	429f      	cmp	r7, r3
 800eaee:	d30c      	bcc.n	800eb0a <_Header__cdr_deserialize+0x4a>
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	b003      	add	sp, #12
 800eaf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaf6:	b103      	cbz	r3, 800eafa <_Header__cdr_deserialize+0x3a>
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	4628      	mov	r0, r5
 800eafc:	60e3      	str	r3, [r4, #12]
 800eafe:	b003      	add	sp, #12
 800eb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb02:	460d      	mov	r5, r1
 800eb04:	4628      	mov	r0, r5
 800eb06:	b003      	add	sp, #12
 800eb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	75b0      	strb	r0, [r6, #22]
 800eb0e:	7571      	strb	r1, [r6, #21]
 800eb10:	4630      	mov	r0, r6
 800eb12:	60e5      	str	r5, [r4, #12]
 800eb14:	f7fd f9f2 	bl	800befc <ucdr_align_to>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	9901      	ldr	r1, [sp, #4]
 800eb1c:	f7fd fa24 	bl	800bf68 <ucdr_advance_buffer>
 800eb20:	4628      	mov	r0, r5
 800eb22:	b003      	add	sp, #12
 800eb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb26:	bf00      	nop

0800eb28 <_Header__cdr_serialize>:
 800eb28:	b1f8      	cbz	r0, 800eb6a <_Header__cdr_serialize+0x42>
 800eb2a:	b570      	push	{r4, r5, r6, lr}
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	460d      	mov	r5, r1
 800eb30:	f000 f8b0 	bl	800ec94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eb34:	6843      	ldr	r3, [r0, #4]
 800eb36:	4629      	mov	r1, r5
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	4798      	blx	r3
 800eb3e:	68a6      	ldr	r6, [r4, #8]
 800eb40:	b156      	cbz	r6, 800eb58 <_Header__cdr_serialize+0x30>
 800eb42:	4630      	mov	r0, r6
 800eb44:	f7f1 fb76 	bl	8000234 <strlen>
 800eb48:	4631      	mov	r1, r6
 800eb4a:	60e0      	str	r0, [r4, #12]
 800eb4c:	1c42      	adds	r2, r0, #1
 800eb4e:	4628      	mov	r0, r5
 800eb50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb54:	f000 bb78 	b.w	800f248 <ucdr_serialize_sequence_char>
 800eb58:	4630      	mov	r0, r6
 800eb5a:	60e0      	str	r0, [r4, #12]
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	4631      	mov	r1, r6
 800eb60:	4628      	mov	r0, r5
 800eb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb66:	f000 bb6f 	b.w	800f248 <ucdr_serialize_sequence_char>
 800eb6a:	4770      	bx	lr

0800eb6c <_Header__get_serialized_size>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4604      	mov	r4, r0
 800eb70:	b150      	cbz	r0, 800eb88 <_Header__get_serialized_size+0x1c>
 800eb72:	2100      	movs	r1, #0
 800eb74:	f000 f82a 	bl	800ebcc <get_serialized_size_builtin_interfaces__msg__Time>
 800eb78:	2104      	movs	r1, #4
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	f7fd f9a8 	bl	800bed0 <ucdr_alignment>
 800eb80:	68e2      	ldr	r2, [r4, #12]
 800eb82:	3205      	adds	r2, #5
 800eb84:	1953      	adds	r3, r2, r5
 800eb86:	4418      	add	r0, r3
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	bf00      	nop

0800eb8c <max_serialized_size_std_msgs__msg__Header>:
 800eb8c:	b510      	push	{r4, lr}
 800eb8e:	2301      	movs	r3, #1
 800eb90:	4604      	mov	r4, r0
 800eb92:	7003      	strb	r3, [r0, #0]
 800eb94:	f000 f86a 	bl	800ec6c <max_serialized_size_builtin_interfaces__msg__Time>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	7023      	strb	r3, [r4, #0]
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	bf00      	nop

0800eba0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800eba0:	4800      	ldr	r0, [pc, #0]	@ (800eba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800eba2:	4770      	bx	lr
 800eba4:	200004d8 	.word	0x200004d8

0800eba8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800eba8:	f007 bfdc 	b.w	8016b64 <builtin_interfaces__msg__Time__init>

0800ebac <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ebac:	f007 bfde 	b.w	8016b6c <builtin_interfaces__msg__Time__fini>

0800ebb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ebb0:	4b04      	ldr	r3, [pc, #16]	@ (800ebc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	b10a      	cbz	r2, 800ebba <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ebb6:	4803      	ldr	r0, [pc, #12]	@ (800ebc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebb8:	4770      	bx	lr
 800ebba:	4a03      	ldr	r2, [pc, #12]	@ (800ebc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ebbc:	4801      	ldr	r0, [pc, #4]	@ (800ebc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebbe:	6812      	ldr	r2, [r2, #0]
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	4770      	bx	lr
 800ebc4:	20000578 	.word	0x20000578
 800ebc8:	20000264 	.word	0x20000264

0800ebcc <get_serialized_size_builtin_interfaces__msg__Time>:
 800ebcc:	b180      	cbz	r0, 800ebf0 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ebce:	b538      	push	{r3, r4, r5, lr}
 800ebd0:	460d      	mov	r5, r1
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	2104      	movs	r1, #4
 800ebd6:	f7fd f97b 	bl	800bed0 <ucdr_alignment>
 800ebda:	1d2b      	adds	r3, r5, #4
 800ebdc:	181c      	adds	r4, r3, r0
 800ebde:	2104      	movs	r1, #4
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f7fd f975 	bl	800bed0 <ucdr_alignment>
 800ebe6:	f1c5 0504 	rsb	r5, r5, #4
 800ebea:	4428      	add	r0, r5
 800ebec:	4420      	add	r0, r4
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop

0800ebf4 <_Time__cdr_deserialize>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	b141      	cbz	r1, 800ec0c <_Time__cdr_deserialize+0x18>
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	f7fc fd4a 	bl	800b694 <ucdr_deserialize_int32_t>
 800ec00:	1d21      	adds	r1, r4, #4
 800ec02:	4628      	mov	r0, r5
 800ec04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec08:	f7fc b9c2 	b.w	800af90 <ucdr_deserialize_uint32_t>
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	bd38      	pop	{r3, r4, r5, pc}

0800ec10 <_Time__cdr_serialize>:
 800ec10:	b160      	cbz	r0, 800ec2c <_Time__cdr_serialize+0x1c>
 800ec12:	b538      	push	{r3, r4, r5, lr}
 800ec14:	460d      	mov	r5, r1
 800ec16:	4604      	mov	r4, r0
 800ec18:	6801      	ldr	r1, [r0, #0]
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	f7fc fca2 	bl	800b564 <ucdr_serialize_int32_t>
 800ec20:	6861      	ldr	r1, [r4, #4]
 800ec22:	4628      	mov	r0, r5
 800ec24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec28:	f7fc b882 	b.w	800ad30 <ucdr_serialize_uint32_t>
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop

0800ec30 <_Time__get_serialized_size>:
 800ec30:	b160      	cbz	r0, 800ec4c <_Time__get_serialized_size+0x1c>
 800ec32:	b510      	push	{r4, lr}
 800ec34:	2104      	movs	r1, #4
 800ec36:	2000      	movs	r0, #0
 800ec38:	f7fd f94a 	bl	800bed0 <ucdr_alignment>
 800ec3c:	1d04      	adds	r4, r0, #4
 800ec3e:	2104      	movs	r1, #4
 800ec40:	4620      	mov	r0, r4
 800ec42:	f7fd f945 	bl	800bed0 <ucdr_alignment>
 800ec46:	3004      	adds	r0, #4
 800ec48:	4420      	add	r0, r4
 800ec4a:	bd10      	pop	{r4, pc}
 800ec4c:	4770      	bx	lr
 800ec4e:	bf00      	nop

0800ec50 <_Time__max_serialized_size>:
 800ec50:	b510      	push	{r4, lr}
 800ec52:	2104      	movs	r1, #4
 800ec54:	2000      	movs	r0, #0
 800ec56:	f7fd f93b 	bl	800bed0 <ucdr_alignment>
 800ec5a:	1d04      	adds	r4, r0, #4
 800ec5c:	2104      	movs	r1, #4
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f7fd f936 	bl	800bed0 <ucdr_alignment>
 800ec64:	3004      	adds	r0, #4
 800ec66:	4420      	add	r0, r4
 800ec68:	bd10      	pop	{r4, pc}
 800ec6a:	bf00      	nop

0800ec6c <max_serialized_size_builtin_interfaces__msg__Time>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	460c      	mov	r4, r1
 800ec70:	2301      	movs	r3, #1
 800ec72:	7003      	strb	r3, [r0, #0]
 800ec74:	2104      	movs	r1, #4
 800ec76:	4620      	mov	r0, r4
 800ec78:	f7fd f92a 	bl	800bed0 <ucdr_alignment>
 800ec7c:	1d25      	adds	r5, r4, #4
 800ec7e:	4405      	add	r5, r0
 800ec80:	2104      	movs	r1, #4
 800ec82:	4628      	mov	r0, r5
 800ec84:	f7fd f924 	bl	800bed0 <ucdr_alignment>
 800ec88:	f1c4 0404 	rsb	r4, r4, #4
 800ec8c:	4420      	add	r0, r4
 800ec8e:	4428      	add	r0, r5
 800ec90:	bd38      	pop	{r3, r4, r5, pc}
 800ec92:	bf00      	nop

0800ec94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ec94:	4800      	ldr	r0, [pc, #0]	@ (800ec98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ec96:	4770      	bx	lr
 800ec98:	20000584 	.word	0x20000584

0800ec9c <geometry_msgs__msg__Twist__init>:
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	4605      	mov	r5, r0
 800eca0:	b1a8      	cbz	r0, 800ecce <geometry_msgs__msg__Twist__init+0x32>
 800eca2:	f000 f82b 	bl	800ecfc <geometry_msgs__msg__Vector3__init>
 800eca6:	4604      	mov	r4, r0
 800eca8:	b140      	cbz	r0, 800ecbc <geometry_msgs__msg__Twist__init+0x20>
 800ecaa:	f105 0618 	add.w	r6, r5, #24
 800ecae:	4630      	mov	r0, r6
 800ecb0:	f000 f824 	bl	800ecfc <geometry_msgs__msg__Vector3__init>
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	b168      	cbz	r0, 800ecd4 <geometry_msgs__msg__Twist__init+0x38>
 800ecb8:	4620      	mov	r0, r4
 800ecba:	bd70      	pop	{r4, r5, r6, pc}
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f000 f821 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 800ecc2:	f105 0018 	add.w	r0, r5, #24
 800ecc6:	f000 f81d 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 800ecca:	4620      	mov	r0, r4
 800eccc:	bd70      	pop	{r4, r5, r6, pc}
 800ecce:	4604      	mov	r4, r0
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	bd70      	pop	{r4, r5, r6, pc}
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f000 f815 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f000 f812 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 800ece0:	e7ea      	b.n	800ecb8 <geometry_msgs__msg__Twist__init+0x1c>
 800ece2:	bf00      	nop

0800ece4 <geometry_msgs__msg__Twist__fini>:
 800ece4:	b148      	cbz	r0, 800ecfa <geometry_msgs__msg__Twist__fini+0x16>
 800ece6:	b510      	push	{r4, lr}
 800ece8:	4604      	mov	r4, r0
 800ecea:	f000 f80b 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 800ecee:	f104 0018 	add.w	r0, r4, #24
 800ecf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf6:	f000 b805 	b.w	800ed04 <geometry_msgs__msg__Vector3__fini>
 800ecfa:	4770      	bx	lr

0800ecfc <geometry_msgs__msg__Vector3__init>:
 800ecfc:	3800      	subs	r0, #0
 800ecfe:	bf18      	it	ne
 800ed00:	2001      	movne	r0, #1
 800ed02:	4770      	bx	lr

0800ed04 <geometry_msgs__msg__Vector3__fini>:
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop

0800ed08 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800ed08:	f007 bf32 	b.w	8016b70 <geometry_msgs__msg__Quaternion__init>

0800ed0c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800ed0c:	f007 bf44 	b.w	8016b98 <geometry_msgs__msg__Quaternion__fini>

0800ed10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ed10:	4b04      	ldr	r3, [pc, #16]	@ (800ed24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	b10a      	cbz	r2, 800ed1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800ed16:	4803      	ldr	r0, [pc, #12]	@ (800ed24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ed18:	4770      	bx	lr
 800ed1a:	4a03      	ldr	r2, [pc, #12]	@ (800ed28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800ed1c:	4801      	ldr	r0, [pc, #4]	@ (800ed24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ed1e:	6812      	ldr	r2, [r2, #0]
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	4770      	bx	lr
 800ed24:	2000069c 	.word	0x2000069c
 800ed28:	20000264 	.word	0x20000264

0800ed2c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800ed2c:	b1f0      	cbz	r0, 800ed6c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800ed2e:	b570      	push	{r4, r5, r6, lr}
 800ed30:	460d      	mov	r5, r1
 800ed32:	4628      	mov	r0, r5
 800ed34:	2108      	movs	r1, #8
 800ed36:	f7fd f8cb 	bl	800bed0 <ucdr_alignment>
 800ed3a:	f105 0308 	add.w	r3, r5, #8
 800ed3e:	181e      	adds	r6, r3, r0
 800ed40:	2108      	movs	r1, #8
 800ed42:	4630      	mov	r0, r6
 800ed44:	f7fd f8c4 	bl	800bed0 <ucdr_alignment>
 800ed48:	f100 0408 	add.w	r4, r0, #8
 800ed4c:	4434      	add	r4, r6
 800ed4e:	2108      	movs	r1, #8
 800ed50:	4620      	mov	r0, r4
 800ed52:	f7fd f8bd 	bl	800bed0 <ucdr_alignment>
 800ed56:	3008      	adds	r0, #8
 800ed58:	4404      	add	r4, r0
 800ed5a:	2108      	movs	r1, #8
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	f7fd f8b7 	bl	800bed0 <ucdr_alignment>
 800ed62:	f1c5 0508 	rsb	r5, r5, #8
 800ed66:	4428      	add	r0, r5
 800ed68:	4420      	add	r0, r4
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop

0800ed70 <_Quaternion__cdr_deserialize>:
 800ed70:	b538      	push	{r3, r4, r5, lr}
 800ed72:	460c      	mov	r4, r1
 800ed74:	b199      	cbz	r1, 800ed9e <_Quaternion__cdr_deserialize+0x2e>
 800ed76:	4605      	mov	r5, r0
 800ed78:	f7fc febe 	bl	800baf8 <ucdr_deserialize_double>
 800ed7c:	f104 0108 	add.w	r1, r4, #8
 800ed80:	4628      	mov	r0, r5
 800ed82:	f7fc feb9 	bl	800baf8 <ucdr_deserialize_double>
 800ed86:	f104 0110 	add.w	r1, r4, #16
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f7fc feb4 	bl	800baf8 <ucdr_deserialize_double>
 800ed90:	f104 0118 	add.w	r1, r4, #24
 800ed94:	4628      	mov	r0, r5
 800ed96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed9a:	f7fc bead 	b.w	800baf8 <ucdr_deserialize_double>
 800ed9e:	4608      	mov	r0, r1
 800eda0:	bd38      	pop	{r3, r4, r5, pc}
 800eda2:	bf00      	nop

0800eda4 <_Quaternion__cdr_serialize>:
 800eda4:	b1c0      	cbz	r0, 800edd8 <_Quaternion__cdr_serialize+0x34>
 800eda6:	b538      	push	{r3, r4, r5, lr}
 800eda8:	ed90 0b00 	vldr	d0, [r0]
 800edac:	460d      	mov	r5, r1
 800edae:	4604      	mov	r4, r0
 800edb0:	4608      	mov	r0, r1
 800edb2:	f7fc fcff 	bl	800b7b4 <ucdr_serialize_double>
 800edb6:	ed94 0b02 	vldr	d0, [r4, #8]
 800edba:	4628      	mov	r0, r5
 800edbc:	f7fc fcfa 	bl	800b7b4 <ucdr_serialize_double>
 800edc0:	ed94 0b04 	vldr	d0, [r4, #16]
 800edc4:	4628      	mov	r0, r5
 800edc6:	f7fc fcf5 	bl	800b7b4 <ucdr_serialize_double>
 800edca:	ed94 0b06 	vldr	d0, [r4, #24]
 800edce:	4628      	mov	r0, r5
 800edd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edd4:	f7fc bcee 	b.w	800b7b4 <ucdr_serialize_double>
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop

0800eddc <_Quaternion__get_serialized_size>:
 800eddc:	b1d0      	cbz	r0, 800ee14 <_Quaternion__get_serialized_size+0x38>
 800edde:	b538      	push	{r3, r4, r5, lr}
 800ede0:	2108      	movs	r1, #8
 800ede2:	2000      	movs	r0, #0
 800ede4:	f7fd f874 	bl	800bed0 <ucdr_alignment>
 800ede8:	f100 0508 	add.w	r5, r0, #8
 800edec:	2108      	movs	r1, #8
 800edee:	4628      	mov	r0, r5
 800edf0:	f7fd f86e 	bl	800bed0 <ucdr_alignment>
 800edf4:	f100 0408 	add.w	r4, r0, #8
 800edf8:	442c      	add	r4, r5
 800edfa:	2108      	movs	r1, #8
 800edfc:	4620      	mov	r0, r4
 800edfe:	f7fd f867 	bl	800bed0 <ucdr_alignment>
 800ee02:	3008      	adds	r0, #8
 800ee04:	4404      	add	r4, r0
 800ee06:	2108      	movs	r1, #8
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f7fd f861 	bl	800bed0 <ucdr_alignment>
 800ee0e:	3008      	adds	r0, #8
 800ee10:	4420      	add	r0, r4
 800ee12:	bd38      	pop	{r3, r4, r5, pc}
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop

0800ee18 <_Quaternion__max_serialized_size>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	2108      	movs	r1, #8
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	f7fd f857 	bl	800bed0 <ucdr_alignment>
 800ee22:	f100 0508 	add.w	r5, r0, #8
 800ee26:	2108      	movs	r1, #8
 800ee28:	4628      	mov	r0, r5
 800ee2a:	f7fd f851 	bl	800bed0 <ucdr_alignment>
 800ee2e:	f100 0408 	add.w	r4, r0, #8
 800ee32:	442c      	add	r4, r5
 800ee34:	2108      	movs	r1, #8
 800ee36:	4620      	mov	r0, r4
 800ee38:	f7fd f84a 	bl	800bed0 <ucdr_alignment>
 800ee3c:	3008      	adds	r0, #8
 800ee3e:	4404      	add	r4, r0
 800ee40:	2108      	movs	r1, #8
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7fd f844 	bl	800bed0 <ucdr_alignment>
 800ee48:	3008      	adds	r0, #8
 800ee4a:	4420      	add	r0, r4
 800ee4c:	bd38      	pop	{r3, r4, r5, pc}
 800ee4e:	bf00      	nop

0800ee50 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	2301      	movs	r3, #1
 800ee54:	460c      	mov	r4, r1
 800ee56:	7003      	strb	r3, [r0, #0]
 800ee58:	2108      	movs	r1, #8
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f7fd f838 	bl	800bed0 <ucdr_alignment>
 800ee60:	f104 0508 	add.w	r5, r4, #8
 800ee64:	1946      	adds	r6, r0, r5
 800ee66:	2108      	movs	r1, #8
 800ee68:	4630      	mov	r0, r6
 800ee6a:	f7fd f831 	bl	800bed0 <ucdr_alignment>
 800ee6e:	f100 0508 	add.w	r5, r0, #8
 800ee72:	4435      	add	r5, r6
 800ee74:	2108      	movs	r1, #8
 800ee76:	4628      	mov	r0, r5
 800ee78:	f7fd f82a 	bl	800bed0 <ucdr_alignment>
 800ee7c:	3008      	adds	r0, #8
 800ee7e:	4405      	add	r5, r0
 800ee80:	2108      	movs	r1, #8
 800ee82:	4628      	mov	r0, r5
 800ee84:	f7fd f824 	bl	800bed0 <ucdr_alignment>
 800ee88:	f1c4 0408 	rsb	r4, r4, #8
 800ee8c:	4420      	add	r0, r4
 800ee8e:	4428      	add	r0, r5
 800ee90:	bd70      	pop	{r4, r5, r6, pc}
 800ee92:	bf00      	nop

0800ee94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ee94:	4800      	ldr	r0, [pc, #0]	@ (800ee98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800ee96:	4770      	bx	lr
 800ee98:	200006a8 	.word	0x200006a8

0800ee9c <ucdr_serialize_endian_array_char>:
 800ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	4619      	mov	r1, r3
 800eea2:	461f      	mov	r7, r3
 800eea4:	4605      	mov	r5, r0
 800eea6:	4690      	mov	r8, r2
 800eea8:	f7fc ffba 	bl	800be20 <ucdr_check_buffer_available_for>
 800eeac:	b9e0      	cbnz	r0, 800eee8 <ucdr_serialize_endian_array_char+0x4c>
 800eeae:	463e      	mov	r6, r7
 800eeb0:	e009      	b.n	800eec6 <ucdr_serialize_endian_array_char+0x2a>
 800eeb2:	68a8      	ldr	r0, [r5, #8]
 800eeb4:	f009 fdb3 	bl	8018a1e <memcpy>
 800eeb8:	68ab      	ldr	r3, [r5, #8]
 800eeba:	6928      	ldr	r0, [r5, #16]
 800eebc:	4423      	add	r3, r4
 800eebe:	4420      	add	r0, r4
 800eec0:	1b36      	subs	r6, r6, r4
 800eec2:	60ab      	str	r3, [r5, #8]
 800eec4:	6128      	str	r0, [r5, #16]
 800eec6:	4631      	mov	r1, r6
 800eec8:	2201      	movs	r2, #1
 800eeca:	4628      	mov	r0, r5
 800eecc:	f7fd f830 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800eed0:	1bb9      	subs	r1, r7, r6
 800eed2:	4441      	add	r1, r8
 800eed4:	4604      	mov	r4, r0
 800eed6:	4602      	mov	r2, r0
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d1ea      	bne.n	800eeb2 <ucdr_serialize_endian_array_char+0x16>
 800eedc:	2301      	movs	r3, #1
 800eede:	7da8      	ldrb	r0, [r5, #22]
 800eee0:	756b      	strb	r3, [r5, #21]
 800eee2:	4058      	eors	r0, r3
 800eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee8:	463a      	mov	r2, r7
 800eeea:	68a8      	ldr	r0, [r5, #8]
 800eeec:	4641      	mov	r1, r8
 800eeee:	f009 fd96 	bl	8018a1e <memcpy>
 800eef2:	68aa      	ldr	r2, [r5, #8]
 800eef4:	692b      	ldr	r3, [r5, #16]
 800eef6:	443a      	add	r2, r7
 800eef8:	443b      	add	r3, r7
 800eefa:	60aa      	str	r2, [r5, #8]
 800eefc:	612b      	str	r3, [r5, #16]
 800eefe:	e7ed      	b.n	800eedc <ucdr_serialize_endian_array_char+0x40>

0800ef00 <ucdr_deserialize_endian_array_char>:
 800ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef04:	4619      	mov	r1, r3
 800ef06:	461f      	mov	r7, r3
 800ef08:	4605      	mov	r5, r0
 800ef0a:	4690      	mov	r8, r2
 800ef0c:	f7fc ff88 	bl	800be20 <ucdr_check_buffer_available_for>
 800ef10:	b9e0      	cbnz	r0, 800ef4c <ucdr_deserialize_endian_array_char+0x4c>
 800ef12:	463e      	mov	r6, r7
 800ef14:	e009      	b.n	800ef2a <ucdr_deserialize_endian_array_char+0x2a>
 800ef16:	68a9      	ldr	r1, [r5, #8]
 800ef18:	f009 fd81 	bl	8018a1e <memcpy>
 800ef1c:	68ab      	ldr	r3, [r5, #8]
 800ef1e:	6928      	ldr	r0, [r5, #16]
 800ef20:	4423      	add	r3, r4
 800ef22:	4420      	add	r0, r4
 800ef24:	1b36      	subs	r6, r6, r4
 800ef26:	60ab      	str	r3, [r5, #8]
 800ef28:	6128      	str	r0, [r5, #16]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	4628      	mov	r0, r5
 800ef30:	f7fc fffe 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800ef34:	4604      	mov	r4, r0
 800ef36:	1bb8      	subs	r0, r7, r6
 800ef38:	4440      	add	r0, r8
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	2c00      	cmp	r4, #0
 800ef3e:	d1ea      	bne.n	800ef16 <ucdr_deserialize_endian_array_char+0x16>
 800ef40:	2301      	movs	r3, #1
 800ef42:	7da8      	ldrb	r0, [r5, #22]
 800ef44:	756b      	strb	r3, [r5, #21]
 800ef46:	4058      	eors	r0, r3
 800ef48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef4c:	463a      	mov	r2, r7
 800ef4e:	68a9      	ldr	r1, [r5, #8]
 800ef50:	4640      	mov	r0, r8
 800ef52:	f009 fd64 	bl	8018a1e <memcpy>
 800ef56:	68aa      	ldr	r2, [r5, #8]
 800ef58:	692b      	ldr	r3, [r5, #16]
 800ef5a:	443a      	add	r2, r7
 800ef5c:	443b      	add	r3, r7
 800ef5e:	60aa      	str	r2, [r5, #8]
 800ef60:	612b      	str	r3, [r5, #16]
 800ef62:	e7ed      	b.n	800ef40 <ucdr_deserialize_endian_array_char+0x40>

0800ef64 <ucdr_serialize_array_uint8_t>:
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef68:	4688      	mov	r8, r1
 800ef6a:	4611      	mov	r1, r2
 800ef6c:	4617      	mov	r7, r2
 800ef6e:	4605      	mov	r5, r0
 800ef70:	f7fc ff56 	bl	800be20 <ucdr_check_buffer_available_for>
 800ef74:	b9e0      	cbnz	r0, 800efb0 <ucdr_serialize_array_uint8_t+0x4c>
 800ef76:	463e      	mov	r6, r7
 800ef78:	e009      	b.n	800ef8e <ucdr_serialize_array_uint8_t+0x2a>
 800ef7a:	68a8      	ldr	r0, [r5, #8]
 800ef7c:	f009 fd4f 	bl	8018a1e <memcpy>
 800ef80:	68aa      	ldr	r2, [r5, #8]
 800ef82:	692b      	ldr	r3, [r5, #16]
 800ef84:	4422      	add	r2, r4
 800ef86:	4423      	add	r3, r4
 800ef88:	1b36      	subs	r6, r6, r4
 800ef8a:	60aa      	str	r2, [r5, #8]
 800ef8c:	612b      	str	r3, [r5, #16]
 800ef8e:	4631      	mov	r1, r6
 800ef90:	2201      	movs	r2, #1
 800ef92:	4628      	mov	r0, r5
 800ef94:	f7fc ffcc 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800ef98:	1bb9      	subs	r1, r7, r6
 800ef9a:	4441      	add	r1, r8
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	4602      	mov	r2, r0
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d1ea      	bne.n	800ef7a <ucdr_serialize_array_uint8_t+0x16>
 800efa4:	2301      	movs	r3, #1
 800efa6:	7da8      	ldrb	r0, [r5, #22]
 800efa8:	756b      	strb	r3, [r5, #21]
 800efaa:	4058      	eors	r0, r3
 800efac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb0:	463a      	mov	r2, r7
 800efb2:	68a8      	ldr	r0, [r5, #8]
 800efb4:	4641      	mov	r1, r8
 800efb6:	f009 fd32 	bl	8018a1e <memcpy>
 800efba:	68aa      	ldr	r2, [r5, #8]
 800efbc:	692b      	ldr	r3, [r5, #16]
 800efbe:	443a      	add	r2, r7
 800efc0:	443b      	add	r3, r7
 800efc2:	60aa      	str	r2, [r5, #8]
 800efc4:	612b      	str	r3, [r5, #16]
 800efc6:	e7ed      	b.n	800efa4 <ucdr_serialize_array_uint8_t+0x40>

0800efc8 <ucdr_serialize_endian_array_uint8_t>:
 800efc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efcc:	4619      	mov	r1, r3
 800efce:	461f      	mov	r7, r3
 800efd0:	4605      	mov	r5, r0
 800efd2:	4690      	mov	r8, r2
 800efd4:	f7fc ff24 	bl	800be20 <ucdr_check_buffer_available_for>
 800efd8:	b9e0      	cbnz	r0, 800f014 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800efda:	463e      	mov	r6, r7
 800efdc:	e009      	b.n	800eff2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800efde:	68a8      	ldr	r0, [r5, #8]
 800efe0:	f009 fd1d 	bl	8018a1e <memcpy>
 800efe4:	68ab      	ldr	r3, [r5, #8]
 800efe6:	6928      	ldr	r0, [r5, #16]
 800efe8:	4423      	add	r3, r4
 800efea:	4420      	add	r0, r4
 800efec:	1b36      	subs	r6, r6, r4
 800efee:	60ab      	str	r3, [r5, #8]
 800eff0:	6128      	str	r0, [r5, #16]
 800eff2:	4631      	mov	r1, r6
 800eff4:	2201      	movs	r2, #1
 800eff6:	4628      	mov	r0, r5
 800eff8:	f7fc ff9a 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800effc:	1bb9      	subs	r1, r7, r6
 800effe:	4441      	add	r1, r8
 800f000:	4604      	mov	r4, r0
 800f002:	4602      	mov	r2, r0
 800f004:	2800      	cmp	r0, #0
 800f006:	d1ea      	bne.n	800efde <ucdr_serialize_endian_array_uint8_t+0x16>
 800f008:	2301      	movs	r3, #1
 800f00a:	7da8      	ldrb	r0, [r5, #22]
 800f00c:	756b      	strb	r3, [r5, #21]
 800f00e:	4058      	eors	r0, r3
 800f010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f014:	463a      	mov	r2, r7
 800f016:	68a8      	ldr	r0, [r5, #8]
 800f018:	4641      	mov	r1, r8
 800f01a:	f009 fd00 	bl	8018a1e <memcpy>
 800f01e:	68aa      	ldr	r2, [r5, #8]
 800f020:	692b      	ldr	r3, [r5, #16]
 800f022:	443a      	add	r2, r7
 800f024:	443b      	add	r3, r7
 800f026:	60aa      	str	r2, [r5, #8]
 800f028:	612b      	str	r3, [r5, #16]
 800f02a:	e7ed      	b.n	800f008 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f02c <ucdr_deserialize_array_uint8_t>:
 800f02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f030:	4688      	mov	r8, r1
 800f032:	4611      	mov	r1, r2
 800f034:	4617      	mov	r7, r2
 800f036:	4605      	mov	r5, r0
 800f038:	f7fc fef2 	bl	800be20 <ucdr_check_buffer_available_for>
 800f03c:	b9e0      	cbnz	r0, 800f078 <ucdr_deserialize_array_uint8_t+0x4c>
 800f03e:	463e      	mov	r6, r7
 800f040:	e009      	b.n	800f056 <ucdr_deserialize_array_uint8_t+0x2a>
 800f042:	68a9      	ldr	r1, [r5, #8]
 800f044:	f009 fceb 	bl	8018a1e <memcpy>
 800f048:	68aa      	ldr	r2, [r5, #8]
 800f04a:	692b      	ldr	r3, [r5, #16]
 800f04c:	4422      	add	r2, r4
 800f04e:	4423      	add	r3, r4
 800f050:	1b36      	subs	r6, r6, r4
 800f052:	60aa      	str	r2, [r5, #8]
 800f054:	612b      	str	r3, [r5, #16]
 800f056:	2201      	movs	r2, #1
 800f058:	4631      	mov	r1, r6
 800f05a:	4628      	mov	r0, r5
 800f05c:	f7fc ff68 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800f060:	4604      	mov	r4, r0
 800f062:	1bb8      	subs	r0, r7, r6
 800f064:	4440      	add	r0, r8
 800f066:	4622      	mov	r2, r4
 800f068:	2c00      	cmp	r4, #0
 800f06a:	d1ea      	bne.n	800f042 <ucdr_deserialize_array_uint8_t+0x16>
 800f06c:	2301      	movs	r3, #1
 800f06e:	7da8      	ldrb	r0, [r5, #22]
 800f070:	756b      	strb	r3, [r5, #21]
 800f072:	4058      	eors	r0, r3
 800f074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f078:	463a      	mov	r2, r7
 800f07a:	68a9      	ldr	r1, [r5, #8]
 800f07c:	4640      	mov	r0, r8
 800f07e:	f009 fcce 	bl	8018a1e <memcpy>
 800f082:	68aa      	ldr	r2, [r5, #8]
 800f084:	692b      	ldr	r3, [r5, #16]
 800f086:	443a      	add	r2, r7
 800f088:	443b      	add	r3, r7
 800f08a:	60aa      	str	r2, [r5, #8]
 800f08c:	612b      	str	r3, [r5, #16]
 800f08e:	e7ed      	b.n	800f06c <ucdr_deserialize_array_uint8_t+0x40>

0800f090 <ucdr_deserialize_endian_array_uint8_t>:
 800f090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f094:	4619      	mov	r1, r3
 800f096:	461f      	mov	r7, r3
 800f098:	4605      	mov	r5, r0
 800f09a:	4690      	mov	r8, r2
 800f09c:	f7fc fec0 	bl	800be20 <ucdr_check_buffer_available_for>
 800f0a0:	b9e0      	cbnz	r0, 800f0dc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f0a2:	463e      	mov	r6, r7
 800f0a4:	e009      	b.n	800f0ba <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f0a6:	68a9      	ldr	r1, [r5, #8]
 800f0a8:	f009 fcb9 	bl	8018a1e <memcpy>
 800f0ac:	68ab      	ldr	r3, [r5, #8]
 800f0ae:	6928      	ldr	r0, [r5, #16]
 800f0b0:	4423      	add	r3, r4
 800f0b2:	4420      	add	r0, r4
 800f0b4:	1b36      	subs	r6, r6, r4
 800f0b6:	60ab      	str	r3, [r5, #8]
 800f0b8:	6128      	str	r0, [r5, #16]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f7fc ff36 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	1bb8      	subs	r0, r7, r6
 800f0c8:	4440      	add	r0, r8
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	2c00      	cmp	r4, #0
 800f0ce:	d1ea      	bne.n	800f0a6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	7da8      	ldrb	r0, [r5, #22]
 800f0d4:	756b      	strb	r3, [r5, #21]
 800f0d6:	4058      	eors	r0, r3
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0dc:	463a      	mov	r2, r7
 800f0de:	68a9      	ldr	r1, [r5, #8]
 800f0e0:	4640      	mov	r0, r8
 800f0e2:	f009 fc9c 	bl	8018a1e <memcpy>
 800f0e6:	68aa      	ldr	r2, [r5, #8]
 800f0e8:	692b      	ldr	r3, [r5, #16]
 800f0ea:	443a      	add	r2, r7
 800f0ec:	443b      	add	r3, r7
 800f0ee:	60aa      	str	r2, [r5, #8]
 800f0f0:	612b      	str	r3, [r5, #16]
 800f0f2:	e7ed      	b.n	800f0d0 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f0f4 <ucdr_serialize_array_double>:
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	460e      	mov	r6, r1
 800f0fa:	2108      	movs	r1, #8
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	4617      	mov	r7, r2
 800f100:	f7fc feee 	bl	800bee0 <ucdr_buffer_alignment>
 800f104:	4601      	mov	r1, r0
 800f106:	4620      	mov	r0, r4
 800f108:	7d65      	ldrb	r5, [r4, #21]
 800f10a:	f7fc ff2d 	bl	800bf68 <ucdr_advance_buffer>
 800f10e:	7d21      	ldrb	r1, [r4, #20]
 800f110:	7565      	strb	r5, [r4, #21]
 800f112:	2901      	cmp	r1, #1
 800f114:	d010      	beq.n	800f138 <ucdr_serialize_array_double+0x44>
 800f116:	b157      	cbz	r7, 800f12e <ucdr_serialize_array_double+0x3a>
 800f118:	2500      	movs	r5, #0
 800f11a:	e000      	b.n	800f11e <ucdr_serialize_array_double+0x2a>
 800f11c:	7d21      	ldrb	r1, [r4, #20]
 800f11e:	ecb6 0b02 	vldmia	r6!, {d0}
 800f122:	4620      	mov	r0, r4
 800f124:	3501      	adds	r5, #1
 800f126:	f7fc fc15 	bl	800b954 <ucdr_serialize_endian_double>
 800f12a:	42af      	cmp	r7, r5
 800f12c:	d1f6      	bne.n	800f11c <ucdr_serialize_array_double+0x28>
 800f12e:	7da0      	ldrb	r0, [r4, #22]
 800f130:	f080 0001 	eor.w	r0, r0, #1
 800f134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f138:	00ff      	lsls	r7, r7, #3
 800f13a:	4639      	mov	r1, r7
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7fc fe6f 	bl	800be20 <ucdr_check_buffer_available_for>
 800f142:	b9f8      	cbnz	r0, 800f184 <ucdr_serialize_array_double+0x90>
 800f144:	46b8      	mov	r8, r7
 800f146:	e00a      	b.n	800f15e <ucdr_serialize_array_double+0x6a>
 800f148:	68a0      	ldr	r0, [r4, #8]
 800f14a:	f009 fc68 	bl	8018a1e <memcpy>
 800f14e:	68a2      	ldr	r2, [r4, #8]
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	442a      	add	r2, r5
 800f154:	442b      	add	r3, r5
 800f156:	eba8 0805 	sub.w	r8, r8, r5
 800f15a:	60a2      	str	r2, [r4, #8]
 800f15c:	6123      	str	r3, [r4, #16]
 800f15e:	4641      	mov	r1, r8
 800f160:	2208      	movs	r2, #8
 800f162:	4620      	mov	r0, r4
 800f164:	f7fc fee4 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800f168:	eba7 0108 	sub.w	r1, r7, r8
 800f16c:	4431      	add	r1, r6
 800f16e:	4605      	mov	r5, r0
 800f170:	4602      	mov	r2, r0
 800f172:	2800      	cmp	r0, #0
 800f174:	d1e8      	bne.n	800f148 <ucdr_serialize_array_double+0x54>
 800f176:	7da0      	ldrb	r0, [r4, #22]
 800f178:	2308      	movs	r3, #8
 800f17a:	7563      	strb	r3, [r4, #21]
 800f17c:	f080 0001 	eor.w	r0, r0, #1
 800f180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f184:	463a      	mov	r2, r7
 800f186:	68a0      	ldr	r0, [r4, #8]
 800f188:	4631      	mov	r1, r6
 800f18a:	f009 fc48 	bl	8018a1e <memcpy>
 800f18e:	68a2      	ldr	r2, [r4, #8]
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	443a      	add	r2, r7
 800f194:	441f      	add	r7, r3
 800f196:	60a2      	str	r2, [r4, #8]
 800f198:	6127      	str	r7, [r4, #16]
 800f19a:	e7ec      	b.n	800f176 <ucdr_serialize_array_double+0x82>

0800f19c <ucdr_deserialize_array_double>:
 800f19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a0:	460e      	mov	r6, r1
 800f1a2:	2108      	movs	r1, #8
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	4617      	mov	r7, r2
 800f1a8:	f7fc fe9a 	bl	800bee0 <ucdr_buffer_alignment>
 800f1ac:	4601      	mov	r1, r0
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	7d65      	ldrb	r5, [r4, #21]
 800f1b2:	f7fc fed9 	bl	800bf68 <ucdr_advance_buffer>
 800f1b6:	7d21      	ldrb	r1, [r4, #20]
 800f1b8:	7565      	strb	r5, [r4, #21]
 800f1ba:	2901      	cmp	r1, #1
 800f1bc:	d011      	beq.n	800f1e2 <ucdr_deserialize_array_double+0x46>
 800f1be:	b15f      	cbz	r7, 800f1d8 <ucdr_deserialize_array_double+0x3c>
 800f1c0:	2500      	movs	r5, #0
 800f1c2:	e000      	b.n	800f1c6 <ucdr_deserialize_array_double+0x2a>
 800f1c4:	7d21      	ldrb	r1, [r4, #20]
 800f1c6:	4632      	mov	r2, r6
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	3501      	adds	r5, #1
 800f1cc:	f7fc fd5a 	bl	800bc84 <ucdr_deserialize_endian_double>
 800f1d0:	42af      	cmp	r7, r5
 800f1d2:	f106 0608 	add.w	r6, r6, #8
 800f1d6:	d1f5      	bne.n	800f1c4 <ucdr_deserialize_array_double+0x28>
 800f1d8:	7da0      	ldrb	r0, [r4, #22]
 800f1da:	f080 0001 	eor.w	r0, r0, #1
 800f1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e2:	00ff      	lsls	r7, r7, #3
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7fc fe1a 	bl	800be20 <ucdr_check_buffer_available_for>
 800f1ec:	b9f8      	cbnz	r0, 800f22e <ucdr_deserialize_array_double+0x92>
 800f1ee:	46b8      	mov	r8, r7
 800f1f0:	e00a      	b.n	800f208 <ucdr_deserialize_array_double+0x6c>
 800f1f2:	68a1      	ldr	r1, [r4, #8]
 800f1f4:	f009 fc13 	bl	8018a1e <memcpy>
 800f1f8:	68a2      	ldr	r2, [r4, #8]
 800f1fa:	6923      	ldr	r3, [r4, #16]
 800f1fc:	442a      	add	r2, r5
 800f1fe:	442b      	add	r3, r5
 800f200:	eba8 0805 	sub.w	r8, r8, r5
 800f204:	60a2      	str	r2, [r4, #8]
 800f206:	6123      	str	r3, [r4, #16]
 800f208:	2208      	movs	r2, #8
 800f20a:	4641      	mov	r1, r8
 800f20c:	4620      	mov	r0, r4
 800f20e:	f7fc fe8f 	bl	800bf30 <ucdr_check_final_buffer_behavior_array>
 800f212:	4605      	mov	r5, r0
 800f214:	eba7 0008 	sub.w	r0, r7, r8
 800f218:	4430      	add	r0, r6
 800f21a:	462a      	mov	r2, r5
 800f21c:	2d00      	cmp	r5, #0
 800f21e:	d1e8      	bne.n	800f1f2 <ucdr_deserialize_array_double+0x56>
 800f220:	7da0      	ldrb	r0, [r4, #22]
 800f222:	2308      	movs	r3, #8
 800f224:	7563      	strb	r3, [r4, #21]
 800f226:	f080 0001 	eor.w	r0, r0, #1
 800f22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f22e:	463a      	mov	r2, r7
 800f230:	68a1      	ldr	r1, [r4, #8]
 800f232:	4630      	mov	r0, r6
 800f234:	f009 fbf3 	bl	8018a1e <memcpy>
 800f238:	68a2      	ldr	r2, [r4, #8]
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	443a      	add	r2, r7
 800f23e:	441f      	add	r7, r3
 800f240:	60a2      	str	r2, [r4, #8]
 800f242:	6127      	str	r7, [r4, #16]
 800f244:	e7ec      	b.n	800f220 <ucdr_deserialize_array_double+0x84>
 800f246:	bf00      	nop

0800f248 <ucdr_serialize_sequence_char>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	4615      	mov	r5, r2
 800f24c:	460e      	mov	r6, r1
 800f24e:	7d01      	ldrb	r1, [r0, #20]
 800f250:	4604      	mov	r4, r0
 800f252:	f7fb fe05 	bl	800ae60 <ucdr_serialize_endian_uint32_t>
 800f256:	b90d      	cbnz	r5, 800f25c <ucdr_serialize_sequence_char+0x14>
 800f258:	2001      	movs	r0, #1
 800f25a:	bd70      	pop	{r4, r5, r6, pc}
 800f25c:	7d21      	ldrb	r1, [r4, #20]
 800f25e:	462b      	mov	r3, r5
 800f260:	4632      	mov	r2, r6
 800f262:	4620      	mov	r0, r4
 800f264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f268:	f7ff be18 	b.w	800ee9c <ucdr_serialize_endian_array_char>

0800f26c <ucdr_deserialize_sequence_char>:
 800f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f270:	461d      	mov	r5, r3
 800f272:	4616      	mov	r6, r2
 800f274:	460f      	mov	r7, r1
 800f276:	461a      	mov	r2, r3
 800f278:	7d01      	ldrb	r1, [r0, #20]
 800f27a:	4604      	mov	r4, r0
 800f27c:	f7fb ff18 	bl	800b0b0 <ucdr_deserialize_endian_uint32_t>
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	429e      	cmp	r6, r3
 800f284:	bf3c      	itt	cc
 800f286:	2201      	movcc	r2, #1
 800f288:	75a2      	strbcc	r2, [r4, #22]
 800f28a:	b913      	cbnz	r3, 800f292 <ucdr_deserialize_sequence_char+0x26>
 800f28c:	2001      	movs	r0, #1
 800f28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f292:	7d21      	ldrb	r1, [r4, #20]
 800f294:	463a      	mov	r2, r7
 800f296:	4620      	mov	r0, r4
 800f298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f29c:	f7ff be30 	b.w	800ef00 <ucdr_deserialize_endian_array_char>

0800f2a0 <ucdr_serialize_sequence_uint8_t>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	4615      	mov	r5, r2
 800f2a4:	460e      	mov	r6, r1
 800f2a6:	7d01      	ldrb	r1, [r0, #20]
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	f7fb fdd9 	bl	800ae60 <ucdr_serialize_endian_uint32_t>
 800f2ae:	b90d      	cbnz	r5, 800f2b4 <ucdr_serialize_sequence_uint8_t+0x14>
 800f2b0:	2001      	movs	r0, #1
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
 800f2b4:	7d21      	ldrb	r1, [r4, #20]
 800f2b6:	462b      	mov	r3, r5
 800f2b8:	4632      	mov	r2, r6
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2c0:	f7ff be82 	b.w	800efc8 <ucdr_serialize_endian_array_uint8_t>

0800f2c4 <ucdr_deserialize_sequence_uint8_t>:
 800f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c8:	461d      	mov	r5, r3
 800f2ca:	4616      	mov	r6, r2
 800f2cc:	460f      	mov	r7, r1
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	7d01      	ldrb	r1, [r0, #20]
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	f7fb feec 	bl	800b0b0 <ucdr_deserialize_endian_uint32_t>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	429e      	cmp	r6, r3
 800f2dc:	bf3c      	itt	cc
 800f2de:	2201      	movcc	r2, #1
 800f2e0:	75a2      	strbcc	r2, [r4, #22]
 800f2e2:	b913      	cbnz	r3, 800f2ea <ucdr_deserialize_sequence_uint8_t+0x26>
 800f2e4:	2001      	movs	r0, #1
 800f2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2ea:	7d21      	ldrb	r1, [r4, #20]
 800f2ec:	463a      	mov	r2, r7
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f4:	f7ff becc 	b.w	800f090 <ucdr_deserialize_endian_array_uint8_t>

0800f2f8 <uxr_buffer_delete_entity>:
 800f2f8:	b510      	push	{r4, lr}
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	b08e      	sub	sp, #56	@ 0x38
 800f2fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f302:	2303      	movs	r3, #3
 800f304:	9300      	str	r3, [sp, #0]
 800f306:	2204      	movs	r2, #4
 800f308:	ab06      	add	r3, sp, #24
 800f30a:	4604      	mov	r4, r0
 800f30c:	9103      	str	r1, [sp, #12]
 800f30e:	f001 fac9 	bl	80108a4 <uxr_prepare_stream_to_write_submessage>
 800f312:	b918      	cbnz	r0, 800f31c <uxr_buffer_delete_entity+0x24>
 800f314:	4604      	mov	r4, r0
 800f316:	4620      	mov	r0, r4
 800f318:	b00e      	add	sp, #56	@ 0x38
 800f31a:	bd10      	pop	{r4, pc}
 800f31c:	9902      	ldr	r1, [sp, #8]
 800f31e:	aa05      	add	r2, sp, #20
 800f320:	4620      	mov	r0, r4
 800f322:	f001 fbf5 	bl	8010b10 <uxr_init_base_object_request>
 800f326:	a905      	add	r1, sp, #20
 800f328:	4604      	mov	r4, r0
 800f32a:	a806      	add	r0, sp, #24
 800f32c:	f003 f9ec 	bl	8012708 <uxr_serialize_DELETE_Payload>
 800f330:	4620      	mov	r0, r4
 800f332:	b00e      	add	sp, #56	@ 0x38
 800f334:	bd10      	pop	{r4, pc}
 800f336:	bf00      	nop

0800f338 <uxr_common_create_entity>:
 800f338:	b510      	push	{r4, lr}
 800f33a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f33e:	b08c      	sub	sp, #48	@ 0x30
 800f340:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f344:	f1bc 0f01 	cmp.w	ip, #1
 800f348:	bf0c      	ite	eq
 800f34a:	f003 0201 	andeq.w	r2, r3, #1
 800f34e:	2200      	movne	r2, #0
 800f350:	330e      	adds	r3, #14
 800f352:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f356:	9101      	str	r1, [sp, #4]
 800f358:	441a      	add	r2, r3
 800f35a:	2301      	movs	r3, #1
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	9903      	ldr	r1, [sp, #12]
 800f360:	ab04      	add	r3, sp, #16
 800f362:	b292      	uxth	r2, r2
 800f364:	4604      	mov	r4, r0
 800f366:	f001 fa9d 	bl	80108a4 <uxr_prepare_stream_to_write_submessage>
 800f36a:	b918      	cbnz	r0, 800f374 <uxr_common_create_entity+0x3c>
 800f36c:	4604      	mov	r4, r0
 800f36e:	4620      	mov	r0, r4
 800f370:	b00c      	add	sp, #48	@ 0x30
 800f372:	bd10      	pop	{r4, pc}
 800f374:	9902      	ldr	r1, [sp, #8]
 800f376:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f378:	4620      	mov	r0, r4
 800f37a:	f001 fbc9 	bl	8010b10 <uxr_init_base_object_request>
 800f37e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f380:	4604      	mov	r4, r0
 800f382:	a804      	add	r0, sp, #16
 800f384:	f003 f91c 	bl	80125c0 <uxr_serialize_CREATE_Payload>
 800f388:	4620      	mov	r0, r4
 800f38a:	b00c      	add	sp, #48	@ 0x30
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	bf00      	nop

0800f390 <uxr_buffer_create_participant_bin>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f396:	ac11      	add	r4, sp, #68	@ 0x44
 800f398:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f39c:	2303      	movs	r3, #3
 800f39e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f3a2:	7223      	strb	r3, [r4, #8]
 800f3a4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f3a6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	7122      	strb	r2, [r4, #4]
 800f3b2:	f88d 1014 	strb.w	r1, [sp, #20]
 800f3b6:	b1cb      	cbz	r3, 800f3ec <uxr_buffer_create_participant_bin+0x5c>
 800f3b8:	f88d 201c 	strb.w	r2, [sp, #28]
 800f3bc:	9308      	str	r3, [sp, #32]
 800f3be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3c2:	a915      	add	r1, sp, #84	@ 0x54
 800f3c4:	a809      	add	r0, sp, #36	@ 0x24
 800f3c6:	f7fc fd7f 	bl	800bec8 <ucdr_init_buffer>
 800f3ca:	a905      	add	r1, sp, #20
 800f3cc:	a809      	add	r0, sp, #36	@ 0x24
 800f3ce:	f002 fdc5 	bl	8011f5c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f3d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3d4:	9600      	str	r6, [sp, #0]
 800f3d6:	9401      	str	r4, [sp, #4]
 800f3d8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f3dc:	60e3      	str	r3, [r4, #12]
 800f3de:	4628      	mov	r0, r5
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	f7ff ffa9 	bl	800f338 <uxr_common_create_entity>
 800f3e6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f3ea:	bd70      	pop	{r4, r5, r6, pc}
 800f3ec:	f88d 301c 	strb.w	r3, [sp, #28]
 800f3f0:	e7e5      	b.n	800f3be <uxr_buffer_create_participant_bin+0x2e>
 800f3f2:	bf00      	nop

0800f3f4 <uxr_buffer_create_topic_bin>:
 800f3f4:	b570      	push	{r4, r5, r6, lr}
 800f3f6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f3fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f3fe:	9105      	str	r1, [sp, #20]
 800f400:	4605      	mov	r5, r0
 800f402:	a997      	add	r1, sp, #604	@ 0x25c
 800f404:	4618      	mov	r0, r3
 800f406:	2302      	movs	r3, #2
 800f408:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f40c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f410:	f000 f9b0 	bl	800f774 <uxr_object_id_to_raw>
 800f414:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f416:	9306      	str	r3, [sp, #24]
 800f418:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f41a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f41c:	2303      	movs	r3, #3
 800f41e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f422:	2301      	movs	r3, #1
 800f424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f428:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f42c:	a917      	add	r1, sp, #92	@ 0x5c
 800f42e:	2300      	movs	r3, #0
 800f430:	a80b      	add	r0, sp, #44	@ 0x2c
 800f432:	f88d 301c 	strb.w	r3, [sp, #28]
 800f436:	f7fc fd47 	bl	800bec8 <ucdr_init_buffer>
 800f43a:	a906      	add	r1, sp, #24
 800f43c:	a80b      	add	r0, sp, #44	@ 0x2c
 800f43e:	f002 fdaf 	bl	8011fa0 <uxr_serialize_OBJK_Topic_Binary>
 800f442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f444:	9316      	str	r3, [sp, #88]	@ 0x58
 800f446:	ac13      	add	r4, sp, #76	@ 0x4c
 800f448:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f44c:	9600      	str	r6, [sp, #0]
 800f44e:	9401      	str	r4, [sp, #4]
 800f450:	b29b      	uxth	r3, r3
 800f452:	4628      	mov	r0, r5
 800f454:	f7ff ff70 	bl	800f338 <uxr_common_create_entity>
 800f458:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f45c:	bd70      	pop	{r4, r5, r6, pc}
 800f45e:	bf00      	nop

0800f460 <uxr_buffer_create_publisher_bin>:
 800f460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f462:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f466:	4605      	mov	r5, r0
 800f468:	9105      	str	r1, [sp, #20]
 800f46a:	4618      	mov	r0, r3
 800f46c:	2603      	movs	r6, #3
 800f46e:	a992      	add	r1, sp, #584	@ 0x248
 800f470:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f474:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f478:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f47c:	f000 f97a 	bl	800f774 <uxr_object_id_to_raw>
 800f480:	2300      	movs	r3, #0
 800f482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f486:	a912      	add	r1, sp, #72	@ 0x48
 800f488:	a806      	add	r0, sp, #24
 800f48a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f48e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f492:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f496:	f7fc fd17 	bl	800bec8 <ucdr_init_buffer>
 800f49a:	a993      	add	r1, sp, #588	@ 0x24c
 800f49c:	a806      	add	r0, sp, #24
 800f49e:	f002 fe33 	bl	8012108 <uxr_serialize_OBJK_Publisher_Binary>
 800f4a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4a4:	9311      	str	r3, [sp, #68]	@ 0x44
 800f4a6:	ac0e      	add	r4, sp, #56	@ 0x38
 800f4a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f4ac:	9700      	str	r7, [sp, #0]
 800f4ae:	9401      	str	r4, [sp, #4]
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f7ff ff40 	bl	800f338 <uxr_common_create_entity>
 800f4b8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4be:	bf00      	nop

0800f4c0 <uxr_buffer_create_datawriter_bin>:
 800f4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f4c8:	ac1d      	add	r4, sp, #116	@ 0x74
 800f4ca:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f4ce:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f4d2:	9105      	str	r1, [sp, #20]
 800f4d4:	4606      	mov	r6, r0
 800f4d6:	a9a1      	add	r1, sp, #644	@ 0x284
 800f4d8:	4618      	mov	r0, r3
 800f4da:	2305      	movs	r3, #5
 800f4dc:	7123      	strb	r3, [r4, #4]
 800f4de:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f4e2:	2703      	movs	r7, #3
 800f4e4:	f000 f946 	bl	800f774 <uxr_object_id_to_raw>
 800f4e8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f4ea:	7227      	strb	r7, [r4, #8]
 800f4ec:	a90e      	add	r1, sp, #56	@ 0x38
 800f4ee:	f000 f941 	bl	800f774 <uxr_object_id_to_raw>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f4f8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f4fc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f500:	3d00      	subs	r5, #0
 800f502:	bf18      	it	ne
 800f504:	2501      	movne	r5, #1
 800f506:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f50a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f50e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f512:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f516:	2301      	movs	r3, #1
 800f518:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f51c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f520:	bb8a      	cbnz	r2, 800f586 <uxr_buffer_create_datawriter_bin+0xc6>
 800f522:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f526:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f52a:	f04f 0c13 	mov.w	ip, #19
 800f52e:	250b      	movs	r5, #11
 800f530:	2221      	movs	r2, #33	@ 0x21
 800f532:	2111      	movs	r1, #17
 800f534:	2009      	movs	r0, #9
 800f536:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f53a:	b923      	cbnz	r3, 800f546 <uxr_buffer_create_datawriter_bin+0x86>
 800f53c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f540:	4672      	mov	r2, lr
 800f542:	4661      	mov	r1, ip
 800f544:	4628      	mov	r0, r5
 800f546:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d025      	beq.n	800f59a <uxr_buffer_create_datawriter_bin+0xda>
 800f54e:	2b03      	cmp	r3, #3
 800f550:	d029      	beq.n	800f5a6 <uxr_buffer_create_datawriter_bin+0xe6>
 800f552:	b32b      	cbz	r3, 800f5a0 <uxr_buffer_create_datawriter_bin+0xe0>
 800f554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f558:	a921      	add	r1, sp, #132	@ 0x84
 800f55a:	a806      	add	r0, sp, #24
 800f55c:	f7fc fcb4 	bl	800bec8 <ucdr_init_buffer>
 800f560:	a90e      	add	r1, sp, #56	@ 0x38
 800f562:	a806      	add	r0, sp, #24
 800f564:	f002 fe46 	bl	80121f4 <uxr_serialize_OBJK_DataWriter_Binary>
 800f568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f56a:	f8cd 8000 	str.w	r8, [sp]
 800f56e:	9401      	str	r4, [sp, #4]
 800f570:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f574:	60e3      	str	r3, [r4, #12]
 800f576:	4630      	mov	r0, r6
 800f578:	b29b      	uxth	r3, r3
 800f57a:	f7ff fedd 	bl	800f338 <uxr_common_create_entity>
 800f57e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f586:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f58a:	f04f 0c12 	mov.w	ip, #18
 800f58e:	250a      	movs	r5, #10
 800f590:	2220      	movs	r2, #32
 800f592:	2110      	movs	r1, #16
 800f594:	2008      	movs	r0, #8
 800f596:	2702      	movs	r7, #2
 800f598:	e7cd      	b.n	800f536 <uxr_buffer_create_datawriter_bin+0x76>
 800f59a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f59e:	e7d9      	b.n	800f554 <uxr_buffer_create_datawriter_bin+0x94>
 800f5a0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f5a4:	e7d6      	b.n	800f554 <uxr_buffer_create_datawriter_bin+0x94>
 800f5a6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f5aa:	e7d3      	b.n	800f554 <uxr_buffer_create_datawriter_bin+0x94>

0800f5ac <get_custom_error>:
 800f5ac:	4b01      	ldr	r3, [pc, #4]	@ (800f5b4 <get_custom_error+0x8>)
 800f5ae:	7818      	ldrb	r0, [r3, #0]
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	2000b314 	.word	0x2000b314

0800f5b8 <recv_custom_msg>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	4693      	mov	fp, r2
 800f5be:	b089      	sub	sp, #36	@ 0x24
 800f5c0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800f5c4:	9305      	str	r3, [sp, #20]
 800f5c6:	468a      	mov	sl, r1
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	f88d 101e 	strb.w	r1, [sp, #30]
 800f5d0:	b322      	cbz	r2, 800f61c <recv_custom_msg+0x64>
 800f5d2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800f5d6:	f10d 081f 	add.w	r8, sp, #31
 800f5da:	af05      	add	r7, sp, #20
 800f5dc:	f10d 061e 	add.w	r6, sp, #30
 800f5e0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800f5e4:	e002      	b.n	800f5ec <recv_custom_msg+0x34>
 800f5e6:	9b05      	ldr	r3, [sp, #20]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dd0f      	ble.n	800f60c <recv_custom_msg+0x54>
 800f5ec:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800f5f0:	4623      	mov	r3, r4
 800f5f2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f5f6:	e9cd 5600 	strd	r5, r6, [sp]
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4648      	mov	r0, r9
 800f5fe:	f001 fcb5 	bl	8010f6c <uxr_read_framed_msg>
 800f602:	2800      	cmp	r0, #0
 800f604:	d0ef      	beq.n	800f5e6 <recv_custom_msg+0x2e>
 800f606:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f60a:	b1b3      	cbz	r3, 800f63a <recv_custom_msg+0x82>
 800f60c:	4b0f      	ldr	r3, [pc, #60]	@ (800f64c <recv_custom_msg+0x94>)
 800f60e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800f612:	701a      	strb	r2, [r3, #0]
 800f614:	2000      	movs	r0, #0
 800f616:	b009      	add	sp, #36	@ 0x24
 800f618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61c:	f10d 021f 	add.w	r2, sp, #31
 800f620:	9200      	str	r2, [sp, #0]
 800f622:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800f626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f62a:	4601      	mov	r1, r0
 800f62c:	47a8      	blx	r5
 800f62e:	2800      	cmp	r0, #0
 800f630:	d0ec      	beq.n	800f60c <recv_custom_msg+0x54>
 800f632:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1e8      	bne.n	800f60c <recv_custom_msg+0x54>
 800f63a:	f8cb 0000 	str.w	r0, [fp]
 800f63e:	2001      	movs	r0, #1
 800f640:	f8ca 4000 	str.w	r4, [sl]
 800f644:	b009      	add	sp, #36	@ 0x24
 800f646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f64a:	bf00      	nop
 800f64c:	2000b314 	.word	0x2000b314

0800f650 <send_custom_msg>:
 800f650:	b530      	push	{r4, r5, lr}
 800f652:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800f656:	b087      	sub	sp, #28
 800f658:	4615      	mov	r5, r2
 800f65a:	b974      	cbnz	r4, 800f67a <send_custom_msg+0x2a>
 800f65c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800f660:	f10d 0317 	add.w	r3, sp, #23
 800f664:	47a0      	blx	r4
 800f666:	b108      	cbz	r0, 800f66c <send_custom_msg+0x1c>
 800f668:	42a8      	cmp	r0, r5
 800f66a:	d015      	beq.n	800f698 <send_custom_msg+0x48>
 800f66c:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a0 <send_custom_msg+0x50>)
 800f66e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800f672:	701a      	strb	r2, [r3, #0]
 800f674:	2000      	movs	r0, #0
 800f676:	b007      	add	sp, #28
 800f678:	bd30      	pop	{r4, r5, pc}
 800f67a:	460b      	mov	r3, r1
 800f67c:	2200      	movs	r2, #0
 800f67e:	f10d 0117 	add.w	r1, sp, #23
 800f682:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f686:	4602      	mov	r2, r0
 800f688:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800f68c:	9500      	str	r5, [sp, #0]
 800f68e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800f692:	f001 fa73 	bl	8010b7c <uxr_write_framed_msg>
 800f696:	e7e6      	b.n	800f666 <send_custom_msg+0x16>
 800f698:	2001      	movs	r0, #1
 800f69a:	b007      	add	sp, #28
 800f69c:	bd30      	pop	{r4, r5, pc}
 800f69e:	bf00      	nop
 800f6a0:	2000b314 	.word	0x2000b314

0800f6a4 <uxr_set_custom_transport_callbacks>:
 800f6a4:	b410      	push	{r4}
 800f6a6:	9c01      	ldr	r4, [sp, #4]
 800f6a8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800f6ac:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800f6b0:	9b02      	ldr	r3, [sp, #8]
 800f6b2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800f6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6ba:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800f6be:	4770      	bx	lr

0800f6c0 <uxr_init_custom_transport>:
 800f6c0:	b538      	push	{r3, r4, r5, lr}
 800f6c2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800f6c6:	b303      	cbz	r3, 800f70a <uxr_init_custom_transport+0x4a>
 800f6c8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	b1e2      	cbz	r2, 800f70a <uxr_init_custom_transport+0x4a>
 800f6d0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800f6d4:	b1ca      	cbz	r2, 800f70a <uxr_init_custom_transport+0x4a>
 800f6d6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800f6da:	b1b2      	cbz	r2, 800f70a <uxr_init_custom_transport+0x4a>
 800f6dc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800f6e0:	4798      	blx	r3
 800f6e2:	4605      	mov	r5, r0
 800f6e4:	b188      	cbz	r0, 800f70a <uxr_init_custom_transport+0x4a>
 800f6e6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800f6ea:	b98b      	cbnz	r3, 800f710 <uxr_init_custom_transport+0x50>
 800f6ec:	490b      	ldr	r1, [pc, #44]	@ (800f71c <uxr_init_custom_transport+0x5c>)
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f720 <uxr_init_custom_transport+0x60>)
 800f6f0:	4a0c      	ldr	r2, [pc, #48]	@ (800f724 <uxr_init_custom_transport+0x64>)
 800f6f2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800f6f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6fa:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800f6fe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800f702:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800f706:	4628      	mov	r0, r5
 800f708:	bd38      	pop	{r3, r4, r5, pc}
 800f70a:	2500      	movs	r5, #0
 800f70c:	4628      	mov	r0, r5
 800f70e:	bd38      	pop	{r3, r4, r5, pc}
 800f710:	2100      	movs	r1, #0
 800f712:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800f716:	f001 fa2b 	bl	8010b70 <uxr_init_framing_io>
 800f71a:	e7e7      	b.n	800f6ec <uxr_init_custom_transport+0x2c>
 800f71c:	0800f651 	.word	0x0800f651
 800f720:	0800f5b9 	.word	0x0800f5b9
 800f724:	0800f5ad 	.word	0x0800f5ad

0800f728 <uxr_close_custom_transport>:
 800f728:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800f72c:	4718      	bx	r3
 800f72e:	bf00      	nop

0800f730 <uxr_object_id>:
 800f730:	b082      	sub	sp, #8
 800f732:	2300      	movs	r3, #0
 800f734:	f88d 1006 	strb.w	r1, [sp, #6]
 800f738:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f73c:	f360 030f 	bfi	r3, r0, #0, #16
 800f740:	f362 431f 	bfi	r3, r2, #16, #16
 800f744:	4618      	mov	r0, r3
 800f746:	b002      	add	sp, #8
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop

0800f74c <uxr_object_id_from_raw>:
 800f74c:	7843      	ldrb	r3, [r0, #1]
 800f74e:	7801      	ldrb	r1, [r0, #0]
 800f750:	b082      	sub	sp, #8
 800f752:	f003 020f 	and.w	r2, r3, #15
 800f756:	f88d 2006 	strb.w	r2, [sp, #6]
 800f75a:	091b      	lsrs	r3, r3, #4
 800f75c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f760:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f764:	2000      	movs	r0, #0
 800f766:	f363 000f 	bfi	r0, r3, #0, #16
 800f76a:	f362 401f 	bfi	r0, r2, #16, #16
 800f76e:	b002      	add	sp, #8
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop

0800f774 <uxr_object_id_to_raw>:
 800f774:	4602      	mov	r2, r0
 800f776:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f77a:	b082      	sub	sp, #8
 800f77c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f780:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f784:	f881 c000 	strb.w	ip, [r1]
 800f788:	7048      	strb	r0, [r1, #1]
 800f78a:	b002      	add	sp, #8
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop

0800f790 <uxr_buffer_cancel_data>:
 800f790:	b510      	push	{r4, lr}
 800f792:	b094      	sub	sp, #80	@ 0x50
 800f794:	2300      	movs	r3, #0
 800f796:	9202      	str	r2, [sp, #8]
 800f798:	9205      	str	r2, [sp, #20]
 800f79a:	9301      	str	r3, [sp, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f7a2:	f88d 301e 	strb.w	r3, [sp, #30]
 800f7a6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800f7aa:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800f7ae:	2308      	movs	r3, #8
 800f7b0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800f7b4:	9300      	str	r3, [sp, #0]
 800f7b6:	2210      	movs	r2, #16
 800f7b8:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	9103      	str	r1, [sp, #12]
 800f7be:	f001 f871 	bl	80108a4 <uxr_prepare_stream_to_write_submessage>
 800f7c2:	b918      	cbnz	r0, 800f7cc <uxr_buffer_cancel_data+0x3c>
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	b014      	add	sp, #80	@ 0x50
 800f7ca:	bd10      	pop	{r4, pc}
 800f7cc:	9905      	ldr	r1, [sp, #20]
 800f7ce:	aa06      	add	r2, sp, #24
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f001 f99d 	bl	8010b10 <uxr_init_base_object_request>
 800f7d6:	a906      	add	r1, sp, #24
 800f7d8:	4604      	mov	r4, r0
 800f7da:	a80c      	add	r0, sp, #48	@ 0x30
 800f7dc:	f003 f83e 	bl	801285c <uxr_serialize_READ_DATA_Payload>
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	b014      	add	sp, #80	@ 0x50
 800f7e4:	bd10      	pop	{r4, pc}
 800f7e6:	bf00      	nop

0800f7e8 <read_submessage_format>:
 800f7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7ec:	b095      	sub	sp, #84	@ 0x54
 800f7ee:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800f7f2:	b113      	cbz	r3, 800f7fa <read_submessage_format+0x12>
 800f7f4:	b015      	add	sp, #84	@ 0x54
 800f7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fa:	460c      	mov	r4, r1
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f802:	4607      	mov	r7, r0
 800f804:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800f806:	9004      	str	r0, [sp, #16]
 800f808:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800f80a:	9005      	str	r0, [sp, #20]
 800f80c:	1a52      	subs	r2, r2, r1
 800f80e:	a80c      	add	r0, sp, #48	@ 0x30
 800f810:	4699      	mov	r9, r3
 800f812:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800f816:	f7fc fb57 	bl	800bec8 <ucdr_init_buffer>
 800f81a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f81e:	a80c      	add	r0, sp, #48	@ 0x30
 800f820:	f7fc fb26 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 800f824:	69e2      	ldr	r2, [r4, #28]
 800f826:	b19a      	cbz	r2, 800f850 <read_submessage_format+0x68>
 800f828:	f1b8 0f07 	cmp.w	r8, #7
 800f82c:	f882 9014 	strb.w	r9, [r2, #20]
 800f830:	d040      	beq.n	800f8b4 <read_submessage_format+0xcc>
 800f832:	f1b8 0f08 	cmp.w	r8, #8
 800f836:	d02e      	beq.n	800f896 <read_submessage_format+0xae>
 800f838:	f1b8 0f06 	cmp.w	r8, #6
 800f83c:	d011      	beq.n	800f862 <read_submessage_format+0x7a>
 800f83e:	2301      	movs	r3, #1
 800f840:	7513      	strb	r3, [r2, #20]
 800f842:	4629      	mov	r1, r5
 800f844:	4620      	mov	r0, r4
 800f846:	f7fc fb8f 	bl	800bf68 <ucdr_advance_buffer>
 800f84a:	b015      	add	sp, #84	@ 0x54
 800f84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f850:	f1b8 0f07 	cmp.w	r8, #7
 800f854:	d02e      	beq.n	800f8b4 <read_submessage_format+0xcc>
 800f856:	f1b8 0f08 	cmp.w	r8, #8
 800f85a:	d01c      	beq.n	800f896 <read_submessage_format+0xae>
 800f85c:	f1b8 0f06 	cmp.w	r8, #6
 800f860:	d1ef      	bne.n	800f842 <read_submessage_format+0x5a>
 800f862:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800f866:	f1b8 0f00 	cmp.w	r8, #0
 800f86a:	d011      	beq.n	800f890 <read_submessage_format+0xa8>
 800f86c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f86e:	e9cd 3500 	strd	r3, r5, [sp]
 800f872:	2306      	movs	r3, #6
 800f874:	f88d 3016 	strb.w	r3, [sp, #22]
 800f878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f87c:	9302      	str	r3, [sp, #8]
 800f87e:	4632      	mov	r2, r6
 800f880:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800f884:	4638      	mov	r0, r7
 800f886:	47c0      	blx	r8
 800f888:	2301      	movs	r3, #1
 800f88a:	69e2      	ldr	r2, [r4, #28]
 800f88c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f890:	2a00      	cmp	r2, #0
 800f892:	d1d4      	bne.n	800f83e <read_submessage_format+0x56>
 800f894:	e7d5      	b.n	800f842 <read_submessage_format+0x5a>
 800f896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d0f8      	beq.n	800f890 <read_submessage_format+0xa8>
 800f89e:	a906      	add	r1, sp, #24
 800f8a0:	a80c      	add	r0, sp, #48	@ 0x30
 800f8a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f8a6:	f003 f8ad 	bl	8012a04 <uxr_deserialize_SampleIdentity>
 800f8aa:	b9a0      	cbnz	r0, 800f8d6 <read_submessage_format+0xee>
 800f8ac:	69e2      	ldr	r2, [r4, #28]
 800f8ae:	2a00      	cmp	r2, #0
 800f8b0:	d1c5      	bne.n	800f83e <read_submessage_format+0x56>
 800f8b2:	e7c6      	b.n	800f842 <read_submessage_format+0x5a>
 800f8b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f8b8:	b13b      	cbz	r3, 800f8ca <read_submessage_format+0xe2>
 800f8ba:	a906      	add	r1, sp, #24
 800f8bc:	a80c      	add	r0, sp, #48	@ 0x30
 800f8be:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f8c2:	f002 fd65 	bl	8012390 <uxr_deserialize_BaseObjectRequest>
 800f8c6:	bb60      	cbnz	r0, 800f922 <read_submessage_format+0x13a>
 800f8c8:	69e2      	ldr	r2, [r4, #28]
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	442b      	add	r3, r5
 800f8ce:	60a3      	str	r3, [r4, #8]
 800f8d0:	2a00      	cmp	r2, #0
 800f8d2:	d1b4      	bne.n	800f83e <read_submessage_format+0x56>
 800f8d4:	e7b5      	b.n	800f842 <read_submessage_format+0x5a>
 800f8d6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f8da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8dc:	1a52      	subs	r2, r2, r1
 800f8de:	eba8 0803 	sub.w	r8, r8, r3
 800f8e2:	a80c      	add	r0, sp, #48	@ 0x30
 800f8e4:	f7fc faf0 	bl	800bec8 <ucdr_init_buffer>
 800f8e8:	44a8      	add	r8, r5
 800f8ea:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f8ee:	a80c      	add	r0, sp, #48	@ 0x30
 800f8f0:	f7fc fabe 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 800f8f4:	fa1f f888 	uxth.w	r8, r8
 800f8f8:	ab0c      	add	r3, sp, #48	@ 0x30
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	f8cd 8004 	str.w	r8, [sp, #4]
 800f900:	2108      	movs	r1, #8
 800f902:	f88d 1016 	strb.w	r1, [sp, #22]
 800f906:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800f90a:	9102      	str	r1, [sp, #8]
 800f90c:	ab06      	add	r3, sp, #24
 800f90e:	4632      	mov	r2, r6
 800f910:	9905      	ldr	r1, [sp, #20]
 800f912:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800f916:	4638      	mov	r0, r7
 800f918:	47b0      	blx	r6
 800f91a:	2301      	movs	r3, #1
 800f91c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f920:	e7c4      	b.n	800f8ac <read_submessage_format+0xc4>
 800f922:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800f926:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f928:	1a52      	subs	r2, r2, r1
 800f92a:	a80c      	add	r0, sp, #48	@ 0x30
 800f92c:	eba8 0803 	sub.w	r8, r8, r3
 800f930:	f7fc faca 	bl	800bec8 <ucdr_init_buffer>
 800f934:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f938:	a80c      	add	r0, sp, #48	@ 0x30
 800f93a:	f7fc fa99 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 800f93e:	ab0c      	add	r3, sp, #48	@ 0x30
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f946:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f94a:	44a8      	add	r8, r5
 800f94c:	fa1f f888 	uxth.w	r8, r8
 800f950:	f8cd 8004 	str.w	r8, [sp, #4]
 800f954:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f958:	2107      	movs	r1, #7
 800f95a:	f88d 1016 	strb.w	r1, [sp, #22]
 800f95e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800f962:	9102      	str	r1, [sp, #8]
 800f964:	4632      	mov	r2, r6
 800f966:	b29b      	uxth	r3, r3
 800f968:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800f96c:	9905      	ldr	r1, [sp, #20]
 800f96e:	4638      	mov	r0, r7
 800f970:	47b0      	blx	r6
 800f972:	2301      	movs	r3, #1
 800f974:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800f978:	e7a6      	b.n	800f8c8 <read_submessage_format+0xe0>
 800f97a:	bf00      	nop

0800f97c <on_get_fragmentation_info>:
 800f97c:	b500      	push	{lr}
 800f97e:	b08b      	sub	sp, #44	@ 0x2c
 800f980:	4601      	mov	r1, r0
 800f982:	2204      	movs	r2, #4
 800f984:	a802      	add	r0, sp, #8
 800f986:	f7fc fa9f 	bl	800bec8 <ucdr_init_buffer>
 800f98a:	f10d 0305 	add.w	r3, sp, #5
 800f98e:	f10d 0206 	add.w	r2, sp, #6
 800f992:	a901      	add	r1, sp, #4
 800f994:	a802      	add	r0, sp, #8
 800f996:	f001 fecf 	bl	8011738 <uxr_read_submessage_header>
 800f99a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f99e:	2b0d      	cmp	r3, #13
 800f9a0:	d003      	beq.n	800f9aa <on_get_fragmentation_info+0x2e>
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	b00b      	add	sp, #44	@ 0x2c
 800f9a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f9ae:	f013 0f02 	tst.w	r3, #2
 800f9b2:	bf14      	ite	ne
 800f9b4:	2002      	movne	r0, #2
 800f9b6:	2001      	moveq	r0, #1
 800f9b8:	b00b      	add	sp, #44	@ 0x2c
 800f9ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9be:	bf00      	nop

0800f9c0 <read_submessage_get_info>:
 800f9c0:	b570      	push	{r4, r5, r6, lr}
 800f9c2:	2500      	movs	r5, #0
 800f9c4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f9ce:	460e      	mov	r6, r1
 800f9d0:	a810      	add	r0, sp, #64	@ 0x40
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f9d8:	f008 ff58 	bl	801888c <memset>
 800f9dc:	a903      	add	r1, sp, #12
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f002 fe7e 	bl	80126e0 <uxr_deserialize_GET_INFO_Payload>
 800f9e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f9e8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f001 f887 	bl	8010b00 <uxr_session_header_offset>
 800f9f2:	462b      	mov	r3, r5
 800f9f4:	9000      	str	r0, [sp, #0]
 800f9f6:	220c      	movs	r2, #12
 800f9f8:	a905      	add	r1, sp, #20
 800f9fa:	a808      	add	r0, sp, #32
 800f9fc:	f7fc fa52 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 800fa00:	a910      	add	r1, sp, #64	@ 0x40
 800fa02:	a808      	add	r0, sp, #32
 800fa04:	f002 fede 	bl	80127c4 <uxr_serialize_INFO_Payload>
 800fa08:	9b08      	ldr	r3, [sp, #32]
 800fa0a:	462a      	mov	r2, r5
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f001 f820 	bl	8010a54 <uxr_stamp_session_header>
 800fa14:	a808      	add	r0, sp, #32
 800fa16:	f7fc fa83 	bl	800bf20 <ucdr_buffer_length>
 800fa1a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	a905      	add	r1, sp, #20
 800fa20:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fa24:	47a0      	blx	r4
 800fa26:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}

0800fa2c <write_submessage_acknack.isra.0>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	b092      	sub	sp, #72	@ 0x48
 800fa30:	4605      	mov	r5, r0
 800fa32:	460e      	mov	r6, r1
 800fa34:	4614      	mov	r4, r2
 800fa36:	f001 f863 	bl	8010b00 <uxr_session_header_offset>
 800fa3a:	a905      	add	r1, sp, #20
 800fa3c:	9000      	str	r0, [sp, #0]
 800fa3e:	2300      	movs	r3, #0
 800fa40:	a80a      	add	r0, sp, #40	@ 0x28
 800fa42:	2211      	movs	r2, #17
 800fa44:	f7fc fa2e 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 800fa48:	2218      	movs	r2, #24
 800fa4a:	fb02 5404 	mla	r4, r2, r4, r5
 800fa4e:	2300      	movs	r3, #0
 800fa50:	2205      	movs	r2, #5
 800fa52:	3450      	adds	r4, #80	@ 0x50
 800fa54:	210a      	movs	r1, #10
 800fa56:	a80a      	add	r0, sp, #40	@ 0x28
 800fa58:	f001 fe54 	bl	8011704 <uxr_buffer_submessage_header>
 800fa5c:	a903      	add	r1, sp, #12
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f007 fa56 	bl	8016f10 <uxr_compute_acknack>
 800fa64:	ba40      	rev16	r0, r0
 800fa66:	f8ad 000e 	strh.w	r0, [sp, #14]
 800fa6a:	a903      	add	r1, sp, #12
 800fa6c:	a80a      	add	r0, sp, #40	@ 0x28
 800fa6e:	f88d 6010 	strb.w	r6, [sp, #16]
 800fa72:	f002 ff17 	bl	80128a4 <uxr_serialize_ACKNACK_Payload>
 800fa76:	2200      	movs	r2, #0
 800fa78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	f000 ffe9 	bl	8010a54 <uxr_stamp_session_header>
 800fa82:	a80a      	add	r0, sp, #40	@ 0x28
 800fa84:	f7fc fa4c 	bl	800bf20 <ucdr_buffer_length>
 800fa88:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	a905      	add	r1, sp, #20
 800fa8e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fa92:	47a0      	blx	r4
 800fa94:	b012      	add	sp, #72	@ 0x48
 800fa96:	bd70      	pop	{r4, r5, r6, pc}

0800fa98 <uxr_init_session>:
 800fa98:	b510      	push	{r4, lr}
 800fa9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800fad0 <uxr_init_session+0x38>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800faa4:	4604      	mov	r4, r0
 800faa6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800faaa:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800faae:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800fab2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800fab6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800faba:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800fabe:	2181      	movs	r1, #129	@ 0x81
 800fac0:	f000 ff34 	bl	801092c <uxr_init_session_info>
 800fac4:	f104 0008 	add.w	r0, r4, #8
 800fac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800facc:	f001 bd36 	b.w	801153c <uxr_init_stream_storage>
	...

0800fad8 <uxr_set_status_callback>:
 800fad8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop

0800fae0 <uxr_set_topic_callback>:
 800fae0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop

0800fae8 <uxr_set_request_callback>:
 800fae8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop

0800faf0 <uxr_set_reply_callback>:
 800faf0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop

0800faf8 <uxr_create_output_best_effort_stream>:
 800faf8:	b510      	push	{r4, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	e9cd 2100 	strd	r2, r1, [sp]
 800fb00:	4604      	mov	r4, r0
 800fb02:	f000 fffd 	bl	8010b00 <uxr_session_header_offset>
 800fb06:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	f104 0008 	add.w	r0, r4, #8
 800fb10:	b004      	add	sp, #16
 800fb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb16:	f001 bd5b 	b.w	80115d0 <uxr_add_output_best_effort_buffer>
 800fb1a:	bf00      	nop

0800fb1c <uxr_create_output_reliable_stream>:
 800fb1c:	b510      	push	{r4, lr}
 800fb1e:	b088      	sub	sp, #32
 800fb20:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fb24:	4604      	mov	r4, r0
 800fb26:	9303      	str	r3, [sp, #12]
 800fb28:	f000 ffea 	bl	8010b00 <uxr_session_header_offset>
 800fb2c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800fb30:	9000      	str	r0, [sp, #0]
 800fb32:	9905      	ldr	r1, [sp, #20]
 800fb34:	f104 0008 	add.w	r0, r4, #8
 800fb38:	f001 fd5e 	bl	80115f8 <uxr_add_output_reliable_buffer>
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	b2c3      	uxtb	r3, r0
 800fb40:	f363 0207 	bfi	r2, r3, #0, #8
 800fb44:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb48:	f363 220f 	bfi	r2, r3, #8, #8
 800fb4c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb50:	f363 4217 	bfi	r2, r3, #16, #8
 800fb54:	0e03      	lsrs	r3, r0, #24
 800fb56:	f363 621f 	bfi	r2, r3, #24, #8
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	b008      	add	sp, #32
 800fb5e:	bd10      	pop	{r4, pc}

0800fb60 <uxr_create_input_best_effort_stream>:
 800fb60:	b082      	sub	sp, #8
 800fb62:	3008      	adds	r0, #8
 800fb64:	b002      	add	sp, #8
 800fb66:	f001 bd61 	b.w	801162c <uxr_add_input_best_effort_buffer>
 800fb6a:	bf00      	nop

0800fb6c <uxr_create_input_reliable_stream>:
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	4c0b      	ldr	r4, [pc, #44]	@ (800fba0 <uxr_create_input_reliable_stream+0x34>)
 800fb72:	9400      	str	r4, [sp, #0]
 800fb74:	3008      	adds	r0, #8
 800fb76:	f001 fd6f 	bl	8011658 <uxr_add_input_reliable_buffer>
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	b2c3      	uxtb	r3, r0
 800fb7e:	f363 0207 	bfi	r2, r3, #0, #8
 800fb82:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb86:	f363 220f 	bfi	r2, r3, #8, #8
 800fb8a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb8e:	f363 4217 	bfi	r2, r3, #16, #8
 800fb92:	0e03      	lsrs	r3, r0, #24
 800fb94:	f363 621f 	bfi	r2, r3, #24, #8
 800fb98:	4610      	mov	r0, r2
 800fb9a:	b004      	add	sp, #16
 800fb9c:	bd10      	pop	{r4, pc}
 800fb9e:	bf00      	nop
 800fba0:	0800f97d 	.word	0x0800f97d

0800fba4 <uxr_epoch_millis>:
 800fba4:	b510      	push	{r4, lr}
 800fba6:	4604      	mov	r4, r0
 800fba8:	f001 fe0c 	bl	80117c4 <uxr_nanos>
 800fbac:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 800fbb0:	1ac0      	subs	r0, r0, r3
 800fbb2:	4a04      	ldr	r2, [pc, #16]	@ (800fbc4 <uxr_epoch_millis+0x20>)
 800fbb4:	f04f 0300 	mov.w	r3, #0
 800fbb8:	eb61 0104 	sbc.w	r1, r1, r4
 800fbbc:	f7f1 f82c 	bl	8000c18 <__aeabi_ldivmod>
 800fbc0:	bd10      	pop	{r4, pc}
 800fbc2:	bf00      	nop
 800fbc4:	000f4240 	.word	0x000f4240

0800fbc8 <uxr_epoch_nanos>:
 800fbc8:	b510      	push	{r4, lr}
 800fbca:	4604      	mov	r4, r0
 800fbcc:	f001 fdfa 	bl	80117c4 <uxr_nanos>
 800fbd0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800fbd4:	1ac0      	subs	r0, r0, r3
 800fbd6:	eb61 0102 	sbc.w	r1, r1, r2
 800fbda:	bd10      	pop	{r4, pc}

0800fbdc <uxr_flash_output_streams>:
 800fbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe0:	7e03      	ldrb	r3, [r0, #24]
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d035      	beq.n	800fc56 <uxr_flash_output_streams+0x7a>
 800fbea:	f04f 0900 	mov.w	r9, #0
 800fbee:	4648      	mov	r0, r9
 800fbf0:	f10d 0802 	add.w	r8, sp, #2
 800fbf4:	af03      	add	r7, sp, #12
 800fbf6:	ae02      	add	r6, sp, #8
 800fbf8:	e006      	b.n	800fc08 <uxr_flash_output_streams+0x2c>
 800fbfa:	7e23      	ldrb	r3, [r4, #24]
 800fbfc:	f109 0901 	add.w	r9, r9, #1
 800fc00:	fa5f f089 	uxtb.w	r0, r9
 800fc04:	4283      	cmp	r3, r0
 800fc06:	d926      	bls.n	800fc56 <uxr_flash_output_streams+0x7a>
 800fc08:	2201      	movs	r2, #1
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800fc10:	f001 fc40 	bl	8011494 <uxr_stream_id>
 800fc14:	3508      	adds	r5, #8
 800fc16:	4684      	mov	ip, r0
 800fc18:	4643      	mov	r3, r8
 800fc1a:	463a      	mov	r2, r7
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f8cd c004 	str.w	ip, [sp, #4]
 800fc24:	f007 f9fa 	bl	801701c <uxr_prepare_best_effort_buffer_to_send>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	d0e6      	beq.n	800fbfa <uxr_flash_output_streams+0x1e>
 800fc2c:	9b02      	ldr	r3, [sp, #8]
 800fc2e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fc32:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fc36:	4620      	mov	r0, r4
 800fc38:	f000 ff0c 	bl	8010a54 <uxr_stamp_session_header>
 800fc3c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fc3e:	9a03      	ldr	r2, [sp, #12]
 800fc40:	685d      	ldr	r5, [r3, #4]
 800fc42:	6818      	ldr	r0, [r3, #0]
 800fc44:	9902      	ldr	r1, [sp, #8]
 800fc46:	47a8      	blx	r5
 800fc48:	f109 0901 	add.w	r9, r9, #1
 800fc4c:	7e23      	ldrb	r3, [r4, #24]
 800fc4e:	fa5f f089 	uxtb.w	r0, r9
 800fc52:	4283      	cmp	r3, r0
 800fc54:	d8d8      	bhi.n	800fc08 <uxr_flash_output_streams+0x2c>
 800fc56:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fc5a:	b38b      	cbz	r3, 800fcc0 <uxr_flash_output_streams+0xe4>
 800fc5c:	f04f 0900 	mov.w	r9, #0
 800fc60:	f10d 0802 	add.w	r8, sp, #2
 800fc64:	af03      	add	r7, sp, #12
 800fc66:	ae02      	add	r6, sp, #8
 800fc68:	4648      	mov	r0, r9
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	2102      	movs	r1, #2
 800fc6e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800fc72:	f001 fc0f 	bl	8011494 <uxr_stream_id>
 800fc76:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800fc7a:	3520      	adds	r5, #32
 800fc7c:	9001      	str	r0, [sp, #4]
 800fc7e:	e00d      	b.n	800fc9c <uxr_flash_output_streams+0xc0>
 800fc80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fc84:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fc88:	9b02      	ldr	r3, [sp, #8]
 800fc8a:	f000 fee3 	bl	8010a54 <uxr_stamp_session_header>
 800fc8e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fc90:	9a03      	ldr	r2, [sp, #12]
 800fc92:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fc96:	9902      	ldr	r1, [sp, #8]
 800fc98:	6818      	ldr	r0, [r3, #0]
 800fc9a:	47d0      	blx	sl
 800fc9c:	4643      	mov	r3, r8
 800fc9e:	463a      	mov	r2, r7
 800fca0:	4631      	mov	r1, r6
 800fca2:	4628      	mov	r0, r5
 800fca4:	f007 fbd8 	bl	8017458 <uxr_prepare_next_reliable_buffer_to_send>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	4620      	mov	r0, r4
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1e7      	bne.n	800fc80 <uxr_flash_output_streams+0xa4>
 800fcb0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fcb4:	f109 0901 	add.w	r9, r9, #1
 800fcb8:	fa5f f089 	uxtb.w	r0, r9
 800fcbc:	4283      	cmp	r3, r0
 800fcbe:	d8d4      	bhi.n	800fc6a <uxr_flash_output_streams+0x8e>
 800fcc0:	b004      	add	sp, #16
 800fcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcc6:	bf00      	nop

0800fcc8 <read_submessage_info>:
 800fcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fccc:	460d      	mov	r5, r1
 800fcce:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fcd2:	4669      	mov	r1, sp
 800fcd4:	4607      	mov	r7, r0
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f002 fc10 	bl	80124fc <uxr_deserialize_BaseObjectReply>
 800fcdc:	a902      	add	r1, sp, #8
 800fcde:	4604      	mov	r4, r0
 800fce0:	4628      	mov	r0, r5
 800fce2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800fce6:	f7fa fdf5 	bl	800a8d4 <ucdr_deserialize_bool>
 800fcea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fcee:	4004      	ands	r4, r0
 800fcf0:	b2e4      	uxtb	r4, r4
 800fcf2:	b95b      	cbnz	r3, 800fd0c <read_submessage_info+0x44>
 800fcf4:	a987      	add	r1, sp, #540	@ 0x21c
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	f7fa fdec 	bl	800a8d4 <ucdr_deserialize_bool>
 800fcfc:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800fd00:	4606      	mov	r6, r0
 800fd02:	b94b      	cbnz	r3, 800fd18 <read_submessage_info+0x50>
 800fd04:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	a903      	add	r1, sp, #12
 800fd0e:	4628      	mov	r0, r5
 800fd10:	f002 fa9c 	bl	801224c <uxr_deserialize_ObjectVariant>
 800fd14:	4004      	ands	r4, r0
 800fd16:	e7ed      	b.n	800fcf4 <read_submessage_info+0x2c>
 800fd18:	a988      	add	r1, sp, #544	@ 0x220
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f7fa fe08 	bl	800a930 <ucdr_deserialize_uint8_t>
 800fd20:	4234      	tst	r4, r6
 800fd22:	d0ef      	beq.n	800fd04 <read_submessage_info+0x3c>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d0ed      	beq.n	800fd04 <read_submessage_info+0x3c>
 800fd28:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800fd2c:	2b0d      	cmp	r3, #13
 800fd2e:	d1e9      	bne.n	800fd04 <read_submessage_info+0x3c>
 800fd30:	a98a      	add	r1, sp, #552	@ 0x228
 800fd32:	4628      	mov	r0, r5
 800fd34:	f7fb fba2 	bl	800b47c <ucdr_deserialize_int16_t>
 800fd38:	b140      	cbz	r0, 800fd4c <read_submessage_info+0x84>
 800fd3a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	dd07      	ble.n	800fd52 <read_submessage_info+0x8a>
 800fd42:	f1b8 0f00 	cmp.w	r8, #0
 800fd46:	bf14      	ite	ne
 800fd48:	2001      	movne	r0, #1
 800fd4a:	2002      	moveq	r0, #2
 800fd4c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800fd50:	e7d8      	b.n	800fd04 <read_submessage_info+0x3c>
 800fd52:	2000      	movs	r0, #0
 800fd54:	e7fa      	b.n	800fd4c <read_submessage_info+0x84>
 800fd56:	bf00      	nop

0800fd58 <read_submessage_list>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	b097      	sub	sp, #92	@ 0x5c
 800fd5e:	4ec1      	ldr	r6, [pc, #772]	@ (8010064 <read_submessage_list+0x30c>)
 800fd60:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd62:	4604      	mov	r4, r0
 800fd64:	460d      	mov	r5, r1
 800fd66:	f04f 0801 	mov.w	r8, #1
 800fd6a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800fd6e:	aa0c      	add	r2, sp, #48	@ 0x30
 800fd70:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800fd74:	4628      	mov	r0, r5
 800fd76:	f001 fcdf 	bl	8011738 <uxr_read_submessage_header>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	f000 813e 	beq.w	800fffc <read_submessage_list+0x2a4>
 800fd80:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800fd84:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800fd88:	3b02      	subs	r3, #2
 800fd8a:	2b0d      	cmp	r3, #13
 800fd8c:	d8ed      	bhi.n	800fd6a <read_submessage_list+0x12>
 800fd8e:	a101      	add	r1, pc, #4	@ (adr r1, 800fd94 <read_submessage_list+0x3c>)
 800fd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd94:	0800fff3 	.word	0x0800fff3
 800fd98:	0800fd6b 	.word	0x0800fd6b
 800fd9c:	0800ffe3 	.word	0x0800ffe3
 800fda0:	0800ff81 	.word	0x0800ff81
 800fda4:	0800ff77 	.word	0x0800ff77
 800fda8:	0800fd6b 	.word	0x0800fd6b
 800fdac:	0800fd6b 	.word	0x0800fd6b
 800fdb0:	0800fed7 	.word	0x0800fed7
 800fdb4:	0800fe67 	.word	0x0800fe67
 800fdb8:	0800fe27 	.word	0x0800fe27
 800fdbc:	0800fd6b 	.word	0x0800fd6b
 800fdc0:	0800fd6b 	.word	0x0800fd6b
 800fdc4:	0800fd6b 	.word	0x0800fd6b
 800fdc8:	0800fdcd 	.word	0x0800fdcd
 800fdcc:	a910      	add	r1, sp, #64	@ 0x40
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f002 fdc6 	bl	8012960 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800fdd4:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800fdd8:	f1b9 0f00 	cmp.w	r9, #0
 800fddc:	f000 8116 	beq.w	801000c <read_submessage_list+0x2b4>
 800fde0:	f001 fcf0 	bl	80117c4 <uxr_nanos>
 800fde4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800fde6:	4602      	mov	r2, r0
 800fde8:	460b      	mov	r3, r1
 800fdea:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800fdec:	2100      	movs	r1, #0
 800fdee:	468c      	mov	ip, r1
 800fdf0:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800fdf4:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800fdf8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fdfa:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800fdfc:	468c      	mov	ip, r1
 800fdfe:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800fe02:	46e2      	mov	sl, ip
 800fe04:	46bc      	mov	ip, r7
 800fe06:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800fe0a:	fbc0 7106 	smlal	r7, r1, r0, r6
 800fe0e:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800fe12:	e9cd 7100 	strd	r7, r1, [sp]
 800fe16:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800fe1a:	9106      	str	r1, [sp, #24]
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	47c8      	blx	r9
 800fe20:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800fe24:	e7a1      	b.n	800fd6a <read_submessage_list+0x12>
 800fe26:	a910      	add	r1, sp, #64	@ 0x40
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f002 fd79 	bl	8012920 <uxr_deserialize_HEARTBEAT_Payload>
 800fe2e:	2100      	movs	r1, #0
 800fe30:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fe34:	f001 fb58 	bl	80114e8 <uxr_stream_id_from_raw>
 800fe38:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fe3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800fe3e:	4639      	mov	r1, r7
 800fe40:	f104 0008 	add.w	r0, r4, #8
 800fe44:	f001 fc3e 	bl	80116c4 <uxr_get_input_reliable_stream>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d08e      	beq.n	800fd6a <read_submessage_list+0x12>
 800fe4c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800fe50:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800fe54:	f007 f850 	bl	8016ef8 <uxr_process_heartbeat>
 800fe58:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800fe5c:	463a      	mov	r2, r7
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f7ff fde4 	bl	800fa2c <write_submessage_acknack.isra.0>
 800fe64:	e781      	b.n	800fd6a <read_submessage_list+0x12>
 800fe66:	a910      	add	r1, sp, #64	@ 0x40
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f002 fd31 	bl	80128d0 <uxr_deserialize_ACKNACK_Payload>
 800fe6e:	2100      	movs	r1, #0
 800fe70:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fe74:	f001 fb38 	bl	80114e8 <uxr_stream_id_from_raw>
 800fe78:	900d      	str	r0, [sp, #52]	@ 0x34
 800fe7a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fe7e:	f104 0008 	add.w	r0, r4, #8
 800fe82:	f001 fc0b 	bl	801169c <uxr_get_output_reliable_stream>
 800fe86:	4607      	mov	r7, r0
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	f43f af6e 	beq.w	800fd6a <read_submessage_list+0x12>
 800fe8e:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800fe92:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800fe96:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fe9a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fe9e:	b289      	uxth	r1, r1
 800fea0:	f007 fb84 	bl	80175ac <uxr_process_acknack>
 800fea4:	4638      	mov	r0, r7
 800fea6:	f007 fb41 	bl	801752c <uxr_begin_output_nack_buffer_it>
 800feaa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800feae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800feb2:	e006      	b.n	800fec2 <read_submessage_list+0x16a>
 800feb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800feb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800feb8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800febc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800febe:	6818      	ldr	r0, [r3, #0]
 800fec0:	47c8      	blx	r9
 800fec2:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800fec6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fec8:	4651      	mov	r1, sl
 800feca:	4638      	mov	r0, r7
 800fecc:	f007 fb30 	bl	8017530 <uxr_next_reliable_nack_buffer_to_send>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d1ef      	bne.n	800feb4 <read_submessage_list+0x15c>
 800fed4:	e749      	b.n	800fd6a <read_submessage_list+0x12>
 800fed6:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800feda:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800fede:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fee2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800fee6:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800feea:	4651      	mov	r1, sl
 800feec:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fef0:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800fef4:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fef8:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fefc:	4628      	mov	r0, r5
 800fefe:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ff02:	f002 fa45 	bl	8012390 <uxr_deserialize_BaseObjectRequest>
 800ff06:	4650      	mov	r0, sl
 800ff08:	a90f      	add	r1, sp, #60	@ 0x3c
 800ff0a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ff0e:	f000 fe1d 	bl	8010b4c <uxr_parse_base_object_request>
 800ff12:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ff16:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff18:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ff1c:	9110      	str	r1, [sp, #64]	@ 0x40
 800ff1e:	3f04      	subs	r7, #4
 800ff20:	f009 090e 	and.w	r9, r9, #14
 800ff24:	b2bf      	uxth	r7, r7
 800ff26:	f1bb 0f00 	cmp.w	fp, #0
 800ff2a:	d006      	beq.n	800ff3a <read_submessage_list+0x1e2>
 800ff2c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	4652      	mov	r2, sl
 800ff34:	2300      	movs	r3, #0
 800ff36:	4620      	mov	r0, r4
 800ff38:	47d8      	blx	fp
 800ff3a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ff3c:	b16a      	cbz	r2, 800ff5a <read_submessage_list+0x202>
 800ff3e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ff40:	2100      	movs	r1, #0
 800ff42:	3802      	subs	r0, #2
 800ff44:	e002      	b.n	800ff4c <read_submessage_list+0x1f4>
 800ff46:	3101      	adds	r1, #1
 800ff48:	4291      	cmp	r1, r2
 800ff4a:	d006      	beq.n	800ff5a <read_submessage_list+0x202>
 800ff4c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ff50:	4553      	cmp	r3, sl
 800ff52:	d1f8      	bne.n	800ff46 <read_submessage_list+0x1ee>
 800ff54:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ff56:	2200      	movs	r2, #0
 800ff58:	545a      	strb	r2, [r3, r1]
 800ff5a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ff5e:	9102      	str	r1, [sp, #8]
 800ff60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff62:	9101      	str	r1, [sp, #4]
 800ff64:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ff66:	9100      	str	r1, [sp, #0]
 800ff68:	464b      	mov	r3, r9
 800ff6a:	463a      	mov	r2, r7
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f7ff fc3a 	bl	800f7e8 <read_submessage_format>
 800ff74:	e6f9      	b.n	800fd6a <read_submessage_list+0x12>
 800ff76:	4629      	mov	r1, r5
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f7ff fea5 	bl	800fcc8 <read_submessage_info>
 800ff7e:	e6f4      	b.n	800fd6a <read_submessage_list+0x12>
 800ff80:	2a00      	cmp	r2, #0
 800ff82:	d03e      	beq.n	8010002 <read_submessage_list+0x2aa>
 800ff84:	a910      	add	r1, sp, #64	@ 0x40
 800ff86:	4628      	mov	r0, r5
 800ff88:	f002 fbfe 	bl	8012788 <uxr_deserialize_STATUS_Payload>
 800ff8c:	a90e      	add	r1, sp, #56	@ 0x38
 800ff8e:	aa0d      	add	r2, sp, #52	@ 0x34
 800ff90:	a810      	add	r0, sp, #64	@ 0x40
 800ff92:	f000 fddb 	bl	8010b4c <uxr_parse_base_object_request>
 800ff96:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ff9a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff9c:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ffa0:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ffa4:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ffa6:	f1ba 0f00 	cmp.w	sl, #0
 800ffaa:	d006      	beq.n	800ffba <read_submessage_list+0x262>
 800ffac:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	463a      	mov	r2, r7
 800ffb4:	464b      	mov	r3, r9
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	47d0      	blx	sl
 800ffba:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ffbc:	2a00      	cmp	r2, #0
 800ffbe:	f43f aed4 	beq.w	800fd6a <read_submessage_list+0x12>
 800ffc2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	3802      	subs	r0, #2
 800ffc8:	e003      	b.n	800ffd2 <read_submessage_list+0x27a>
 800ffca:	3101      	adds	r1, #1
 800ffcc:	4291      	cmp	r1, r2
 800ffce:	f43f aecc 	beq.w	800fd6a <read_submessage_list+0x12>
 800ffd2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ffd6:	42bb      	cmp	r3, r7
 800ffd8:	d1f7      	bne.n	800ffca <read_submessage_list+0x272>
 800ffda:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ffdc:	f803 9001 	strb.w	r9, [r3, r1]
 800ffe0:	e6c3      	b.n	800fd6a <read_submessage_list+0x12>
 800ffe2:	2a00      	cmp	r2, #0
 800ffe4:	f47f aec1 	bne.w	800fd6a <read_submessage_list+0x12>
 800ffe8:	4629      	mov	r1, r5
 800ffea:	4620      	mov	r0, r4
 800ffec:	f000 fcf4 	bl	80109d8 <uxr_read_create_session_status>
 800fff0:	e6bb      	b.n	800fd6a <read_submessage_list+0x12>
 800fff2:	4629      	mov	r1, r5
 800fff4:	4620      	mov	r0, r4
 800fff6:	f7ff fce3 	bl	800f9c0 <read_submessage_get_info>
 800fffa:	e6b6      	b.n	800fd6a <read_submessage_list+0x12>
 800fffc:	b017      	add	sp, #92	@ 0x5c
 800fffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010002:	4629      	mov	r1, r5
 8010004:	4620      	mov	r0, r4
 8010006:	f000 fcf3 	bl	80109f0 <uxr_read_delete_session_status>
 801000a:	e6ae      	b.n	800fd6a <read_submessage_list+0x12>
 801000c:	f001 fbda 	bl	80117c4 <uxr_nanos>
 8010010:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010012:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010014:	464f      	mov	r7, r9
 8010016:	fbc3 2706 	smlal	r2, r7, r3, r6
 801001a:	1812      	adds	r2, r2, r0
 801001c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801001e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010020:	eb47 0101 	adc.w	r1, r7, r1
 8010024:	464f      	mov	r7, r9
 8010026:	fbc3 0706 	smlal	r0, r7, r3, r6
 801002a:	463b      	mov	r3, r7
 801002c:	4684      	mov	ip, r0
 801002e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010032:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010036:	eb1c 0c00 	adds.w	ip, ip, r0
 801003a:	464f      	mov	r7, r9
 801003c:	eb43 0307 	adc.w	r3, r3, r7
 8010040:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010044:	eb61 0303 	sbc.w	r3, r1, r3
 8010048:	0fda      	lsrs	r2, r3, #31
 801004a:	eb12 020c 	adds.w	r2, r2, ip
 801004e:	f143 0300 	adc.w	r3, r3, #0
 8010052:	0852      	lsrs	r2, r2, #1
 8010054:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010058:	105b      	asrs	r3, r3, #1
 801005a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801005e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010062:	e6dd      	b.n	800fe20 <read_submessage_list+0xc8>
 8010064:	3b9aca00 	.word	0x3b9aca00

08010068 <listen_message_reliably>:
 8010068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	1e0b      	subs	r3, r1, #0
 801006e:	b09d      	sub	sp, #116	@ 0x74
 8010070:	bfb8      	it	lt
 8010072:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010076:	4680      	mov	r8, r0
 8010078:	9305      	str	r3, [sp, #20]
 801007a:	f001 fb89 	bl	8011790 <uxr_millis>
 801007e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010082:	4681      	mov	r9, r0
 8010084:	2a00      	cmp	r2, #0
 8010086:	f000 80a1 	beq.w	80101cc <listen_message_reliably+0x164>
 801008a:	2600      	movs	r6, #0
 801008c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010090:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010094:	9303      	str	r3, [sp, #12]
 8010096:	4630      	mov	r0, r6
 8010098:	460f      	mov	r7, r1
 801009a:	e00f      	b.n	80100bc <listen_message_reliably+0x54>
 801009c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80100a0:	9903      	ldr	r1, [sp, #12]
 80100a2:	455a      	cmp	r2, fp
 80100a4:	f106 0601 	add.w	r6, r6, #1
 80100a8:	eb73 0101 	sbcs.w	r1, r3, r1
 80100ac:	b2f0      	uxtb	r0, r6
 80100ae:	da01      	bge.n	80100b4 <listen_message_reliably+0x4c>
 80100b0:	4693      	mov	fp, r2
 80100b2:	9303      	str	r3, [sp, #12]
 80100b4:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80100b8:	4283      	cmp	r3, r0
 80100ba:	d960      	bls.n	801017e <listen_message_reliably+0x116>
 80100bc:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80100c0:	2102      	movs	r1, #2
 80100c2:	2201      	movs	r2, #1
 80100c4:	f001 f9e6 	bl	8011494 <uxr_stream_id>
 80100c8:	00e4      	lsls	r4, r4, #3
 80100ca:	f104 0520 	add.w	r5, r4, #32
 80100ce:	4445      	add	r5, r8
 80100d0:	4601      	mov	r1, r0
 80100d2:	463b      	mov	r3, r7
 80100d4:	464a      	mov	r2, r9
 80100d6:	4628      	mov	r0, r5
 80100d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80100da:	f007 f9fd 	bl	80174d8 <uxr_update_output_stream_heartbeat_timestamp>
 80100de:	eb08 0304 	add.w	r3, r8, r4
 80100e2:	2800      	cmp	r0, #0
 80100e4:	d0da      	beq.n	801009c <listen_message_reliably+0x34>
 80100e6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80100ea:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80100ee:	9304      	str	r3, [sp, #16]
 80100f0:	4640      	mov	r0, r8
 80100f2:	f000 fd05 	bl	8010b00 <uxr_session_header_offset>
 80100f6:	3501      	adds	r5, #1
 80100f8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80100fc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010100:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010104:	2300      	movs	r3, #0
 8010106:	2211      	movs	r2, #17
 8010108:	9000      	str	r0, [sp, #0]
 801010a:	a90c      	add	r1, sp, #48	@ 0x30
 801010c:	4650      	mov	r0, sl
 801010e:	f7fb fec9 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 8010112:	2300      	movs	r3, #0
 8010114:	2205      	movs	r2, #5
 8010116:	210b      	movs	r1, #11
 8010118:	4650      	mov	r0, sl
 801011a:	f001 faf3 	bl	8011704 <uxr_buffer_submessage_header>
 801011e:	8968      	ldrh	r0, [r5, #10]
 8010120:	2101      	movs	r1, #1
 8010122:	f007 fa9b 	bl	801765c <uxr_seq_num_add>
 8010126:	892b      	ldrh	r3, [r5, #8]
 8010128:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801012c:	4602      	mov	r2, r0
 801012e:	9b04      	ldr	r3, [sp, #16]
 8010130:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010134:	a90a      	add	r1, sp, #40	@ 0x28
 8010136:	4650      	mov	r0, sl
 8010138:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801013c:	f002 fbdc 	bl	80128f8 <uxr_serialize_HEARTBEAT_Payload>
 8010140:	2200      	movs	r2, #0
 8010142:	4611      	mov	r1, r2
 8010144:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010146:	4640      	mov	r0, r8
 8010148:	f000 fc84 	bl	8010a54 <uxr_stamp_session_header>
 801014c:	4650      	mov	r0, sl
 801014e:	f7fb fee7 	bl	800bf20 <ucdr_buffer_length>
 8010152:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010156:	4602      	mov	r2, r0
 8010158:	a90c      	add	r1, sp, #48	@ 0x30
 801015a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801015e:	4444      	add	r4, r8
 8010160:	47a8      	blx	r5
 8010162:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010166:	9903      	ldr	r1, [sp, #12]
 8010168:	455a      	cmp	r2, fp
 801016a:	f106 0601 	add.w	r6, r6, #1
 801016e:	eb73 0101 	sbcs.w	r1, r3, r1
 8010172:	b2f0      	uxtb	r0, r6
 8010174:	db9c      	blt.n	80100b0 <listen_message_reliably+0x48>
 8010176:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801017a:	4283      	cmp	r3, r0
 801017c:	d89e      	bhi.n	80100bc <listen_message_reliably+0x54>
 801017e:	9a03      	ldr	r2, [sp, #12]
 8010180:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010184:	429a      	cmp	r2, r3
 8010186:	bf08      	it	eq
 8010188:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 801018c:	d01e      	beq.n	80101cc <listen_message_reliably+0x164>
 801018e:	ebab 0309 	sub.w	r3, fp, r9
 8010192:	9905      	ldr	r1, [sp, #20]
 8010194:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010198:	2b00      	cmp	r3, #0
 801019a:	bf08      	it	eq
 801019c:	2301      	moveq	r3, #1
 801019e:	4299      	cmp	r1, r3
 80101a0:	bfa8      	it	ge
 80101a2:	4619      	movge	r1, r3
 80101a4:	6894      	ldr	r4, [r2, #8]
 80101a6:	6810      	ldr	r0, [r2, #0]
 80101a8:	4689      	mov	r9, r1
 80101aa:	460b      	mov	r3, r1
 80101ac:	aa08      	add	r2, sp, #32
 80101ae:	a907      	add	r1, sp, #28
 80101b0:	47a0      	blx	r4
 80101b2:	b968      	cbnz	r0, 80101d0 <listen_message_reliably+0x168>
 80101b4:	9b05      	ldr	r3, [sp, #20]
 80101b6:	eba3 0309 	sub.w	r3, r3, r9
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	9305      	str	r3, [sp, #20]
 80101be:	f73f af5c 	bgt.w	801007a <listen_message_reliably+0x12>
 80101c2:	4604      	mov	r4, r0
 80101c4:	4620      	mov	r0, r4
 80101c6:	b01d      	add	sp, #116	@ 0x74
 80101c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101cc:	9b05      	ldr	r3, [sp, #20]
 80101ce:	e7e0      	b.n	8010192 <listen_message_reliably+0x12a>
 80101d0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80101d4:	4604      	mov	r4, r0
 80101d6:	a80c      	add	r0, sp, #48	@ 0x30
 80101d8:	f7fb fe76 	bl	800bec8 <ucdr_init_buffer>
 80101dc:	2500      	movs	r5, #0
 80101de:	f10d 031a 	add.w	r3, sp, #26
 80101e2:	aa06      	add	r2, sp, #24
 80101e4:	a90c      	add	r1, sp, #48	@ 0x30
 80101e6:	4640      	mov	r0, r8
 80101e8:	f88d 5018 	strb.w	r5, [sp, #24]
 80101ec:	f000 fc46 	bl	8010a7c <uxr_read_session_header>
 80101f0:	b918      	cbnz	r0, 80101fa <listen_message_reliably+0x192>
 80101f2:	4620      	mov	r0, r4
 80101f4:	b01d      	add	sp, #116	@ 0x74
 80101f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101fa:	4629      	mov	r1, r5
 80101fc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010200:	f001 f972 	bl	80114e8 <uxr_stream_id_from_raw>
 8010204:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010208:	2d01      	cmp	r5, #1
 801020a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801020e:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010212:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010216:	d04b      	beq.n	80102b0 <listen_message_reliably+0x248>
 8010218:	2d02      	cmp	r5, #2
 801021a:	d00f      	beq.n	801023c <listen_message_reliably+0x1d4>
 801021c:	2d00      	cmp	r5, #0
 801021e:	d1e8      	bne.n	80101f2 <listen_message_reliably+0x18a>
 8010220:	4629      	mov	r1, r5
 8010222:	4628      	mov	r0, r5
 8010224:	f001 f960 	bl	80114e8 <uxr_stream_id_from_raw>
 8010228:	a90c      	add	r1, sp, #48	@ 0x30
 801022a:	4602      	mov	r2, r0
 801022c:	4640      	mov	r0, r8
 801022e:	920a      	str	r2, [sp, #40]	@ 0x28
 8010230:	f7ff fd92 	bl	800fd58 <read_submessage_list>
 8010234:	4620      	mov	r0, r4
 8010236:	b01d      	add	sp, #116	@ 0x74
 8010238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023c:	4631      	mov	r1, r6
 801023e:	f108 0008 	add.w	r0, r8, #8
 8010242:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010246:	f001 fa3d 	bl	80116c4 <uxr_get_input_reliable_stream>
 801024a:	4607      	mov	r7, r0
 801024c:	b338      	cbz	r0, 801029e <listen_message_reliably+0x236>
 801024e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010250:	9203      	str	r2, [sp, #12]
 8010252:	a80c      	add	r0, sp, #48	@ 0x30
 8010254:	f7fb fe68 	bl	800bf28 <ucdr_buffer_remaining>
 8010258:	4603      	mov	r3, r0
 801025a:	f10d 0019 	add.w	r0, sp, #25
 801025e:	9000      	str	r0, [sp, #0]
 8010260:	9a03      	ldr	r2, [sp, #12]
 8010262:	4651      	mov	r1, sl
 8010264:	4638      	mov	r0, r7
 8010266:	f006 fd4d 	bl	8016d04 <uxr_receive_reliable_message>
 801026a:	b1c0      	cbz	r0, 801029e <listen_message_reliably+0x236>
 801026c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010270:	b393      	cbz	r3, 80102d8 <listen_message_reliably+0x270>
 8010272:	ad14      	add	r5, sp, #80	@ 0x50
 8010274:	f04f 0a02 	mov.w	sl, #2
 8010278:	e00a      	b.n	8010290 <listen_message_reliably+0x228>
 801027a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 801027e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010282:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010288:	4629      	mov	r1, r5
 801028a:	4640      	mov	r0, r8
 801028c:	f7ff fd64 	bl	800fd58 <read_submessage_list>
 8010290:	2204      	movs	r2, #4
 8010292:	4629      	mov	r1, r5
 8010294:	4638      	mov	r0, r7
 8010296:	f006 fdb5 	bl	8016e04 <uxr_next_input_reliable_buffer_available>
 801029a:	2800      	cmp	r0, #0
 801029c:	d1ed      	bne.n	801027a <listen_message_reliably+0x212>
 801029e:	4640      	mov	r0, r8
 80102a0:	4632      	mov	r2, r6
 80102a2:	4649      	mov	r1, r9
 80102a4:	f7ff fbc2 	bl	800fa2c <write_submessage_acknack.isra.0>
 80102a8:	4620      	mov	r0, r4
 80102aa:	b01d      	add	sp, #116	@ 0x74
 80102ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b0:	4631      	mov	r1, r6
 80102b2:	f108 0008 	add.w	r0, r8, #8
 80102b6:	f001 f9fb 	bl	80116b0 <uxr_get_input_best_effort_stream>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d099      	beq.n	80101f2 <listen_message_reliably+0x18a>
 80102be:	4651      	mov	r1, sl
 80102c0:	f006 fc8c 	bl	8016bdc <uxr_receive_best_effort_message>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d094      	beq.n	80101f2 <listen_message_reliably+0x18a>
 80102c8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80102cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102ce:	a90c      	add	r1, sp, #48	@ 0x30
 80102d0:	4640      	mov	r0, r8
 80102d2:	f7ff fd41 	bl	800fd58 <read_submessage_list>
 80102d6:	e78c      	b.n	80101f2 <listen_message_reliably+0x18a>
 80102d8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80102dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102de:	a90c      	add	r1, sp, #48	@ 0x30
 80102e0:	4640      	mov	r0, r8
 80102e2:	f7ff fd39 	bl	800fd58 <read_submessage_list>
 80102e6:	e7c4      	b.n	8010272 <listen_message_reliably+0x20a>

080102e8 <uxr_run_session_timeout>:
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	4604      	mov	r4, r0
 80102ec:	460d      	mov	r5, r1
 80102ee:	f001 fa4f 	bl	8011790 <uxr_millis>
 80102f2:	4606      	mov	r6, r0
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7ff fc71 	bl	800fbdc <uxr_flash_output_streams>
 80102fa:	4629      	mov	r1, r5
 80102fc:	4620      	mov	r0, r4
 80102fe:	f7ff feb3 	bl	8010068 <listen_message_reliably>
 8010302:	f001 fa45 	bl	8011790 <uxr_millis>
 8010306:	1b83      	subs	r3, r0, r6
 8010308:	1ae9      	subs	r1, r5, r3
 801030a:	2900      	cmp	r1, #0
 801030c:	dcf6      	bgt.n	80102fc <uxr_run_session_timeout+0x14>
 801030e:	f104 0008 	add.w	r0, r4, #8
 8010312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010316:	f001 b9df 	b.w	80116d8 <uxr_output_streams_confirmed>
 801031a:	bf00      	nop

0801031c <uxr_run_session_until_data>:
 801031c:	b570      	push	{r4, r5, r6, lr}
 801031e:	4604      	mov	r4, r0
 8010320:	460d      	mov	r5, r1
 8010322:	f001 fa35 	bl	8011790 <uxr_millis>
 8010326:	4606      	mov	r6, r0
 8010328:	4620      	mov	r0, r4
 801032a:	f7ff fc57 	bl	800fbdc <uxr_flash_output_streams>
 801032e:	2300      	movs	r3, #0
 8010330:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010334:	4629      	mov	r1, r5
 8010336:	e005      	b.n	8010344 <uxr_run_session_until_data+0x28>
 8010338:	f001 fa2a 	bl	8011790 <uxr_millis>
 801033c:	1b83      	subs	r3, r0, r6
 801033e:	1ae9      	subs	r1, r5, r3
 8010340:	2900      	cmp	r1, #0
 8010342:	dd07      	ble.n	8010354 <uxr_run_session_until_data+0x38>
 8010344:	4620      	mov	r0, r4
 8010346:	f7ff fe8f 	bl	8010068 <listen_message_reliably>
 801034a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801034e:	2800      	cmp	r0, #0
 8010350:	d0f2      	beq.n	8010338 <uxr_run_session_until_data+0x1c>
 8010352:	bd70      	pop	{r4, r5, r6, pc}
 8010354:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010358:	bd70      	pop	{r4, r5, r6, pc}
 801035a:	bf00      	nop

0801035c <uxr_run_session_until_confirm_delivery>:
 801035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010360:	4606      	mov	r6, r0
 8010362:	460d      	mov	r5, r1
 8010364:	f001 fa14 	bl	8011790 <uxr_millis>
 8010368:	4607      	mov	r7, r0
 801036a:	4630      	mov	r0, r6
 801036c:	f7ff fc36 	bl	800fbdc <uxr_flash_output_streams>
 8010370:	2d00      	cmp	r5, #0
 8010372:	f106 0808 	add.w	r8, r6, #8
 8010376:	bfa8      	it	ge
 8010378:	462c      	movge	r4, r5
 801037a:	da07      	bge.n	801038c <uxr_run_session_until_confirm_delivery+0x30>
 801037c:	e00e      	b.n	801039c <uxr_run_session_until_confirm_delivery+0x40>
 801037e:	f7ff fe73 	bl	8010068 <listen_message_reliably>
 8010382:	f001 fa05 	bl	8011790 <uxr_millis>
 8010386:	1bc3      	subs	r3, r0, r7
 8010388:	1aec      	subs	r4, r5, r3
 801038a:	d407      	bmi.n	801039c <uxr_run_session_until_confirm_delivery+0x40>
 801038c:	4640      	mov	r0, r8
 801038e:	f001 f9a3 	bl	80116d8 <uxr_output_streams_confirmed>
 8010392:	4603      	mov	r3, r0
 8010394:	4621      	mov	r1, r4
 8010396:	4630      	mov	r0, r6
 8010398:	2b00      	cmp	r3, #0
 801039a:	d0f0      	beq.n	801037e <uxr_run_session_until_confirm_delivery+0x22>
 801039c:	4640      	mov	r0, r8
 801039e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103a2:	f001 b999 	b.w	80116d8 <uxr_output_streams_confirmed>
 80103a6:	bf00      	nop

080103a8 <uxr_run_session_until_all_status>:
 80103a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103ac:	9c08      	ldr	r4, [sp, #32]
 80103ae:	4606      	mov	r6, r0
 80103b0:	460f      	mov	r7, r1
 80103b2:	4691      	mov	r9, r2
 80103b4:	461d      	mov	r5, r3
 80103b6:	f7ff fc11 	bl	800fbdc <uxr_flash_output_streams>
 80103ba:	b124      	cbz	r4, 80103c6 <uxr_run_session_until_all_status+0x1e>
 80103bc:	4622      	mov	r2, r4
 80103be:	21ff      	movs	r1, #255	@ 0xff
 80103c0:	4628      	mov	r0, r5
 80103c2:	f008 fa63 	bl	801888c <memset>
 80103c6:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80103ca:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80103cc:	f001 f9e0 	bl	8011790 <uxr_millis>
 80103d0:	3d01      	subs	r5, #1
 80103d2:	f1a9 0902 	sub.w	r9, r9, #2
 80103d6:	4680      	mov	r8, r0
 80103d8:	4639      	mov	r1, r7
 80103da:	4630      	mov	r0, r6
 80103dc:	f7ff fe44 	bl	8010068 <listen_message_reliably>
 80103e0:	f001 f9d6 	bl	8011790 <uxr_millis>
 80103e4:	eba0 0008 	sub.w	r0, r0, r8
 80103e8:	1a39      	subs	r1, r7, r0
 80103ea:	b344      	cbz	r4, 801043e <uxr_run_session_until_all_status+0x96>
 80103ec:	4628      	mov	r0, r5
 80103ee:	46ac      	mov	ip, r5
 80103f0:	2301      	movs	r3, #1
 80103f2:	e002      	b.n	80103fa <uxr_run_session_until_all_status+0x52>
 80103f4:	42a3      	cmp	r3, r4
 80103f6:	d20d      	bcs.n	8010414 <uxr_run_session_until_all_status+0x6c>
 80103f8:	3301      	adds	r3, #1
 80103fa:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80103fe:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010402:	d1f7      	bne.n	80103f4 <uxr_run_session_until_all_status+0x4c>
 8010404:	42a3      	cmp	r3, r4
 8010406:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801040a:	d213      	bcs.n	8010434 <uxr_run_session_until_all_status+0x8c>
 801040c:	2a00      	cmp	r2, #0
 801040e:	d0f3      	beq.n	80103f8 <uxr_run_session_until_all_status+0x50>
 8010410:	2900      	cmp	r1, #0
 8010412:	dce2      	bgt.n	80103da <uxr_run_session_until_all_status+0x32>
 8010414:	2300      	movs	r3, #0
 8010416:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010418:	442c      	add	r4, r5
 801041a:	e001      	b.n	8010420 <uxr_run_session_until_all_status+0x78>
 801041c:	2b01      	cmp	r3, #1
 801041e:	d812      	bhi.n	8010446 <uxr_run_session_until_all_status+0x9e>
 8010420:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010424:	4284      	cmp	r4, r0
 8010426:	d1f9      	bne.n	801041c <uxr_run_session_until_all_status+0x74>
 8010428:	2b01      	cmp	r3, #1
 801042a:	bf8c      	ite	hi
 801042c:	2000      	movhi	r0, #0
 801042e:	2001      	movls	r0, #1
 8010430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010434:	2900      	cmp	r1, #0
 8010436:	dded      	ble.n	8010414 <uxr_run_session_until_all_status+0x6c>
 8010438:	2a00      	cmp	r2, #0
 801043a:	d1ce      	bne.n	80103da <uxr_run_session_until_all_status+0x32>
 801043c:	e7ea      	b.n	8010414 <uxr_run_session_until_all_status+0x6c>
 801043e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010440:	2001      	movs	r0, #1
 8010442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010446:	2000      	movs	r0, #0
 8010448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801044c:	0000      	movs	r0, r0
	...

08010450 <uxr_sync_session>:
 8010450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010452:	b093      	sub	sp, #76	@ 0x4c
 8010454:	4604      	mov	r4, r0
 8010456:	460d      	mov	r5, r1
 8010458:	f000 fb52 	bl	8010b00 <uxr_session_header_offset>
 801045c:	2214      	movs	r2, #20
 801045e:	eb0d 0102 	add.w	r1, sp, r2
 8010462:	9000      	str	r0, [sp, #0]
 8010464:	2300      	movs	r3, #0
 8010466:	a80a      	add	r0, sp, #40	@ 0x28
 8010468:	f7fb fd1c 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 801046c:	2300      	movs	r3, #0
 801046e:	2208      	movs	r2, #8
 8010470:	210e      	movs	r1, #14
 8010472:	a80a      	add	r0, sp, #40	@ 0x28
 8010474:	f001 f946 	bl	8011704 <uxr_buffer_submessage_header>
 8010478:	f001 f9a4 	bl	80117c4 <uxr_nanos>
 801047c:	a31c      	add	r3, pc, #112	@ (adr r3, 80104f0 <uxr_sync_session+0xa0>)
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	460e      	mov	r6, r1
 8010484:	4607      	mov	r7, r0
 8010486:	f7f0 fbc7 	bl	8000c18 <__aeabi_ldivmod>
 801048a:	4631      	mov	r1, r6
 801048c:	9003      	str	r0, [sp, #12]
 801048e:	a318      	add	r3, pc, #96	@ (adr r3, 80104f0 <uxr_sync_session+0xa0>)
 8010490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010494:	4638      	mov	r0, r7
 8010496:	f7f0 fbbf 	bl	8000c18 <__aeabi_ldivmod>
 801049a:	a903      	add	r1, sp, #12
 801049c:	a80a      	add	r0, sp, #40	@ 0x28
 801049e:	9204      	str	r2, [sp, #16]
 80104a0:	f002 fa50 	bl	8012944 <uxr_serialize_TIMESTAMP_Payload>
 80104a4:	2200      	movs	r2, #0
 80104a6:	4611      	mov	r1, r2
 80104a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 fad2 	bl	8010a54 <uxr_stamp_session_header>
 80104b0:	a80a      	add	r0, sp, #40	@ 0x28
 80104b2:	f7fb fd35 	bl	800bf20 <ucdr_buffer_length>
 80104b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80104b8:	4602      	mov	r2, r0
 80104ba:	a905      	add	r1, sp, #20
 80104bc:	e9d3 0600 	ldrd	r0, r6, [r3]
 80104c0:	47b0      	blx	r6
 80104c2:	f001 f965 	bl	8011790 <uxr_millis>
 80104c6:	2300      	movs	r3, #0
 80104c8:	4606      	mov	r6, r0
 80104ca:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80104ce:	4629      	mov	r1, r5
 80104d0:	e000      	b.n	80104d4 <uxr_sync_session+0x84>
 80104d2:	b950      	cbnz	r0, 80104ea <uxr_sync_session+0x9a>
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7ff fdc7 	bl	8010068 <listen_message_reliably>
 80104da:	f001 f959 	bl	8011790 <uxr_millis>
 80104de:	1b83      	subs	r3, r0, r6
 80104e0:	1ae9      	subs	r1, r5, r3
 80104e2:	2900      	cmp	r1, #0
 80104e4:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80104e8:	dcf3      	bgt.n	80104d2 <uxr_sync_session+0x82>
 80104ea:	b013      	add	sp, #76	@ 0x4c
 80104ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ee:	bf00      	nop
 80104f0:	3b9aca00 	.word	0x3b9aca00
 80104f4:	00000000 	.word	0x00000000

080104f8 <wait_session_status>:
 80104f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fc:	4604      	mov	r4, r0
 80104fe:	b09d      	sub	sp, #116	@ 0x74
 8010500:	20ff      	movs	r0, #255	@ 0xff
 8010502:	7160      	strb	r0, [r4, #5]
 8010504:	9303      	str	r3, [sp, #12]
 8010506:	2b00      	cmp	r3, #0
 8010508:	f000 80b6 	beq.w	8010678 <wait_session_status+0x180>
 801050c:	468a      	mov	sl, r1
 801050e:	4691      	mov	r9, r2
 8010510:	f04f 0b00 	mov.w	fp, #0
 8010514:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010516:	464a      	mov	r2, r9
 8010518:	e9d3 0500 	ldrd	r0, r5, [r3]
 801051c:	4651      	mov	r1, sl
 801051e:	47a8      	blx	r5
 8010520:	f001 f936 	bl	8011790 <uxr_millis>
 8010524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010528:	4605      	mov	r5, r0
 801052a:	e009      	b.n	8010540 <wait_session_status+0x48>
 801052c:	f001 f930 	bl	8011790 <uxr_millis>
 8010530:	1b40      	subs	r0, r0, r5
 8010532:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010536:	2b00      	cmp	r3, #0
 8010538:	dd40      	ble.n	80105bc <wait_session_status+0xc4>
 801053a:	7960      	ldrb	r0, [r4, #5]
 801053c:	28ff      	cmp	r0, #255	@ 0xff
 801053e:	d145      	bne.n	80105cc <wait_session_status+0xd4>
 8010540:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010542:	a908      	add	r1, sp, #32
 8010544:	6896      	ldr	r6, [r2, #8]
 8010546:	6810      	ldr	r0, [r2, #0]
 8010548:	aa09      	add	r2, sp, #36	@ 0x24
 801054a:	47b0      	blx	r6
 801054c:	2800      	cmp	r0, #0
 801054e:	d0ed      	beq.n	801052c <wait_session_status+0x34>
 8010550:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010554:	a80c      	add	r0, sp, #48	@ 0x30
 8010556:	f7fb fcb7 	bl	800bec8 <ucdr_init_buffer>
 801055a:	2600      	movs	r6, #0
 801055c:	f10d 031e 	add.w	r3, sp, #30
 8010560:	aa07      	add	r2, sp, #28
 8010562:	a90c      	add	r1, sp, #48	@ 0x30
 8010564:	4620      	mov	r0, r4
 8010566:	f88d 601c 	strb.w	r6, [sp, #28]
 801056a:	f000 fa87 	bl	8010a7c <uxr_read_session_header>
 801056e:	2800      	cmp	r0, #0
 8010570:	d0dc      	beq.n	801052c <wait_session_status+0x34>
 8010572:	4631      	mov	r1, r6
 8010574:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010578:	f000 ffb6 	bl	80114e8 <uxr_stream_id_from_raw>
 801057c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010580:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010584:	9302      	str	r3, [sp, #8]
 8010586:	2f01      	cmp	r7, #1
 8010588:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801058c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010590:	d05c      	beq.n	801064c <wait_session_status+0x154>
 8010592:	2f02      	cmp	r7, #2
 8010594:	d020      	beq.n	80105d8 <wait_session_status+0xe0>
 8010596:	2f00      	cmp	r7, #0
 8010598:	d1c8      	bne.n	801052c <wait_session_status+0x34>
 801059a:	4639      	mov	r1, r7
 801059c:	4638      	mov	r0, r7
 801059e:	f000 ffa3 	bl	80114e8 <uxr_stream_id_from_raw>
 80105a2:	a90c      	add	r1, sp, #48	@ 0x30
 80105a4:	4602      	mov	r2, r0
 80105a6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80105a8:	4620      	mov	r0, r4
 80105aa:	f7ff fbd5 	bl	800fd58 <read_submessage_list>
 80105ae:	f001 f8ef 	bl	8011790 <uxr_millis>
 80105b2:	1b40      	subs	r0, r0, r5
 80105b4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	dcbe      	bgt.n	801053a <wait_session_status+0x42>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	7960      	ldrb	r0, [r4, #5]
 80105c0:	f10b 0b01 	add.w	fp, fp, #1
 80105c4:	455b      	cmp	r3, fp
 80105c6:	d001      	beq.n	80105cc <wait_session_status+0xd4>
 80105c8:	28ff      	cmp	r0, #255	@ 0xff
 80105ca:	d0a3      	beq.n	8010514 <wait_session_status+0x1c>
 80105cc:	38ff      	subs	r0, #255	@ 0xff
 80105ce:	bf18      	it	ne
 80105d0:	2001      	movne	r0, #1
 80105d2:	b01d      	add	sp, #116	@ 0x74
 80105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80105dc:	9304      	str	r3, [sp, #16]
 80105de:	4631      	mov	r1, r6
 80105e0:	f104 0008 	add.w	r0, r4, #8
 80105e4:	f001 f86e 	bl	80116c4 <uxr_get_input_reliable_stream>
 80105e8:	4680      	mov	r8, r0
 80105ea:	b348      	cbz	r0, 8010640 <wait_session_status+0x148>
 80105ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105ee:	9205      	str	r2, [sp, #20]
 80105f0:	a80c      	add	r0, sp, #48	@ 0x30
 80105f2:	f7fb fc99 	bl	800bf28 <ucdr_buffer_remaining>
 80105f6:	4603      	mov	r3, r0
 80105f8:	f10d 001d 	add.w	r0, sp, #29
 80105fc:	9000      	str	r0, [sp, #0]
 80105fe:	9a05      	ldr	r2, [sp, #20]
 8010600:	9902      	ldr	r1, [sp, #8]
 8010602:	4640      	mov	r0, r8
 8010604:	f006 fb7e 	bl	8016d04 <uxr_receive_reliable_message>
 8010608:	b1d0      	cbz	r0, 8010640 <wait_session_status+0x148>
 801060a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d03a      	beq.n	8010688 <wait_session_status+0x190>
 8010612:	9f04      	ldr	r7, [sp, #16]
 8010614:	e00a      	b.n	801062c <wait_session_status+0x134>
 8010616:	f04f 0302 	mov.w	r3, #2
 801061a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801061e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010622:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010626:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010628:	f7ff fb96 	bl	800fd58 <read_submessage_list>
 801062c:	a914      	add	r1, sp, #80	@ 0x50
 801062e:	2204      	movs	r2, #4
 8010630:	4640      	mov	r0, r8
 8010632:	f006 fbe7 	bl	8016e04 <uxr_next_input_reliable_buffer_available>
 8010636:	4603      	mov	r3, r0
 8010638:	a914      	add	r1, sp, #80	@ 0x50
 801063a:	4620      	mov	r0, r4
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1ea      	bne.n	8010616 <wait_session_status+0x11e>
 8010640:	9904      	ldr	r1, [sp, #16]
 8010642:	4632      	mov	r2, r6
 8010644:	4620      	mov	r0, r4
 8010646:	f7ff f9f1 	bl	800fa2c <write_submessage_acknack.isra.0>
 801064a:	e76f      	b.n	801052c <wait_session_status+0x34>
 801064c:	4631      	mov	r1, r6
 801064e:	f104 0008 	add.w	r0, r4, #8
 8010652:	f001 f82d 	bl	80116b0 <uxr_get_input_best_effort_stream>
 8010656:	2800      	cmp	r0, #0
 8010658:	f43f af68 	beq.w	801052c <wait_session_status+0x34>
 801065c:	9902      	ldr	r1, [sp, #8]
 801065e:	f006 fabd 	bl	8016bdc <uxr_receive_best_effort_message>
 8010662:	2800      	cmp	r0, #0
 8010664:	f43f af62 	beq.w	801052c <wait_session_status+0x34>
 8010668:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801066c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801066e:	a90c      	add	r1, sp, #48	@ 0x30
 8010670:	4620      	mov	r0, r4
 8010672:	f7ff fb71 	bl	800fd58 <read_submessage_list>
 8010676:	e759      	b.n	801052c <wait_session_status+0x34>
 8010678:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801067a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801067e:	47a0      	blx	r4
 8010680:	2001      	movs	r0, #1
 8010682:	b01d      	add	sp, #116	@ 0x74
 8010684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010688:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801068c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801068e:	a90c      	add	r1, sp, #48	@ 0x30
 8010690:	4620      	mov	r0, r4
 8010692:	f7ff fb61 	bl	800fd58 <read_submessage_list>
 8010696:	e7bc      	b.n	8010612 <wait_session_status+0x11a>

08010698 <uxr_delete_session_retries>:
 8010698:	b530      	push	{r4, r5, lr}
 801069a:	b08f      	sub	sp, #60	@ 0x3c
 801069c:	4604      	mov	r4, r0
 801069e:	460d      	mov	r5, r1
 80106a0:	f000 fa2e 	bl	8010b00 <uxr_session_header_offset>
 80106a4:	2300      	movs	r3, #0
 80106a6:	2210      	movs	r2, #16
 80106a8:	9000      	str	r0, [sp, #0]
 80106aa:	a902      	add	r1, sp, #8
 80106ac:	a806      	add	r0, sp, #24
 80106ae:	f7fb fbf9 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 80106b2:	a906      	add	r1, sp, #24
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 f973 	bl	80109a0 <uxr_buffer_delete_session>
 80106ba:	2200      	movs	r2, #0
 80106bc:	4611      	mov	r1, r2
 80106be:	9b06      	ldr	r3, [sp, #24]
 80106c0:	4620      	mov	r0, r4
 80106c2:	f000 f9c7 	bl	8010a54 <uxr_stamp_session_header>
 80106c6:	a806      	add	r0, sp, #24
 80106c8:	f7fb fc2a 	bl	800bf20 <ucdr_buffer_length>
 80106cc:	462b      	mov	r3, r5
 80106ce:	4602      	mov	r2, r0
 80106d0:	a902      	add	r1, sp, #8
 80106d2:	4620      	mov	r0, r4
 80106d4:	f7ff ff10 	bl	80104f8 <wait_session_status>
 80106d8:	b118      	cbz	r0, 80106e2 <uxr_delete_session_retries+0x4a>
 80106da:	7960      	ldrb	r0, [r4, #5]
 80106dc:	fab0 f080 	clz	r0, r0
 80106e0:	0940      	lsrs	r0, r0, #5
 80106e2:	b00f      	add	sp, #60	@ 0x3c
 80106e4:	bd30      	pop	{r4, r5, pc}
 80106e6:	bf00      	nop

080106e8 <uxr_create_session>:
 80106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	f100 0b08 	add.w	fp, r0, #8
 80106f0:	b0ab      	sub	sp, #172	@ 0xac
 80106f2:	4604      	mov	r4, r0
 80106f4:	4658      	mov	r0, fp
 80106f6:	f000 ff2b 	bl	8011550 <uxr_reset_stream_storage>
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 fa00 	bl	8010b00 <uxr_session_header_offset>
 8010700:	2300      	movs	r3, #0
 8010702:	9000      	str	r0, [sp, #0]
 8010704:	221c      	movs	r2, #28
 8010706:	a90b      	add	r1, sp, #44	@ 0x2c
 8010708:	a812      	add	r0, sp, #72	@ 0x48
 801070a:	f7fb fbcb 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 801070e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010710:	8a1a      	ldrh	r2, [r3, #16]
 8010712:	3a04      	subs	r2, #4
 8010714:	b292      	uxth	r2, r2
 8010716:	a912      	add	r1, sp, #72	@ 0x48
 8010718:	4620      	mov	r0, r4
 801071a:	f000 f917 	bl	801094c <uxr_buffer_create_session>
 801071e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010720:	4620      	mov	r0, r4
 8010722:	f000 f983 	bl	8010a2c <uxr_stamp_create_session_header>
 8010726:	a812      	add	r0, sp, #72	@ 0x48
 8010728:	f7fb fbfa 	bl	800bf20 <ucdr_buffer_length>
 801072c:	23ff      	movs	r3, #255	@ 0xff
 801072e:	7163      	strb	r3, [r4, #5]
 8010730:	230a      	movs	r3, #10
 8010732:	46da      	mov	sl, fp
 8010734:	9303      	str	r3, [sp, #12]
 8010736:	4683      	mov	fp, r0
 8010738:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801073a:	465a      	mov	r2, fp
 801073c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010740:	a90b      	add	r1, sp, #44	@ 0x2c
 8010742:	47a8      	blx	r5
 8010744:	f001 f824 	bl	8011790 <uxr_millis>
 8010748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801074c:	4605      	mov	r5, r0
 801074e:	e009      	b.n	8010764 <uxr_create_session+0x7c>
 8010750:	f001 f81e 	bl	8011790 <uxr_millis>
 8010754:	1b40      	subs	r0, r0, r5
 8010756:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801075a:	2b00      	cmp	r3, #0
 801075c:	7962      	ldrb	r2, [r4, #5]
 801075e:	dd38      	ble.n	80107d2 <uxr_create_session+0xea>
 8010760:	2aff      	cmp	r2, #255	@ 0xff
 8010762:	d13c      	bne.n	80107de <uxr_create_session+0xf6>
 8010764:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010766:	a907      	add	r1, sp, #28
 8010768:	6896      	ldr	r6, [r2, #8]
 801076a:	6810      	ldr	r0, [r2, #0]
 801076c:	aa08      	add	r2, sp, #32
 801076e:	47b0      	blx	r6
 8010770:	2800      	cmp	r0, #0
 8010772:	d0ed      	beq.n	8010750 <uxr_create_session+0x68>
 8010774:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010778:	a81a      	add	r0, sp, #104	@ 0x68
 801077a:	f7fb fba5 	bl	800bec8 <ucdr_init_buffer>
 801077e:	2600      	movs	r6, #0
 8010780:	f10d 031a 	add.w	r3, sp, #26
 8010784:	aa06      	add	r2, sp, #24
 8010786:	a91a      	add	r1, sp, #104	@ 0x68
 8010788:	4620      	mov	r0, r4
 801078a:	f88d 6018 	strb.w	r6, [sp, #24]
 801078e:	f000 f975 	bl	8010a7c <uxr_read_session_header>
 8010792:	2800      	cmp	r0, #0
 8010794:	d0dc      	beq.n	8010750 <uxr_create_session+0x68>
 8010796:	4631      	mov	r1, r6
 8010798:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801079c:	f000 fea4 	bl	80114e8 <uxr_stream_id_from_raw>
 80107a0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80107a4:	2e01      	cmp	r6, #1
 80107a6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80107aa:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80107ae:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80107b2:	d053      	beq.n	801085c <uxr_create_session+0x174>
 80107b4:	2e02      	cmp	r6, #2
 80107b6:	d018      	beq.n	80107ea <uxr_create_session+0x102>
 80107b8:	2e00      	cmp	r6, #0
 80107ba:	d1c9      	bne.n	8010750 <uxr_create_session+0x68>
 80107bc:	4631      	mov	r1, r6
 80107be:	4630      	mov	r0, r6
 80107c0:	f000 fe92 	bl	80114e8 <uxr_stream_id_from_raw>
 80107c4:	a91a      	add	r1, sp, #104	@ 0x68
 80107c6:	4602      	mov	r2, r0
 80107c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7ff fac4 	bl	800fd58 <read_submessage_list>
 80107d0:	e7be      	b.n	8010750 <uxr_create_session+0x68>
 80107d2:	9b03      	ldr	r3, [sp, #12]
 80107d4:	3b01      	subs	r3, #1
 80107d6:	9303      	str	r3, [sp, #12]
 80107d8:	d001      	beq.n	80107de <uxr_create_session+0xf6>
 80107da:	2aff      	cmp	r2, #255	@ 0xff
 80107dc:	d0ac      	beq.n	8010738 <uxr_create_session+0x50>
 80107de:	2a00      	cmp	r2, #0
 80107e0:	d051      	beq.n	8010886 <uxr_create_session+0x19e>
 80107e2:	2000      	movs	r0, #0
 80107e4:	b02b      	add	sp, #172	@ 0xac
 80107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80107ee:	9304      	str	r3, [sp, #16]
 80107f0:	4639      	mov	r1, r7
 80107f2:	4650      	mov	r0, sl
 80107f4:	f000 ff66 	bl	80116c4 <uxr_get_input_reliable_stream>
 80107f8:	4680      	mov	r8, r0
 80107fa:	b348      	cbz	r0, 8010850 <uxr_create_session+0x168>
 80107fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80107fe:	9205      	str	r2, [sp, #20]
 8010800:	a81a      	add	r0, sp, #104	@ 0x68
 8010802:	f7fb fb91 	bl	800bf28 <ucdr_buffer_remaining>
 8010806:	4603      	mov	r3, r0
 8010808:	f10d 0019 	add.w	r0, sp, #25
 801080c:	9000      	str	r0, [sp, #0]
 801080e:	9a05      	ldr	r2, [sp, #20]
 8010810:	4649      	mov	r1, r9
 8010812:	4640      	mov	r0, r8
 8010814:	f006 fa76 	bl	8016d04 <uxr_receive_reliable_message>
 8010818:	b1d0      	cbz	r0, 8010850 <uxr_create_session+0x168>
 801081a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d038      	beq.n	8010894 <uxr_create_session+0x1ac>
 8010822:	9e04      	ldr	r6, [sp, #16]
 8010824:	e00a      	b.n	801083c <uxr_create_session+0x154>
 8010826:	f04f 0302 	mov.w	r3, #2
 801082a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801082e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010838:	f7ff fa8e 	bl	800fd58 <read_submessage_list>
 801083c:	a922      	add	r1, sp, #136	@ 0x88
 801083e:	2204      	movs	r2, #4
 8010840:	4640      	mov	r0, r8
 8010842:	f006 fadf 	bl	8016e04 <uxr_next_input_reliable_buffer_available>
 8010846:	4603      	mov	r3, r0
 8010848:	a922      	add	r1, sp, #136	@ 0x88
 801084a:	4620      	mov	r0, r4
 801084c:	2b00      	cmp	r3, #0
 801084e:	d1ea      	bne.n	8010826 <uxr_create_session+0x13e>
 8010850:	9904      	ldr	r1, [sp, #16]
 8010852:	463a      	mov	r2, r7
 8010854:	4620      	mov	r0, r4
 8010856:	f7ff f8e9 	bl	800fa2c <write_submessage_acknack.isra.0>
 801085a:	e779      	b.n	8010750 <uxr_create_session+0x68>
 801085c:	4639      	mov	r1, r7
 801085e:	4650      	mov	r0, sl
 8010860:	f000 ff26 	bl	80116b0 <uxr_get_input_best_effort_stream>
 8010864:	2800      	cmp	r0, #0
 8010866:	f43f af73 	beq.w	8010750 <uxr_create_session+0x68>
 801086a:	4649      	mov	r1, r9
 801086c:	f006 f9b6 	bl	8016bdc <uxr_receive_best_effort_message>
 8010870:	2800      	cmp	r0, #0
 8010872:	f43f af6d 	beq.w	8010750 <uxr_create_session+0x68>
 8010876:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801087a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801087c:	a91a      	add	r1, sp, #104	@ 0x68
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff fa6a 	bl	800fd58 <read_submessage_list>
 8010884:	e764      	b.n	8010750 <uxr_create_session+0x68>
 8010886:	4650      	mov	r0, sl
 8010888:	f000 fe62 	bl	8011550 <uxr_reset_stream_storage>
 801088c:	2001      	movs	r0, #1
 801088e:	b02b      	add	sp, #172	@ 0xac
 8010890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010894:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010898:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801089a:	a91a      	add	r1, sp, #104	@ 0x68
 801089c:	4620      	mov	r0, r4
 801089e:	f7ff fa5b 	bl	800fd58 <read_submessage_list>
 80108a2:	e7be      	b.n	8010822 <uxr_create_session+0x13a>

080108a4 <uxr_prepare_stream_to_write_submessage>:
 80108a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a8:	b082      	sub	sp, #8
 80108aa:	4682      	mov	sl, r0
 80108ac:	4610      	mov	r0, r2
 80108ae:	4615      	mov	r5, r2
 80108b0:	461e      	mov	r6, r3
 80108b2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80108b6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80108ba:	9101      	str	r1, [sp, #4]
 80108bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80108c0:	f000 ff60 	bl	8011784 <uxr_submessage_padding>
 80108c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80108c8:	f105 0904 	add.w	r9, r5, #4
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	4481      	add	r9, r0
 80108d0:	d01d      	beq.n	801090e <uxr_prepare_stream_to_write_submessage+0x6a>
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d116      	bne.n	8010904 <uxr_prepare_stream_to_write_submessage+0x60>
 80108d6:	4621      	mov	r1, r4
 80108d8:	f10a 0008 	add.w	r0, sl, #8
 80108dc:	f000 fede 	bl	801169c <uxr_get_output_reliable_stream>
 80108e0:	4604      	mov	r4, r0
 80108e2:	b158      	cbz	r0, 80108fc <uxr_prepare_stream_to_write_submessage+0x58>
 80108e4:	4649      	mov	r1, r9
 80108e6:	4632      	mov	r2, r6
 80108e8:	f006 fc48 	bl	801717c <uxr_prepare_reliable_buffer_to_write>
 80108ec:	4604      	mov	r4, r0
 80108ee:	b12c      	cbz	r4, 80108fc <uxr_prepare_stream_to_write_submessage+0x58>
 80108f0:	4643      	mov	r3, r8
 80108f2:	b2aa      	uxth	r2, r5
 80108f4:	4639      	mov	r1, r7
 80108f6:	4630      	mov	r0, r6
 80108f8:	f000 ff04 	bl	8011704 <uxr_buffer_submessage_header>
 80108fc:	4620      	mov	r0, r4
 80108fe:	b002      	add	sp, #8
 8010900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010904:	2400      	movs	r4, #0
 8010906:	4620      	mov	r0, r4
 8010908:	b002      	add	sp, #8
 801090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090e:	4621      	mov	r1, r4
 8010910:	f10a 0008 	add.w	r0, sl, #8
 8010914:	f000 feba 	bl	801168c <uxr_get_output_best_effort_stream>
 8010918:	4604      	mov	r4, r0
 801091a:	2800      	cmp	r0, #0
 801091c:	d0ee      	beq.n	80108fc <uxr_prepare_stream_to_write_submessage+0x58>
 801091e:	4649      	mov	r1, r9
 8010920:	4632      	mov	r2, r6
 8010922:	f006 fb5b 	bl	8016fdc <uxr_prepare_best_effort_buffer_to_write>
 8010926:	4604      	mov	r4, r0
 8010928:	e7e1      	b.n	80108ee <uxr_prepare_stream_to_write_submessage+0x4a>
 801092a:	bf00      	nop

0801092c <uxr_init_session_info>:
 801092c:	0e13      	lsrs	r3, r2, #24
 801092e:	7043      	strb	r3, [r0, #1]
 8010930:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010934:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010938:	7001      	strb	r1, [r0, #0]
 801093a:	70c3      	strb	r3, [r0, #3]
 801093c:	2109      	movs	r1, #9
 801093e:	23ff      	movs	r3, #255	@ 0xff
 8010940:	f880 c002 	strb.w	ip, [r0, #2]
 8010944:	7102      	strb	r2, [r0, #4]
 8010946:	80c1      	strh	r1, [r0, #6]
 8010948:	7143      	strb	r3, [r0, #5]
 801094a:	4770      	bx	lr

0801094c <uxr_buffer_create_session>:
 801094c:	b530      	push	{r4, r5, lr}
 801094e:	b089      	sub	sp, #36	@ 0x24
 8010950:	2300      	movs	r3, #0
 8010952:	4d12      	ldr	r5, [pc, #72]	@ (801099c <uxr_buffer_create_session+0x50>)
 8010954:	9307      	str	r3, [sp, #28]
 8010956:	f8ad 201c 	strh.w	r2, [sp, #28]
 801095a:	2201      	movs	r2, #1
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	80c2      	strh	r2, [r0, #6]
 8010960:	f88d 2004 	strb.w	r2, [sp, #4]
 8010964:	682a      	ldr	r2, [r5, #0]
 8010966:	9200      	str	r2, [sp, #0]
 8010968:	88aa      	ldrh	r2, [r5, #4]
 801096a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801096e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010972:	9202      	str	r2, [sp, #8]
 8010974:	460c      	mov	r4, r1
 8010976:	7802      	ldrb	r2, [r0, #0]
 8010978:	9303      	str	r3, [sp, #12]
 801097a:	4619      	mov	r1, r3
 801097c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010980:	4620      	mov	r0, r4
 8010982:	2210      	movs	r2, #16
 8010984:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010988:	9306      	str	r3, [sp, #24]
 801098a:	f000 febb 	bl	8011704 <uxr_buffer_submessage_header>
 801098e:	4669      	mov	r1, sp
 8010990:	4620      	mov	r0, r4
 8010992:	f001 fe13 	bl	80125bc <uxr_serialize_CREATE_CLIENT_Payload>
 8010996:	b009      	add	sp, #36	@ 0x24
 8010998:	bd30      	pop	{r4, r5, pc}
 801099a:	bf00      	nop
 801099c:	0801af1c 	.word	0x0801af1c

080109a0 <uxr_buffer_delete_session>:
 80109a0:	b510      	push	{r4, lr}
 80109a2:	4b0c      	ldr	r3, [pc, #48]	@ (80109d4 <uxr_buffer_delete_session+0x34>)
 80109a4:	b082      	sub	sp, #8
 80109a6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80109aa:	f8ad c006 	strh.w	ip, [sp, #6]
 80109ae:	460c      	mov	r4, r1
 80109b0:	2202      	movs	r2, #2
 80109b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109b6:	80c2      	strh	r2, [r0, #6]
 80109b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80109bc:	2204      	movs	r2, #4
 80109be:	2300      	movs	r3, #0
 80109c0:	2103      	movs	r1, #3
 80109c2:	4620      	mov	r0, r4
 80109c4:	f000 fe9e 	bl	8011704 <uxr_buffer_submessage_header>
 80109c8:	a901      	add	r1, sp, #4
 80109ca:	4620      	mov	r0, r4
 80109cc:	f001 fe9c 	bl	8012708 <uxr_serialize_DELETE_Payload>
 80109d0:	b002      	add	sp, #8
 80109d2:	bd10      	pop	{r4, pc}
 80109d4:	0801af1c 	.word	0x0801af1c

080109d8 <uxr_read_create_session_status>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	b088      	sub	sp, #32
 80109dc:	4604      	mov	r4, r0
 80109de:	4608      	mov	r0, r1
 80109e0:	a901      	add	r1, sp, #4
 80109e2:	f001 fea1 	bl	8012728 <uxr_deserialize_STATUS_AGENT_Payload>
 80109e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80109ea:	7163      	strb	r3, [r4, #5]
 80109ec:	b008      	add	sp, #32
 80109ee:	bd10      	pop	{r4, pc}

080109f0 <uxr_read_delete_session_status>:
 80109f0:	b510      	push	{r4, lr}
 80109f2:	4604      	mov	r4, r0
 80109f4:	b084      	sub	sp, #16
 80109f6:	4608      	mov	r0, r1
 80109f8:	a902      	add	r1, sp, #8
 80109fa:	f001 fec5 	bl	8012788 <uxr_deserialize_STATUS_Payload>
 80109fe:	88e3      	ldrh	r3, [r4, #6]
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	d001      	beq.n	8010a08 <uxr_read_delete_session_status+0x18>
 8010a04:	b004      	add	sp, #16
 8010a06:	bd10      	pop	{r4, pc}
 8010a08:	f10d 000a 	add.w	r0, sp, #10
 8010a0c:	f7fe fe9e 	bl	800f74c <uxr_object_id_from_raw>
 8010a10:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010a14:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010a18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	bf04      	itt	eq
 8010a22:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010a26:	7163      	strbeq	r3, [r4, #5]
 8010a28:	b004      	add	sp, #16
 8010a2a:	bd10      	pop	{r4, pc}

08010a2c <uxr_stamp_create_session_header>:
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	2208      	movs	r2, #8
 8010a30:	b08a      	sub	sp, #40	@ 0x28
 8010a32:	4604      	mov	r4, r0
 8010a34:	eb0d 0002 	add.w	r0, sp, r2
 8010a38:	f7fb fa46 	bl	800bec8 <ucdr_init_buffer>
 8010a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a40:	9400      	str	r4, [sp, #0]
 8010a42:	2300      	movs	r3, #0
 8010a44:	461a      	mov	r2, r3
 8010a46:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010a4a:	a802      	add	r0, sp, #8
 8010a4c:	f001 f854 	bl	8011af8 <uxr_serialize_message_header>
 8010a50:	b00a      	add	sp, #40	@ 0x28
 8010a52:	bd10      	pop	{r4, pc}

08010a54 <uxr_stamp_session_header>:
 8010a54:	b530      	push	{r4, r5, lr}
 8010a56:	b08d      	sub	sp, #52	@ 0x34
 8010a58:	4604      	mov	r4, r0
 8010a5a:	460d      	mov	r5, r1
 8010a5c:	9203      	str	r2, [sp, #12]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	a804      	add	r0, sp, #16
 8010a62:	2208      	movs	r2, #8
 8010a64:	f7fb fa30 	bl	800bec8 <ucdr_init_buffer>
 8010a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a6c:	9b03      	ldr	r3, [sp, #12]
 8010a6e:	9400      	str	r4, [sp, #0]
 8010a70:	462a      	mov	r2, r5
 8010a72:	a804      	add	r0, sp, #16
 8010a74:	f001 f840 	bl	8011af8 <uxr_serialize_message_header>
 8010a78:	b00d      	add	sp, #52	@ 0x34
 8010a7a:	bd30      	pop	{r4, r5, pc}

08010a7c <uxr_read_session_header>:
 8010a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a80:	4607      	mov	r7, r0
 8010a82:	b084      	sub	sp, #16
 8010a84:	4608      	mov	r0, r1
 8010a86:	460c      	mov	r4, r1
 8010a88:	4615      	mov	r5, r2
 8010a8a:	461e      	mov	r6, r3
 8010a8c:	f7fb fa4c 	bl	800bf28 <ucdr_buffer_remaining>
 8010a90:	2808      	cmp	r0, #8
 8010a92:	d803      	bhi.n	8010a9c <uxr_read_session_header+0x20>
 8010a94:	2000      	movs	r0, #0
 8010a96:	b004      	add	sp, #16
 8010a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9c:	f10d 080c 	add.w	r8, sp, #12
 8010aa0:	4633      	mov	r3, r6
 8010aa2:	462a      	mov	r2, r5
 8010aa4:	f8cd 8000 	str.w	r8, [sp]
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f10d 010b 	add.w	r1, sp, #11
 8010aae:	f001 f841 	bl	8011b34 <uxr_deserialize_message_header>
 8010ab2:	783a      	ldrb	r2, [r7, #0]
 8010ab4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d1eb      	bne.n	8010a94 <uxr_read_session_header+0x18>
 8010abc:	061b      	lsls	r3, r3, #24
 8010abe:	d41c      	bmi.n	8010afa <uxr_read_session_header+0x7e>
 8010ac0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010ac4:	787b      	ldrb	r3, [r7, #1]
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d003      	beq.n	8010ad2 <uxr_read_session_header+0x56>
 8010aca:	2001      	movs	r0, #1
 8010acc:	f080 0001 	eor.w	r0, r0, #1
 8010ad0:	e7e1      	b.n	8010a96 <uxr_read_session_header+0x1a>
 8010ad2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010ad6:	78bb      	ldrb	r3, [r7, #2]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	f107 0102 	add.w	r1, r7, #2
 8010ade:	d1f4      	bne.n	8010aca <uxr_read_session_header+0x4e>
 8010ae0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010ae4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d1ee      	bne.n	8010aca <uxr_read_session_header+0x4e>
 8010aec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010af0:	784b      	ldrb	r3, [r1, #1]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d1e9      	bne.n	8010aca <uxr_read_session_header+0x4e>
 8010af6:	2000      	movs	r0, #0
 8010af8:	e7e8      	b.n	8010acc <uxr_read_session_header+0x50>
 8010afa:	2001      	movs	r0, #1
 8010afc:	e7cb      	b.n	8010a96 <uxr_read_session_header+0x1a>
 8010afe:	bf00      	nop

08010b00 <uxr_session_header_offset>:
 8010b00:	f990 3000 	ldrsb.w	r3, [r0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	bfac      	ite	ge
 8010b08:	2008      	movge	r0, #8
 8010b0a:	2004      	movlt	r0, #4
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop

08010b10 <uxr_init_base_object_request>:
 8010b10:	b510      	push	{r4, lr}
 8010b12:	88c3      	ldrh	r3, [r0, #6]
 8010b14:	b082      	sub	sp, #8
 8010b16:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8010b1a:	9101      	str	r1, [sp, #4]
 8010b1c:	f1a3 010a 	sub.w	r1, r3, #10
 8010b20:	b289      	uxth	r1, r1
 8010b22:	42a1      	cmp	r1, r4
 8010b24:	d80e      	bhi.n	8010b44 <uxr_init_base_object_request+0x34>
 8010b26:	3301      	adds	r3, #1
 8010b28:	b29c      	uxth	r4, r3
 8010b2a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	80c4      	strh	r4, [r0, #6]
 8010b32:	9801      	ldr	r0, [sp, #4]
 8010b34:	7011      	strb	r1, [r2, #0]
 8010b36:	7053      	strb	r3, [r2, #1]
 8010b38:	1c91      	adds	r1, r2, #2
 8010b3a:	f7fe fe1b 	bl	800f774 <uxr_object_id_to_raw>
 8010b3e:	4620      	mov	r0, r4
 8010b40:	b002      	add	sp, #8
 8010b42:	bd10      	pop	{r4, pc}
 8010b44:	230a      	movs	r3, #10
 8010b46:	2100      	movs	r1, #0
 8010b48:	461c      	mov	r4, r3
 8010b4a:	e7f1      	b.n	8010b30 <uxr_init_base_object_request+0x20>

08010b4c <uxr_parse_base_object_request>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	4604      	mov	r4, r0
 8010b50:	3002      	adds	r0, #2
 8010b52:	460d      	mov	r5, r1
 8010b54:	4616      	mov	r6, r2
 8010b56:	f7fe fdf9 	bl	800f74c <uxr_object_id_from_raw>
 8010b5a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010b5e:	8028      	strh	r0, [r5, #0]
 8010b60:	806b      	strh	r3, [r5, #2]
 8010b62:	7822      	ldrb	r2, [r4, #0]
 8010b64:	7863      	ldrb	r3, [r4, #1]
 8010b66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010b6a:	8033      	strh	r3, [r6, #0]
 8010b6c:	bd70      	pop	{r4, r5, r6, pc}
 8010b6e:	bf00      	nop

08010b70 <uxr_init_framing_io>:
 8010b70:	2300      	movs	r3, #0
 8010b72:	7041      	strb	r1, [r0, #1]
 8010b74:	7003      	strb	r3, [r0, #0]
 8010b76:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop

08010b7c <uxr_write_framed_msg>:
 8010b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b80:	4617      	mov	r7, r2
 8010b82:	7842      	ldrb	r2, [r0, #1]
 8010b84:	b083      	sub	sp, #12
 8010b86:	460e      	mov	r6, r1
 8010b88:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8010b8c:	469a      	mov	sl, r3
 8010b8e:	2901      	cmp	r1, #1
 8010b90:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8010b94:	4604      	mov	r4, r0
 8010b96:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8010b9a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010b9e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8010ba2:	f240 8137 	bls.w	8010e14 <uxr_write_framed_msg+0x298>
 8010ba6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8010baa:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8010bae:	2901      	cmp	r1, #1
 8010bb0:	f04f 0202 	mov.w	r2, #2
 8010bb4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010bb8:	f240 808f 	bls.w	8010cda <uxr_write_framed_msg+0x15e>
 8010bbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bbe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8010bc2:	b2dd      	uxtb	r5, r3
 8010bc4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010bc8:	2203      	movs	r2, #3
 8010bca:	2901      	cmp	r1, #1
 8010bcc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010bd0:	f240 809a 	bls.w	8010d08 <uxr_write_framed_msg+0x18c>
 8010bd4:	18a1      	adds	r1, r4, r2
 8010bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bd8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8010bdc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010be0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8010be4:	3201      	adds	r2, #1
 8010be6:	2801      	cmp	r0, #1
 8010be8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010bec:	f240 80a0 	bls.w	8010d30 <uxr_write_framed_msg+0x1b4>
 8010bf0:	18a0      	adds	r0, r4, r2
 8010bf2:	3201      	adds	r2, #1
 8010bf4:	b2d2      	uxtb	r2, r2
 8010bf6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010bfa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	f000 80a9 	beq.w	8010d56 <uxr_write_framed_msg+0x1da>
 8010c04:	f04f 0900 	mov.w	r9, #0
 8010c08:	46c8      	mov	r8, r9
 8010c0a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010c0e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010c12:	2901      	cmp	r1, #1
 8010c14:	f240 80c3 	bls.w	8010d9e <uxr_write_framed_msg+0x222>
 8010c18:	2a29      	cmp	r2, #41	@ 0x29
 8010c1a:	f200 809f 	bhi.w	8010d5c <uxr_write_framed_msg+0x1e0>
 8010c1e:	18a1      	adds	r1, r4, r2
 8010c20:	3201      	adds	r2, #1
 8010c22:	b2d2      	uxtb	r2, r2
 8010c24:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010c28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010c2c:	ea89 0303 	eor.w	r3, r9, r3
 8010c30:	498c      	ldr	r1, [pc, #560]	@ (8010e64 <uxr_write_framed_msg+0x2e8>)
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	f108 0801 	add.w	r8, r8, #1
 8010c38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010c3c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8010c40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c42:	4543      	cmp	r3, r8
 8010c44:	d8e1      	bhi.n	8010c0a <uxr_write_framed_msg+0x8e>
 8010c46:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010c4a:	fa5f f889 	uxtb.w	r8, r9
 8010c4e:	9301      	str	r3, [sp, #4]
 8010c50:	f04f 0900 	mov.w	r9, #0
 8010c54:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8010c58:	fa5f f18a 	uxtb.w	r1, sl
 8010c5c:	2901      	cmp	r1, #1
 8010c5e:	d921      	bls.n	8010ca4 <uxr_write_framed_msg+0x128>
 8010c60:	2a29      	cmp	r2, #41	@ 0x29
 8010c62:	f240 80af 	bls.w	8010dc4 <uxr_write_framed_msg+0x248>
 8010c66:	2500      	movs	r5, #0
 8010c68:	e000      	b.n	8010c6c <uxr_write_framed_msg+0xf0>
 8010c6a:	b160      	cbz	r0, 8010c86 <uxr_write_framed_msg+0x10a>
 8010c6c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010c70:	1b52      	subs	r2, r2, r5
 8010c72:	465b      	mov	r3, fp
 8010c74:	4421      	add	r1, r4
 8010c76:	4638      	mov	r0, r7
 8010c78:	47b0      	blx	r6
 8010c7a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010c7e:	4405      	add	r5, r0
 8010c80:	4295      	cmp	r5, r2
 8010c82:	d3f2      	bcc.n	8010c6a <uxr_write_framed_msg+0xee>
 8010c84:	d003      	beq.n	8010c8e <uxr_write_framed_msg+0x112>
 8010c86:	2000      	movs	r0, #0
 8010c88:	b003      	add	sp, #12
 8010c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8e:	fa5f f18a 	uxtb.w	r1, sl
 8010c92:	f04f 0300 	mov.w	r3, #0
 8010c96:	2901      	cmp	r1, #1
 8010c98:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010c9c:	f04f 0200 	mov.w	r2, #0
 8010ca0:	f200 8090 	bhi.w	8010dc4 <uxr_write_framed_msg+0x248>
 8010ca4:	1c51      	adds	r1, r2, #1
 8010ca6:	b2c9      	uxtb	r1, r1
 8010ca8:	2929      	cmp	r1, #41	@ 0x29
 8010caa:	d8dc      	bhi.n	8010c66 <uxr_write_framed_msg+0xea>
 8010cac:	18a5      	adds	r5, r4, r2
 8010cae:	4421      	add	r1, r4
 8010cb0:	3202      	adds	r2, #2
 8010cb2:	f088 0820 	eor.w	r8, r8, #32
 8010cb6:	4648      	mov	r0, r9
 8010cb8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8010cbc:	b2d2      	uxtb	r2, r2
 8010cbe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8010cc2:	f04f 0901 	mov.w	r9, #1
 8010cc6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010cca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	f040 8085 	bne.w	8010dde <uxr_write_framed_msg+0x262>
 8010cd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010cd8:	e7bc      	b.n	8010c54 <uxr_write_framed_msg+0xd8>
 8010cda:	4611      	mov	r1, r2
 8010cdc:	f04f 0c03 	mov.w	ip, #3
 8010ce0:	2204      	movs	r2, #4
 8010ce2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ce4:	4421      	add	r1, r4
 8010ce6:	b2dd      	uxtb	r5, r3
 8010ce8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8010cec:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8010cf0:	44a4      	add	ip, r4
 8010cf2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010cf6:	f080 0020 	eor.w	r0, r0, #32
 8010cfa:	2901      	cmp	r1, #1
 8010cfc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010d00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010d04:	f63f af66 	bhi.w	8010bd4 <uxr_write_framed_msg+0x58>
 8010d08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d0a:	18a0      	adds	r0, r4, r2
 8010d0c:	f085 0520 	eor.w	r5, r5, #32
 8010d10:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010d14:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010d18:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8010d1c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8010d20:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8010d24:	3202      	adds	r2, #2
 8010d26:	2801      	cmp	r0, #1
 8010d28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010d2c:	f63f af60 	bhi.w	8010bf0 <uxr_write_framed_msg+0x74>
 8010d30:	1c50      	adds	r0, r2, #1
 8010d32:	18a5      	adds	r5, r4, r2
 8010d34:	fa54 f080 	uxtab	r0, r4, r0
 8010d38:	3202      	adds	r2, #2
 8010d3a:	f081 0120 	eor.w	r1, r1, #32
 8010d3e:	b2d2      	uxtb	r2, r2
 8010d40:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8010d44:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8010d48:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010d4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f47f af57 	bne.w	8010c04 <uxr_write_framed_msg+0x88>
 8010d56:	9301      	str	r3, [sp, #4]
 8010d58:	4698      	mov	r8, r3
 8010d5a:	e779      	b.n	8010c50 <uxr_write_framed_msg+0xd4>
 8010d5c:	2500      	movs	r5, #0
 8010d5e:	e001      	b.n	8010d64 <uxr_write_framed_msg+0x1e8>
 8010d60:	2800      	cmp	r0, #0
 8010d62:	d090      	beq.n	8010c86 <uxr_write_framed_msg+0x10a>
 8010d64:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010d68:	1b52      	subs	r2, r2, r5
 8010d6a:	465b      	mov	r3, fp
 8010d6c:	4421      	add	r1, r4
 8010d6e:	4638      	mov	r0, r7
 8010d70:	47b0      	blx	r6
 8010d72:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010d76:	4405      	add	r5, r0
 8010d78:	4295      	cmp	r5, r2
 8010d7a:	d3f1      	bcc.n	8010d60 <uxr_write_framed_msg+0x1e4>
 8010d7c:	d183      	bne.n	8010c86 <uxr_write_framed_msg+0x10a>
 8010d7e:	f04f 0300 	mov.w	r3, #0
 8010d82:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010d86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d88:	4543      	cmp	r3, r8
 8010d8a:	d964      	bls.n	8010e56 <uxr_write_framed_msg+0x2da>
 8010d8c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010d90:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010d94:	2901      	cmp	r1, #1
 8010d96:	f04f 0200 	mov.w	r2, #0
 8010d9a:	f63f af3d 	bhi.w	8010c18 <uxr_write_framed_msg+0x9c>
 8010d9e:	1c51      	adds	r1, r2, #1
 8010da0:	b2c9      	uxtb	r1, r1
 8010da2:	2929      	cmp	r1, #41	@ 0x29
 8010da4:	d8da      	bhi.n	8010d5c <uxr_write_framed_msg+0x1e0>
 8010da6:	18a0      	adds	r0, r4, r2
 8010da8:	4421      	add	r1, r4
 8010daa:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8010dae:	3202      	adds	r2, #2
 8010db0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8010db4:	b2d2      	uxtb	r2, r2
 8010db6:	f083 0020 	eor.w	r0, r3, #32
 8010dba:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8010dbe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010dc2:	e733      	b.n	8010c2c <uxr_write_framed_msg+0xb0>
 8010dc4:	18a1      	adds	r1, r4, r2
 8010dc6:	3201      	adds	r2, #1
 8010dc8:	4648      	mov	r0, r9
 8010dca:	b2d2      	uxtb	r2, r2
 8010dcc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8010dd0:	f04f 0901 	mov.w	r9, #1
 8010dd4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010dd8:	2800      	cmp	r0, #0
 8010dda:	f43f af7b 	beq.w	8010cd4 <uxr_write_framed_msg+0x158>
 8010dde:	2500      	movs	r5, #0
 8010de0:	e002      	b.n	8010de8 <uxr_write_framed_msg+0x26c>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f43f af4f 	beq.w	8010c86 <uxr_write_framed_msg+0x10a>
 8010de8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010dec:	1b52      	subs	r2, r2, r5
 8010dee:	465b      	mov	r3, fp
 8010df0:	4421      	add	r1, r4
 8010df2:	4638      	mov	r0, r7
 8010df4:	47b0      	blx	r6
 8010df6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010dfa:	4405      	add	r5, r0
 8010dfc:	4295      	cmp	r5, r2
 8010dfe:	d3f0      	bcc.n	8010de2 <uxr_write_framed_msg+0x266>
 8010e00:	f47f af41 	bne.w	8010c86 <uxr_write_framed_msg+0x10a>
 8010e04:	2300      	movs	r3, #0
 8010e06:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010e0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e0c:	b298      	uxth	r0, r3
 8010e0e:	b003      	add	sp, #12
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e14:	217d      	movs	r1, #125	@ 0x7d
 8010e16:	f082 0220 	eor.w	r2, r2, #32
 8010e1a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8010e1e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8010e22:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8010e26:	2901      	cmp	r1, #1
 8010e28:	f04f 0203 	mov.w	r2, #3
 8010e2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e30:	d804      	bhi.n	8010e3c <uxr_write_framed_msg+0x2c0>
 8010e32:	4611      	mov	r1, r2
 8010e34:	f04f 0c04 	mov.w	ip, #4
 8010e38:	2205      	movs	r2, #5
 8010e3a:	e752      	b.n	8010ce2 <uxr_write_framed_msg+0x166>
 8010e3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e3e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8010e42:	b2dd      	uxtb	r5, r3
 8010e44:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010e48:	2204      	movs	r2, #4
 8010e4a:	2901      	cmp	r1, #1
 8010e4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010e50:	f63f aec0 	bhi.w	8010bd4 <uxr_write_framed_msg+0x58>
 8010e54:	e758      	b.n	8010d08 <uxr_write_framed_msg+0x18c>
 8010e56:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010e5a:	fa5f f889 	uxtb.w	r8, r9
 8010e5e:	9301      	str	r3, [sp, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	e6f5      	b.n	8010c50 <uxr_write_framed_msg+0xd4>
 8010e64:	0801b5dc 	.word	0x0801b5dc

08010e68 <uxr_framing_read_transport>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	b083      	sub	sp, #12
 8010e70:	461f      	mov	r7, r3
 8010e72:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8010e76:	4689      	mov	r9, r1
 8010e78:	4692      	mov	sl, r2
 8010e7a:	f000 fc89 	bl	8011790 <uxr_millis>
 8010e7e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010e82:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8010e86:	42b3      	cmp	r3, r6
 8010e88:	4680      	mov	r8, r0
 8010e8a:	d061      	beq.n	8010f50 <uxr_framing_read_transport+0xe8>
 8010e8c:	d81c      	bhi.n	8010ec8 <uxr_framing_read_transport+0x60>
 8010e8e:	1e75      	subs	r5, r6, #1
 8010e90:	1aed      	subs	r5, r5, r3
 8010e92:	b2ed      	uxtb	r5, r5
 8010e94:	2600      	movs	r6, #0
 8010e96:	455d      	cmp	r5, fp
 8010e98:	d81f      	bhi.n	8010eda <uxr_framing_read_transport+0x72>
 8010e9a:	19ab      	adds	r3, r5, r6
 8010e9c:	455b      	cmp	r3, fp
 8010e9e:	bf84      	itt	hi
 8010ea0:	ebab 0605 	subhi.w	r6, fp, r5
 8010ea4:	b2f6      	uxtbhi	r6, r6
 8010ea6:	b9ed      	cbnz	r5, 8010ee4 <uxr_framing_read_transport+0x7c>
 8010ea8:	f04f 0b00 	mov.w	fp, #0
 8010eac:	f000 fc70 	bl	8011790 <uxr_millis>
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	eba0 0808 	sub.w	r8, r0, r8
 8010eb6:	eba3 0308 	sub.w	r3, r3, r8
 8010eba:	4658      	mov	r0, fp
 8010ebc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010ec0:	603b      	str	r3, [r7, #0]
 8010ec2:	b003      	add	sp, #12
 8010ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec8:	2e00      	cmp	r6, #0
 8010eca:	d049      	beq.n	8010f60 <uxr_framing_read_transport+0xf8>
 8010ecc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8010ed0:	b2ed      	uxtb	r5, r5
 8010ed2:	3e01      	subs	r6, #1
 8010ed4:	455d      	cmp	r5, fp
 8010ed6:	b2f6      	uxtb	r6, r6
 8010ed8:	d9df      	bls.n	8010e9a <uxr_framing_read_transport+0x32>
 8010eda:	fa5f f58b 	uxtb.w	r5, fp
 8010ede:	2600      	movs	r6, #0
 8010ee0:	2d00      	cmp	r5, #0
 8010ee2:	d0e1      	beq.n	8010ea8 <uxr_framing_read_transport+0x40>
 8010ee4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010ee8:	3102      	adds	r1, #2
 8010eea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	4421      	add	r1, r4
 8010ef2:	462a      	mov	r2, r5
 8010ef4:	4650      	mov	r0, sl
 8010ef6:	47c8      	blx	r9
 8010ef8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010efc:	4a1a      	ldr	r2, [pc, #104]	@ (8010f68 <uxr_framing_read_transport+0x100>)
 8010efe:	4403      	add	r3, r0
 8010f00:	0859      	lsrs	r1, r3, #1
 8010f02:	fba2 2101 	umull	r2, r1, r2, r1
 8010f06:	0889      	lsrs	r1, r1, #2
 8010f08:	222a      	movs	r2, #42	@ 0x2a
 8010f0a:	fb02 3111 	mls	r1, r2, r1, r3
 8010f0e:	4683      	mov	fp, r0
 8010f10:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d0c7      	beq.n	8010ea8 <uxr_framing_read_transport+0x40>
 8010f18:	42a8      	cmp	r0, r5
 8010f1a:	d1c7      	bne.n	8010eac <uxr_framing_read_transport+0x44>
 8010f1c:	2e00      	cmp	r6, #0
 8010f1e:	d0c5      	beq.n	8010eac <uxr_framing_read_transport+0x44>
 8010f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	3102      	adds	r1, #2
 8010f26:	4632      	mov	r2, r6
 8010f28:	4421      	add	r1, r4
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	4650      	mov	r0, sl
 8010f2e:	47c8      	blx	r9
 8010f30:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010f34:	4a0c      	ldr	r2, [pc, #48]	@ (8010f68 <uxr_framing_read_transport+0x100>)
 8010f36:	180b      	adds	r3, r1, r0
 8010f38:	0859      	lsrs	r1, r3, #1
 8010f3a:	fba2 1201 	umull	r1, r2, r2, r1
 8010f3e:	0892      	lsrs	r2, r2, #2
 8010f40:	212a      	movs	r1, #42	@ 0x2a
 8010f42:	fb01 3312 	mls	r3, r1, r2, r3
 8010f46:	eb00 0b05 	add.w	fp, r0, r5
 8010f4a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010f4e:	e7ad      	b.n	8010eac <uxr_framing_read_transport+0x44>
 8010f50:	2600      	movs	r6, #0
 8010f52:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8010f56:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8010f58:	d9bf      	bls.n	8010eda <uxr_framing_read_transport+0x72>
 8010f5a:	2102      	movs	r1, #2
 8010f5c:	2529      	movs	r5, #41	@ 0x29
 8010f5e:	e7c4      	b.n	8010eea <uxr_framing_read_transport+0x82>
 8010f60:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8010f64:	b2ed      	uxtb	r5, r5
 8010f66:	e796      	b.n	8010e96 <uxr_framing_read_transport+0x2e>
 8010f68:	30c30c31 	.word	0x30c30c31

08010f6c <uxr_read_framed_msg>:
 8010f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f70:	461e      	mov	r6, r3
 8010f72:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8010f76:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8010f7a:	429d      	cmp	r5, r3
 8010f7c:	b083      	sub	sp, #12
 8010f7e:	4604      	mov	r4, r0
 8010f80:	4688      	mov	r8, r1
 8010f82:	4691      	mov	r9, r2
 8010f84:	f000 8188 	beq.w	8011298 <uxr_read_framed_msg+0x32c>
 8010f88:	7823      	ldrb	r3, [r4, #0]
 8010f8a:	4dc1      	ldr	r5, [pc, #772]	@ (8011290 <uxr_read_framed_msg+0x324>)
 8010f8c:	4fc1      	ldr	r7, [pc, #772]	@ (8011294 <uxr_read_framed_msg+0x328>)
 8010f8e:	2b07      	cmp	r3, #7
 8010f90:	d8fd      	bhi.n	8010f8e <uxr_read_framed_msg+0x22>
 8010f92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010f96:	0115      	.short	0x0115
 8010f98:	00d600f6 	.word	0x00d600f6
 8010f9c:	009000b9 	.word	0x009000b9
 8010fa0:	0030004d 	.word	0x0030004d
 8010fa4:	0008      	.short	0x0008
 8010fa6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010faa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010fae:	4299      	cmp	r1, r3
 8010fb0:	f000 814a 	beq.w	8011248 <uxr_read_framed_msg+0x2dc>
 8010fb4:	18e2      	adds	r2, r4, r3
 8010fb6:	7892      	ldrb	r2, [r2, #2]
 8010fb8:	2a7d      	cmp	r2, #125	@ 0x7d
 8010fba:	f000 8199 	beq.w	80112f0 <uxr_read_framed_msg+0x384>
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	0858      	lsrs	r0, r3, #1
 8010fc2:	fba5 1000 	umull	r1, r0, r5, r0
 8010fc6:	0880      	lsrs	r0, r0, #2
 8010fc8:	212a      	movs	r1, #42	@ 0x2a
 8010fca:	fb01 3310 	mls	r3, r1, r0, r3
 8010fce:	2a7e      	cmp	r2, #126	@ 0x7e
 8010fd0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010fd4:	f000 8252 	beq.w	801147c <uxr_read_framed_msg+0x510>
 8010fd8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010fda:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8010fdc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	4299      	cmp	r1, r3
 8010fe6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010fe8:	7022      	strb	r2, [r4, #0]
 8010fea:	f000 8179 	beq.w	80112e0 <uxr_read_framed_msg+0x374>
 8010fee:	2000      	movs	r0, #0
 8010ff0:	b003      	add	sp, #12
 8010ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010ffa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010ffe:	4299      	cmp	r1, r3
 8011000:	f000 8131 	beq.w	8011266 <uxr_read_framed_msg+0x2fa>
 8011004:	18e2      	adds	r2, r4, r3
 8011006:	7890      	ldrb	r0, [r2, #2]
 8011008:	287d      	cmp	r0, #125	@ 0x7d
 801100a:	f000 8190 	beq.w	801132e <uxr_read_framed_msg+0x3c2>
 801100e:	3301      	adds	r3, #1
 8011010:	085a      	lsrs	r2, r3, #1
 8011012:	fba5 1202 	umull	r1, r2, r5, r2
 8011016:	0892      	lsrs	r2, r2, #2
 8011018:	212a      	movs	r1, #42	@ 0x2a
 801101a:	fb01 3312 	mls	r3, r1, r2, r3
 801101e:	287e      	cmp	r0, #126	@ 0x7e
 8011020:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011024:	f000 821a 	beq.w	801145c <uxr_read_framed_msg+0x4f0>
 8011028:	2307      	movs	r3, #7
 801102a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801102c:	7023      	strb	r3, [r4, #0]
 801102e:	e7ae      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 8011030:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011032:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011036:	459e      	cmp	lr, r3
 8011038:	d938      	bls.n	80110ac <uxr_read_framed_msg+0x140>
 801103a:	ee07 8a90 	vmov	s15, r8
 801103e:	212a      	movs	r1, #42	@ 0x2a
 8011040:	e020      	b.n	8011084 <uxr_read_framed_msg+0x118>
 8011042:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011046:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801104a:	f000 80d4 	beq.w	80111f6 <uxr_read_framed_msg+0x28a>
 801104e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011052:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011056:	f000 8219 	beq.w	801148c <uxr_read_framed_msg+0x520>
 801105a:	f806 c003 	strb.w	ip, [r6, r3]
 801105e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011062:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011064:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011068:	ea8a 000c 	eor.w	r0, sl, ip
 801106c:	b2c0      	uxtb	r0, r0
 801106e:	3301      	adds	r3, #1
 8011070:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011074:	b29b      	uxth	r3, r3
 8011076:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801107a:	4573      	cmp	r3, lr
 801107c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801107e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011080:	f080 8120 	bcs.w	80112c4 <uxr_read_framed_msg+0x358>
 8011084:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011088:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801108c:	f100 0c01 	add.w	ip, r0, #1
 8011090:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011094:	fba5 8202 	umull	r8, r2, r5, r2
 8011098:	0892      	lsrs	r2, r2, #2
 801109a:	4582      	cmp	sl, r0
 801109c:	eb04 0b00 	add.w	fp, r4, r0
 80110a0:	fb01 c212 	mls	r2, r1, r2, ip
 80110a4:	d1cd      	bne.n	8011042 <uxr_read_framed_msg+0xd6>
 80110a6:	ee17 8a90 	vmov	r8, s15
 80110aa:	459e      	cmp	lr, r3
 80110ac:	f040 8111 	bne.w	80112d2 <uxr_read_framed_msg+0x366>
 80110b0:	2306      	movs	r3, #6
 80110b2:	7023      	strb	r3, [r4, #0]
 80110b4:	e76b      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 80110b6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80110ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80110be:	4298      	cmp	r0, r3
 80110c0:	f000 80c2 	beq.w	8011248 <uxr_read_framed_msg+0x2dc>
 80110c4:	18e2      	adds	r2, r4, r3
 80110c6:	7891      	ldrb	r1, [r2, #2]
 80110c8:	297d      	cmp	r1, #125	@ 0x7d
 80110ca:	f000 814c 	beq.w	8011366 <uxr_read_framed_msg+0x3fa>
 80110ce:	3301      	adds	r3, #1
 80110d0:	085a      	lsrs	r2, r3, #1
 80110d2:	fba5 0202 	umull	r0, r2, r5, r2
 80110d6:	0892      	lsrs	r2, r2, #2
 80110d8:	202a      	movs	r0, #42	@ 0x2a
 80110da:	fb00 3312 	mls	r3, r0, r2, r3
 80110de:	297e      	cmp	r1, #126	@ 0x7e
 80110e0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80110e4:	f000 81ca 	beq.w	801147c <uxr_read_framed_msg+0x510>
 80110e8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80110ea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80110ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	2000      	movs	r0, #0
 80110f4:	428b      	cmp	r3, r1
 80110f6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80110f8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80110fa:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80110fc:	f240 80df 	bls.w	80112be <uxr_read_framed_msg+0x352>
 8011100:	7020      	strb	r0, [r4, #0]
 8011102:	b003      	add	sp, #12
 8011104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011108:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801110c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011110:	4299      	cmp	r1, r3
 8011112:	f000 80a8 	beq.w	8011266 <uxr_read_framed_msg+0x2fa>
 8011116:	18e2      	adds	r2, r4, r3
 8011118:	7890      	ldrb	r0, [r2, #2]
 801111a:	287d      	cmp	r0, #125	@ 0x7d
 801111c:	f000 8164 	beq.w	80113e8 <uxr_read_framed_msg+0x47c>
 8011120:	3301      	adds	r3, #1
 8011122:	085a      	lsrs	r2, r3, #1
 8011124:	fba5 1202 	umull	r1, r2, r5, r2
 8011128:	0892      	lsrs	r2, r2, #2
 801112a:	212a      	movs	r1, #42	@ 0x2a
 801112c:	fb01 3312 	mls	r3, r1, r2, r3
 8011130:	287e      	cmp	r0, #126	@ 0x7e
 8011132:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011136:	f000 8191 	beq.w	801145c <uxr_read_framed_msg+0x4f0>
 801113a:	2304      	movs	r3, #4
 801113c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801113e:	7023      	strb	r3, [r4, #0]
 8011140:	e725      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 8011142:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011146:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801114a:	4290      	cmp	r0, r2
 801114c:	f000 80b3 	beq.w	80112b6 <uxr_read_framed_msg+0x34a>
 8011150:	18a3      	adds	r3, r4, r2
 8011152:	7899      	ldrb	r1, [r3, #2]
 8011154:	297d      	cmp	r1, #125	@ 0x7d
 8011156:	f000 8164 	beq.w	8011422 <uxr_read_framed_msg+0x4b6>
 801115a:	3201      	adds	r2, #1
 801115c:	0850      	lsrs	r0, r2, #1
 801115e:	fba5 3000 	umull	r3, r0, r5, r0
 8011162:	0880      	lsrs	r0, r0, #2
 8011164:	232a      	movs	r3, #42	@ 0x2a
 8011166:	fb03 2210 	mls	r2, r3, r0, r2
 801116a:	297e      	cmp	r1, #126	@ 0x7e
 801116c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011170:	f000 8188 	beq.w	8011484 <uxr_read_framed_msg+0x518>
 8011174:	7863      	ldrb	r3, [r4, #1]
 8011176:	428b      	cmp	r3, r1
 8011178:	bf0c      	ite	eq
 801117a:	2303      	moveq	r3, #3
 801117c:	2300      	movne	r3, #0
 801117e:	7023      	strb	r3, [r4, #0]
 8011180:	e705      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 8011182:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011186:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801118a:	2200      	movs	r2, #0
 801118c:	4299      	cmp	r1, r3
 801118e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011192:	d06c      	beq.n	801126e <uxr_read_framed_msg+0x302>
 8011194:	18e2      	adds	r2, r4, r3
 8011196:	7890      	ldrb	r0, [r2, #2]
 8011198:	287d      	cmp	r0, #125	@ 0x7d
 801119a:	f000 8101 	beq.w	80113a0 <uxr_read_framed_msg+0x434>
 801119e:	3301      	adds	r3, #1
 80111a0:	085a      	lsrs	r2, r3, #1
 80111a2:	fba5 1202 	umull	r1, r2, r5, r2
 80111a6:	0892      	lsrs	r2, r2, #2
 80111a8:	212a      	movs	r1, #42	@ 0x2a
 80111aa:	fb01 3312 	mls	r3, r1, r2, r3
 80111ae:	287e      	cmp	r0, #126	@ 0x7e
 80111b0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80111b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80111b8:	d059      	beq.n	801126e <uxr_read_framed_msg+0x302>
 80111ba:	2302      	movs	r3, #2
 80111bc:	7023      	strb	r3, [r4, #0]
 80111be:	e6e6      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 80111c0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80111c4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80111c8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80111cc:	1c51      	adds	r1, r2, #1
 80111ce:	084b      	lsrs	r3, r1, #1
 80111d0:	fba5 c303 	umull	ip, r3, r5, r3
 80111d4:	089b      	lsrs	r3, r3, #2
 80111d6:	fb0e 1313 	mls	r3, lr, r3, r1
 80111da:	4592      	cmp	sl, r2
 80111dc:	eb04 0002 	add.w	r0, r4, r2
 80111e0:	b2da      	uxtb	r2, r3
 80111e2:	f43f af04 	beq.w	8010fee <uxr_read_framed_msg+0x82>
 80111e6:	7883      	ldrb	r3, [r0, #2]
 80111e8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80111ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80111ee:	d1ed      	bne.n	80111cc <uxr_read_framed_msg+0x260>
 80111f0:	2301      	movs	r3, #1
 80111f2:	7023      	strb	r3, [r4, #0]
 80111f4:	e6cb      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 80111f6:	f100 0c01 	add.w	ip, r0, #1
 80111fa:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80111fe:	fba5 8202 	umull	r8, r2, r5, r2
 8011202:	0892      	lsrs	r2, r2, #2
 8011204:	fb01 c212 	mls	r2, r1, r2, ip
 8011208:	eb04 0c02 	add.w	ip, r4, r2
 801120c:	b2d2      	uxtb	r2, r2
 801120e:	4592      	cmp	sl, r2
 8011210:	f100 0002 	add.w	r0, r0, #2
 8011214:	f43f af47 	beq.w	80110a6 <uxr_read_framed_msg+0x13a>
 8011218:	0842      	lsrs	r2, r0, #1
 801121a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801121e:	fba5 8202 	umull	r8, r2, r5, r2
 8011222:	0892      	lsrs	r2, r2, #2
 8011224:	fb01 0012 	mls	r0, r1, r2, r0
 8011228:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801122c:	f08a 0c20 	eor.w	ip, sl, #32
 8011230:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011234:	f47f af11 	bne.w	801105a <uxr_read_framed_msg+0xee>
 8011238:	459e      	cmp	lr, r3
 801123a:	ee17 8a90 	vmov	r8, s15
 801123e:	f43f af37 	beq.w	80110b0 <uxr_read_framed_msg+0x144>
 8011242:	2301      	movs	r3, #1
 8011244:	7023      	strb	r3, [r4, #0]
 8011246:	e6a2      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 8011248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801124a:	9300      	str	r3, [sp, #0]
 801124c:	2301      	movs	r3, #1
 801124e:	9301      	str	r3, [sp, #4]
 8011250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011252:	464a      	mov	r2, r9
 8011254:	4641      	mov	r1, r8
 8011256:	4620      	mov	r0, r4
 8011258:	f7ff fe06 	bl	8010e68 <uxr_framing_read_transport>
 801125c:	2800      	cmp	r0, #0
 801125e:	f43f aec6 	beq.w	8010fee <uxr_read_framed_msg+0x82>
 8011262:	7823      	ldrb	r3, [r4, #0]
 8011264:	e693      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 8011266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	2302      	movs	r3, #2
 801126c:	e7ef      	b.n	801124e <uxr_read_framed_msg+0x2e2>
 801126e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	2304      	movs	r3, #4
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	464a      	mov	r2, r9
 8011278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801127a:	4641      	mov	r1, r8
 801127c:	4620      	mov	r0, r4
 801127e:	f7ff fdf3 	bl	8010e68 <uxr_framing_read_transport>
 8011282:	2800      	cmp	r0, #0
 8011284:	d1ed      	bne.n	8011262 <uxr_read_framed_msg+0x2f6>
 8011286:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801128a:	2b7e      	cmp	r3, #126	@ 0x7e
 801128c:	d0e9      	beq.n	8011262 <uxr_read_framed_msg+0x2f6>
 801128e:	e6ae      	b.n	8010fee <uxr_read_framed_msg+0x82>
 8011290:	30c30c31 	.word	0x30c30c31
 8011294:	0801b5dc 	.word	0x0801b5dc
 8011298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	2305      	movs	r3, #5
 801129e:	9301      	str	r3, [sp, #4]
 80112a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112a2:	f7ff fde1 	bl	8010e68 <uxr_framing_read_transport>
 80112a6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80112aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80112ae:	429a      	cmp	r2, r3
 80112b0:	f43f ae9d 	beq.w	8010fee <uxr_read_framed_msg+0x82>
 80112b4:	e668      	b.n	8010f88 <uxr_read_framed_msg+0x1c>
 80112b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	2303      	movs	r3, #3
 80112bc:	e7c7      	b.n	801124e <uxr_read_framed_msg+0x2e2>
 80112be:	2305      	movs	r3, #5
 80112c0:	7023      	strb	r3, [r4, #0]
 80112c2:	e664      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 80112c4:	ee17 8a90 	vmov	r8, s15
 80112c8:	f43f aef2 	beq.w	80110b0 <uxr_read_framed_msg+0x144>
 80112cc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80112d0:	d08e      	beq.n	80111f0 <uxr_read_framed_msg+0x284>
 80112d2:	ebae 0303 	sub.w	r3, lr, r3
 80112d6:	3302      	adds	r3, #2
 80112d8:	9301      	str	r3, [sp, #4]
 80112da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	e7b7      	b.n	8011250 <uxr_read_framed_msg+0x2e4>
 80112e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80112e2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80112e6:	7013      	strb	r3, [r2, #0]
 80112e8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80112ea:	b003      	add	sp, #12
 80112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f0:	f103 0c01 	add.w	ip, r3, #1
 80112f4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80112f8:	fba5 0202 	umull	r0, r2, r5, r2
 80112fc:	0892      	lsrs	r2, r2, #2
 80112fe:	202a      	movs	r0, #42	@ 0x2a
 8011300:	fb00 c212 	mls	r2, r0, r2, ip
 8011304:	fa5f fc82 	uxtb.w	ip, r2
 8011308:	4561      	cmp	r1, ip
 801130a:	d09d      	beq.n	8011248 <uxr_read_framed_msg+0x2dc>
 801130c:	3302      	adds	r3, #2
 801130e:	4422      	add	r2, r4
 8011310:	0859      	lsrs	r1, r3, #1
 8011312:	7892      	ldrb	r2, [r2, #2]
 8011314:	fba5 c101 	umull	ip, r1, r5, r1
 8011318:	0889      	lsrs	r1, r1, #2
 801131a:	fb00 3311 	mls	r3, r0, r1, r3
 801131e:	2a7e      	cmp	r2, #126	@ 0x7e
 8011320:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011324:	f000 80aa 	beq.w	801147c <uxr_read_framed_msg+0x510>
 8011328:	f082 0220 	eor.w	r2, r2, #32
 801132c:	e654      	b.n	8010fd8 <uxr_read_framed_msg+0x6c>
 801132e:	1c58      	adds	r0, r3, #1
 8011330:	0842      	lsrs	r2, r0, #1
 8011332:	fba5 c202 	umull	ip, r2, r5, r2
 8011336:	0892      	lsrs	r2, r2, #2
 8011338:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801133c:	fb0c 0212 	mls	r2, ip, r2, r0
 8011340:	b2d0      	uxtb	r0, r2
 8011342:	4281      	cmp	r1, r0
 8011344:	d08f      	beq.n	8011266 <uxr_read_framed_msg+0x2fa>
 8011346:	4422      	add	r2, r4
 8011348:	3302      	adds	r3, #2
 801134a:	7890      	ldrb	r0, [r2, #2]
 801134c:	085a      	lsrs	r2, r3, #1
 801134e:	fba5 1202 	umull	r1, r2, r5, r2
 8011352:	0892      	lsrs	r2, r2, #2
 8011354:	fb0c 3312 	mls	r3, ip, r2, r3
 8011358:	287e      	cmp	r0, #126	@ 0x7e
 801135a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801135e:	d07d      	beq.n	801145c <uxr_read_framed_msg+0x4f0>
 8011360:	f080 0020 	eor.w	r0, r0, #32
 8011364:	e660      	b.n	8011028 <uxr_read_framed_msg+0xbc>
 8011366:	1c59      	adds	r1, r3, #1
 8011368:	084a      	lsrs	r2, r1, #1
 801136a:	fba5 c202 	umull	ip, r2, r5, r2
 801136e:	0892      	lsrs	r2, r2, #2
 8011370:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011374:	fb0c 1212 	mls	r2, ip, r2, r1
 8011378:	b2d1      	uxtb	r1, r2
 801137a:	4288      	cmp	r0, r1
 801137c:	f43f af64 	beq.w	8011248 <uxr_read_framed_msg+0x2dc>
 8011380:	4422      	add	r2, r4
 8011382:	3302      	adds	r3, #2
 8011384:	7891      	ldrb	r1, [r2, #2]
 8011386:	085a      	lsrs	r2, r3, #1
 8011388:	fba5 0202 	umull	r0, r2, r5, r2
 801138c:	0892      	lsrs	r2, r2, #2
 801138e:	fb0c 3312 	mls	r3, ip, r2, r3
 8011392:	297e      	cmp	r1, #126	@ 0x7e
 8011394:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011398:	d070      	beq.n	801147c <uxr_read_framed_msg+0x510>
 801139a:	f081 0120 	eor.w	r1, r1, #32
 801139e:	e6a3      	b.n	80110e8 <uxr_read_framed_msg+0x17c>
 80113a0:	f103 0c01 	add.w	ip, r3, #1
 80113a4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80113a8:	fba5 0202 	umull	r0, r2, r5, r2
 80113ac:	0892      	lsrs	r2, r2, #2
 80113ae:	202a      	movs	r0, #42	@ 0x2a
 80113b0:	fb00 c212 	mls	r2, r0, r2, ip
 80113b4:	fa5f fc82 	uxtb.w	ip, r2
 80113b8:	4561      	cmp	r1, ip
 80113ba:	f43f af58 	beq.w	801126e <uxr_read_framed_msg+0x302>
 80113be:	4422      	add	r2, r4
 80113c0:	3302      	adds	r3, #2
 80113c2:	7891      	ldrb	r1, [r2, #2]
 80113c4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80113c8:	085a      	lsrs	r2, r3, #1
 80113ca:	fba5 c202 	umull	ip, r2, r5, r2
 80113ce:	0892      	lsrs	r2, r2, #2
 80113d0:	fb00 3312 	mls	r3, r0, r2, r3
 80113d4:	297e      	cmp	r1, #126	@ 0x7e
 80113d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80113da:	f43f af48 	beq.w	801126e <uxr_read_framed_msg+0x302>
 80113de:	f081 0120 	eor.w	r1, r1, #32
 80113e2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80113e6:	e6e8      	b.n	80111ba <uxr_read_framed_msg+0x24e>
 80113e8:	1c58      	adds	r0, r3, #1
 80113ea:	0842      	lsrs	r2, r0, #1
 80113ec:	fba5 c202 	umull	ip, r2, r5, r2
 80113f0:	0892      	lsrs	r2, r2, #2
 80113f2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80113f6:	fb0c 0212 	mls	r2, ip, r2, r0
 80113fa:	b2d0      	uxtb	r0, r2
 80113fc:	4281      	cmp	r1, r0
 80113fe:	f43f af32 	beq.w	8011266 <uxr_read_framed_msg+0x2fa>
 8011402:	4422      	add	r2, r4
 8011404:	3302      	adds	r3, #2
 8011406:	7890      	ldrb	r0, [r2, #2]
 8011408:	085a      	lsrs	r2, r3, #1
 801140a:	fba5 1202 	umull	r1, r2, r5, r2
 801140e:	0892      	lsrs	r2, r2, #2
 8011410:	fb0c 3312 	mls	r3, ip, r2, r3
 8011414:	287e      	cmp	r0, #126	@ 0x7e
 8011416:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801141a:	d01f      	beq.n	801145c <uxr_read_framed_msg+0x4f0>
 801141c:	f080 0020 	eor.w	r0, r0, #32
 8011420:	e68b      	b.n	801113a <uxr_read_framed_msg+0x1ce>
 8011422:	1c51      	adds	r1, r2, #1
 8011424:	084b      	lsrs	r3, r1, #1
 8011426:	fba5 c303 	umull	ip, r3, r5, r3
 801142a:	089b      	lsrs	r3, r3, #2
 801142c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011430:	fb0c 1313 	mls	r3, ip, r3, r1
 8011434:	b2d9      	uxtb	r1, r3
 8011436:	4288      	cmp	r0, r1
 8011438:	f43f af3d 	beq.w	80112b6 <uxr_read_framed_msg+0x34a>
 801143c:	3202      	adds	r2, #2
 801143e:	4423      	add	r3, r4
 8011440:	0850      	lsrs	r0, r2, #1
 8011442:	789b      	ldrb	r3, [r3, #2]
 8011444:	fba5 1000 	umull	r1, r0, r5, r0
 8011448:	0880      	lsrs	r0, r0, #2
 801144a:	fb0c 2210 	mls	r2, ip, r0, r2
 801144e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011450:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011454:	d016      	beq.n	8011484 <uxr_read_framed_msg+0x518>
 8011456:	f083 0120 	eor.w	r1, r3, #32
 801145a:	e68b      	b.n	8011174 <uxr_read_framed_msg+0x208>
 801145c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801145e:	9300      	str	r3, [sp, #0]
 8011460:	2302      	movs	r3, #2
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	464a      	mov	r2, r9
 8011466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011468:	4641      	mov	r1, r8
 801146a:	4620      	mov	r0, r4
 801146c:	f7ff fcfc 	bl	8010e68 <uxr_framing_read_transport>
 8011470:	2800      	cmp	r0, #0
 8011472:	f47f aef6 	bne.w	8011262 <uxr_read_framed_msg+0x2f6>
 8011476:	2301      	movs	r3, #1
 8011478:	7023      	strb	r3, [r4, #0]
 801147a:	e588      	b.n	8010f8e <uxr_read_framed_msg+0x22>
 801147c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	2301      	movs	r3, #1
 8011482:	e7ee      	b.n	8011462 <uxr_read_framed_msg+0x4f6>
 8011484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	2303      	movs	r3, #3
 801148a:	e7ea      	b.n	8011462 <uxr_read_framed_msg+0x4f6>
 801148c:	ee17 8a90 	vmov	r8, s15
 8011490:	e6ae      	b.n	80111f0 <uxr_read_framed_msg+0x284>
 8011492:	bf00      	nop

08011494 <uxr_stream_id>:
 8011494:	2901      	cmp	r1, #1
 8011496:	b082      	sub	sp, #8
 8011498:	d01d      	beq.n	80114d6 <uxr_stream_id+0x42>
 801149a:	2902      	cmp	r1, #2
 801149c:	f04f 0c00 	mov.w	ip, #0
 80114a0:	d01e      	beq.n	80114e0 <uxr_stream_id+0x4c>
 80114a2:	2300      	movs	r3, #0
 80114a4:	f36c 0307 	bfi	r3, ip, #0, #8
 80114a8:	f360 230f 	bfi	r3, r0, #8, #8
 80114ac:	f361 4317 	bfi	r3, r1, #16, #8
 80114b0:	f362 631f 	bfi	r3, r2, #24, #8
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	2000      	movs	r0, #0
 80114b8:	f362 0007 	bfi	r0, r2, #0, #8
 80114bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80114c0:	f362 200f 	bfi	r0, r2, #8, #8
 80114c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80114c8:	f362 4017 	bfi	r0, r2, #16, #8
 80114cc:	0e1b      	lsrs	r3, r3, #24
 80114ce:	f363 601f 	bfi	r0, r3, #24, #8
 80114d2:	b002      	add	sp, #8
 80114d4:	4770      	bx	lr
 80114d6:	f100 0c01 	add.w	ip, r0, #1
 80114da:	fa5f fc8c 	uxtb.w	ip, ip
 80114de:	e7e0      	b.n	80114a2 <uxr_stream_id+0xe>
 80114e0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80114e4:	e7dd      	b.n	80114a2 <uxr_stream_id+0xe>
 80114e6:	bf00      	nop

080114e8 <uxr_stream_id_from_raw>:
 80114e8:	b082      	sub	sp, #8
 80114ea:	b130      	cbz	r0, 80114fa <uxr_stream_id_from_raw+0x12>
 80114ec:	0603      	lsls	r3, r0, #24
 80114ee:	d420      	bmi.n	8011532 <uxr_stream_id_from_raw+0x4a>
 80114f0:	1e42      	subs	r2, r0, #1
 80114f2:	b2d2      	uxtb	r2, r2
 80114f4:	f04f 0c01 	mov.w	ip, #1
 80114f8:	e001      	b.n	80114fe <uxr_stream_id_from_raw+0x16>
 80114fa:	4684      	mov	ip, r0
 80114fc:	4602      	mov	r2, r0
 80114fe:	2300      	movs	r3, #0
 8011500:	f360 0307 	bfi	r3, r0, #0, #8
 8011504:	f362 230f 	bfi	r3, r2, #8, #8
 8011508:	f36c 4317 	bfi	r3, ip, #16, #8
 801150c:	f361 631f 	bfi	r3, r1, #24, #8
 8011510:	b2da      	uxtb	r2, r3
 8011512:	2000      	movs	r0, #0
 8011514:	f362 0007 	bfi	r0, r2, #0, #8
 8011518:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801151c:	f362 200f 	bfi	r0, r2, #8, #8
 8011520:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011524:	f362 4017 	bfi	r0, r2, #16, #8
 8011528:	0e1b      	lsrs	r3, r3, #24
 801152a:	f363 601f 	bfi	r0, r3, #24, #8
 801152e:	b002      	add	sp, #8
 8011530:	4770      	bx	lr
 8011532:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011536:	f04f 0c02 	mov.w	ip, #2
 801153a:	e7e0      	b.n	80114fe <uxr_stream_id_from_raw+0x16>

0801153c <uxr_init_stream_storage>:
 801153c:	2300      	movs	r3, #0
 801153e:	7403      	strb	r3, [r0, #16]
 8011540:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011544:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011548:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop

08011550 <uxr_reset_stream_storage>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	7c03      	ldrb	r3, [r0, #16]
 8011554:	4604      	mov	r4, r0
 8011556:	b153      	cbz	r3, 801156e <uxr_reset_stream_storage+0x1e>
 8011558:	4606      	mov	r6, r0
 801155a:	2500      	movs	r5, #0
 801155c:	4630      	mov	r0, r6
 801155e:	f005 fd37 	bl	8016fd0 <uxr_reset_output_best_effort_stream>
 8011562:	7c23      	ldrb	r3, [r4, #16]
 8011564:	3501      	adds	r5, #1
 8011566:	42ab      	cmp	r3, r5
 8011568:	f106 0610 	add.w	r6, r6, #16
 801156c:	d8f6      	bhi.n	801155c <uxr_reset_stream_storage+0xc>
 801156e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011572:	b163      	cbz	r3, 801158e <uxr_reset_stream_storage+0x3e>
 8011574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011578:	2500      	movs	r5, #0
 801157a:	4630      	mov	r0, r6
 801157c:	f005 fb2a 	bl	8016bd4 <uxr_reset_input_best_effort_stream>
 8011580:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011584:	3501      	adds	r5, #1
 8011586:	42ab      	cmp	r3, r5
 8011588:	f106 0602 	add.w	r6, r6, #2
 801158c:	d8f5      	bhi.n	801157a <uxr_reset_stream_storage+0x2a>
 801158e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011592:	b163      	cbz	r3, 80115ae <uxr_reset_stream_storage+0x5e>
 8011594:	f104 0618 	add.w	r6, r4, #24
 8011598:	2500      	movs	r5, #0
 801159a:	4630      	mov	r0, r6
 801159c:	f005 fdc4 	bl	8017128 <uxr_reset_output_reliable_stream>
 80115a0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80115a4:	3501      	adds	r5, #1
 80115a6:	42ab      	cmp	r3, r5
 80115a8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80115ac:	d8f5      	bhi.n	801159a <uxr_reset_stream_storage+0x4a>
 80115ae:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80115b2:	b163      	cbz	r3, 80115ce <uxr_reset_stream_storage+0x7e>
 80115b4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80115b8:	2500      	movs	r5, #0
 80115ba:	4630      	mov	r0, r6
 80115bc:	f005 fb7e 	bl	8016cbc <uxr_reset_input_reliable_stream>
 80115c0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80115c4:	3501      	adds	r5, #1
 80115c6:	42ab      	cmp	r3, r5
 80115c8:	f106 0618 	add.w	r6, r6, #24
 80115cc:	d8f5      	bhi.n	80115ba <uxr_reset_stream_storage+0x6a>
 80115ce:	bd70      	pop	{r4, r5, r6, pc}

080115d0 <uxr_add_output_best_effort_buffer>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	7c04      	ldrb	r4, [r0, #16]
 80115d4:	f104 0c01 	add.w	ip, r4, #1
 80115d8:	b082      	sub	sp, #8
 80115da:	f880 c010 	strb.w	ip, [r0, #16]
 80115de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80115e2:	f005 fceb 	bl	8016fbc <uxr_init_output_best_effort_stream>
 80115e6:	2201      	movs	r2, #1
 80115e8:	4611      	mov	r1, r2
 80115ea:	4620      	mov	r0, r4
 80115ec:	b002      	add	sp, #8
 80115ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115f2:	f7ff bf4f 	b.w	8011494 <uxr_stream_id>
 80115f6:	bf00      	nop

080115f8 <uxr_add_output_reliable_buffer>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	4684      	mov	ip, r0
 80115fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011602:	9000      	str	r0, [sp, #0]
 8011604:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011608:	2028      	movs	r0, #40	@ 0x28
 801160a:	fb00 c004 	mla	r0, r0, r4, ip
 801160e:	f104 0e01 	add.w	lr, r4, #1
 8011612:	3018      	adds	r0, #24
 8011614:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011618:	f005 fd4e 	bl	80170b8 <uxr_init_output_reliable_stream>
 801161c:	2201      	movs	r2, #1
 801161e:	2102      	movs	r1, #2
 8011620:	4620      	mov	r0, r4
 8011622:	b004      	add	sp, #16
 8011624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011628:	f7ff bf34 	b.w	8011494 <uxr_stream_id>

0801162c <uxr_add_input_best_effort_buffer>:
 801162c:	b510      	push	{r4, lr}
 801162e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011632:	4603      	mov	r3, r0
 8011634:	1c62      	adds	r2, r4, #1
 8011636:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801163a:	b082      	sub	sp, #8
 801163c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011644:	f005 fac2 	bl	8016bcc <uxr_init_input_best_effort_stream>
 8011648:	2200      	movs	r2, #0
 801164a:	2101      	movs	r1, #1
 801164c:	4620      	mov	r0, r4
 801164e:	b002      	add	sp, #8
 8011650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011654:	f7ff bf1e 	b.w	8011494 <uxr_stream_id>

08011658 <uxr_add_input_reliable_buffer>:
 8011658:	b510      	push	{r4, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	4684      	mov	ip, r0
 801165e:	9806      	ldr	r0, [sp, #24]
 8011660:	9000      	str	r0, [sp, #0]
 8011662:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011666:	2018      	movs	r0, #24
 8011668:	fb00 c004 	mla	r0, r0, r4, ip
 801166c:	f104 0e01 	add.w	lr, r4, #1
 8011670:	3048      	adds	r0, #72	@ 0x48
 8011672:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011676:	f005 faf5 	bl	8016c64 <uxr_init_input_reliable_stream>
 801167a:	2200      	movs	r2, #0
 801167c:	2102      	movs	r1, #2
 801167e:	4620      	mov	r0, r4
 8011680:	b004      	add	sp, #16
 8011682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011686:	f7ff bf05 	b.w	8011494 <uxr_stream_id>
 801168a:	bf00      	nop

0801168c <uxr_get_output_best_effort_stream>:
 801168c:	7c03      	ldrb	r3, [r0, #16]
 801168e:	428b      	cmp	r3, r1
 8011690:	bf8c      	ite	hi
 8011692:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011696:	2000      	movls	r0, #0
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop

0801169c <uxr_get_output_reliable_stream>:
 801169c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80116a0:	428b      	cmp	r3, r1
 80116a2:	bf83      	ittte	hi
 80116a4:	2328      	movhi	r3, #40	@ 0x28
 80116a6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80116aa:	3018      	addhi	r0, #24
 80116ac:	2000      	movls	r0, #0
 80116ae:	4770      	bx	lr

080116b0 <uxr_get_input_best_effort_stream>:
 80116b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80116b4:	428b      	cmp	r3, r1
 80116b6:	bf86      	itte	hi
 80116b8:	3121      	addhi	r1, #33	@ 0x21
 80116ba:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80116be:	2000      	movls	r0, #0
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop

080116c4 <uxr_get_input_reliable_stream>:
 80116c4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80116c8:	428b      	cmp	r3, r1
 80116ca:	bf83      	ittte	hi
 80116cc:	2318      	movhi	r3, #24
 80116ce:	fb03 0001 	mlahi	r0, r3, r1, r0
 80116d2:	3048      	addhi	r0, #72	@ 0x48
 80116d4:	2000      	movls	r0, #0
 80116d6:	4770      	bx	lr

080116d8 <uxr_output_streams_confirmed>:
 80116d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80116dc:	b183      	cbz	r3, 8011700 <uxr_output_streams_confirmed+0x28>
 80116de:	b570      	push	{r4, r5, r6, lr}
 80116e0:	4606      	mov	r6, r0
 80116e2:	f100 0518 	add.w	r5, r0, #24
 80116e6:	2400      	movs	r4, #0
 80116e8:	e001      	b.n	80116ee <uxr_output_streams_confirmed+0x16>
 80116ea:	3528      	adds	r5, #40	@ 0x28
 80116ec:	b138      	cbz	r0, 80116fe <uxr_output_streams_confirmed+0x26>
 80116ee:	4628      	mov	r0, r5
 80116f0:	f005 ff8a 	bl	8017608 <uxr_is_output_up_to_date>
 80116f4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80116f8:	3401      	adds	r4, #1
 80116fa:	42a3      	cmp	r3, r4
 80116fc:	d8f5      	bhi.n	80116ea <uxr_output_streams_confirmed+0x12>
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
 8011700:	2001      	movs	r0, #1
 8011702:	4770      	bx	lr

08011704 <uxr_buffer_submessage_header>:
 8011704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011706:	4604      	mov	r4, r0
 8011708:	460e      	mov	r6, r1
 801170a:	2104      	movs	r1, #4
 801170c:	4615      	mov	r5, r2
 801170e:	461f      	mov	r7, r3
 8011710:	f7fa fbf4 	bl	800befc <ucdr_align_to>
 8011714:	2301      	movs	r3, #1
 8011716:	ea47 0203 	orr.w	r2, r7, r3
 801171a:	4631      	mov	r1, r6
 801171c:	7523      	strb	r3, [r4, #20]
 801171e:	4620      	mov	r0, r4
 8011720:	462b      	mov	r3, r5
 8011722:	f000 fa27 	bl	8011b74 <uxr_serialize_submessage_header>
 8011726:	4620      	mov	r0, r4
 8011728:	f7fa fbfe 	bl	800bf28 <ucdr_buffer_remaining>
 801172c:	42a8      	cmp	r0, r5
 801172e:	bf34      	ite	cc
 8011730:	2000      	movcc	r0, #0
 8011732:	2001      	movcs	r0, #1
 8011734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011736:	bf00      	nop

08011738 <uxr_read_submessage_header>:
 8011738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801173c:	4604      	mov	r4, r0
 801173e:	460d      	mov	r5, r1
 8011740:	2104      	movs	r1, #4
 8011742:	4616      	mov	r6, r2
 8011744:	4698      	mov	r8, r3
 8011746:	f7fa fbd9 	bl	800befc <ucdr_align_to>
 801174a:	4620      	mov	r0, r4
 801174c:	f7fa fbec 	bl	800bf28 <ucdr_buffer_remaining>
 8011750:	2803      	cmp	r0, #3
 8011752:	bf8c      	ite	hi
 8011754:	2701      	movhi	r7, #1
 8011756:	2700      	movls	r7, #0
 8011758:	d802      	bhi.n	8011760 <uxr_read_submessage_header+0x28>
 801175a:	4638      	mov	r0, r7
 801175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011760:	4633      	mov	r3, r6
 8011762:	4642      	mov	r2, r8
 8011764:	4620      	mov	r0, r4
 8011766:	4629      	mov	r1, r5
 8011768:	f000 fa18 	bl	8011b9c <uxr_deserialize_submessage_header>
 801176c:	f898 3000 	ldrb.w	r3, [r8]
 8011770:	f003 0201 	and.w	r2, r3, #1
 8011774:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011778:	f888 3000 	strb.w	r3, [r8]
 801177c:	7522      	strb	r2, [r4, #20]
 801177e:	4638      	mov	r0, r7
 8011780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011784 <uxr_submessage_padding>:
 8011784:	f010 0003 	ands.w	r0, r0, #3
 8011788:	bf18      	it	ne
 801178a:	f1c0 0004 	rsbne	r0, r0, #4
 801178e:	4770      	bx	lr

08011790 <uxr_millis>:
 8011790:	b510      	push	{r4, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	4669      	mov	r1, sp
 8011796:	2001      	movs	r0, #1
 8011798:	f7f0 fc16 	bl	8001fc8 <clock_gettime>
 801179c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80117a0:	4906      	ldr	r1, [pc, #24]	@ (80117bc <uxr_millis+0x2c>)
 80117a2:	fba0 0301 	umull	r0, r3, r0, r1
 80117a6:	1900      	adds	r0, r0, r4
 80117a8:	fb01 3102 	mla	r1, r1, r2, r3
 80117ac:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80117b0:	4a03      	ldr	r2, [pc, #12]	@ (80117c0 <uxr_millis+0x30>)
 80117b2:	2300      	movs	r3, #0
 80117b4:	f7ef fa30 	bl	8000c18 <__aeabi_ldivmod>
 80117b8:	b004      	add	sp, #16
 80117ba:	bd10      	pop	{r4, pc}
 80117bc:	3b9aca00 	.word	0x3b9aca00
 80117c0:	000f4240 	.word	0x000f4240

080117c4 <uxr_nanos>:
 80117c4:	b510      	push	{r4, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	4669      	mov	r1, sp
 80117ca:	2001      	movs	r0, #1
 80117cc:	f7f0 fbfc 	bl	8001fc8 <clock_gettime>
 80117d0:	4a06      	ldr	r2, [pc, #24]	@ (80117ec <uxr_nanos+0x28>)
 80117d2:	9800      	ldr	r0, [sp, #0]
 80117d4:	9902      	ldr	r1, [sp, #8]
 80117d6:	9c01      	ldr	r4, [sp, #4]
 80117d8:	fba0 0302 	umull	r0, r3, r0, r2
 80117dc:	1840      	adds	r0, r0, r1
 80117de:	fb02 3304 	mla	r3, r2, r4, r3
 80117e2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80117e6:	b004      	add	sp, #16
 80117e8:	bd10      	pop	{r4, pc}
 80117ea:	bf00      	nop
 80117ec:	3b9aca00 	.word	0x3b9aca00

080117f0 <on_full_output_buffer_fragmented>:
 80117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f4:	460c      	mov	r4, r1
 80117f6:	b08a      	sub	sp, #40	@ 0x28
 80117f8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80117fc:	4606      	mov	r6, r0
 80117fe:	f104 0008 	add.w	r0, r4, #8
 8011802:	f7ff ff4b 	bl	801169c <uxr_get_output_reliable_stream>
 8011806:	4605      	mov	r5, r0
 8011808:	f005 ff08 	bl	801761c <get_available_free_slots>
 801180c:	b968      	cbnz	r0, 801182a <on_full_output_buffer_fragmented+0x3a>
 801180e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011812:	4620      	mov	r0, r4
 8011814:	4798      	blx	r3
 8011816:	b918      	cbnz	r0, 8011820 <on_full_output_buffer_fragmented+0x30>
 8011818:	2001      	movs	r0, #1
 801181a:	b00a      	add	sp, #40	@ 0x28
 801181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011820:	4628      	mov	r0, r5
 8011822:	f005 fefb 	bl	801761c <get_available_free_slots>
 8011826:	2800      	cmp	r0, #0
 8011828:	d0f6      	beq.n	8011818 <on_full_output_buffer_fragmented+0x28>
 801182a:	8929      	ldrh	r1, [r5, #8]
 801182c:	89eb      	ldrh	r3, [r5, #14]
 801182e:	7b28      	ldrb	r0, [r5, #12]
 8011830:	686a      	ldr	r2, [r5, #4]
 8011832:	fbb2 f8f1 	udiv	r8, r2, r1
 8011836:	fbb3 f2f1 	udiv	r2, r3, r1
 801183a:	fb01 3112 	mls	r1, r1, r2, r3
 801183e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8011842:	b289      	uxth	r1, r1
 8011844:	fb08 f101 	mul.w	r1, r8, r1
 8011848:	30fc      	adds	r0, #252	@ 0xfc
 801184a:	f1a8 0804 	sub.w	r8, r8, #4
 801184e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011852:	4440      	add	r0, r8
 8011854:	b287      	uxth	r7, r0
 8011856:	1bdb      	subs	r3, r3, r7
 8011858:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	3104      	adds	r1, #4
 8011860:	4419      	add	r1, r3
 8011862:	4642      	mov	r2, r8
 8011864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011868:	9300      	str	r3, [sp, #0]
 801186a:	a802      	add	r0, sp, #8
 801186c:	2300      	movs	r3, #0
 801186e:	f7fa fb19 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 8011872:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011876:	f102 0308 	add.w	r3, r2, #8
 801187a:	4543      	cmp	r3, r8
 801187c:	d928      	bls.n	80118d0 <on_full_output_buffer_fragmented+0xe0>
 801187e:	463a      	mov	r2, r7
 8011880:	2300      	movs	r3, #0
 8011882:	210d      	movs	r1, #13
 8011884:	a802      	add	r0, sp, #8
 8011886:	f7ff ff3d 	bl	8011704 <uxr_buffer_submessage_header>
 801188a:	8929      	ldrh	r1, [r5, #8]
 801188c:	89eb      	ldrh	r3, [r5, #14]
 801188e:	fbb3 f2f1 	udiv	r2, r3, r1
 8011892:	fb01 3312 	mls	r3, r1, r2, r3
 8011896:	b29b      	uxth	r3, r3
 8011898:	686a      	ldr	r2, [r5, #4]
 801189a:	fbb2 f2f1 	udiv	r2, r2, r1
 801189e:	fb02 f303 	mul.w	r3, r2, r3
 80118a2:	682a      	ldr	r2, [r5, #0]
 80118a4:	f842 8003 	str.w	r8, [r2, r3]
 80118a8:	89e8      	ldrh	r0, [r5, #14]
 80118aa:	2101      	movs	r1, #1
 80118ac:	f005 fed6 	bl	801765c <uxr_seq_num_add>
 80118b0:	9904      	ldr	r1, [sp, #16]
 80118b2:	9a03      	ldr	r2, [sp, #12]
 80118b4:	81e8      	strh	r0, [r5, #14]
 80118b6:	1a52      	subs	r2, r2, r1
 80118b8:	4630      	mov	r0, r6
 80118ba:	f7fa fb05 	bl	800bec8 <ucdr_init_buffer>
 80118be:	4630      	mov	r0, r6
 80118c0:	490f      	ldr	r1, [pc, #60]	@ (8011900 <on_full_output_buffer_fragmented+0x110>)
 80118c2:	4622      	mov	r2, r4
 80118c4:	f7fa fad4 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 80118c8:	2000      	movs	r0, #0
 80118ca:	b00a      	add	sp, #40	@ 0x28
 80118cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d0:	b292      	uxth	r2, r2
 80118d2:	2302      	movs	r3, #2
 80118d4:	210d      	movs	r1, #13
 80118d6:	a802      	add	r0, sp, #8
 80118d8:	f7ff ff14 	bl	8011704 <uxr_buffer_submessage_header>
 80118dc:	8928      	ldrh	r0, [r5, #8]
 80118de:	89eb      	ldrh	r3, [r5, #14]
 80118e0:	fbb3 f1f0 	udiv	r1, r3, r0
 80118e4:	fb00 3311 	mls	r3, r0, r1, r3
 80118e8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80118ec:	6869      	ldr	r1, [r5, #4]
 80118ee:	fbb1 f1f0 	udiv	r1, r1, r0
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	fb01 f303 	mul.w	r3, r1, r3
 80118f8:	6829      	ldr	r1, [r5, #0]
 80118fa:	3208      	adds	r2, #8
 80118fc:	50ca      	str	r2, [r1, r3]
 80118fe:	e7d3      	b.n	80118a8 <on_full_output_buffer_fragmented+0xb8>
 8011900:	080117f1 	.word	0x080117f1

08011904 <uxr_prepare_output_stream>:
 8011904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011906:	b087      	sub	sp, #28
 8011908:	2707      	movs	r7, #7
 801190a:	9202      	str	r2, [sp, #8]
 801190c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801190e:	9103      	str	r1, [sp, #12]
 8011910:	2500      	movs	r5, #0
 8011912:	3204      	adds	r2, #4
 8011914:	e9cd 7500 	strd	r7, r5, [sp]
 8011918:	461c      	mov	r4, r3
 801191a:	4606      	mov	r6, r0
 801191c:	f7fe ffc2 	bl	80108a4 <uxr_prepare_stream_to_write_submessage>
 8011920:	f080 0201 	eor.w	r2, r0, #1
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	75a2      	strb	r2, [r4, #22]
 8011928:	b112      	cbz	r2, 8011930 <uxr_prepare_output_stream+0x2c>
 801192a:	4628      	mov	r0, r5
 801192c:	b007      	add	sp, #28
 801192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011930:	aa05      	add	r2, sp, #20
 8011932:	9902      	ldr	r1, [sp, #8]
 8011934:	4630      	mov	r0, r6
 8011936:	f7ff f8eb 	bl	8010b10 <uxr_init_base_object_request>
 801193a:	a905      	add	r1, sp, #20
 801193c:	4605      	mov	r5, r0
 801193e:	4620      	mov	r0, r4
 8011940:	f000 ffa0 	bl	8012884 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011944:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011948:	69a6      	ldr	r6, [r4, #24]
 801194a:	69e7      	ldr	r7, [r4, #28]
 801194c:	1a52      	subs	r2, r2, r1
 801194e:	4620      	mov	r0, r4
 8011950:	f7fa faba 	bl	800bec8 <ucdr_init_buffer>
 8011954:	4620      	mov	r0, r4
 8011956:	463a      	mov	r2, r7
 8011958:	4631      	mov	r1, r6
 801195a:	f7fa fa89 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 801195e:	4628      	mov	r0, r5
 8011960:	b007      	add	sp, #28
 8011962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011964 <uxr_prepare_output_stream_fragmented>:
 8011964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011968:	b091      	sub	sp, #68	@ 0x44
 801196a:	4605      	mov	r5, r0
 801196c:	9105      	str	r1, [sp, #20]
 801196e:	3008      	adds	r0, #8
 8011970:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011974:	461e      	mov	r6, r3
 8011976:	9204      	str	r2, [sp, #16]
 8011978:	f7ff fe90 	bl	801169c <uxr_get_output_reliable_stream>
 801197c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011980:	2b01      	cmp	r3, #1
 8011982:	f000 8091 	beq.w	8011aa8 <uxr_prepare_output_stream_fragmented+0x144>
 8011986:	4604      	mov	r4, r0
 8011988:	2800      	cmp	r0, #0
 801198a:	f000 808d 	beq.w	8011aa8 <uxr_prepare_output_stream_fragmented+0x144>
 801198e:	f005 fe45 	bl	801761c <get_available_free_slots>
 8011992:	2800      	cmp	r0, #0
 8011994:	f000 8083 	beq.w	8011a9e <uxr_prepare_output_stream_fragmented+0x13a>
 8011998:	8922      	ldrh	r2, [r4, #8]
 801199a:	89e7      	ldrh	r7, [r4, #14]
 801199c:	fbb7 f9f2 	udiv	r9, r7, r2
 80119a0:	fb02 7919 	mls	r9, r2, r9, r7
 80119a4:	fa1f f989 	uxth.w	r9, r9
 80119a8:	6863      	ldr	r3, [r4, #4]
 80119aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80119ae:	6823      	ldr	r3, [r4, #0]
 80119b0:	9203      	str	r2, [sp, #12]
 80119b2:	fb02 f909 	mul.w	r9, r2, r9
 80119b6:	f109 0904 	add.w	r9, r9, #4
 80119ba:	4499      	add	r9, r3
 80119bc:	7b23      	ldrb	r3, [r4, #12]
 80119be:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80119c2:	4543      	cmp	r3, r8
 80119c4:	f1a2 0b04 	sub.w	fp, r2, #4
 80119c8:	d37a      	bcc.n	8011ac0 <uxr_prepare_output_stream_fragmented+0x15c>
 80119ca:	f1ab 0a04 	sub.w	sl, fp, #4
 80119ce:	ebaa 0a03 	sub.w	sl, sl, r3
 80119d2:	465a      	mov	r2, fp
 80119d4:	2300      	movs	r3, #0
 80119d6:	4649      	mov	r1, r9
 80119d8:	a808      	add	r0, sp, #32
 80119da:	f8cd 8000 	str.w	r8, [sp]
 80119de:	f7fa fa61 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 80119e2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80119e4:	fa1f fa8a 	uxth.w	sl, sl
 80119e8:	4652      	mov	r2, sl
 80119ea:	f103 0a08 	add.w	sl, r3, #8
 80119ee:	45da      	cmp	sl, fp
 80119f0:	bf34      	ite	cc
 80119f2:	2302      	movcc	r3, #2
 80119f4:	2300      	movcs	r3, #0
 80119f6:	210d      	movs	r1, #13
 80119f8:	a808      	add	r0, sp, #32
 80119fa:	f7ff fe83 	bl	8011704 <uxr_buffer_submessage_header>
 80119fe:	8921      	ldrh	r1, [r4, #8]
 8011a00:	fbb7 f2f1 	udiv	r2, r7, r1
 8011a04:	fb01 7212 	mls	r2, r1, r2, r7
 8011a08:	b292      	uxth	r2, r2
 8011a0a:	6863      	ldr	r3, [r4, #4]
 8011a0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a10:	fb02 f303 	mul.w	r3, r2, r3
 8011a14:	6822      	ldr	r2, [r4, #0]
 8011a16:	4638      	mov	r0, r7
 8011a18:	f842 b003 	str.w	fp, [r2, r3]
 8011a1c:	2101      	movs	r1, #1
 8011a1e:	f005 fe1d 	bl	801765c <uxr_seq_num_add>
 8011a22:	9b03      	ldr	r3, [sp, #12]
 8011a24:	f108 0104 	add.w	r1, r8, #4
 8011a28:	f1a3 0208 	sub.w	r2, r3, #8
 8011a2c:	eba2 0208 	sub.w	r2, r2, r8
 8011a30:	4449      	add	r1, r9
 8011a32:	4607      	mov	r7, r0
 8011a34:	4630      	mov	r0, r6
 8011a36:	f7fa fa47 	bl	800bec8 <ucdr_init_buffer>
 8011a3a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011a3c:	81e7      	strh	r7, [r4, #14]
 8011a3e:	1d1a      	adds	r2, r3, #4
 8011a40:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011a44:	bf28      	it	cs
 8011a46:	2200      	movcs	r2, #0
 8011a48:	2300      	movs	r3, #0
 8011a4a:	b292      	uxth	r2, r2
 8011a4c:	2107      	movs	r1, #7
 8011a4e:	4630      	mov	r0, r6
 8011a50:	f7ff fe58 	bl	8011704 <uxr_buffer_submessage_header>
 8011a54:	9904      	ldr	r1, [sp, #16]
 8011a56:	aa07      	add	r2, sp, #28
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f7ff f859 	bl	8010b10 <uxr_init_base_object_request>
 8011a5e:	4604      	mov	r4, r0
 8011a60:	b318      	cbz	r0, 8011aaa <uxr_prepare_output_stream_fragmented+0x146>
 8011a62:	a907      	add	r1, sp, #28
 8011a64:	4630      	mov	r0, r6
 8011a66:	f000 ff0d 	bl	8012884 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011a6a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011a6e:	4630      	mov	r0, r6
 8011a70:	1a52      	subs	r2, r2, r1
 8011a72:	f7fa fa29 	bl	800bec8 <ucdr_init_buffer>
 8011a76:	9b05      	ldr	r3, [sp, #20]
 8011a78:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8011a7c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011a7e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011a82:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011a84:	491b      	ldr	r1, [pc, #108]	@ (8011af4 <uxr_prepare_output_stream_fragmented+0x190>)
 8011a86:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011a90:	462a      	mov	r2, r5
 8011a92:	f7fa f9ed 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 8011a96:	4620      	mov	r0, r4
 8011a98:	b011      	add	sp, #68	@ 0x44
 8011a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011aa0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	4798      	blx	r3
 8011aa6:	b920      	cbnz	r0, 8011ab2 <uxr_prepare_output_stream_fragmented+0x14e>
 8011aa8:	2400      	movs	r4, #0
 8011aaa:	4620      	mov	r0, r4
 8011aac:	b011      	add	sp, #68	@ 0x44
 8011aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f005 fdb2 	bl	801761c <get_available_free_slots>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	f47f af6d 	bne.w	8011998 <uxr_prepare_output_stream_fragmented+0x34>
 8011abe:	e7f3      	b.n	8011aa8 <uxr_prepare_output_stream_fragmented+0x144>
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	f005 fdca 	bl	801765c <uxr_seq_num_add>
 8011ac8:	8921      	ldrh	r1, [r4, #8]
 8011aca:	fbb0 f2f1 	udiv	r2, r0, r1
 8011ace:	fb01 0912 	mls	r9, r1, r2, r0
 8011ad2:	fa1f f289 	uxth.w	r2, r9
 8011ad6:	6863      	ldr	r3, [r4, #4]
 8011ad8:	fbb3 f9f1 	udiv	r9, r3, r1
 8011adc:	6823      	ldr	r3, [r4, #0]
 8011ade:	fb02 f909 	mul.w	r9, r2, r9
 8011ae2:	f109 0904 	add.w	r9, r9, #4
 8011ae6:	4499      	add	r9, r3
 8011ae8:	4607      	mov	r7, r0
 8011aea:	7b23      	ldrb	r3, [r4, #12]
 8011aec:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011af0:	e76b      	b.n	80119ca <uxr_prepare_output_stream_fragmented+0x66>
 8011af2:	bf00      	nop
 8011af4:	080117f1 	.word	0x080117f1

08011af8 <uxr_serialize_message_header>:
 8011af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011afa:	b083      	sub	sp, #12
 8011afc:	4616      	mov	r6, r2
 8011afe:	4604      	mov	r4, r0
 8011b00:	9301      	str	r3, [sp, #4]
 8011b02:	460d      	mov	r5, r1
 8011b04:	9f08      	ldr	r7, [sp, #32]
 8011b06:	f7f8 fefd 	bl	800a904 <ucdr_serialize_uint8_t>
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f7f8 fef9 	bl	800a904 <ucdr_serialize_uint8_t>
 8011b12:	9a01      	ldr	r2, [sp, #4]
 8011b14:	2101      	movs	r1, #1
 8011b16:	4620      	mov	r0, r4
 8011b18:	f7f8 ffa0 	bl	800aa5c <ucdr_serialize_endian_uint16_t>
 8011b1c:	062b      	lsls	r3, r5, #24
 8011b1e:	d501      	bpl.n	8011b24 <uxr_serialize_message_header+0x2c>
 8011b20:	b003      	add	sp, #12
 8011b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b24:	2204      	movs	r2, #4
 8011b26:	4639      	mov	r1, r7
 8011b28:	4620      	mov	r0, r4
 8011b2a:	b003      	add	sp, #12
 8011b2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011b30:	f7fd ba18 	b.w	800ef64 <ucdr_serialize_array_uint8_t>

08011b34 <uxr_deserialize_message_header>:
 8011b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b36:	b083      	sub	sp, #12
 8011b38:	4616      	mov	r6, r2
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	460d      	mov	r5, r1
 8011b40:	9f08      	ldr	r7, [sp, #32]
 8011b42:	f7f8 fef5 	bl	800a930 <ucdr_deserialize_uint8_t>
 8011b46:	4631      	mov	r1, r6
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f7f8 fef1 	bl	800a930 <ucdr_deserialize_uint8_t>
 8011b4e:	9a01      	ldr	r2, [sp, #4]
 8011b50:	2101      	movs	r1, #1
 8011b52:	4620      	mov	r0, r4
 8011b54:	f7f9 f876 	bl	800ac44 <ucdr_deserialize_endian_uint16_t>
 8011b58:	f995 3000 	ldrsb.w	r3, [r5]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	da01      	bge.n	8011b64 <uxr_deserialize_message_header+0x30>
 8011b60:	b003      	add	sp, #12
 8011b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b64:	2204      	movs	r2, #4
 8011b66:	4639      	mov	r1, r7
 8011b68:	4620      	mov	r0, r4
 8011b6a:	b003      	add	sp, #12
 8011b6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011b70:	f7fd ba5c 	b.w	800f02c <ucdr_deserialize_array_uint8_t>

08011b74 <uxr_serialize_submessage_header>:
 8011b74:	b530      	push	{r4, r5, lr}
 8011b76:	b083      	sub	sp, #12
 8011b78:	4615      	mov	r5, r2
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	9301      	str	r3, [sp, #4]
 8011b7e:	f7f8 fec1 	bl	800a904 <ucdr_serialize_uint8_t>
 8011b82:	4629      	mov	r1, r5
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7f8 febd 	bl	800a904 <ucdr_serialize_uint8_t>
 8011b8a:	9a01      	ldr	r2, [sp, #4]
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	4620      	mov	r0, r4
 8011b90:	b003      	add	sp, #12
 8011b92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b96:	f7f8 bf61 	b.w	800aa5c <ucdr_serialize_endian_uint16_t>
 8011b9a:	bf00      	nop

08011b9c <uxr_deserialize_submessage_header>:
 8011b9c:	b530      	push	{r4, r5, lr}
 8011b9e:	b083      	sub	sp, #12
 8011ba0:	4615      	mov	r5, r2
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	f7f8 fec3 	bl	800a930 <ucdr_deserialize_uint8_t>
 8011baa:	4629      	mov	r1, r5
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7f8 febf 	bl	800a930 <ucdr_deserialize_uint8_t>
 8011bb2:	9a01      	ldr	r2, [sp, #4]
 8011bb4:	2101      	movs	r1, #1
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	b003      	add	sp, #12
 8011bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011bbe:	f7f9 b841 	b.w	800ac44 <ucdr_deserialize_endian_uint16_t>
 8011bc2:	bf00      	nop

08011bc4 <uxr_serialize_CLIENT_Representation>:
 8011bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bc8:	2204      	movs	r2, #4
 8011bca:	460e      	mov	r6, r1
 8011bcc:	4605      	mov	r5, r0
 8011bce:	f7fd f9c9 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011bd2:	2202      	movs	r2, #2
 8011bd4:	4607      	mov	r7, r0
 8011bd6:	1d31      	adds	r1, r6, #4
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f7fd f9c3 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011bde:	4038      	ands	r0, r7
 8011be0:	2202      	movs	r2, #2
 8011be2:	1db1      	adds	r1, r6, #6
 8011be4:	b2c7      	uxtb	r7, r0
 8011be6:	4628      	mov	r0, r5
 8011be8:	f7fd f9bc 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011bec:	2204      	movs	r2, #4
 8011bee:	4007      	ands	r7, r0
 8011bf0:	f106 0108 	add.w	r1, r6, #8
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f7fd f9b5 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011bfa:	7b31      	ldrb	r1, [r6, #12]
 8011bfc:	4007      	ands	r7, r0
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f7f8 fe80 	bl	800a904 <ucdr_serialize_uint8_t>
 8011c04:	7b71      	ldrb	r1, [r6, #13]
 8011c06:	4007      	ands	r7, r0
 8011c08:	4628      	mov	r0, r5
 8011c0a:	f7f8 fe4d 	bl	800a8a8 <ucdr_serialize_bool>
 8011c0e:	7b73      	ldrb	r3, [r6, #13]
 8011c10:	ea07 0800 	and.w	r8, r7, r0
 8011c14:	b93b      	cbnz	r3, 8011c26 <uxr_serialize_CLIENT_Representation+0x62>
 8011c16:	8bb1      	ldrh	r1, [r6, #28]
 8011c18:	4628      	mov	r0, r5
 8011c1a:	f7f8 fe9f 	bl	800a95c <ucdr_serialize_uint16_t>
 8011c1e:	ea08 0000 	and.w	r0, r8, r0
 8011c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c26:	6931      	ldr	r1, [r6, #16]
 8011c28:	4628      	mov	r0, r5
 8011c2a:	f7f9 f881 	bl	800ad30 <ucdr_serialize_uint32_t>
 8011c2e:	6933      	ldr	r3, [r6, #16]
 8011c30:	b1e3      	cbz	r3, 8011c6c <uxr_serialize_CLIENT_Representation+0xa8>
 8011c32:	b1c0      	cbz	r0, 8011c66 <uxr_serialize_CLIENT_Representation+0xa2>
 8011c34:	4637      	mov	r7, r6
 8011c36:	f04f 0900 	mov.w	r9, #0
 8011c3a:	e001      	b.n	8011c40 <uxr_serialize_CLIENT_Representation+0x7c>
 8011c3c:	3708      	adds	r7, #8
 8011c3e:	b194      	cbz	r4, 8011c66 <uxr_serialize_CLIENT_Representation+0xa2>
 8011c40:	6979      	ldr	r1, [r7, #20]
 8011c42:	4628      	mov	r0, r5
 8011c44:	f004 ffaa 	bl	8016b9c <ucdr_serialize_string>
 8011c48:	69b9      	ldr	r1, [r7, #24]
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	f004 ffa5 	bl	8016b9c <ucdr_serialize_string>
 8011c52:	6933      	ldr	r3, [r6, #16]
 8011c54:	f109 0901 	add.w	r9, r9, #1
 8011c58:	4004      	ands	r4, r0
 8011c5a:	4599      	cmp	r9, r3
 8011c5c:	b2e4      	uxtb	r4, r4
 8011c5e:	d3ed      	bcc.n	8011c3c <uxr_serialize_CLIENT_Representation+0x78>
 8011c60:	ea08 0804 	and.w	r8, r8, r4
 8011c64:	e7d7      	b.n	8011c16 <uxr_serialize_CLIENT_Representation+0x52>
 8011c66:	f04f 0800 	mov.w	r8, #0
 8011c6a:	e7d4      	b.n	8011c16 <uxr_serialize_CLIENT_Representation+0x52>
 8011c6c:	ea08 0800 	and.w	r8, r8, r0
 8011c70:	e7d1      	b.n	8011c16 <uxr_serialize_CLIENT_Representation+0x52>
 8011c72:	bf00      	nop

08011c74 <uxr_deserialize_CLIENT_Representation>:
 8011c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c78:	2204      	movs	r2, #4
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	4605      	mov	r5, r0
 8011c7e:	f7fd f9d5 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8011c82:	2202      	movs	r2, #2
 8011c84:	4607      	mov	r7, r0
 8011c86:	1d21      	adds	r1, r4, #4
 8011c88:	4628      	mov	r0, r5
 8011c8a:	f7fd f9cf 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8011c8e:	4038      	ands	r0, r7
 8011c90:	2202      	movs	r2, #2
 8011c92:	1da1      	adds	r1, r4, #6
 8011c94:	b2c6      	uxtb	r6, r0
 8011c96:	4628      	mov	r0, r5
 8011c98:	f7fd f9c8 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8011c9c:	2204      	movs	r2, #4
 8011c9e:	4006      	ands	r6, r0
 8011ca0:	f104 0108 	add.w	r1, r4, #8
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f7fd f9c1 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8011caa:	f104 010c 	add.w	r1, r4, #12
 8011cae:	4006      	ands	r6, r0
 8011cb0:	4628      	mov	r0, r5
 8011cb2:	f7f8 fe3d 	bl	800a930 <ucdr_deserialize_uint8_t>
 8011cb6:	f104 010d 	add.w	r1, r4, #13
 8011cba:	ea06 0700 	and.w	r7, r6, r0
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	f7f8 fe08 	bl	800a8d4 <ucdr_deserialize_bool>
 8011cc4:	7b63      	ldrb	r3, [r4, #13]
 8011cc6:	4007      	ands	r7, r0
 8011cc8:	b93b      	cbnz	r3, 8011cda <uxr_deserialize_CLIENT_Representation+0x66>
 8011cca:	f104 011c 	add.w	r1, r4, #28
 8011cce:	4628      	mov	r0, r5
 8011cd0:	f7f8 ff44 	bl	800ab5c <ucdr_deserialize_uint16_t>
 8011cd4:	4038      	ands	r0, r7
 8011cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cda:	f104 0110 	add.w	r1, r4, #16
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f7f9 f956 	bl	800af90 <ucdr_deserialize_uint32_t>
 8011ce4:	6923      	ldr	r3, [r4, #16]
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d903      	bls.n	8011cf2 <uxr_deserialize_CLIENT_Representation+0x7e>
 8011cea:	2301      	movs	r3, #1
 8011cec:	75ab      	strb	r3, [r5, #22]
 8011cee:	2700      	movs	r7, #0
 8011cf0:	e7eb      	b.n	8011cca <uxr_deserialize_CLIENT_Representation+0x56>
 8011cf2:	b30b      	cbz	r3, 8011d38 <uxr_deserialize_CLIENT_Representation+0xc4>
 8011cf4:	2800      	cmp	r0, #0
 8011cf6:	d0fa      	beq.n	8011cee <uxr_deserialize_CLIENT_Representation+0x7a>
 8011cf8:	46a0      	mov	r8, r4
 8011cfa:	f04f 0900 	mov.w	r9, #0
 8011cfe:	e001      	b.n	8011d04 <uxr_deserialize_CLIENT_Representation+0x90>
 8011d00:	2e00      	cmp	r6, #0
 8011d02:	d0f4      	beq.n	8011cee <uxr_deserialize_CLIENT_Representation+0x7a>
 8011d04:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f004 ff55 	bl	8016bbc <ucdr_deserialize_string>
 8011d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011d16:	4606      	mov	r6, r0
 8011d18:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f004 ff4d 	bl	8016bbc <ucdr_deserialize_string>
 8011d22:	6923      	ldr	r3, [r4, #16]
 8011d24:	f109 0901 	add.w	r9, r9, #1
 8011d28:	4006      	ands	r6, r0
 8011d2a:	4599      	cmp	r9, r3
 8011d2c:	f108 0808 	add.w	r8, r8, #8
 8011d30:	b2f6      	uxtb	r6, r6
 8011d32:	d3e5      	bcc.n	8011d00 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011d34:	4037      	ands	r7, r6
 8011d36:	e7c8      	b.n	8011cca <uxr_deserialize_CLIENT_Representation+0x56>
 8011d38:	4007      	ands	r7, r0
 8011d3a:	e7c6      	b.n	8011cca <uxr_deserialize_CLIENT_Representation+0x56>

08011d3c <uxr_serialize_AGENT_Representation>:
 8011d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d40:	2204      	movs	r2, #4
 8011d42:	460f      	mov	r7, r1
 8011d44:	4605      	mov	r5, r0
 8011d46:	f7fd f90d 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011d4a:	2202      	movs	r2, #2
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	1d39      	adds	r1, r7, #4
 8011d50:	4628      	mov	r0, r5
 8011d52:	f7fd f907 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011d56:	4020      	ands	r0, r4
 8011d58:	2202      	movs	r2, #2
 8011d5a:	1db9      	adds	r1, r7, #6
 8011d5c:	b2c4      	uxtb	r4, r0
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f7fd f900 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011d64:	7a39      	ldrb	r1, [r7, #8]
 8011d66:	4004      	ands	r4, r0
 8011d68:	4628      	mov	r0, r5
 8011d6a:	f7f8 fd9d 	bl	800a8a8 <ucdr_serialize_bool>
 8011d6e:	7a3b      	ldrb	r3, [r7, #8]
 8011d70:	ea00 0804 	and.w	r8, r0, r4
 8011d74:	b913      	cbnz	r3, 8011d7c <uxr_serialize_AGENT_Representation+0x40>
 8011d76:	4640      	mov	r0, r8
 8011d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d7c:	68f9      	ldr	r1, [r7, #12]
 8011d7e:	4628      	mov	r0, r5
 8011d80:	f7f8 ffd6 	bl	800ad30 <ucdr_serialize_uint32_t>
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	b303      	cbz	r3, 8011dca <uxr_serialize_AGENT_Representation+0x8e>
 8011d88:	b1d0      	cbz	r0, 8011dc0 <uxr_serialize_AGENT_Representation+0x84>
 8011d8a:	463e      	mov	r6, r7
 8011d8c:	f04f 0900 	mov.w	r9, #0
 8011d90:	e001      	b.n	8011d96 <uxr_serialize_AGENT_Representation+0x5a>
 8011d92:	3608      	adds	r6, #8
 8011d94:	b1a4      	cbz	r4, 8011dc0 <uxr_serialize_AGENT_Representation+0x84>
 8011d96:	6931      	ldr	r1, [r6, #16]
 8011d98:	4628      	mov	r0, r5
 8011d9a:	f004 feff 	bl	8016b9c <ucdr_serialize_string>
 8011d9e:	6971      	ldr	r1, [r6, #20]
 8011da0:	4604      	mov	r4, r0
 8011da2:	4628      	mov	r0, r5
 8011da4:	f004 fefa 	bl	8016b9c <ucdr_serialize_string>
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f109 0901 	add.w	r9, r9, #1
 8011dae:	4004      	ands	r4, r0
 8011db0:	4599      	cmp	r9, r3
 8011db2:	b2e4      	uxtb	r4, r4
 8011db4:	d3ed      	bcc.n	8011d92 <uxr_serialize_AGENT_Representation+0x56>
 8011db6:	ea08 0804 	and.w	r8, r8, r4
 8011dba:	4640      	mov	r0, r8
 8011dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dc0:	f04f 0800 	mov.w	r8, #0
 8011dc4:	4640      	mov	r0, r8
 8011dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dca:	ea08 0800 	and.w	r8, r8, r0
 8011dce:	e7d2      	b.n	8011d76 <uxr_serialize_AGENT_Representation+0x3a>

08011dd0 <uxr_serialize_DATAWRITER_Representation>:
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	460d      	mov	r5, r1
 8011dd4:	7809      	ldrb	r1, [r1, #0]
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	f7f8 fd94 	bl	800a904 <ucdr_serialize_uint8_t>
 8011ddc:	4604      	mov	r4, r0
 8011dde:	b130      	cbz	r0, 8011dee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011de0:	782b      	ldrb	r3, [r5, #0]
 8011de2:	2b02      	cmp	r3, #2
 8011de4:	d00c      	beq.n	8011e00 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011de6:	2b03      	cmp	r3, #3
 8011de8:	d010      	beq.n	8011e0c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d008      	beq.n	8011e00 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011dee:	2202      	movs	r2, #2
 8011df0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011df4:	4630      	mov	r0, r6
 8011df6:	f7fd f8b5 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011dfa:	4020      	ands	r0, r4
 8011dfc:	b2c0      	uxtb	r0, r0
 8011dfe:	bd70      	pop	{r4, r5, r6, pc}
 8011e00:	6869      	ldr	r1, [r5, #4]
 8011e02:	4630      	mov	r0, r6
 8011e04:	f004 feca 	bl	8016b9c <ucdr_serialize_string>
 8011e08:	4604      	mov	r4, r0
 8011e0a:	e7f0      	b.n	8011dee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011e14:	3104      	adds	r1, #4
 8011e16:	f7fd fa43 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	e7e7      	b.n	8011dee <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011e1e:	bf00      	nop

08011e20 <uxr_serialize_ObjectVariant.part.0>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	780b      	ldrb	r3, [r1, #0]
 8011e24:	3b01      	subs	r3, #1
 8011e26:	460c      	mov	r4, r1
 8011e28:	4605      	mov	r5, r0
 8011e2a:	2b0d      	cmp	r3, #13
 8011e2c:	d854      	bhi.n	8011ed8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011e2e:	e8df f003 	tbb	[pc, r3]
 8011e32:	0730      	.short	0x0730
 8011e34:	07071b1b 	.word	0x07071b1b
 8011e38:	0c530707 	.word	0x0c530707
 8011e3c:	494e0c0c 	.word	0x494e0c0c
 8011e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e44:	3104      	adds	r1, #4
 8011e46:	f7ff bfc3 	b.w	8011dd0 <uxr_serialize_DATAWRITER_Representation>
 8011e4a:	7909      	ldrb	r1, [r1, #4]
 8011e4c:	f7f8 fd5a 	bl	800a904 <ucdr_serialize_uint8_t>
 8011e50:	b1e8      	cbz	r0, 8011e8e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8011e52:	7923      	ldrb	r3, [r4, #4]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d001      	beq.n	8011e5c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011e58:	2b02      	cmp	r3, #2
 8011e5a:	d13d      	bne.n	8011ed8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011e5c:	68a1      	ldr	r1, [r4, #8]
 8011e5e:	4628      	mov	r0, r5
 8011e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e64:	f004 be9a 	b.w	8016b9c <ucdr_serialize_string>
 8011e68:	7909      	ldrb	r1, [r1, #4]
 8011e6a:	f7f8 fd4b 	bl	800a904 <ucdr_serialize_uint8_t>
 8011e6e:	4606      	mov	r6, r0
 8011e70:	b120      	cbz	r0, 8011e7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011e72:	7923      	ldrb	r3, [r4, #4]
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d039      	beq.n	8011eec <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011e78:	2b03      	cmp	r3, #3
 8011e7a:	d02f      	beq.n	8011edc <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8011e82:	4628      	mov	r0, r5
 8011e84:	f7fd f86e 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8011e88:	4030      	ands	r0, r6
 8011e8a:	b2c0      	uxtb	r0, r0
 8011e8c:	bd70      	pop	{r4, r5, r6, pc}
 8011e8e:	2000      	movs	r0, #0
 8011e90:	bd70      	pop	{r4, r5, r6, pc}
 8011e92:	7909      	ldrb	r1, [r1, #4]
 8011e94:	f7f8 fd36 	bl	800a904 <ucdr_serialize_uint8_t>
 8011e98:	4606      	mov	r6, r0
 8011e9a:	b158      	cbz	r0, 8011eb4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011e9c:	7923      	ldrb	r3, [r4, #4]
 8011e9e:	2b02      	cmp	r3, #2
 8011ea0:	d003      	beq.n	8011eaa <uxr_serialize_ObjectVariant.part.0+0x8a>
 8011ea2:	2b03      	cmp	r3, #3
 8011ea4:	d028      	beq.n	8011ef8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d104      	bne.n	8011eb4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011eaa:	68a1      	ldr	r1, [r4, #8]
 8011eac:	4628      	mov	r0, r5
 8011eae:	f004 fe75 	bl	8016b9c <ucdr_serialize_string>
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011eb8:	4628      	mov	r0, r5
 8011eba:	f7f9 fa5f 	bl	800b37c <ucdr_serialize_int16_t>
 8011ebe:	4030      	ands	r0, r6
 8011ec0:	b2c0      	uxtb	r0, r0
 8011ec2:	bd70      	pop	{r4, r5, r6, pc}
 8011ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ec8:	3104      	adds	r1, #4
 8011eca:	f7ff be7b 	b.w	8011bc4 <uxr_serialize_CLIENT_Representation>
 8011ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ed2:	3104      	adds	r1, #4
 8011ed4:	f7ff bf32 	b.w	8011d3c <uxr_serialize_AGENT_Representation>
 8011ed8:	2001      	movs	r0, #1
 8011eda:	bd70      	pop	{r4, r5, r6, pc}
 8011edc:	68a2      	ldr	r2, [r4, #8]
 8011ede:	f104 010c 	add.w	r1, r4, #12
 8011ee2:	4628      	mov	r0, r5
 8011ee4:	f7fd f9dc 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 8011ee8:	4606      	mov	r6, r0
 8011eea:	e7c7      	b.n	8011e7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011eec:	68a1      	ldr	r1, [r4, #8]
 8011eee:	4628      	mov	r0, r5
 8011ef0:	f004 fe54 	bl	8016b9c <ucdr_serialize_string>
 8011ef4:	4606      	mov	r6, r0
 8011ef6:	e7c1      	b.n	8011e7c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011ef8:	68a2      	ldr	r2, [r4, #8]
 8011efa:	f104 010c 	add.w	r1, r4, #12
 8011efe:	4628      	mov	r0, r5
 8011f00:	f7fd f9ce 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 8011f04:	4606      	mov	r6, r0
 8011f06:	e7d5      	b.n	8011eb4 <uxr_serialize_ObjectVariant.part.0+0x94>

08011f08 <uxr_deserialize_DATAWRITER_Representation>:
 8011f08:	b570      	push	{r4, r5, r6, lr}
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	460d      	mov	r5, r1
 8011f0e:	f7f8 fd0f 	bl	800a930 <ucdr_deserialize_uint8_t>
 8011f12:	4604      	mov	r4, r0
 8011f14:	b130      	cbz	r0, 8011f24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011f16:	782b      	ldrb	r3, [r5, #0]
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	d00c      	beq.n	8011f36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011f1c:	2b03      	cmp	r3, #3
 8011f1e:	d012      	beq.n	8011f46 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d008      	beq.n	8011f36 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011f24:	2202      	movs	r2, #2
 8011f26:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f7fd f87e 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8011f30:	4020      	ands	r0, r4
 8011f32:	b2c0      	uxtb	r0, r0
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
 8011f36:	6869      	ldr	r1, [r5, #4]
 8011f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f004 fe3d 	bl	8016bbc <ucdr_deserialize_string>
 8011f42:	4604      	mov	r4, r0
 8011f44:	e7ee      	b.n	8011f24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011f46:	1d2b      	adds	r3, r5, #4
 8011f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f4c:	f105 0108 	add.w	r1, r5, #8
 8011f50:	4630      	mov	r0, r6
 8011f52:	f7fd f9b7 	bl	800f2c4 <ucdr_deserialize_sequence_uint8_t>
 8011f56:	4604      	mov	r4, r0
 8011f58:	e7e4      	b.n	8011f24 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011f5a:	bf00      	nop

08011f5c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011f5c:	b570      	push	{r4, r5, r6, lr}
 8011f5e:	460d      	mov	r5, r1
 8011f60:	7809      	ldrb	r1, [r1, #0]
 8011f62:	4606      	mov	r6, r0
 8011f64:	f7f8 fca0 	bl	800a8a8 <ucdr_serialize_bool>
 8011f68:	782b      	ldrb	r3, [r5, #0]
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	b94b      	cbnz	r3, 8011f82 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011f6e:	7a29      	ldrb	r1, [r5, #8]
 8011f70:	4630      	mov	r0, r6
 8011f72:	f7f8 fc99 	bl	800a8a8 <ucdr_serialize_bool>
 8011f76:	7a2b      	ldrb	r3, [r5, #8]
 8011f78:	4004      	ands	r4, r0
 8011f7a:	b2e4      	uxtb	r4, r4
 8011f7c:	b943      	cbnz	r3, 8011f90 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011f7e:	4620      	mov	r0, r4
 8011f80:	bd70      	pop	{r4, r5, r6, pc}
 8011f82:	6869      	ldr	r1, [r5, #4]
 8011f84:	4630      	mov	r0, r6
 8011f86:	f004 fe09 	bl	8016b9c <ucdr_serialize_string>
 8011f8a:	4004      	ands	r4, r0
 8011f8c:	b2e4      	uxtb	r4, r4
 8011f8e:	e7ee      	b.n	8011f6e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011f90:	68e9      	ldr	r1, [r5, #12]
 8011f92:	4630      	mov	r0, r6
 8011f94:	f004 fe02 	bl	8016b9c <ucdr_serialize_string>
 8011f98:	4004      	ands	r4, r0
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	bd70      	pop	{r4, r5, r6, pc}
 8011f9e:	bf00      	nop

08011fa0 <uxr_serialize_OBJK_Topic_Binary>:
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	460d      	mov	r5, r1
 8011fa4:	6809      	ldr	r1, [r1, #0]
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	f004 fdf8 	bl	8016b9c <ucdr_serialize_string>
 8011fac:	7929      	ldrb	r1, [r5, #4]
 8011fae:	4604      	mov	r4, r0
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f7f8 fc79 	bl	800a8a8 <ucdr_serialize_bool>
 8011fb6:	792b      	ldrb	r3, [r5, #4]
 8011fb8:	4004      	ands	r4, r0
 8011fba:	b2e4      	uxtb	r4, r4
 8011fbc:	b943      	cbnz	r3, 8011fd0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011fbe:	7b29      	ldrb	r1, [r5, #12]
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f7f8 fc71 	bl	800a8a8 <ucdr_serialize_bool>
 8011fc6:	7b2b      	ldrb	r3, [r5, #12]
 8011fc8:	4004      	ands	r4, r0
 8011fca:	b93b      	cbnz	r3, 8011fdc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011fcc:	4620      	mov	r0, r4
 8011fce:	bd70      	pop	{r4, r5, r6, pc}
 8011fd0:	68a9      	ldr	r1, [r5, #8]
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f004 fde2 	bl	8016b9c <ucdr_serialize_string>
 8011fd8:	4004      	ands	r4, r0
 8011fda:	e7f0      	b.n	8011fbe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011fdc:	6929      	ldr	r1, [r5, #16]
 8011fde:	4630      	mov	r0, r6
 8011fe0:	f004 fddc 	bl	8016b9c <ucdr_serialize_string>
 8011fe4:	4004      	ands	r4, r0
 8011fe6:	b2e4      	uxtb	r4, r4
 8011fe8:	4620      	mov	r0, r4
 8011fea:	bd70      	pop	{r4, r5, r6, pc}

08011fec <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff0:	460c      	mov	r4, r1
 8011ff2:	7809      	ldrb	r1, [r1, #0]
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	f7f8 fc57 	bl	800a8a8 <ucdr_serialize_bool>
 8011ffa:	7823      	ldrb	r3, [r4, #0]
 8011ffc:	4605      	mov	r5, r0
 8011ffe:	b96b      	cbnz	r3, 801201c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012000:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012004:	4630      	mov	r0, r6
 8012006:	f7f8 fc4f 	bl	800a8a8 <ucdr_serialize_bool>
 801200a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801200e:	4005      	ands	r5, r0
 8012010:	b2ed      	uxtb	r5, r5
 8012012:	2b00      	cmp	r3, #0
 8012014:	d169      	bne.n	80120ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012016:	4628      	mov	r0, r5
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201c:	6861      	ldr	r1, [r4, #4]
 801201e:	4630      	mov	r0, r6
 8012020:	f7f8 fe86 	bl	800ad30 <ucdr_serialize_uint32_t>
 8012024:	6863      	ldr	r3, [r4, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d06b      	beq.n	8012102 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801202a:	2800      	cmp	r0, #0
 801202c:	d067      	beq.n	80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801202e:	68a1      	ldr	r1, [r4, #8]
 8012030:	4630      	mov	r0, r6
 8012032:	f004 fdb3 	bl	8016b9c <ucdr_serialize_string>
 8012036:	6863      	ldr	r3, [r4, #4]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d953      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801203c:	2800      	cmp	r0, #0
 801203e:	d05e      	beq.n	80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012040:	68e1      	ldr	r1, [r4, #12]
 8012042:	4630      	mov	r0, r6
 8012044:	f004 fdaa 	bl	8016b9c <ucdr_serialize_string>
 8012048:	6863      	ldr	r3, [r4, #4]
 801204a:	2b02      	cmp	r3, #2
 801204c:	d94a      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801204e:	2800      	cmp	r0, #0
 8012050:	d055      	beq.n	80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012052:	6921      	ldr	r1, [r4, #16]
 8012054:	4630      	mov	r0, r6
 8012056:	f004 fda1 	bl	8016b9c <ucdr_serialize_string>
 801205a:	6863      	ldr	r3, [r4, #4]
 801205c:	2b03      	cmp	r3, #3
 801205e:	d941      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012060:	2800      	cmp	r0, #0
 8012062:	d04c      	beq.n	80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012064:	6961      	ldr	r1, [r4, #20]
 8012066:	4630      	mov	r0, r6
 8012068:	f004 fd98 	bl	8016b9c <ucdr_serialize_string>
 801206c:	6863      	ldr	r3, [r4, #4]
 801206e:	2b04      	cmp	r3, #4
 8012070:	d938      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012072:	2800      	cmp	r0, #0
 8012074:	d043      	beq.n	80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012076:	69a1      	ldr	r1, [r4, #24]
 8012078:	4630      	mov	r0, r6
 801207a:	f004 fd8f 	bl	8016b9c <ucdr_serialize_string>
 801207e:	6863      	ldr	r3, [r4, #4]
 8012080:	2b05      	cmp	r3, #5
 8012082:	d92f      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012084:	2800      	cmp	r0, #0
 8012086:	d03a      	beq.n	80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012088:	69e1      	ldr	r1, [r4, #28]
 801208a:	4630      	mov	r0, r6
 801208c:	f004 fd86 	bl	8016b9c <ucdr_serialize_string>
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	2b06      	cmp	r3, #6
 8012094:	d926      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012096:	b390      	cbz	r0, 80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012098:	6a21      	ldr	r1, [r4, #32]
 801209a:	4630      	mov	r0, r6
 801209c:	f004 fd7e 	bl	8016b9c <ucdr_serialize_string>
 80120a0:	6863      	ldr	r3, [r4, #4]
 80120a2:	2b07      	cmp	r3, #7
 80120a4:	d91e      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120a6:	b350      	cbz	r0, 80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80120aa:	4630      	mov	r0, r6
 80120ac:	f004 fd76 	bl	8016b9c <ucdr_serialize_string>
 80120b0:	6863      	ldr	r3, [r4, #4]
 80120b2:	2b08      	cmp	r3, #8
 80120b4:	d916      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120b6:	b310      	cbz	r0, 80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120b8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80120ba:	4630      	mov	r0, r6
 80120bc:	f004 fd6e 	bl	8016b9c <ucdr_serialize_string>
 80120c0:	6863      	ldr	r3, [r4, #4]
 80120c2:	2b09      	cmp	r3, #9
 80120c4:	d90e      	bls.n	80120e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80120c6:	b1d0      	cbz	r0, 80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120c8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80120cc:	2709      	movs	r7, #9
 80120ce:	e000      	b.n	80120d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80120d0:	b1a8      	cbz	r0, 80120fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80120d2:	f858 1b04 	ldr.w	r1, [r8], #4
 80120d6:	4630      	mov	r0, r6
 80120d8:	f004 fd60 	bl	8016b9c <ucdr_serialize_string>
 80120dc:	6862      	ldr	r2, [r4, #4]
 80120de:	3701      	adds	r7, #1
 80120e0:	4297      	cmp	r7, r2
 80120e2:	d3f5      	bcc.n	80120d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80120e4:	4005      	ands	r5, r0
 80120e6:	b2ed      	uxtb	r5, r5
 80120e8:	e78a      	b.n	8012000 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80120ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80120ec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80120f0:	4630      	mov	r0, r6
 80120f2:	f7fd f8d5 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 80120f6:	4005      	ands	r5, r0
 80120f8:	4628      	mov	r0, r5
 80120fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120fe:	2500      	movs	r5, #0
 8012100:	e77e      	b.n	8012000 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012102:	4028      	ands	r0, r5
 8012104:	b2c5      	uxtb	r5, r0
 8012106:	e77b      	b.n	8012000 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012108 <uxr_serialize_OBJK_Publisher_Binary>:
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	460d      	mov	r5, r1
 801210c:	7809      	ldrb	r1, [r1, #0]
 801210e:	4606      	mov	r6, r0
 8012110:	f7f8 fbca 	bl	800a8a8 <ucdr_serialize_bool>
 8012114:	782b      	ldrb	r3, [r5, #0]
 8012116:	4604      	mov	r4, r0
 8012118:	b94b      	cbnz	r3, 801212e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801211a:	7a29      	ldrb	r1, [r5, #8]
 801211c:	4630      	mov	r0, r6
 801211e:	f7f8 fbc3 	bl	800a8a8 <ucdr_serialize_bool>
 8012122:	7a2b      	ldrb	r3, [r5, #8]
 8012124:	4004      	ands	r4, r0
 8012126:	b2e4      	uxtb	r4, r4
 8012128:	b943      	cbnz	r3, 801213c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801212a:	4620      	mov	r0, r4
 801212c:	bd70      	pop	{r4, r5, r6, pc}
 801212e:	6869      	ldr	r1, [r5, #4]
 8012130:	4630      	mov	r0, r6
 8012132:	f004 fd33 	bl	8016b9c <ucdr_serialize_string>
 8012136:	4004      	ands	r4, r0
 8012138:	b2e4      	uxtb	r4, r4
 801213a:	e7ee      	b.n	801211a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801213c:	f105 010c 	add.w	r1, r5, #12
 8012140:	4630      	mov	r0, r6
 8012142:	f7ff ff53 	bl	8011fec <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012146:	4004      	ands	r4, r0
 8012148:	4620      	mov	r0, r4
 801214a:	bd70      	pop	{r4, r5, r6, pc}

0801214c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801214c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012150:	4688      	mov	r8, r1
 8012152:	8809      	ldrh	r1, [r1, #0]
 8012154:	4681      	mov	r9, r0
 8012156:	f7f8 fc01 	bl	800a95c <ucdr_serialize_uint16_t>
 801215a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801215e:	4606      	mov	r6, r0
 8012160:	4648      	mov	r0, r9
 8012162:	f7f8 fba1 	bl	800a8a8 <ucdr_serialize_bool>
 8012166:	f898 3002 	ldrb.w	r3, [r8, #2]
 801216a:	4006      	ands	r6, r0
 801216c:	b2f5      	uxtb	r5, r6
 801216e:	b9eb      	cbnz	r3, 80121ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012170:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012174:	4648      	mov	r0, r9
 8012176:	f7f8 fb97 	bl	800a8a8 <ucdr_serialize_bool>
 801217a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801217e:	4005      	ands	r5, r0
 8012180:	bb7b      	cbnz	r3, 80121e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012182:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012186:	4648      	mov	r0, r9
 8012188:	f7f8 fb8e 	bl	800a8a8 <ucdr_serialize_bool>
 801218c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012190:	4005      	ands	r5, r0
 8012192:	b9f3      	cbnz	r3, 80121d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012194:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012198:	4648      	mov	r0, r9
 801219a:	f7f8 fb85 	bl	800a8a8 <ucdr_serialize_bool>
 801219e:	f898 3014 	ldrb.w	r3, [r8, #20]
 80121a2:	4005      	ands	r5, r0
 80121a4:	b94b      	cbnz	r3, 80121ba <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80121a6:	4628      	mov	r0, r5
 80121a8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80121ac:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80121b0:	4648      	mov	r0, r9
 80121b2:	f7f8 fbd3 	bl	800a95c <ucdr_serialize_uint16_t>
 80121b6:	4005      	ands	r5, r0
 80121b8:	e7da      	b.n	8012170 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80121ba:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80121be:	f108 011c 	add.w	r1, r8, #28
 80121c2:	4648      	mov	r0, r9
 80121c4:	f7fd f86c 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 80121c8:	4028      	ands	r0, r5
 80121ca:	b2c5      	uxtb	r5, r0
 80121cc:	4628      	mov	r0, r5
 80121ce:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80121d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80121d6:	4648      	mov	r0, r9
 80121d8:	f7f8 fdaa 	bl	800ad30 <ucdr_serialize_uint32_t>
 80121dc:	4028      	ands	r0, r5
 80121de:	b2c5      	uxtb	r5, r0
 80121e0:	e7d8      	b.n	8012194 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80121e2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80121e6:	4648      	mov	r0, r9
 80121e8:	f7f8 fda2 	bl	800ad30 <ucdr_serialize_uint32_t>
 80121ec:	4028      	ands	r0, r5
 80121ee:	b2c5      	uxtb	r5, r0
 80121f0:	e7c7      	b.n	8012182 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80121f2:	bf00      	nop

080121f4 <uxr_serialize_OBJK_DataWriter_Binary>:
 80121f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f6:	2202      	movs	r2, #2
 80121f8:	460d      	mov	r5, r1
 80121fa:	4606      	mov	r6, r0
 80121fc:	f7fc feb2 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012200:	78a9      	ldrb	r1, [r5, #2]
 8012202:	4604      	mov	r4, r0
 8012204:	4630      	mov	r0, r6
 8012206:	f7f8 fb4f 	bl	800a8a8 <ucdr_serialize_bool>
 801220a:	78ab      	ldrb	r3, [r5, #2]
 801220c:	4004      	ands	r4, r0
 801220e:	b2e4      	uxtb	r4, r4
 8012210:	b90b      	cbnz	r3, 8012216 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012212:	4620      	mov	r0, r4
 8012214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012216:	f105 0108 	add.w	r1, r5, #8
 801221a:	4630      	mov	r0, r6
 801221c:	f7ff ff96 	bl	801214c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012220:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012224:	4607      	mov	r7, r0
 8012226:	4630      	mov	r0, r6
 8012228:	f7f8 fb3e 	bl	800a8a8 <ucdr_serialize_bool>
 801222c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012230:	4038      	ands	r0, r7
 8012232:	b2c7      	uxtb	r7, r0
 8012234:	b913      	cbnz	r3, 801223c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012236:	403c      	ands	r4, r7
 8012238:	4620      	mov	r0, r4
 801223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801223c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012240:	4630      	mov	r0, r6
 8012242:	f7f8 ffcb 	bl	800b1dc <ucdr_serialize_uint64_t>
 8012246:	4007      	ands	r7, r0
 8012248:	e7f5      	b.n	8012236 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801224a:	bf00      	nop

0801224c <uxr_deserialize_ObjectVariant>:
 801224c:	b570      	push	{r4, r5, r6, lr}
 801224e:	4605      	mov	r5, r0
 8012250:	460e      	mov	r6, r1
 8012252:	f7f8 fb6d 	bl	800a930 <ucdr_deserialize_uint8_t>
 8012256:	b168      	cbz	r0, 8012274 <uxr_deserialize_ObjectVariant+0x28>
 8012258:	7833      	ldrb	r3, [r6, #0]
 801225a:	3b01      	subs	r3, #1
 801225c:	4604      	mov	r4, r0
 801225e:	2b0d      	cmp	r3, #13
 8012260:	d809      	bhi.n	8012276 <uxr_deserialize_ObjectVariant+0x2a>
 8012262:	e8df f003 	tbb	[pc, r3]
 8012266:	0a41      	.short	0x0a41
 8012268:	0a0a2323 	.word	0x0a0a2323
 801226c:	10080a0a 	.word	0x10080a0a
 8012270:	565c1010 	.word	0x565c1010
 8012274:	2400      	movs	r4, #0
 8012276:	4620      	mov	r0, r4
 8012278:	bd70      	pop	{r4, r5, r6, pc}
 801227a:	1d31      	adds	r1, r6, #4
 801227c:	4628      	mov	r0, r5
 801227e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012282:	f7ff be41 	b.w	8011f08 <uxr_deserialize_DATAWRITER_Representation>
 8012286:	1d31      	adds	r1, r6, #4
 8012288:	4628      	mov	r0, r5
 801228a:	f7f8 fb51 	bl	800a930 <ucdr_deserialize_uint8_t>
 801228e:	2800      	cmp	r0, #0
 8012290:	d0f0      	beq.n	8012274 <uxr_deserialize_ObjectVariant+0x28>
 8012292:	7933      	ldrb	r3, [r6, #4]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d001      	beq.n	801229c <uxr_deserialize_ObjectVariant+0x50>
 8012298:	2b02      	cmp	r3, #2
 801229a:	d1ec      	bne.n	8012276 <uxr_deserialize_ObjectVariant+0x2a>
 801229c:	68b1      	ldr	r1, [r6, #8]
 801229e:	4628      	mov	r0, r5
 80122a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122a8:	f004 bc88 	b.w	8016bbc <ucdr_deserialize_string>
 80122ac:	1d31      	adds	r1, r6, #4
 80122ae:	4628      	mov	r0, r5
 80122b0:	f7f8 fb3e 	bl	800a930 <ucdr_deserialize_uint8_t>
 80122b4:	4604      	mov	r4, r0
 80122b6:	b170      	cbz	r0, 80122d6 <uxr_deserialize_ObjectVariant+0x8a>
 80122b8:	7933      	ldrb	r3, [r6, #4]
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d04c      	beq.n	8012358 <uxr_deserialize_ObjectVariant+0x10c>
 80122be:	2b03      	cmp	r3, #3
 80122c0:	d109      	bne.n	80122d6 <uxr_deserialize_ObjectVariant+0x8a>
 80122c2:	f106 0308 	add.w	r3, r6, #8
 80122c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122ca:	f106 010c 	add.w	r1, r6, #12
 80122ce:	4628      	mov	r0, r5
 80122d0:	f7fc fff8 	bl	800f2c4 <ucdr_deserialize_sequence_uint8_t>
 80122d4:	4604      	mov	r4, r0
 80122d6:	2202      	movs	r2, #2
 80122d8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80122dc:	4628      	mov	r0, r5
 80122de:	f7fc fea5 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80122e2:	4020      	ands	r0, r4
 80122e4:	b2c4      	uxtb	r4, r0
 80122e6:	e7c6      	b.n	8012276 <uxr_deserialize_ObjectVariant+0x2a>
 80122e8:	1d31      	adds	r1, r6, #4
 80122ea:	4628      	mov	r0, r5
 80122ec:	f7f8 fb20 	bl	800a930 <ucdr_deserialize_uint8_t>
 80122f0:	4604      	mov	r4, r0
 80122f2:	b130      	cbz	r0, 8012302 <uxr_deserialize_ObjectVariant+0xb6>
 80122f4:	7933      	ldrb	r3, [r6, #4]
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	d036      	beq.n	8012368 <uxr_deserialize_ObjectVariant+0x11c>
 80122fa:	2b03      	cmp	r3, #3
 80122fc:	d03c      	beq.n	8012378 <uxr_deserialize_ObjectVariant+0x12c>
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d032      	beq.n	8012368 <uxr_deserialize_ObjectVariant+0x11c>
 8012302:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012306:	4628      	mov	r0, r5
 8012308:	f7f9 f8b8 	bl	800b47c <ucdr_deserialize_int16_t>
 801230c:	4020      	ands	r0, r4
 801230e:	b2c4      	uxtb	r4, r0
 8012310:	e7b1      	b.n	8012276 <uxr_deserialize_ObjectVariant+0x2a>
 8012312:	1d31      	adds	r1, r6, #4
 8012314:	4628      	mov	r0, r5
 8012316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801231a:	f7ff bcab 	b.w	8011c74 <uxr_deserialize_CLIENT_Representation>
 801231e:	2204      	movs	r2, #4
 8012320:	18b1      	adds	r1, r6, r2
 8012322:	4628      	mov	r0, r5
 8012324:	f7fc fe82 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012328:	2202      	movs	r2, #2
 801232a:	f106 0108 	add.w	r1, r6, #8
 801232e:	4604      	mov	r4, r0
 8012330:	4628      	mov	r0, r5
 8012332:	f7fc fe7b 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012336:	2202      	movs	r2, #2
 8012338:	4004      	ands	r4, r0
 801233a:	f106 010a 	add.w	r1, r6, #10
 801233e:	4628      	mov	r0, r5
 8012340:	f7fc fe74 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012344:	b2e4      	uxtb	r4, r4
 8012346:	4603      	mov	r3, r0
 8012348:	f106 010c 	add.w	r1, r6, #12
 801234c:	4628      	mov	r0, r5
 801234e:	401c      	ands	r4, r3
 8012350:	f7f8 fac0 	bl	800a8d4 <ucdr_deserialize_bool>
 8012354:	4004      	ands	r4, r0
 8012356:	e78e      	b.n	8012276 <uxr_deserialize_ObjectVariant+0x2a>
 8012358:	68b1      	ldr	r1, [r6, #8]
 801235a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801235e:	4628      	mov	r0, r5
 8012360:	f004 fc2c 	bl	8016bbc <ucdr_deserialize_string>
 8012364:	4604      	mov	r4, r0
 8012366:	e7b6      	b.n	80122d6 <uxr_deserialize_ObjectVariant+0x8a>
 8012368:	68b1      	ldr	r1, [r6, #8]
 801236a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801236e:	4628      	mov	r0, r5
 8012370:	f004 fc24 	bl	8016bbc <ucdr_deserialize_string>
 8012374:	4604      	mov	r4, r0
 8012376:	e7c4      	b.n	8012302 <uxr_deserialize_ObjectVariant+0xb6>
 8012378:	f106 0308 	add.w	r3, r6, #8
 801237c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012380:	f106 010c 	add.w	r1, r6, #12
 8012384:	4628      	mov	r0, r5
 8012386:	f7fc ff9d 	bl	800f2c4 <ucdr_deserialize_sequence_uint8_t>
 801238a:	4604      	mov	r4, r0
 801238c:	e7b9      	b.n	8012302 <uxr_deserialize_ObjectVariant+0xb6>
 801238e:	bf00      	nop

08012390 <uxr_deserialize_BaseObjectRequest>:
 8012390:	b570      	push	{r4, r5, r6, lr}
 8012392:	2202      	movs	r2, #2
 8012394:	4605      	mov	r5, r0
 8012396:	460e      	mov	r6, r1
 8012398:	f7fc fe48 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 801239c:	2202      	movs	r2, #2
 801239e:	4604      	mov	r4, r0
 80123a0:	18b1      	adds	r1, r6, r2
 80123a2:	4628      	mov	r0, r5
 80123a4:	f7fc fe42 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80123a8:	4020      	ands	r0, r4
 80123aa:	b2c0      	uxtb	r0, r0
 80123ac:	bd70      	pop	{r4, r5, r6, pc}
 80123ae:	bf00      	nop

080123b0 <uxr_serialize_ActivityInfoVariant>:
 80123b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b4:	460d      	mov	r5, r1
 80123b6:	7809      	ldrb	r1, [r1, #0]
 80123b8:	4607      	mov	r7, r0
 80123ba:	f7f8 faa3 	bl	800a904 <ucdr_serialize_uint8_t>
 80123be:	4681      	mov	r9, r0
 80123c0:	b138      	cbz	r0, 80123d2 <uxr_serialize_ActivityInfoVariant+0x22>
 80123c2:	782b      	ldrb	r3, [r5, #0]
 80123c4:	2b06      	cmp	r3, #6
 80123c6:	f000 8082 	beq.w	80124ce <uxr_serialize_ActivityInfoVariant+0x11e>
 80123ca:	2b0d      	cmp	r3, #13
 80123cc:	d016      	beq.n	80123fc <uxr_serialize_ActivityInfoVariant+0x4c>
 80123ce:	2b05      	cmp	r3, #5
 80123d0:	d002      	beq.n	80123d8 <uxr_serialize_ActivityInfoVariant+0x28>
 80123d2:	4648      	mov	r0, r9
 80123d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80123dc:	4638      	mov	r0, r7
 80123de:	f7f8 ffcd 	bl	800b37c <ucdr_serialize_int16_t>
 80123e2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80123e6:	4681      	mov	r9, r0
 80123e8:	4638      	mov	r0, r7
 80123ea:	f7f8 fef7 	bl	800b1dc <ucdr_serialize_uint64_t>
 80123ee:	ea09 0000 	and.w	r0, r9, r0
 80123f2:	fa5f f980 	uxtb.w	r9, r0
 80123f6:	4648      	mov	r0, r9
 80123f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123fc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012400:	4638      	mov	r0, r7
 8012402:	f7f8 ffbb 	bl	800b37c <ucdr_serialize_int16_t>
 8012406:	68e9      	ldr	r1, [r5, #12]
 8012408:	4681      	mov	r9, r0
 801240a:	4638      	mov	r0, r7
 801240c:	f7f8 fc90 	bl	800ad30 <ucdr_serialize_uint32_t>
 8012410:	68eb      	ldr	r3, [r5, #12]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d0eb      	beq.n	80123ee <uxr_serialize_ActivityInfoVariant+0x3e>
 8012416:	b320      	cbz	r0, 8012462 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012418:	f105 080c 	add.w	r8, r5, #12
 801241c:	2600      	movs	r6, #0
 801241e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012422:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012426:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801242a:	4638      	mov	r0, r7
 801242c:	f7f8 fa6a 	bl	800a904 <ucdr_serialize_uint8_t>
 8012430:	2800      	cmp	r0, #0
 8012432:	d053      	beq.n	80124dc <uxr_serialize_ActivityInfoVariant+0x12c>
 8012434:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012438:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801243c:	0074      	lsls	r4, r6, #1
 801243e:	00c9      	lsls	r1, r1, #3
 8012440:	2b03      	cmp	r3, #3
 8012442:	d854      	bhi.n	80124ee <uxr_serialize_ActivityInfoVariant+0x13e>
 8012444:	e8df f003 	tbb	[pc, r3]
 8012448:	02102132 	.word	0x02102132
 801244c:	4441      	add	r1, r8
 801244e:	4638      	mov	r0, r7
 8012450:	6889      	ldr	r1, [r1, #8]
 8012452:	f004 fba3 	bl	8016b9c <ucdr_serialize_string>
 8012456:	68ea      	ldr	r2, [r5, #12]
 8012458:	3601      	adds	r6, #1
 801245a:	4296      	cmp	r6, r2
 801245c:	d242      	bcs.n	80124e4 <uxr_serialize_ActivityInfoVariant+0x134>
 801245e:	2800      	cmp	r0, #0
 8012460:	d1dd      	bne.n	801241e <uxr_serialize_ActivityInfoVariant+0x6e>
 8012462:	f04f 0900 	mov.w	r9, #0
 8012466:	e7b4      	b.n	80123d2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012468:	3108      	adds	r1, #8
 801246a:	4441      	add	r1, r8
 801246c:	2210      	movs	r2, #16
 801246e:	4638      	mov	r0, r7
 8012470:	f7fc fd78 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012474:	4434      	add	r4, r6
 8012476:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801247a:	4604      	mov	r4, r0
 801247c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801247e:	4638      	mov	r0, r7
 8012480:	f7f8 fc56 	bl	800ad30 <ucdr_serialize_uint32_t>
 8012484:	4020      	ands	r0, r4
 8012486:	b2c0      	uxtb	r0, r0
 8012488:	e7e5      	b.n	8012456 <uxr_serialize_ActivityInfoVariant+0xa6>
 801248a:	3108      	adds	r1, #8
 801248c:	4441      	add	r1, r8
 801248e:	2204      	movs	r2, #4
 8012490:	4638      	mov	r0, r7
 8012492:	f7fc fd67 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012496:	4434      	add	r4, r6
 8012498:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801249c:	4604      	mov	r4, r0
 801249e:	8b19      	ldrh	r1, [r3, #24]
 80124a0:	4638      	mov	r0, r7
 80124a2:	f7f8 fa5b 	bl	800a95c <ucdr_serialize_uint16_t>
 80124a6:	4020      	ands	r0, r4
 80124a8:	b2c0      	uxtb	r0, r0
 80124aa:	e7d4      	b.n	8012456 <uxr_serialize_ActivityInfoVariant+0xa6>
 80124ac:	3108      	adds	r1, #8
 80124ae:	4441      	add	r1, r8
 80124b0:	2202      	movs	r2, #2
 80124b2:	4638      	mov	r0, r7
 80124b4:	f7fc fd56 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80124b8:	4434      	add	r4, r6
 80124ba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80124be:	4604      	mov	r4, r0
 80124c0:	7d99      	ldrb	r1, [r3, #22]
 80124c2:	4638      	mov	r0, r7
 80124c4:	f7f8 fa1e 	bl	800a904 <ucdr_serialize_uint8_t>
 80124c8:	4020      	ands	r0, r4
 80124ca:	b2c0      	uxtb	r0, r0
 80124cc:	e7c3      	b.n	8012456 <uxr_serialize_ActivityInfoVariant+0xa6>
 80124ce:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80124d2:	4638      	mov	r0, r7
 80124d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124d8:	f7f8 bf50 	b.w	800b37c <ucdr_serialize_int16_t>
 80124dc:	68ea      	ldr	r2, [r5, #12]
 80124de:	3601      	adds	r6, #1
 80124e0:	42b2      	cmp	r2, r6
 80124e2:	d8be      	bhi.n	8012462 <uxr_serialize_ActivityInfoVariant+0xb2>
 80124e4:	ea09 0900 	and.w	r9, r9, r0
 80124e8:	fa5f f989 	uxtb.w	r9, r9
 80124ec:	e771      	b.n	80123d2 <uxr_serialize_ActivityInfoVariant+0x22>
 80124ee:	68eb      	ldr	r3, [r5, #12]
 80124f0:	3601      	adds	r6, #1
 80124f2:	429e      	cmp	r6, r3
 80124f4:	f10a 0a18 	add.w	sl, sl, #24
 80124f8:	d395      	bcc.n	8012426 <uxr_serialize_ActivityInfoVariant+0x76>
 80124fa:	e76a      	b.n	80123d2 <uxr_serialize_ActivityInfoVariant+0x22>

080124fc <uxr_deserialize_BaseObjectReply>:
 80124fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012500:	2202      	movs	r2, #2
 8012502:	4606      	mov	r6, r0
 8012504:	460f      	mov	r7, r1
 8012506:	f7fc fd91 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 801250a:	2202      	movs	r2, #2
 801250c:	18b9      	adds	r1, r7, r2
 801250e:	4605      	mov	r5, r0
 8012510:	4630      	mov	r0, r6
 8012512:	f7fc fd8b 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012516:	1d39      	adds	r1, r7, #4
 8012518:	4680      	mov	r8, r0
 801251a:	4630      	mov	r0, r6
 801251c:	f7f8 fa08 	bl	800a930 <ucdr_deserialize_uint8_t>
 8012520:	1d79      	adds	r1, r7, #5
 8012522:	4604      	mov	r4, r0
 8012524:	4630      	mov	r0, r6
 8012526:	f7f8 fa03 	bl	800a930 <ucdr_deserialize_uint8_t>
 801252a:	ea05 0508 	and.w	r5, r5, r8
 801252e:	402c      	ands	r4, r5
 8012530:	4020      	ands	r0, r4
 8012532:	b2c0      	uxtb	r0, r0
 8012534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012538 <uxr_serialize_ReadSpecification>:
 8012538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801253c:	460e      	mov	r6, r1
 801253e:	7809      	ldrb	r1, [r1, #0]
 8012540:	4607      	mov	r7, r0
 8012542:	f7f8 f9df 	bl	800a904 <ucdr_serialize_uint8_t>
 8012546:	7871      	ldrb	r1, [r6, #1]
 8012548:	4604      	mov	r4, r0
 801254a:	4638      	mov	r0, r7
 801254c:	f7f8 f9da 	bl	800a904 <ucdr_serialize_uint8_t>
 8012550:	78b1      	ldrb	r1, [r6, #2]
 8012552:	4004      	ands	r4, r0
 8012554:	4638      	mov	r0, r7
 8012556:	f7f8 f9a7 	bl	800a8a8 <ucdr_serialize_bool>
 801255a:	78b3      	ldrb	r3, [r6, #2]
 801255c:	b2e4      	uxtb	r4, r4
 801255e:	4004      	ands	r4, r0
 8012560:	b94b      	cbnz	r3, 8012576 <uxr_serialize_ReadSpecification+0x3e>
 8012562:	7a31      	ldrb	r1, [r6, #8]
 8012564:	4638      	mov	r0, r7
 8012566:	f7f8 f99f 	bl	800a8a8 <ucdr_serialize_bool>
 801256a:	7a33      	ldrb	r3, [r6, #8]
 801256c:	4004      	ands	r4, r0
 801256e:	b943      	cbnz	r3, 8012582 <uxr_serialize_ReadSpecification+0x4a>
 8012570:	4620      	mov	r0, r4
 8012572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012576:	6871      	ldr	r1, [r6, #4]
 8012578:	4638      	mov	r0, r7
 801257a:	f004 fb0f 	bl	8016b9c <ucdr_serialize_string>
 801257e:	4004      	ands	r4, r0
 8012580:	e7ef      	b.n	8012562 <uxr_serialize_ReadSpecification+0x2a>
 8012582:	8971      	ldrh	r1, [r6, #10]
 8012584:	4638      	mov	r0, r7
 8012586:	f7f8 f9e9 	bl	800a95c <ucdr_serialize_uint16_t>
 801258a:	89b1      	ldrh	r1, [r6, #12]
 801258c:	4605      	mov	r5, r0
 801258e:	4638      	mov	r0, r7
 8012590:	f7f8 f9e4 	bl	800a95c <ucdr_serialize_uint16_t>
 8012594:	89f1      	ldrh	r1, [r6, #14]
 8012596:	4005      	ands	r5, r0
 8012598:	4638      	mov	r0, r7
 801259a:	f7f8 f9df 	bl	800a95c <ucdr_serialize_uint16_t>
 801259e:	8a31      	ldrh	r1, [r6, #16]
 80125a0:	4680      	mov	r8, r0
 80125a2:	4638      	mov	r0, r7
 80125a4:	f7f8 f9da 	bl	800a95c <ucdr_serialize_uint16_t>
 80125a8:	b2ed      	uxtb	r5, r5
 80125aa:	4025      	ands	r5, r4
 80125ac:	ea08 0505 	and.w	r5, r8, r5
 80125b0:	ea00 0405 	and.w	r4, r0, r5
 80125b4:	4620      	mov	r0, r4
 80125b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ba:	bf00      	nop

080125bc <uxr_serialize_CREATE_CLIENT_Payload>:
 80125bc:	f7ff bb02 	b.w	8011bc4 <uxr_serialize_CLIENT_Representation>

080125c0 <uxr_serialize_CREATE_Payload>:
 80125c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c2:	2202      	movs	r2, #2
 80125c4:	4607      	mov	r7, r0
 80125c6:	460e      	mov	r6, r1
 80125c8:	f7fc fccc 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80125cc:	2202      	movs	r2, #2
 80125ce:	18b1      	adds	r1, r6, r2
 80125d0:	4605      	mov	r5, r0
 80125d2:	4638      	mov	r0, r7
 80125d4:	f7fc fcc6 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80125d8:	7931      	ldrb	r1, [r6, #4]
 80125da:	4604      	mov	r4, r0
 80125dc:	4638      	mov	r0, r7
 80125de:	f7f8 f991 	bl	800a904 <ucdr_serialize_uint8_t>
 80125e2:	b170      	cbz	r0, 8012602 <uxr_serialize_CREATE_Payload+0x42>
 80125e4:	7933      	ldrb	r3, [r6, #4]
 80125e6:	402c      	ands	r4, r5
 80125e8:	3b01      	subs	r3, #1
 80125ea:	b2e4      	uxtb	r4, r4
 80125ec:	2b0d      	cmp	r3, #13
 80125ee:	d809      	bhi.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 80125f0:	e8df f003 	tbb	[pc, r3]
 80125f4:	23230a4c 	.word	0x23230a4c
 80125f8:	0a0a0a0a 	.word	0x0a0a0a0a
 80125fc:	12121208 	.word	0x12121208
 8012600:	3e45      	.short	0x3e45
 8012602:	2400      	movs	r4, #0
 8012604:	4620      	mov	r0, r4
 8012606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012608:	f106 0108 	add.w	r1, r6, #8
 801260c:	4638      	mov	r0, r7
 801260e:	f7ff fbdf 	bl	8011dd0 <uxr_serialize_DATAWRITER_Representation>
 8012612:	4004      	ands	r4, r0
 8012614:	4620      	mov	r0, r4
 8012616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012618:	7a31      	ldrb	r1, [r6, #8]
 801261a:	4638      	mov	r0, r7
 801261c:	f7f8 f972 	bl	800a904 <ucdr_serialize_uint8_t>
 8012620:	2800      	cmp	r0, #0
 8012622:	d0ee      	beq.n	8012602 <uxr_serialize_CREATE_Payload+0x42>
 8012624:	7a33      	ldrb	r3, [r6, #8]
 8012626:	2b01      	cmp	r3, #1
 8012628:	d001      	beq.n	801262e <uxr_serialize_CREATE_Payload+0x6e>
 801262a:	2b02      	cmp	r3, #2
 801262c:	d1ea      	bne.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 801262e:	68f1      	ldr	r1, [r6, #12]
 8012630:	4638      	mov	r0, r7
 8012632:	f004 fab3 	bl	8016b9c <ucdr_serialize_string>
 8012636:	4004      	ands	r4, r0
 8012638:	e7e4      	b.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 801263a:	7a31      	ldrb	r1, [r6, #8]
 801263c:	4638      	mov	r0, r7
 801263e:	f7f8 f961 	bl	800a904 <ucdr_serialize_uint8_t>
 8012642:	4605      	mov	r5, r0
 8012644:	b158      	cbz	r0, 801265e <uxr_serialize_CREATE_Payload+0x9e>
 8012646:	7a33      	ldrb	r3, [r6, #8]
 8012648:	2b02      	cmp	r3, #2
 801264a:	d034      	beq.n	80126b6 <uxr_serialize_CREATE_Payload+0xf6>
 801264c:	2b03      	cmp	r3, #3
 801264e:	d106      	bne.n	801265e <uxr_serialize_CREATE_Payload+0x9e>
 8012650:	68f2      	ldr	r2, [r6, #12]
 8012652:	f106 0110 	add.w	r1, r6, #16
 8012656:	4638      	mov	r0, r7
 8012658:	f7fc fe22 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 801265c:	4605      	mov	r5, r0
 801265e:	2202      	movs	r2, #2
 8012660:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012664:	4638      	mov	r0, r7
 8012666:	f7fc fc7d 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 801266a:	4028      	ands	r0, r5
 801266c:	4004      	ands	r4, r0
 801266e:	e7c9      	b.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 8012670:	f106 0108 	add.w	r1, r6, #8
 8012674:	4638      	mov	r0, r7
 8012676:	f7ff faa5 	bl	8011bc4 <uxr_serialize_CLIENT_Representation>
 801267a:	4004      	ands	r4, r0
 801267c:	e7c2      	b.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 801267e:	f106 0108 	add.w	r1, r6, #8
 8012682:	4638      	mov	r0, r7
 8012684:	f7ff fb5a 	bl	8011d3c <uxr_serialize_AGENT_Representation>
 8012688:	4004      	ands	r4, r0
 801268a:	e7bb      	b.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 801268c:	7a31      	ldrb	r1, [r6, #8]
 801268e:	4638      	mov	r0, r7
 8012690:	f7f8 f938 	bl	800a904 <ucdr_serialize_uint8_t>
 8012694:	4605      	mov	r5, r0
 8012696:	b130      	cbz	r0, 80126a6 <uxr_serialize_CREATE_Payload+0xe6>
 8012698:	7a33      	ldrb	r3, [r6, #8]
 801269a:	2b02      	cmp	r3, #2
 801269c:	d011      	beq.n	80126c2 <uxr_serialize_CREATE_Payload+0x102>
 801269e:	2b03      	cmp	r3, #3
 80126a0:	d015      	beq.n	80126ce <uxr_serialize_CREATE_Payload+0x10e>
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d00d      	beq.n	80126c2 <uxr_serialize_CREATE_Payload+0x102>
 80126a6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80126aa:	4638      	mov	r0, r7
 80126ac:	f7f8 fe66 	bl	800b37c <ucdr_serialize_int16_t>
 80126b0:	4028      	ands	r0, r5
 80126b2:	4004      	ands	r4, r0
 80126b4:	e7a6      	b.n	8012604 <uxr_serialize_CREATE_Payload+0x44>
 80126b6:	68f1      	ldr	r1, [r6, #12]
 80126b8:	4638      	mov	r0, r7
 80126ba:	f004 fa6f 	bl	8016b9c <ucdr_serialize_string>
 80126be:	4605      	mov	r5, r0
 80126c0:	e7cd      	b.n	801265e <uxr_serialize_CREATE_Payload+0x9e>
 80126c2:	68f1      	ldr	r1, [r6, #12]
 80126c4:	4638      	mov	r0, r7
 80126c6:	f004 fa69 	bl	8016b9c <ucdr_serialize_string>
 80126ca:	4605      	mov	r5, r0
 80126cc:	e7eb      	b.n	80126a6 <uxr_serialize_CREATE_Payload+0xe6>
 80126ce:	68f2      	ldr	r2, [r6, #12]
 80126d0:	f106 0110 	add.w	r1, r6, #16
 80126d4:	4638      	mov	r0, r7
 80126d6:	f7fc fde3 	bl	800f2a0 <ucdr_serialize_sequence_uint8_t>
 80126da:	4605      	mov	r5, r0
 80126dc:	e7e3      	b.n	80126a6 <uxr_serialize_CREATE_Payload+0xe6>
 80126de:	bf00      	nop

080126e0 <uxr_deserialize_GET_INFO_Payload>:
 80126e0:	b570      	push	{r4, r5, r6, lr}
 80126e2:	2202      	movs	r2, #2
 80126e4:	4605      	mov	r5, r0
 80126e6:	460e      	mov	r6, r1
 80126e8:	f7fc fca0 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80126ec:	2202      	movs	r2, #2
 80126ee:	18b1      	adds	r1, r6, r2
 80126f0:	4604      	mov	r4, r0
 80126f2:	4628      	mov	r0, r5
 80126f4:	f7fc fc9a 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80126f8:	1d31      	adds	r1, r6, #4
 80126fa:	4004      	ands	r4, r0
 80126fc:	4628      	mov	r0, r5
 80126fe:	f7f8 fc47 	bl	800af90 <ucdr_deserialize_uint32_t>
 8012702:	b2e4      	uxtb	r4, r4
 8012704:	4020      	ands	r0, r4
 8012706:	bd70      	pop	{r4, r5, r6, pc}

08012708 <uxr_serialize_DELETE_Payload>:
 8012708:	b570      	push	{r4, r5, r6, lr}
 801270a:	2202      	movs	r2, #2
 801270c:	4605      	mov	r5, r0
 801270e:	460e      	mov	r6, r1
 8012710:	f7fc fc28 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012714:	2202      	movs	r2, #2
 8012716:	4604      	mov	r4, r0
 8012718:	18b1      	adds	r1, r6, r2
 801271a:	4628      	mov	r0, r5
 801271c:	f7fc fc22 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012720:	4020      	ands	r0, r4
 8012722:	b2c0      	uxtb	r0, r0
 8012724:	bd70      	pop	{r4, r5, r6, pc}
 8012726:	bf00      	nop

08012728 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801272c:	4605      	mov	r5, r0
 801272e:	460e      	mov	r6, r1
 8012730:	f7f8 f8fe 	bl	800a930 <ucdr_deserialize_uint8_t>
 8012734:	1c71      	adds	r1, r6, #1
 8012736:	4604      	mov	r4, r0
 8012738:	4628      	mov	r0, r5
 801273a:	f7f8 f8f9 	bl	800a930 <ucdr_deserialize_uint8_t>
 801273e:	2204      	movs	r2, #4
 8012740:	18b1      	adds	r1, r6, r2
 8012742:	4680      	mov	r8, r0
 8012744:	4628      	mov	r0, r5
 8012746:	f7fc fc71 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 801274a:	f106 0108 	add.w	r1, r6, #8
 801274e:	4607      	mov	r7, r0
 8012750:	2202      	movs	r2, #2
 8012752:	4628      	mov	r0, r5
 8012754:	f7fc fc6a 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012758:	ea04 0308 	and.w	r3, r4, r8
 801275c:	b2db      	uxtb	r3, r3
 801275e:	ea03 0407 	and.w	r4, r3, r7
 8012762:	2202      	movs	r2, #2
 8012764:	4607      	mov	r7, r0
 8012766:	f106 010a 	add.w	r1, r6, #10
 801276a:	4628      	mov	r0, r5
 801276c:	f7fc fc5e 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012770:	f106 010c 	add.w	r1, r6, #12
 8012774:	4603      	mov	r3, r0
 8012776:	4628      	mov	r0, r5
 8012778:	461d      	mov	r5, r3
 801277a:	f7f8 f8ab 	bl	800a8d4 <ucdr_deserialize_bool>
 801277e:	403c      	ands	r4, r7
 8012780:	4025      	ands	r5, r4
 8012782:	4028      	ands	r0, r5
 8012784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012788 <uxr_deserialize_STATUS_Payload>:
 8012788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801278c:	2202      	movs	r2, #2
 801278e:	4606      	mov	r6, r0
 8012790:	460f      	mov	r7, r1
 8012792:	f7fc fc4b 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012796:	2202      	movs	r2, #2
 8012798:	18b9      	adds	r1, r7, r2
 801279a:	4605      	mov	r5, r0
 801279c:	4630      	mov	r0, r6
 801279e:	f7fc fc45 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80127a2:	1d39      	adds	r1, r7, #4
 80127a4:	4680      	mov	r8, r0
 80127a6:	4630      	mov	r0, r6
 80127a8:	f7f8 f8c2 	bl	800a930 <ucdr_deserialize_uint8_t>
 80127ac:	1d79      	adds	r1, r7, #5
 80127ae:	4604      	mov	r4, r0
 80127b0:	4630      	mov	r0, r6
 80127b2:	f7f8 f8bd 	bl	800a930 <ucdr_deserialize_uint8_t>
 80127b6:	ea05 0508 	and.w	r5, r5, r8
 80127ba:	402c      	ands	r4, r5
 80127bc:	4020      	ands	r0, r4
 80127be:	b2c0      	uxtb	r0, r0
 80127c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127c4 <uxr_serialize_INFO_Payload>:
 80127c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c8:	2202      	movs	r2, #2
 80127ca:	460c      	mov	r4, r1
 80127cc:	4605      	mov	r5, r0
 80127ce:	f7fc fbc9 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80127d2:	2202      	movs	r2, #2
 80127d4:	18a1      	adds	r1, r4, r2
 80127d6:	4680      	mov	r8, r0
 80127d8:	4628      	mov	r0, r5
 80127da:	f7fc fbc3 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80127de:	7921      	ldrb	r1, [r4, #4]
 80127e0:	4607      	mov	r7, r0
 80127e2:	4628      	mov	r0, r5
 80127e4:	f7f8 f88e 	bl	800a904 <ucdr_serialize_uint8_t>
 80127e8:	7961      	ldrb	r1, [r4, #5]
 80127ea:	4606      	mov	r6, r0
 80127ec:	4628      	mov	r0, r5
 80127ee:	f7f8 f889 	bl	800a904 <ucdr_serialize_uint8_t>
 80127f2:	ea08 0807 	and.w	r8, r8, r7
 80127f6:	ea06 0608 	and.w	r6, r6, r8
 80127fa:	4006      	ands	r6, r0
 80127fc:	7a21      	ldrb	r1, [r4, #8]
 80127fe:	4628      	mov	r0, r5
 8012800:	f7f8 f852 	bl	800a8a8 <ucdr_serialize_bool>
 8012804:	7a23      	ldrb	r3, [r4, #8]
 8012806:	b2f7      	uxtb	r7, r6
 8012808:	4606      	mov	r6, r0
 801280a:	b96b      	cbnz	r3, 8012828 <uxr_serialize_INFO_Payload+0x64>
 801280c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012810:	4628      	mov	r0, r5
 8012812:	f7f8 f849 	bl	800a8a8 <ucdr_serialize_bool>
 8012816:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801281a:	4030      	ands	r0, r6
 801281c:	b2c6      	uxtb	r6, r0
 801281e:	b983      	cbnz	r3, 8012842 <uxr_serialize_INFO_Payload+0x7e>
 8012820:	ea06 0007 	and.w	r0, r6, r7
 8012824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012828:	7b21      	ldrb	r1, [r4, #12]
 801282a:	4628      	mov	r0, r5
 801282c:	f7f8 f86a 	bl	800a904 <ucdr_serialize_uint8_t>
 8012830:	b188      	cbz	r0, 8012856 <uxr_serialize_INFO_Payload+0x92>
 8012832:	f104 010c 	add.w	r1, r4, #12
 8012836:	4628      	mov	r0, r5
 8012838:	f7ff faf2 	bl	8011e20 <uxr_serialize_ObjectVariant.part.0>
 801283c:	4030      	ands	r0, r6
 801283e:	b2c6      	uxtb	r6, r0
 8012840:	e7e4      	b.n	801280c <uxr_serialize_INFO_Payload+0x48>
 8012842:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012846:	4628      	mov	r0, r5
 8012848:	f7ff fdb2 	bl	80123b0 <uxr_serialize_ActivityInfoVariant>
 801284c:	4006      	ands	r6, r0
 801284e:	ea06 0007 	and.w	r0, r6, r7
 8012852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012856:	4606      	mov	r6, r0
 8012858:	e7d8      	b.n	801280c <uxr_serialize_INFO_Payload+0x48>
 801285a:	bf00      	nop

0801285c <uxr_serialize_READ_DATA_Payload>:
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	2202      	movs	r2, #2
 8012860:	4605      	mov	r5, r0
 8012862:	460e      	mov	r6, r1
 8012864:	f7fc fb7e 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012868:	2202      	movs	r2, #2
 801286a:	18b1      	adds	r1, r6, r2
 801286c:	4604      	mov	r4, r0
 801286e:	4628      	mov	r0, r5
 8012870:	f7fc fb78 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012874:	1d31      	adds	r1, r6, #4
 8012876:	4004      	ands	r4, r0
 8012878:	4628      	mov	r0, r5
 801287a:	f7ff fe5d 	bl	8012538 <uxr_serialize_ReadSpecification>
 801287e:	b2e4      	uxtb	r4, r4
 8012880:	4020      	ands	r0, r4
 8012882:	bd70      	pop	{r4, r5, r6, pc}

08012884 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012884:	b570      	push	{r4, r5, r6, lr}
 8012886:	2202      	movs	r2, #2
 8012888:	4605      	mov	r5, r0
 801288a:	460e      	mov	r6, r1
 801288c:	f7fc fb6a 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 8012890:	2202      	movs	r2, #2
 8012892:	4604      	mov	r4, r0
 8012894:	18b1      	adds	r1, r6, r2
 8012896:	4628      	mov	r0, r5
 8012898:	f7fc fb64 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 801289c:	4020      	ands	r0, r4
 801289e:	b2c0      	uxtb	r0, r0
 80128a0:	bd70      	pop	{r4, r5, r6, pc}
 80128a2:	bf00      	nop

080128a4 <uxr_serialize_ACKNACK_Payload>:
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	460c      	mov	r4, r1
 80128a8:	460e      	mov	r6, r1
 80128aa:	f834 1b02 	ldrh.w	r1, [r4], #2
 80128ae:	4605      	mov	r5, r0
 80128b0:	f7f8 f854 	bl	800a95c <ucdr_serialize_uint16_t>
 80128b4:	2202      	movs	r2, #2
 80128b6:	4621      	mov	r1, r4
 80128b8:	4604      	mov	r4, r0
 80128ba:	4628      	mov	r0, r5
 80128bc:	f7fc fb52 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80128c0:	7931      	ldrb	r1, [r6, #4]
 80128c2:	4004      	ands	r4, r0
 80128c4:	4628      	mov	r0, r5
 80128c6:	f7f8 f81d 	bl	800a904 <ucdr_serialize_uint8_t>
 80128ca:	b2e4      	uxtb	r4, r4
 80128cc:	4020      	ands	r0, r4
 80128ce:	bd70      	pop	{r4, r5, r6, pc}

080128d0 <uxr_deserialize_ACKNACK_Payload>:
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	4605      	mov	r5, r0
 80128d4:	460e      	mov	r6, r1
 80128d6:	f7f8 f941 	bl	800ab5c <ucdr_deserialize_uint16_t>
 80128da:	2202      	movs	r2, #2
 80128dc:	18b1      	adds	r1, r6, r2
 80128de:	4604      	mov	r4, r0
 80128e0:	4628      	mov	r0, r5
 80128e2:	f7fc fba3 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80128e6:	1d31      	adds	r1, r6, #4
 80128e8:	4004      	ands	r4, r0
 80128ea:	4628      	mov	r0, r5
 80128ec:	f7f8 f820 	bl	800a930 <ucdr_deserialize_uint8_t>
 80128f0:	b2e4      	uxtb	r4, r4
 80128f2:	4020      	ands	r0, r4
 80128f4:	bd70      	pop	{r4, r5, r6, pc}
 80128f6:	bf00      	nop

080128f8 <uxr_serialize_HEARTBEAT_Payload>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	460d      	mov	r5, r1
 80128fc:	8809      	ldrh	r1, [r1, #0]
 80128fe:	4606      	mov	r6, r0
 8012900:	f7f8 f82c 	bl	800a95c <ucdr_serialize_uint16_t>
 8012904:	8869      	ldrh	r1, [r5, #2]
 8012906:	4604      	mov	r4, r0
 8012908:	4630      	mov	r0, r6
 801290a:	f7f8 f827 	bl	800a95c <ucdr_serialize_uint16_t>
 801290e:	7929      	ldrb	r1, [r5, #4]
 8012910:	4004      	ands	r4, r0
 8012912:	4630      	mov	r0, r6
 8012914:	f7f7 fff6 	bl	800a904 <ucdr_serialize_uint8_t>
 8012918:	b2e4      	uxtb	r4, r4
 801291a:	4020      	ands	r0, r4
 801291c:	bd70      	pop	{r4, r5, r6, pc}
 801291e:	bf00      	nop

08012920 <uxr_deserialize_HEARTBEAT_Payload>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	4605      	mov	r5, r0
 8012924:	460e      	mov	r6, r1
 8012926:	f7f8 f919 	bl	800ab5c <ucdr_deserialize_uint16_t>
 801292a:	1cb1      	adds	r1, r6, #2
 801292c:	4604      	mov	r4, r0
 801292e:	4628      	mov	r0, r5
 8012930:	f7f8 f914 	bl	800ab5c <ucdr_deserialize_uint16_t>
 8012934:	1d31      	adds	r1, r6, #4
 8012936:	4004      	ands	r4, r0
 8012938:	4628      	mov	r0, r5
 801293a:	f7f7 fff9 	bl	800a930 <ucdr_deserialize_uint8_t>
 801293e:	b2e4      	uxtb	r4, r4
 8012940:	4020      	ands	r0, r4
 8012942:	bd70      	pop	{r4, r5, r6, pc}

08012944 <uxr_serialize_TIMESTAMP_Payload>:
 8012944:	b570      	push	{r4, r5, r6, lr}
 8012946:	460d      	mov	r5, r1
 8012948:	6809      	ldr	r1, [r1, #0]
 801294a:	4606      	mov	r6, r0
 801294c:	f7f8 fe0a 	bl	800b564 <ucdr_serialize_int32_t>
 8012950:	6869      	ldr	r1, [r5, #4]
 8012952:	4604      	mov	r4, r0
 8012954:	4630      	mov	r0, r6
 8012956:	f7f8 f9eb 	bl	800ad30 <ucdr_serialize_uint32_t>
 801295a:	4020      	ands	r0, r4
 801295c:	b2c0      	uxtb	r0, r0
 801295e:	bd70      	pop	{r4, r5, r6, pc}

08012960 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012964:	4605      	mov	r5, r0
 8012966:	460e      	mov	r6, r1
 8012968:	f7f8 fe94 	bl	800b694 <ucdr_deserialize_int32_t>
 801296c:	1d31      	adds	r1, r6, #4
 801296e:	4607      	mov	r7, r0
 8012970:	4628      	mov	r0, r5
 8012972:	f7f8 fb0d 	bl	800af90 <ucdr_deserialize_uint32_t>
 8012976:	f106 0108 	add.w	r1, r6, #8
 801297a:	4680      	mov	r8, r0
 801297c:	4628      	mov	r0, r5
 801297e:	f7f8 fe89 	bl	800b694 <ucdr_deserialize_int32_t>
 8012982:	f106 010c 	add.w	r1, r6, #12
 8012986:	4604      	mov	r4, r0
 8012988:	4628      	mov	r0, r5
 801298a:	f7f8 fb01 	bl	800af90 <ucdr_deserialize_uint32_t>
 801298e:	ea07 0708 	and.w	r7, r7, r8
 8012992:	403c      	ands	r4, r7
 8012994:	f106 0110 	add.w	r1, r6, #16
 8012998:	4004      	ands	r4, r0
 801299a:	4628      	mov	r0, r5
 801299c:	f7f8 fe7a 	bl	800b694 <ucdr_deserialize_int32_t>
 80129a0:	f106 0114 	add.w	r1, r6, #20
 80129a4:	4607      	mov	r7, r0
 80129a6:	4628      	mov	r0, r5
 80129a8:	f7f8 faf2 	bl	800af90 <ucdr_deserialize_uint32_t>
 80129ac:	b2e4      	uxtb	r4, r4
 80129ae:	403c      	ands	r4, r7
 80129b0:	4020      	ands	r0, r4
 80129b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b6:	bf00      	nop

080129b8 <uxr_serialize_SampleIdentity>:
 80129b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129bc:	220c      	movs	r2, #12
 80129be:	4604      	mov	r4, r0
 80129c0:	460d      	mov	r5, r1
 80129c2:	f7fc facf 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80129c6:	2203      	movs	r2, #3
 80129c8:	f105 010c 	add.w	r1, r5, #12
 80129cc:	4607      	mov	r7, r0
 80129ce:	4620      	mov	r0, r4
 80129d0:	f7fc fac8 	bl	800ef64 <ucdr_serialize_array_uint8_t>
 80129d4:	7be9      	ldrb	r1, [r5, #15]
 80129d6:	4680      	mov	r8, r0
 80129d8:	4620      	mov	r0, r4
 80129da:	f7f7 ff93 	bl	800a904 <ucdr_serialize_uint8_t>
 80129de:	6929      	ldr	r1, [r5, #16]
 80129e0:	4606      	mov	r6, r0
 80129e2:	4620      	mov	r0, r4
 80129e4:	f7f8 fdbe 	bl	800b564 <ucdr_serialize_int32_t>
 80129e8:	6969      	ldr	r1, [r5, #20]
 80129ea:	4603      	mov	r3, r0
 80129ec:	4620      	mov	r0, r4
 80129ee:	ea07 0708 	and.w	r7, r7, r8
 80129f2:	461c      	mov	r4, r3
 80129f4:	f7f8 f99c 	bl	800ad30 <ucdr_serialize_uint32_t>
 80129f8:	403e      	ands	r6, r7
 80129fa:	4034      	ands	r4, r6
 80129fc:	4020      	ands	r0, r4
 80129fe:	b2c0      	uxtb	r0, r0
 8012a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a04 <uxr_deserialize_SampleIdentity>:
 8012a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a08:	220c      	movs	r2, #12
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	460d      	mov	r5, r1
 8012a0e:	f7fc fb0d 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012a12:	2203      	movs	r2, #3
 8012a14:	f105 010c 	add.w	r1, r5, #12
 8012a18:	4607      	mov	r7, r0
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f7fc fb06 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 8012a20:	f105 010f 	add.w	r1, r5, #15
 8012a24:	4680      	mov	r8, r0
 8012a26:	4620      	mov	r0, r4
 8012a28:	f7f7 ff82 	bl	800a930 <ucdr_deserialize_uint8_t>
 8012a2c:	f105 0110 	add.w	r1, r5, #16
 8012a30:	4606      	mov	r6, r0
 8012a32:	4620      	mov	r0, r4
 8012a34:	f7f8 fe2e 	bl	800b694 <ucdr_deserialize_int32_t>
 8012a38:	f105 0114 	add.w	r1, r5, #20
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	4620      	mov	r0, r4
 8012a40:	ea07 0708 	and.w	r7, r7, r8
 8012a44:	461c      	mov	r4, r3
 8012a46:	f7f8 faa3 	bl	800af90 <ucdr_deserialize_uint32_t>
 8012a4a:	403e      	ands	r6, r7
 8012a4c:	4034      	ands	r4, r6
 8012a4e:	4020      	ands	r0, r4
 8012a50:	b2c0      	uxtb	r0, r0
 8012a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a56:	bf00      	nop

08012a58 <rcl_client_get_rmw_handle>:
 8012a58:	b118      	cbz	r0, 8012a62 <rcl_client_get_rmw_handle+0xa>
 8012a5a:	6800      	ldr	r0, [r0, #0]
 8012a5c:	b108      	cbz	r0, 8012a62 <rcl_client_get_rmw_handle+0xa>
 8012a5e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a62:	4770      	bx	lr

08012a64 <rcl_send_request>:
 8012a64:	b570      	push	{r4, r5, r6, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	b1e8      	cbz	r0, 8012aa6 <rcl_send_request+0x42>
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	6800      	ldr	r0, [r0, #0]
 8012a6e:	b1d0      	cbz	r0, 8012aa6 <rcl_send_request+0x42>
 8012a70:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8012a74:	b1bb      	cbz	r3, 8012aa6 <rcl_send_request+0x42>
 8012a76:	460e      	mov	r6, r1
 8012a78:	b1d1      	cbz	r1, 8012ab0 <rcl_send_request+0x4c>
 8012a7a:	4615      	mov	r5, r2
 8012a7c:	b1c2      	cbz	r2, 8012ab0 <rcl_send_request+0x4c>
 8012a7e:	2105      	movs	r1, #5
 8012a80:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012a84:	f002 fda4 	bl	80155d0 <__atomic_load_8>
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8012a8e:	462a      	mov	r2, r5
 8012a90:	4631      	mov	r1, r6
 8012a92:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012a96:	f003 fc8f 	bl	80163b8 <rmw_send_request>
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	b160      	cbz	r0, 8012ab8 <rcl_send_request+0x54>
 8012a9e:	2601      	movs	r6, #1
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	b002      	add	sp, #8
 8012aa4:	bd70      	pop	{r4, r5, r6, pc}
 8012aa6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8012aaa:	4630      	mov	r0, r6
 8012aac:	b002      	add	sp, #8
 8012aae:	bd70      	pop	{r4, r5, r6, pc}
 8012ab0:	260b      	movs	r6, #11
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	b002      	add	sp, #8
 8012ab6:	bd70      	pop	{r4, r5, r6, pc}
 8012ab8:	6820      	ldr	r0, [r4, #0]
 8012aba:	2105      	movs	r1, #5
 8012abc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ac0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012ac4:	9100      	str	r1, [sp, #0]
 8012ac6:	f002 fdef 	bl	80156a8 <__atomic_exchange_8>
 8012aca:	4630      	mov	r0, r6
 8012acc:	b002      	add	sp, #8
 8012ace:	bd70      	pop	{r4, r5, r6, pc}

08012ad0 <rcl_take_response>:
 8012ad0:	b570      	push	{r4, r5, r6, lr}
 8012ad2:	468e      	mov	lr, r1
 8012ad4:	460c      	mov	r4, r1
 8012ad6:	4616      	mov	r6, r2
 8012ad8:	4605      	mov	r5, r0
 8012ada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ade:	b08c      	sub	sp, #48	@ 0x30
 8012ae0:	f10d 0c18 	add.w	ip, sp, #24
 8012ae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ae8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012aec:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012af0:	b35d      	cbz	r5, 8012b4a <rcl_take_response+0x7a>
 8012af2:	682b      	ldr	r3, [r5, #0]
 8012af4:	b34b      	cbz	r3, 8012b4a <rcl_take_response+0x7a>
 8012af6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012afa:	b330      	cbz	r0, 8012b4a <rcl_take_response+0x7a>
 8012afc:	b346      	cbz	r6, 8012b50 <rcl_take_response+0x80>
 8012afe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012b58 <rcl_take_response+0x88>
 8012b02:	2300      	movs	r3, #0
 8012b04:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b08:	4632      	mov	r2, r6
 8012b0a:	f10d 0307 	add.w	r3, sp, #7
 8012b0e:	a902      	add	r1, sp, #8
 8012b10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012b14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b18:	f003 fd56 	bl	80165c8 <rmw_take_response>
 8012b1c:	4605      	mov	r5, r0
 8012b1e:	b9c8      	cbnz	r0, 8012b54 <rcl_take_response+0x84>
 8012b20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b24:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8012b28:	2a00      	cmp	r2, #0
 8012b2a:	bf08      	it	eq
 8012b2c:	461d      	moveq	r5, r3
 8012b2e:	f10d 0e18 	add.w	lr, sp, #24
 8012b32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b36:	46a4      	mov	ip, r4
 8012b38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b3c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b40:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b44:	4628      	mov	r0, r5
 8012b46:	b00c      	add	sp, #48	@ 0x30
 8012b48:	bd70      	pop	{r4, r5, r6, pc}
 8012b4a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8012b4e:	e7ee      	b.n	8012b2e <rcl_take_response+0x5e>
 8012b50:	250b      	movs	r5, #11
 8012b52:	e7ec      	b.n	8012b2e <rcl_take_response+0x5e>
 8012b54:	2501      	movs	r5, #1
 8012b56:	e7ea      	b.n	8012b2e <rcl_take_response+0x5e>
	...

08012b60 <rcl_client_is_valid>:
 8012b60:	b130      	cbz	r0, 8012b70 <rcl_client_is_valid+0x10>
 8012b62:	6800      	ldr	r0, [r0, #0]
 8012b64:	b120      	cbz	r0, 8012b70 <rcl_client_is_valid+0x10>
 8012b66:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012b6a:	3800      	subs	r0, #0
 8012b6c:	bf18      	it	ne
 8012b6e:	2001      	movne	r0, #1
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop

08012b74 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012b74:	280b      	cmp	r0, #11
 8012b76:	dc0d      	bgt.n	8012b94 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	db09      	blt.n	8012b90 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012b7c:	280b      	cmp	r0, #11
 8012b7e:	d807      	bhi.n	8012b90 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012b80:	e8df f000 	tbb	[pc, r0]
 8012b84:	07060607 	.word	0x07060607
 8012b88:	06060606 	.word	0x06060606
 8012b8c:	07070606 	.word	0x07070606
 8012b90:	2001      	movs	r0, #1
 8012b92:	4770      	bx	lr
 8012b94:	28cb      	cmp	r0, #203	@ 0xcb
 8012b96:	bf18      	it	ne
 8012b98:	2001      	movne	r0, #1
 8012b9a:	4770      	bx	lr

08012b9c <rcl_get_zero_initialized_context>:
 8012b9c:	4a03      	ldr	r2, [pc, #12]	@ (8012bac <rcl_get_zero_initialized_context+0x10>)
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ba4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	4770      	bx	lr
 8012bac:	0801b7dc 	.word	0x0801b7dc

08012bb0 <rcl_context_is_valid>:
 8012bb0:	b118      	cbz	r0, 8012bba <rcl_context_is_valid+0xa>
 8012bb2:	6840      	ldr	r0, [r0, #4]
 8012bb4:	3800      	subs	r0, #0
 8012bb6:	bf18      	it	ne
 8012bb8:	2001      	movne	r0, #1
 8012bba:	4770      	bx	lr

08012bbc <__cleanup_context>:
 8012bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bc0:	4606      	mov	r6, r0
 8012bc2:	6800      	ldr	r0, [r0, #0]
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	6073      	str	r3, [r6, #4]
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d049      	beq.n	8012c60 <__cleanup_context+0xa4>
 8012bcc:	6947      	ldr	r7, [r0, #20]
 8012bce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012bd2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012bd6:	b137      	cbz	r7, 8012be6 <__cleanup_context+0x2a>
 8012bd8:	3014      	adds	r0, #20
 8012bda:	f7f9 fa4d 	bl	800c078 <rcl_init_options_fini>
 8012bde:	4607      	mov	r7, r0
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d144      	bne.n	8012c6e <__cleanup_context+0xb2>
 8012be4:	6830      	ldr	r0, [r6, #0]
 8012be6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012be8:	b143      	cbz	r3, 8012bfc <__cleanup_context+0x40>
 8012bea:	3028      	adds	r0, #40	@ 0x28
 8012bec:	f7fa fe44 	bl	800d878 <rmw_context_fini>
 8012bf0:	b118      	cbz	r0, 8012bfa <__cleanup_context+0x3e>
 8012bf2:	2f00      	cmp	r7, #0
 8012bf4:	d03e      	beq.n	8012c74 <__cleanup_context+0xb8>
 8012bf6:	f7fa fb77 	bl	800d2e8 <rcutils_reset_error>
 8012bfa:	6830      	ldr	r0, [r6, #0]
 8012bfc:	6a03      	ldr	r3, [r0, #32]
 8012bfe:	b1db      	cbz	r3, 8012c38 <__cleanup_context+0x7c>
 8012c00:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012c04:	2a01      	cmp	r2, #1
 8012c06:	f17c 0100 	sbcs.w	r1, ip, #0
 8012c0a:	db11      	blt.n	8012c30 <__cleanup_context+0x74>
 8012c0c:	2400      	movs	r4, #0
 8012c0e:	4625      	mov	r5, r4
 8012c10:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c14:	4649      	mov	r1, r9
 8012c16:	b1b8      	cbz	r0, 8012c48 <__cleanup_context+0x8c>
 8012c18:	47c0      	blx	r8
 8012c1a:	6833      	ldr	r3, [r6, #0]
 8012c1c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012c20:	3401      	adds	r4, #1
 8012c22:	f145 0500 	adc.w	r5, r5, #0
 8012c26:	4294      	cmp	r4, r2
 8012c28:	eb75 010c 	sbcs.w	r1, r5, ip
 8012c2c:	6a1b      	ldr	r3, [r3, #32]
 8012c2e:	dbef      	blt.n	8012c10 <__cleanup_context+0x54>
 8012c30:	4618      	mov	r0, r3
 8012c32:	4649      	mov	r1, r9
 8012c34:	47c0      	blx	r8
 8012c36:	6830      	ldr	r0, [r6, #0]
 8012c38:	4649      	mov	r1, r9
 8012c3a:	47c0      	blx	r8
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	e9c6 3300 	strd	r3, r3, [r6]
 8012c42:	4638      	mov	r0, r7
 8012c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c48:	3401      	adds	r4, #1
 8012c4a:	f145 0500 	adc.w	r5, r5, #0
 8012c4e:	4294      	cmp	r4, r2
 8012c50:	eb75 010c 	sbcs.w	r1, r5, ip
 8012c54:	dbdc      	blt.n	8012c10 <__cleanup_context+0x54>
 8012c56:	4618      	mov	r0, r3
 8012c58:	4649      	mov	r1, r9
 8012c5a:	47c0      	blx	r8
 8012c5c:	6830      	ldr	r0, [r6, #0]
 8012c5e:	e7eb      	b.n	8012c38 <__cleanup_context+0x7c>
 8012c60:	4607      	mov	r7, r0
 8012c62:	2300      	movs	r3, #0
 8012c64:	e9c6 3300 	strd	r3, r3, [r6]
 8012c68:	4638      	mov	r0, r7
 8012c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c6e:	f7fa fb3b 	bl	800d2e8 <rcutils_reset_error>
 8012c72:	e7b7      	b.n	8012be4 <__cleanup_context+0x28>
 8012c74:	f7ff ff7e 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8012c78:	4607      	mov	r7, r0
 8012c7a:	e7bc      	b.n	8012bf6 <__cleanup_context+0x3a>

08012c7c <rcl_init>:
 8012c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c80:	1e05      	subs	r5, r0, #0
 8012c82:	b09e      	sub	sp, #120	@ 0x78
 8012c84:	460e      	mov	r6, r1
 8012c86:	4690      	mov	r8, r2
 8012c88:	461f      	mov	r7, r3
 8012c8a:	f340 809c 	ble.w	8012dc6 <rcl_init+0x14a>
 8012c8e:	2900      	cmp	r1, #0
 8012c90:	f000 809c 	beq.w	8012dcc <rcl_init+0x150>
 8012c94:	f1a1 0e04 	sub.w	lr, r1, #4
 8012c98:	f04f 0c00 	mov.w	ip, #0
 8012c9c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012ca0:	f10c 0c01 	add.w	ip, ip, #1
 8012ca4:	2c00      	cmp	r4, #0
 8012ca6:	f000 8091 	beq.w	8012dcc <rcl_init+0x150>
 8012caa:	4565      	cmp	r5, ip
 8012cac:	d1f6      	bne.n	8012c9c <rcl_init+0x20>
 8012cae:	f1b8 0f00 	cmp.w	r8, #0
 8012cb2:	f000 808b 	beq.w	8012dcc <rcl_init+0x150>
 8012cb6:	f8d8 4000 	ldr.w	r4, [r8]
 8012cba:	2c00      	cmp	r4, #0
 8012cbc:	f000 8086 	beq.w	8012dcc <rcl_init+0x150>
 8012cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012cc2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8012cc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	f8cc 3000 	str.w	r3, [ip]
 8012cd0:	a819      	add	r0, sp, #100	@ 0x64
 8012cd2:	f7fa fae3 	bl	800d29c <rcutils_allocator_is_valid>
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d078      	beq.n	8012dcc <rcl_init+0x150>
 8012cda:	2f00      	cmp	r7, #0
 8012cdc:	d076      	beq.n	8012dcc <rcl_init+0x150>
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d178      	bne.n	8012dd6 <rcl_init+0x15a>
 8012ce4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012ce8:	2178      	movs	r1, #120	@ 0x78
 8012cea:	2001      	movs	r0, #1
 8012cec:	4798      	blx	r3
 8012cee:	4604      	mov	r4, r0
 8012cf0:	6038      	str	r0, [r7, #0]
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	f000 80b6 	beq.w	8012e64 <rcl_init+0x1e8>
 8012cf8:	a802      	add	r0, sp, #8
 8012cfa:	f002 ffb9 	bl	8015c70 <rmw_get_zero_initialized_context>
 8012cfe:	a902      	add	r1, sp, #8
 8012d00:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012d04:	2250      	movs	r2, #80	@ 0x50
 8012d06:	ac19      	add	r4, sp, #100	@ 0x64
 8012d08:	f005 fe89 	bl	8018a1e <memcpy>
 8012d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d0e:	f8d7 e000 	ldr.w	lr, [r7]
 8012d12:	46f4      	mov	ip, lr
 8012d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	f8cc 3000 	str.w	r3, [ip]
 8012d1e:	f10e 0114 	add.w	r1, lr, #20
 8012d22:	4640      	mov	r0, r8
 8012d24:	f7f9 f9d2 	bl	800c0cc <rcl_init_options_copy>
 8012d28:	4604      	mov	r4, r0
 8012d2a:	2800      	cmp	r0, #0
 8012d2c:	d144      	bne.n	8012db8 <rcl_init+0x13c>
 8012d2e:	f8d7 9000 	ldr.w	r9, [r7]
 8012d32:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012d36:	f8c9 0020 	str.w	r0, [r9, #32]
 8012d3a:	f8c9 5018 	str.w	r5, [r9, #24]
 8012d3e:	f8c9 801c 	str.w	r8, [r9, #28]
 8012d42:	2d00      	cmp	r5, #0
 8012d44:	d04e      	beq.n	8012de4 <rcl_init+0x168>
 8012d46:	2e00      	cmp	r6, #0
 8012d48:	d04c      	beq.n	8012de4 <rcl_init+0x168>
 8012d4a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012d4e:	2104      	movs	r1, #4
 8012d50:	4628      	mov	r0, r5
 8012d52:	4798      	blx	r3
 8012d54:	f8c9 0020 	str.w	r0, [r9, #32]
 8012d58:	f8d7 9000 	ldr.w	r9, [r7]
 8012d5c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012d60:	46ca      	mov	sl, r9
 8012d62:	b343      	cbz	r3, 8012db6 <rcl_init+0x13a>
 8012d64:	2d01      	cmp	r5, #1
 8012d66:	f178 0300 	sbcs.w	r3, r8, #0
 8012d6a:	db3b      	blt.n	8012de4 <rcl_init+0x168>
 8012d6c:	2400      	movs	r4, #0
 8012d6e:	3e04      	subs	r6, #4
 8012d70:	46a1      	mov	r9, r4
 8012d72:	e00b      	b.n	8012d8c <rcl_init+0x110>
 8012d74:	6831      	ldr	r1, [r6, #0]
 8012d76:	f005 fe52 	bl	8018a1e <memcpy>
 8012d7a:	3401      	adds	r4, #1
 8012d7c:	f149 0900 	adc.w	r9, r9, #0
 8012d80:	45c8      	cmp	r8, r9
 8012d82:	bf08      	it	eq
 8012d84:	42a5      	cmpeq	r5, r4
 8012d86:	d02b      	beq.n	8012de0 <rcl_init+0x164>
 8012d88:	f8d7 a000 	ldr.w	sl, [r7]
 8012d8c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012d90:	f7ed fa50 	bl	8000234 <strlen>
 8012d94:	1c42      	adds	r2, r0, #1
 8012d96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d98:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012d9a:	f8da a020 	ldr.w	sl, [sl, #32]
 8012d9e:	9201      	str	r2, [sp, #4]
 8012da0:	4610      	mov	r0, r2
 8012da2:	4798      	blx	r3
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012daa:	6a1b      	ldr	r3, [r3, #32]
 8012dac:	9a01      	ldr	r2, [sp, #4]
 8012dae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d1de      	bne.n	8012d74 <rcl_init+0xf8>
 8012db6:	240a      	movs	r4, #10
 8012db8:	4638      	mov	r0, r7
 8012dba:	f7ff feff 	bl	8012bbc <__cleanup_context>
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	b01e      	add	sp, #120	@ 0x78
 8012dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dc6:	2900      	cmp	r1, #0
 8012dc8:	f43f af71 	beq.w	8012cae <rcl_init+0x32>
 8012dcc:	240b      	movs	r4, #11
 8012dce:	4620      	mov	r0, r4
 8012dd0:	b01e      	add	sp, #120	@ 0x78
 8012dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dd6:	2464      	movs	r4, #100	@ 0x64
 8012dd8:	4620      	mov	r0, r4
 8012dda:	b01e      	add	sp, #120	@ 0x78
 8012ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012de0:	f8d7 9000 	ldr.w	r9, [r7]
 8012de4:	4926      	ldr	r1, [pc, #152]	@ (8012e80 <rcl_init+0x204>)
 8012de6:	680b      	ldr	r3, [r1, #0]
 8012de8:	3301      	adds	r3, #1
 8012dea:	d036      	beq.n	8012e5a <rcl_init+0x1de>
 8012dec:	600b      	str	r3, [r1, #0]
 8012dee:	461a      	mov	r2, r3
 8012df0:	2400      	movs	r4, #0
 8012df2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8012df6:	607b      	str	r3, [r7, #4]
 8012df8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012e00:	d034      	beq.n	8012e6c <rcl_init+0x1f0>
 8012e02:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012e06:	b93b      	cbnz	r3, 8012e18 <rcl_init+0x19c>
 8012e08:	3030      	adds	r0, #48	@ 0x30
 8012e0a:	f000 f83b 	bl	8012e84 <rcl_get_localhost_only>
 8012e0e:	4604      	mov	r4, r0
 8012e10:	2800      	cmp	r0, #0
 8012e12:	d1d1      	bne.n	8012db8 <rcl_init+0x13c>
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	6958      	ldr	r0, [r3, #20]
 8012e18:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8012e1a:	aa18      	add	r2, sp, #96	@ 0x60
 8012e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8012e1e:	f001 f871 	bl	8013f04 <rcl_validate_enclave_name>
 8012e22:	4604      	mov	r4, r0
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d1c7      	bne.n	8012db8 <rcl_init+0x13c>
 8012e28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012e2a:	b9eb      	cbnz	r3, 8012e68 <rcl_init+0x1ec>
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	694b      	ldr	r3, [r1, #20]
 8012e30:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012e32:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012e36:	f000 fb3f 	bl	80134b8 <rcl_get_security_options_from_environment>
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	d1bb      	bne.n	8012db8 <rcl_init+0x13c>
 8012e40:	6839      	ldr	r1, [r7, #0]
 8012e42:	6948      	ldr	r0, [r1, #20]
 8012e44:	3128      	adds	r1, #40	@ 0x28
 8012e46:	3018      	adds	r0, #24
 8012e48:	f7fa fbe0 	bl	800d60c <rmw_init>
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d0bd      	beq.n	8012dce <rcl_init+0x152>
 8012e52:	f7ff fe8f 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8012e56:	4604      	mov	r4, r0
 8012e58:	e7ae      	b.n	8012db8 <rcl_init+0x13c>
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	461c      	mov	r4, r3
 8012e5e:	600a      	str	r2, [r1, #0]
 8012e60:	4613      	mov	r3, r2
 8012e62:	e7c6      	b.n	8012df2 <rcl_init+0x176>
 8012e64:	240a      	movs	r4, #10
 8012e66:	e7b2      	b.n	8012dce <rcl_init+0x152>
 8012e68:	2401      	movs	r4, #1
 8012e6a:	e7a5      	b.n	8012db8 <rcl_init+0x13c>
 8012e6c:	3024      	adds	r0, #36	@ 0x24
 8012e6e:	f004 fc15 	bl	801769c <rcl_get_default_domain_id>
 8012e72:	4604      	mov	r4, r0
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d19f      	bne.n	8012db8 <rcl_init+0x13c>
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	6958      	ldr	r0, [r3, #20]
 8012e7c:	e7c1      	b.n	8012e02 <rcl_init+0x186>
 8012e7e:	bf00      	nop
 8012e80:	2000b318 	.word	0x2000b318

08012e84 <rcl_get_localhost_only>:
 8012e84:	b510      	push	{r4, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	2300      	movs	r3, #0
 8012e8a:	9301      	str	r3, [sp, #4]
 8012e8c:	b1b8      	cbz	r0, 8012ebe <rcl_get_localhost_only+0x3a>
 8012e8e:	4604      	mov	r4, r0
 8012e90:	a901      	add	r1, sp, #4
 8012e92:	480c      	ldr	r0, [pc, #48]	@ (8012ec4 <rcl_get_localhost_only+0x40>)
 8012e94:	f002 fc40 	bl	8015718 <rcutils_get_env>
 8012e98:	b110      	cbz	r0, 8012ea0 <rcl_get_localhost_only+0x1c>
 8012e9a:	2001      	movs	r0, #1
 8012e9c:	b002      	add	sp, #8
 8012e9e:	bd10      	pop	{r4, pc}
 8012ea0:	9b01      	ldr	r3, [sp, #4]
 8012ea2:	b113      	cbz	r3, 8012eaa <rcl_get_localhost_only+0x26>
 8012ea4:	781a      	ldrb	r2, [r3, #0]
 8012ea6:	2a31      	cmp	r2, #49	@ 0x31
 8012ea8:	d004      	beq.n	8012eb4 <rcl_get_localhost_only+0x30>
 8012eaa:	2302      	movs	r3, #2
 8012eac:	2000      	movs	r0, #0
 8012eae:	7023      	strb	r3, [r4, #0]
 8012eb0:	b002      	add	sp, #8
 8012eb2:	bd10      	pop	{r4, pc}
 8012eb4:	785b      	ldrb	r3, [r3, #1]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d1f7      	bne.n	8012eaa <rcl_get_localhost_only+0x26>
 8012eba:	2301      	movs	r3, #1
 8012ebc:	e7f6      	b.n	8012eac <rcl_get_localhost_only+0x28>
 8012ebe:	200b      	movs	r0, #11
 8012ec0:	b002      	add	sp, #8
 8012ec2:	bd10      	pop	{r4, pc}
 8012ec4:	0801b7e4 	.word	0x0801b7e4

08012ec8 <rcl_get_zero_initialized_node>:
 8012ec8:	4a03      	ldr	r2, [pc, #12]	@ (8012ed8 <rcl_get_zero_initialized_node+0x10>)
 8012eca:	4603      	mov	r3, r0
 8012ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ed0:	e883 0003 	stmia.w	r3, {r0, r1}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	4770      	bx	lr
 8012ed8:	0801b800 	.word	0x0801b800

08012edc <rcl_node_init>:
 8012edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee0:	b0a9      	sub	sp, #164	@ 0xa4
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012ee8:	a823      	add	r0, sp, #140	@ 0x8c
 8012eea:	460e      	mov	r6, r1
 8012eec:	4615      	mov	r5, r2
 8012eee:	461f      	mov	r7, r3
 8012ef0:	f004 fe48 	bl	8017b84 <rcl_guard_condition_get_default_options>
 8012ef4:	f1b8 0f00 	cmp.w	r8, #0
 8012ef8:	f000 80e6 	beq.w	80130c8 <rcl_node_init+0x1ec>
 8012efc:	4640      	mov	r0, r8
 8012efe:	f7fa f9cd 	bl	800d29c <rcutils_allocator_is_valid>
 8012f02:	2800      	cmp	r0, #0
 8012f04:	f000 80e0 	beq.w	80130c8 <rcl_node_init+0x1ec>
 8012f08:	2e00      	cmp	r6, #0
 8012f0a:	f000 80dd 	beq.w	80130c8 <rcl_node_init+0x1ec>
 8012f0e:	2d00      	cmp	r5, #0
 8012f10:	f000 80da 	beq.w	80130c8 <rcl_node_init+0x1ec>
 8012f14:	2c00      	cmp	r4, #0
 8012f16:	f000 80d7 	beq.w	80130c8 <rcl_node_init+0x1ec>
 8012f1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012f1e:	f1b9 0f00 	cmp.w	r9, #0
 8012f22:	f040 80fd 	bne.w	8013120 <rcl_node_init+0x244>
 8012f26:	2f00      	cmp	r7, #0
 8012f28:	f000 80ce 	beq.w	80130c8 <rcl_node_init+0x1ec>
 8012f2c:	4638      	mov	r0, r7
 8012f2e:	f7ff fe3f 	bl	8012bb0 <rcl_context_is_valid>
 8012f32:	4682      	mov	sl, r0
 8012f34:	2800      	cmp	r0, #0
 8012f36:	f000 80cd 	beq.w	80130d4 <rcl_node_init+0x1f8>
 8012f3a:	464a      	mov	r2, r9
 8012f3c:	a922      	add	r1, sp, #136	@ 0x88
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012f44:	f003 f812 	bl	8015f6c <rmw_validate_node_name>
 8012f48:	4681      	mov	r9, r0
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	f040 80be 	bne.w	80130cc <rcl_node_init+0x1f0>
 8012f50:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012f52:	2800      	cmp	r0, #0
 8012f54:	f040 80f0 	bne.w	8013138 <rcl_node_init+0x25c>
 8012f58:	4628      	mov	r0, r5
 8012f5a:	f7ed f96b 	bl	8000234 <strlen>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	f040 80bb 	bne.w	80130da <rcl_node_init+0x1fe>
 8012f64:	4d7c      	ldr	r5, [pc, #496]	@ (8013158 <rcl_node_init+0x27c>)
 8012f66:	a922      	add	r1, sp, #136	@ 0x88
 8012f68:	2200      	movs	r2, #0
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	f002 ffe0 	bl	8015f30 <rmw_validate_namespace>
 8012f70:	4681      	mov	r9, r0
 8012f72:	2800      	cmp	r0, #0
 8012f74:	f040 80aa 	bne.w	80130cc <rcl_node_init+0x1f0>
 8012f78:	4682      	mov	sl, r0
 8012f7a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	f040 80e0 	bne.w	8013142 <rcl_node_init+0x266>
 8012f82:	f8d8 3000 	ldr.w	r3, [r8]
 8012f86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012f8a:	2078      	movs	r0, #120	@ 0x78
 8012f8c:	4798      	blx	r3
 8012f8e:	4681      	mov	r9, r0
 8012f90:	6060      	str	r0, [r4, #4]
 8012f92:	2800      	cmp	r0, #0
 8012f94:	f000 80ca 	beq.w	801312c <rcl_node_init+0x250>
 8012f98:	2200      	movs	r2, #0
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012fa0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8012fa4:	a808      	add	r0, sp, #32
 8012fa6:	f000 f907 	bl	80131b8 <rcl_node_get_default_options>
 8012faa:	a908      	add	r1, sp, #32
 8012fac:	4648      	mov	r0, r9
 8012fae:	2268      	movs	r2, #104	@ 0x68
 8012fb0:	f005 fd35 	bl	8018a1e <memcpy>
 8012fb4:	6861      	ldr	r1, [r4, #4]
 8012fb6:	6027      	str	r7, [r4, #0]
 8012fb8:	4640      	mov	r0, r8
 8012fba:	f000 f90b 	bl	80131d4 <rcl_node_options_copy>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	d158      	bne.n	8013074 <rcl_node_init+0x198>
 8012fc2:	4628      	mov	r0, r5
 8012fc4:	f7ed f936 	bl	8000234 <strlen>
 8012fc8:	4428      	add	r0, r5
 8012fca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012fce:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012fd2:	2b2f      	cmp	r3, #47	@ 0x2f
 8012fd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	bf0c      	ite	eq
 8012fdc:	4b5f      	ldreq	r3, [pc, #380]	@ (801315c <rcl_node_init+0x280>)
 8012fde:	4b60      	ldrne	r3, [pc, #384]	@ (8013160 <rcl_node_init+0x284>)
 8012fe0:	9302      	str	r3, [sp, #8]
 8012fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012fe6:	9301      	str	r3, [sp, #4]
 8012fe8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012fec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012ff0:	f002 fbba 	bl	8015768 <rcutils_format_string_limit>
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8012ffa:	6818      	ldr	r0, [r3, #0]
 8012ffc:	4631      	mov	r1, r6
 8012ffe:	3028      	adds	r0, #40	@ 0x28
 8013000:	462a      	mov	r2, r5
 8013002:	6866      	ldr	r6, [r4, #4]
 8013004:	f7fa fce4 	bl	800d9d0 <rmw_create_node>
 8013008:	6863      	ldr	r3, [r4, #4]
 801300a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801300c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801300e:	2800      	cmp	r0, #0
 8013010:	d032      	beq.n	8013078 <rcl_node_init+0x19c>
 8013012:	f7fa fd71 	bl	800daf8 <rmw_node_get_graph_guard_condition>
 8013016:	4681      	mov	r9, r0
 8013018:	b360      	cbz	r0, 8013074 <rcl_node_init+0x198>
 801301a:	f8d8 3000 	ldr.w	r3, [r8]
 801301e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013022:	6866      	ldr	r6, [r4, #4]
 8013024:	2008      	movs	r0, #8
 8013026:	4798      	blx	r3
 8013028:	6863      	ldr	r3, [r4, #4]
 801302a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801302c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013030:	f1bb 0f00 	cmp.w	fp, #0
 8013034:	d020      	beq.n	8013078 <rcl_node_init+0x19c>
 8013036:	a806      	add	r0, sp, #24
 8013038:	f004 fcc8 	bl	80179cc <rcl_get_zero_initialized_guard_condition>
 801303c:	a806      	add	r0, sp, #24
 801303e:	c803      	ldmia	r0, {r0, r1}
 8013040:	6863      	ldr	r3, [r4, #4]
 8013042:	46c4      	mov	ip, r8
 8013044:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013048:	e88b 0003 	stmia.w	fp, {r0, r1}
 801304c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013050:	ae23      	add	r6, sp, #140	@ 0x8c
 8013052:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013054:	f8dc 3000 	ldr.w	r3, [ip]
 8013058:	6033      	str	r3, [r6, #0]
 801305a:	ab28      	add	r3, sp, #160	@ 0xa0
 801305c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013060:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013064:	4649      	mov	r1, r9
 8013066:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013068:	463a      	mov	r2, r7
 801306a:	4670      	mov	r0, lr
 801306c:	f004 fd04 	bl	8017a78 <rcl_guard_condition_init_from_rmw>
 8013070:	4681      	mov	r9, r0
 8013072:	b328      	cbz	r0, 80130c0 <rcl_node_init+0x1e4>
 8013074:	6863      	ldr	r3, [r4, #4]
 8013076:	b1f3      	cbz	r3, 80130b6 <rcl_node_init+0x1da>
 8013078:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801307a:	b128      	cbz	r0, 8013088 <rcl_node_init+0x1ac>
 801307c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013080:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013084:	4798      	blx	r3
 8013086:	6863      	ldr	r3, [r4, #4]
 8013088:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801308a:	b110      	cbz	r0, 8013092 <rcl_node_init+0x1b6>
 801308c:	f7fa fcb8 	bl	800da00 <rmw_destroy_node>
 8013090:	6863      	ldr	r3, [r4, #4]
 8013092:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013094:	b148      	cbz	r0, 80130aa <rcl_node_init+0x1ce>
 8013096:	f004 fd4f 	bl	8017b38 <rcl_guard_condition_fini>
 801309a:	6863      	ldr	r3, [r4, #4]
 801309c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80130a0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80130a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80130a6:	4798      	blx	r3
 80130a8:	6863      	ldr	r3, [r4, #4]
 80130aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80130ae:	4618      	mov	r0, r3
 80130b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80130b4:	4798      	blx	r3
 80130b6:	2300      	movs	r3, #0
 80130b8:	e9c4 3300 	strd	r3, r3, [r4]
 80130bc:	f04f 0901 	mov.w	r9, #1
 80130c0:	f1ba 0f00 	cmp.w	sl, #0
 80130c4:	d125      	bne.n	8013112 <rcl_node_init+0x236>
 80130c6:	e001      	b.n	80130cc <rcl_node_init+0x1f0>
 80130c8:	f04f 090b 	mov.w	r9, #11
 80130cc:	4648      	mov	r0, r9
 80130ce:	b029      	add	sp, #164	@ 0xa4
 80130d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80130d8:	e7f8      	b.n	80130cc <rcl_node_init+0x1f0>
 80130da:	782b      	ldrb	r3, [r5, #0]
 80130dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80130de:	f43f af42 	beq.w	8012f66 <rcl_node_init+0x8a>
 80130e2:	9503      	str	r5, [sp, #12]
 80130e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80130e8:	9300      	str	r3, [sp, #0]
 80130ea:	4b1e      	ldr	r3, [pc, #120]	@ (8013164 <rcl_node_init+0x288>)
 80130ec:	9302      	str	r3, [sp, #8]
 80130ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80130f2:	9301      	str	r3, [sp, #4]
 80130f4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80130f8:	f002 fb36 	bl	8015768 <rcutils_format_string_limit>
 80130fc:	4605      	mov	r5, r0
 80130fe:	b340      	cbz	r0, 8013152 <rcl_node_init+0x276>
 8013100:	2200      	movs	r2, #0
 8013102:	a922      	add	r1, sp, #136	@ 0x88
 8013104:	9222      	str	r2, [sp, #136]	@ 0x88
 8013106:	f002 ff13 	bl	8015f30 <rmw_validate_namespace>
 801310a:	4681      	mov	r9, r0
 801310c:	2800      	cmp	r0, #0
 801310e:	f43f af34 	beq.w	8012f7a <rcl_node_init+0x9e>
 8013112:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013116:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801311a:	4628      	mov	r0, r5
 801311c:	4798      	blx	r3
 801311e:	e7d5      	b.n	80130cc <rcl_node_init+0x1f0>
 8013120:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013124:	4648      	mov	r0, r9
 8013126:	b029      	add	sp, #164	@ 0xa4
 8013128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801312c:	f04f 090a 	mov.w	r9, #10
 8013130:	f1ba 0f00 	cmp.w	sl, #0
 8013134:	d1ed      	bne.n	8013112 <rcl_node_init+0x236>
 8013136:	e7c9      	b.n	80130cc <rcl_node_init+0x1f0>
 8013138:	f002 ff6a 	bl	8016010 <rmw_node_name_validation_result_string>
 801313c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013140:	e7c4      	b.n	80130cc <rcl_node_init+0x1f0>
 8013142:	f002 ff07 	bl	8015f54 <rmw_namespace_validation_result_string>
 8013146:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801314a:	f1ba 0f00 	cmp.w	sl, #0
 801314e:	d1e0      	bne.n	8013112 <rcl_node_init+0x236>
 8013150:	e7bc      	b.n	80130cc <rcl_node_init+0x1f0>
 8013152:	f04f 090a 	mov.w	r9, #10
 8013156:	e7b9      	b.n	80130cc <rcl_node_init+0x1f0>
 8013158:	0801b2f0 	.word	0x0801b2f0
 801315c:	0801b318 	.word	0x0801b318
 8013160:	0801b2f4 	.word	0x0801b2f4
 8013164:	0801b7fc 	.word	0x0801b7fc

08013168 <rcl_node_is_valid>:
 8013168:	b130      	cbz	r0, 8013178 <rcl_node_is_valid+0x10>
 801316a:	6843      	ldr	r3, [r0, #4]
 801316c:	b123      	cbz	r3, 8013178 <rcl_node_is_valid+0x10>
 801316e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013170:	b113      	cbz	r3, 8013178 <rcl_node_is_valid+0x10>
 8013172:	6800      	ldr	r0, [r0, #0]
 8013174:	f7ff bd1c 	b.w	8012bb0 <rcl_context_is_valid>
 8013178:	2000      	movs	r0, #0
 801317a:	4770      	bx	lr

0801317c <rcl_node_get_name>:
 801317c:	b120      	cbz	r0, 8013188 <rcl_node_get_name+0xc>
 801317e:	6840      	ldr	r0, [r0, #4]
 8013180:	b110      	cbz	r0, 8013188 <rcl_node_get_name+0xc>
 8013182:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013184:	b100      	cbz	r0, 8013188 <rcl_node_get_name+0xc>
 8013186:	6880      	ldr	r0, [r0, #8]
 8013188:	4770      	bx	lr
 801318a:	bf00      	nop

0801318c <rcl_node_get_namespace>:
 801318c:	b120      	cbz	r0, 8013198 <rcl_node_get_namespace+0xc>
 801318e:	6840      	ldr	r0, [r0, #4]
 8013190:	b110      	cbz	r0, 8013198 <rcl_node_get_namespace+0xc>
 8013192:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013194:	b100      	cbz	r0, 8013198 <rcl_node_get_namespace+0xc>
 8013196:	68c0      	ldr	r0, [r0, #12]
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop

0801319c <rcl_node_get_options>:
 801319c:	b128      	cbz	r0, 80131aa <rcl_node_get_options+0xe>
 801319e:	6840      	ldr	r0, [r0, #4]
 80131a0:	b118      	cbz	r0, 80131aa <rcl_node_get_options+0xe>
 80131a2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bf08      	it	eq
 80131a8:	2000      	moveq	r0, #0
 80131aa:	4770      	bx	lr

080131ac <rcl_node_get_rmw_handle>:
 80131ac:	b110      	cbz	r0, 80131b4 <rcl_node_get_rmw_handle+0x8>
 80131ae:	6840      	ldr	r0, [r0, #4]
 80131b0:	b100      	cbz	r0, 80131b4 <rcl_node_get_rmw_handle+0x8>
 80131b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80131b4:	4770      	bx	lr
 80131b6:	bf00      	nop

080131b8 <rcl_node_get_default_options>:
 80131b8:	b510      	push	{r4, lr}
 80131ba:	2268      	movs	r2, #104	@ 0x68
 80131bc:	4604      	mov	r4, r0
 80131be:	2100      	movs	r1, #0
 80131c0:	f005 fb64 	bl	801888c <memset>
 80131c4:	4620      	mov	r0, r4
 80131c6:	f7fa f85b 	bl	800d280 <rcutils_get_default_allocator>
 80131ca:	2301      	movs	r3, #1
 80131cc:	7523      	strb	r3, [r4, #20]
 80131ce:	4620      	mov	r0, r4
 80131d0:	bd10      	pop	{r4, pc}
 80131d2:	bf00      	nop

080131d4 <rcl_node_options_copy>:
 80131d4:	b1d0      	cbz	r0, 801320c <rcl_node_options_copy+0x38>
 80131d6:	b570      	push	{r4, r5, r6, lr}
 80131d8:	460c      	mov	r4, r1
 80131da:	b1a9      	cbz	r1, 8013208 <rcl_node_options_copy+0x34>
 80131dc:	4288      	cmp	r0, r1
 80131de:	4684      	mov	ip, r0
 80131e0:	d012      	beq.n	8013208 <rcl_node_options_copy+0x34>
 80131e2:	4605      	mov	r5, r0
 80131e4:	8a86      	ldrh	r6, [r0, #20]
 80131e6:	468e      	mov	lr, r1
 80131e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80131ee:	682b      	ldr	r3, [r5, #0]
 80131f0:	f8ce 3000 	str.w	r3, [lr]
 80131f4:	f10c 0118 	add.w	r1, ip, #24
 80131f8:	2250      	movs	r2, #80	@ 0x50
 80131fa:	82a6      	strh	r6, [r4, #20]
 80131fc:	f104 0018 	add.w	r0, r4, #24
 8013200:	f005 fc0d 	bl	8018a1e <memcpy>
 8013204:	2000      	movs	r0, #0
 8013206:	bd70      	pop	{r4, r5, r6, pc}
 8013208:	200b      	movs	r0, #11
 801320a:	bd70      	pop	{r4, r5, r6, pc}
 801320c:	200b      	movs	r0, #11
 801320e:	4770      	bx	lr

08013210 <rcl_node_resolve_name>:
 8013210:	b082      	sub	sp, #8
 8013212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013216:	b091      	sub	sp, #68	@ 0x44
 8013218:	ac1a      	add	r4, sp, #104	@ 0x68
 801321a:	e884 000c 	stmia.w	r4, {r2, r3}
 801321e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013222:	2800      	cmp	r0, #0
 8013224:	d03b      	beq.n	801329e <rcl_node_resolve_name+0x8e>
 8013226:	460c      	mov	r4, r1
 8013228:	4605      	mov	r5, r0
 801322a:	f7ff ffb7 	bl	801319c <rcl_node_get_options>
 801322e:	2800      	cmp	r0, #0
 8013230:	d037      	beq.n	80132a2 <rcl_node_resolve_name+0x92>
 8013232:	4628      	mov	r0, r5
 8013234:	f7ff ffa2 	bl	801317c <rcl_node_get_name>
 8013238:	4606      	mov	r6, r0
 801323a:	4628      	mov	r0, r5
 801323c:	f7ff ffa6 	bl	801318c <rcl_node_get_namespace>
 8013240:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013244:	4681      	mov	r9, r0
 8013246:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801324a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801324c:	46ac      	mov	ip, r5
 801324e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013252:	f8de 3000 	ldr.w	r3, [lr]
 8013256:	f8cc 3000 	str.w	r3, [ip]
 801325a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801325c:	b1fb      	cbz	r3, 801329e <rcl_node_resolve_name+0x8e>
 801325e:	468a      	mov	sl, r1
 8013260:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013264:	f002 fbd8 	bl	8015a18 <rcutils_get_zero_initialized_string_map>
 8013268:	ab10      	add	r3, sp, #64	@ 0x40
 801326a:	9008      	str	r0, [sp, #32]
 801326c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013270:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013274:	2100      	movs	r1, #0
 8013276:	e895 000c 	ldmia.w	r5, {r2, r3}
 801327a:	a808      	add	r0, sp, #32
 801327c:	f002 fc44 	bl	8015b08 <rcutils_string_map_init>
 8013280:	4607      	mov	r7, r0
 8013282:	b180      	cbz	r0, 80132a6 <rcl_node_resolve_name+0x96>
 8013284:	f7fa f818 	bl	800d2b8 <rcutils_get_error_string>
 8013288:	f7fa f82e 	bl	800d2e8 <rcutils_reset_error>
 801328c:	2f0a      	cmp	r7, #10
 801328e:	bf18      	it	ne
 8013290:	2701      	movne	r7, #1
 8013292:	4638      	mov	r0, r7
 8013294:	b011      	add	sp, #68	@ 0x44
 8013296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329a:	b002      	add	sp, #8
 801329c:	4770      	bx	lr
 801329e:	270b      	movs	r7, #11
 80132a0:	e7f7      	b.n	8013292 <rcl_node_resolve_name+0x82>
 80132a2:	2701      	movs	r7, #1
 80132a4:	e7f5      	b.n	8013292 <rcl_node_resolve_name+0x82>
 80132a6:	9009      	str	r0, [sp, #36]	@ 0x24
 80132a8:	9007      	str	r0, [sp, #28]
 80132aa:	a808      	add	r0, sp, #32
 80132ac:	f004 fb88 	bl	80179c0 <rcl_get_default_topic_name_substitutions>
 80132b0:	4607      	mov	r7, r0
 80132b2:	b1a8      	cbz	r0, 80132e0 <rcl_node_resolve_name+0xd0>
 80132b4:	280a      	cmp	r0, #10
 80132b6:	9c07      	ldr	r4, [sp, #28]
 80132b8:	d000      	beq.n	80132bc <rcl_node_resolve_name+0xac>
 80132ba:	2701      	movs	r7, #1
 80132bc:	a808      	add	r0, sp, #32
 80132be:	f002 fc63 	bl	8015b88 <rcutils_string_map_fini>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d13d      	bne.n	8013342 <rcl_node_resolve_name+0x132>
 80132c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132c8:	4659      	mov	r1, fp
 80132ca:	47d0      	blx	sl
 80132cc:	4659      	mov	r1, fp
 80132ce:	4620      	mov	r0, r4
 80132d0:	47d0      	blx	sl
 80132d2:	f1b8 0f00 	cmp.w	r8, #0
 80132d6:	d0dc      	beq.n	8013292 <rcl_node_resolve_name+0x82>
 80132d8:	2f67      	cmp	r7, #103	@ 0x67
 80132da:	bf08      	it	eq
 80132dc:	2768      	moveq	r7, #104	@ 0x68
 80132de:	e7d8      	b.n	8013292 <rcl_node_resolve_name+0x82>
 80132e0:	ab09      	add	r3, sp, #36	@ 0x24
 80132e2:	9305      	str	r3, [sp, #20]
 80132e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132e6:	46ec      	mov	ip, sp
 80132e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80132ec:	682b      	ldr	r3, [r5, #0]
 80132ee:	f8cc 3000 	str.w	r3, [ip]
 80132f2:	464a      	mov	r2, r9
 80132f4:	4631      	mov	r1, r6
 80132f6:	4620      	mov	r0, r4
 80132f8:	ab08      	add	r3, sp, #32
 80132fa:	f004 fa03 	bl	8017704 <rcl_expand_topic_name>
 80132fe:	4607      	mov	r7, r0
 8013300:	b9b8      	cbnz	r0, 8013332 <rcl_node_resolve_name+0x122>
 8013302:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013304:	9009      	str	r0, [sp, #36]	@ 0x24
 8013306:	4602      	mov	r2, r0
 8013308:	a90a      	add	r1, sp, #40	@ 0x28
 801330a:	4620      	mov	r0, r4
 801330c:	f002 fd4c 	bl	8015da8 <rmw_validate_full_topic_name>
 8013310:	b988      	cbnz	r0, 8013336 <rcl_node_resolve_name+0x126>
 8013312:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013314:	b9d5      	cbnz	r5, 801334c <rcl_node_resolve_name+0x13c>
 8013316:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013318:	a808      	add	r0, sp, #32
 801331a:	601c      	str	r4, [r3, #0]
 801331c:	f002 fc34 	bl	8015b88 <rcutils_string_map_fini>
 8013320:	4607      	mov	r7, r0
 8013322:	b1a8      	cbz	r0, 8013350 <rcl_node_resolve_name+0x140>
 8013324:	f7f9 ffc8 	bl	800d2b8 <rcutils_get_error_string>
 8013328:	462c      	mov	r4, r5
 801332a:	f7f9 ffdd 	bl	800d2e8 <rcutils_reset_error>
 801332e:	2701      	movs	r7, #1
 8013330:	e7c9      	b.n	80132c6 <rcl_node_resolve_name+0xb6>
 8013332:	9c07      	ldr	r4, [sp, #28]
 8013334:	e7c2      	b.n	80132bc <rcl_node_resolve_name+0xac>
 8013336:	f7f9 ffbf 	bl	800d2b8 <rcutils_get_error_string>
 801333a:	2701      	movs	r7, #1
 801333c:	f7f9 ffd4 	bl	800d2e8 <rcutils_reset_error>
 8013340:	e7bc      	b.n	80132bc <rcl_node_resolve_name+0xac>
 8013342:	f7f9 ffb9 	bl	800d2b8 <rcutils_get_error_string>
 8013346:	f7f9 ffcf 	bl	800d2e8 <rcutils_reset_error>
 801334a:	e7bc      	b.n	80132c6 <rcl_node_resolve_name+0xb6>
 801334c:	2767      	movs	r7, #103	@ 0x67
 801334e:	e7b5      	b.n	80132bc <rcl_node_resolve_name+0xac>
 8013350:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013352:	4659      	mov	r1, fp
 8013354:	47d0      	blx	sl
 8013356:	4659      	mov	r1, fp
 8013358:	4638      	mov	r0, r7
 801335a:	47d0      	blx	sl
 801335c:	e799      	b.n	8013292 <rcl_node_resolve_name+0x82>
 801335e:	bf00      	nop

08013360 <exact_match_lookup>:
 8013360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013362:	f102 0708 	add.w	r7, r2, #8
 8013366:	460b      	mov	r3, r1
 8013368:	4614      	mov	r4, r2
 801336a:	4606      	mov	r6, r0
 801336c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013370:	b085      	sub	sp, #20
 8013372:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013376:	4618      	mov	r0, r3
 8013378:	4919      	ldr	r1, [pc, #100]	@ (80133e0 <exact_match_lookup+0x80>)
 801337a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801337e:	f002 f9e5 	bl	801574c <rcutils_join_path>
 8013382:	7833      	ldrb	r3, [r6, #0]
 8013384:	2b2f      	cmp	r3, #47	@ 0x2f
 8013386:	4605      	mov	r5, r0
 8013388:	d023      	beq.n	80133d2 <exact_match_lookup+0x72>
 801338a:	f104 030c 	add.w	r3, r4, #12
 801338e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013392:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013396:	1c70      	adds	r0, r6, #1
 8013398:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801339c:	f002 f9dc 	bl	8015758 <rcutils_to_native_path>
 80133a0:	4606      	mov	r6, r0
 80133a2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80133a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80133aa:	4631      	mov	r1, r6
 80133ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80133b0:	4628      	mov	r0, r5
 80133b2:	f002 f9cb 	bl	801574c <rcutils_join_path>
 80133b6:	6862      	ldr	r2, [r4, #4]
 80133b8:	6921      	ldr	r1, [r4, #16]
 80133ba:	4603      	mov	r3, r0
 80133bc:	4630      	mov	r0, r6
 80133be:	461e      	mov	r6, r3
 80133c0:	4790      	blx	r2
 80133c2:	4628      	mov	r0, r5
 80133c4:	6863      	ldr	r3, [r4, #4]
 80133c6:	6921      	ldr	r1, [r4, #16]
 80133c8:	4798      	blx	r3
 80133ca:	4635      	mov	r5, r6
 80133cc:	4628      	mov	r0, r5
 80133ce:	b005      	add	sp, #20
 80133d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133d2:	7873      	ldrb	r3, [r6, #1]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d1d8      	bne.n	801338a <exact_match_lookup+0x2a>
 80133d8:	4628      	mov	r0, r5
 80133da:	b005      	add	sp, #20
 80133dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133de:	bf00      	nop
 80133e0:	0801b844 	.word	0x0801b844

080133e4 <rcl_get_secure_root>:
 80133e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133e8:	b085      	sub	sp, #20
 80133ea:	b168      	cbz	r0, 8013408 <rcl_get_secure_root+0x24>
 80133ec:	4607      	mov	r7, r0
 80133ee:	4608      	mov	r0, r1
 80133f0:	460c      	mov	r4, r1
 80133f2:	f7f9 ff53 	bl	800d29c <rcutils_allocator_is_valid>
 80133f6:	b138      	cbz	r0, 8013408 <rcl_get_secure_root+0x24>
 80133f8:	2300      	movs	r3, #0
 80133fa:	482d      	ldr	r0, [pc, #180]	@ (80134b0 <rcl_get_secure_root+0xcc>)
 80133fc:	9303      	str	r3, [sp, #12]
 80133fe:	a903      	add	r1, sp, #12
 8013400:	f002 f98a 	bl	8015718 <rcutils_get_env>
 8013404:	4605      	mov	r5, r0
 8013406:	b120      	cbz	r0, 8013412 <rcl_get_secure_root+0x2e>
 8013408:	2500      	movs	r5, #0
 801340a:	4628      	mov	r0, r5
 801340c:	b005      	add	sp, #20
 801340e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013412:	9b03      	ldr	r3, [sp, #12]
 8013414:	781a      	ldrb	r2, [r3, #0]
 8013416:	2a00      	cmp	r2, #0
 8013418:	d0f6      	beq.n	8013408 <rcl_get_secure_root+0x24>
 801341a:	f104 090c 	add.w	r9, r4, #12
 801341e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013422:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013426:	4618      	mov	r0, r3
 8013428:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801342c:	f002 fab6 	bl	801599c <rcutils_strdup>
 8013430:	4680      	mov	r8, r0
 8013432:	2800      	cmp	r0, #0
 8013434:	d0e8      	beq.n	8013408 <rcl_get_secure_root+0x24>
 8013436:	481f      	ldr	r0, [pc, #124]	@ (80134b4 <rcl_get_secure_root+0xd0>)
 8013438:	9503      	str	r5, [sp, #12]
 801343a:	a903      	add	r1, sp, #12
 801343c:	f002 f96c 	bl	8015718 <rcutils_get_env>
 8013440:	b160      	cbz	r0, 801345c <rcl_get_secure_root+0x78>
 8013442:	2600      	movs	r6, #0
 8013444:	6863      	ldr	r3, [r4, #4]
 8013446:	6921      	ldr	r1, [r4, #16]
 8013448:	4630      	mov	r0, r6
 801344a:	4798      	blx	r3
 801344c:	4640      	mov	r0, r8
 801344e:	6863      	ldr	r3, [r4, #4]
 8013450:	6921      	ldr	r1, [r4, #16]
 8013452:	4798      	blx	r3
 8013454:	4628      	mov	r0, r5
 8013456:	b005      	add	sp, #20
 8013458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801345c:	9b03      	ldr	r3, [sp, #12]
 801345e:	781e      	ldrb	r6, [r3, #0]
 8013460:	b1f6      	cbz	r6, 80134a0 <rcl_get_secure_root+0xbc>
 8013462:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013466:	e88d 0003 	stmia.w	sp, {r0, r1}
 801346a:	4618      	mov	r0, r3
 801346c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013470:	f002 fa94 	bl	801599c <rcutils_strdup>
 8013474:	4606      	mov	r6, r0
 8013476:	2800      	cmp	r0, #0
 8013478:	d0e3      	beq.n	8013442 <rcl_get_secure_root+0x5e>
 801347a:	4622      	mov	r2, r4
 801347c:	4641      	mov	r1, r8
 801347e:	f7ff ff6f 	bl	8013360 <exact_match_lookup>
 8013482:	4605      	mov	r5, r0
 8013484:	2d00      	cmp	r5, #0
 8013486:	d0dd      	beq.n	8013444 <rcl_get_secure_root+0x60>
 8013488:	4628      	mov	r0, r5
 801348a:	f002 f95d 	bl	8015748 <rcutils_is_directory>
 801348e:	4603      	mov	r3, r0
 8013490:	2800      	cmp	r0, #0
 8013492:	d1d7      	bne.n	8013444 <rcl_get_secure_root+0x60>
 8013494:	4628      	mov	r0, r5
 8013496:	6921      	ldr	r1, [r4, #16]
 8013498:	461d      	mov	r5, r3
 801349a:	6863      	ldr	r3, [r4, #4]
 801349c:	4798      	blx	r3
 801349e:	e7d1      	b.n	8013444 <rcl_get_secure_root+0x60>
 80134a0:	4622      	mov	r2, r4
 80134a2:	4638      	mov	r0, r7
 80134a4:	4641      	mov	r1, r8
 80134a6:	f7ff ff5b 	bl	8013360 <exact_match_lookup>
 80134aa:	4605      	mov	r5, r0
 80134ac:	e7ea      	b.n	8013484 <rcl_get_secure_root+0xa0>
 80134ae:	bf00      	nop
 80134b0:	0801b850 	.word	0x0801b850
 80134b4:	0801b868 	.word	0x0801b868

080134b8 <rcl_get_security_options_from_environment>:
 80134b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134bc:	b082      	sub	sp, #8
 80134be:	2300      	movs	r3, #0
 80134c0:	4606      	mov	r6, r0
 80134c2:	460f      	mov	r7, r1
 80134c4:	4820      	ldr	r0, [pc, #128]	@ (8013548 <rcl_get_security_options_from_environment+0x90>)
 80134c6:	9301      	str	r3, [sp, #4]
 80134c8:	a901      	add	r1, sp, #4
 80134ca:	4690      	mov	r8, r2
 80134cc:	f002 f924 	bl	8015718 <rcutils_get_env>
 80134d0:	b120      	cbz	r0, 80134dc <rcl_get_security_options_from_environment+0x24>
 80134d2:	2501      	movs	r5, #1
 80134d4:	4628      	mov	r0, r5
 80134d6:	b002      	add	sp, #8
 80134d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134dc:	491b      	ldr	r1, [pc, #108]	@ (801354c <rcl_get_security_options_from_environment+0x94>)
 80134de:	4604      	mov	r4, r0
 80134e0:	9801      	ldr	r0, [sp, #4]
 80134e2:	f7ec fe9d 	bl	8000220 <strcmp>
 80134e6:	4605      	mov	r5, r0
 80134e8:	b9e8      	cbnz	r0, 8013526 <rcl_get_security_options_from_environment+0x6e>
 80134ea:	9001      	str	r0, [sp, #4]
 80134ec:	f1b8 0f00 	cmp.w	r8, #0
 80134f0:	d020      	beq.n	8013534 <rcl_get_security_options_from_environment+0x7c>
 80134f2:	4817      	ldr	r0, [pc, #92]	@ (8013550 <rcl_get_security_options_from_environment+0x98>)
 80134f4:	a901      	add	r1, sp, #4
 80134f6:	f002 f90f 	bl	8015718 <rcutils_get_env>
 80134fa:	2800      	cmp	r0, #0
 80134fc:	d1e9      	bne.n	80134d2 <rcl_get_security_options_from_environment+0x1a>
 80134fe:	4915      	ldr	r1, [pc, #84]	@ (8013554 <rcl_get_security_options_from_environment+0x9c>)
 8013500:	9801      	ldr	r0, [sp, #4]
 8013502:	f7ec fe8d 	bl	8000220 <strcmp>
 8013506:	fab0 f080 	clz	r0, r0
 801350a:	0940      	lsrs	r0, r0, #5
 801350c:	f888 0000 	strb.w	r0, [r8]
 8013510:	4639      	mov	r1, r7
 8013512:	4630      	mov	r0, r6
 8013514:	f7ff ff66 	bl	80133e4 <rcl_get_secure_root>
 8013518:	b170      	cbz	r0, 8013538 <rcl_get_security_options_from_environment+0x80>
 801351a:	f8c8 0004 	str.w	r0, [r8, #4]
 801351e:	4628      	mov	r0, r5
 8013520:	b002      	add	sp, #8
 8013522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013526:	4625      	mov	r5, r4
 8013528:	4628      	mov	r0, r5
 801352a:	f888 4000 	strb.w	r4, [r8]
 801352e:	b002      	add	sp, #8
 8013530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013534:	250b      	movs	r5, #11
 8013536:	e7cd      	b.n	80134d4 <rcl_get_security_options_from_environment+0x1c>
 8013538:	f898 5000 	ldrb.w	r5, [r8]
 801353c:	f1a5 0501 	sub.w	r5, r5, #1
 8013540:	fab5 f585 	clz	r5, r5
 8013544:	096d      	lsrs	r5, r5, #5
 8013546:	e7c5      	b.n	80134d4 <rcl_get_security_options_from_environment+0x1c>
 8013548:	0801b808 	.word	0x0801b808
 801354c:	0801b81c 	.word	0x0801b81c
 8013550:	0801b824 	.word	0x0801b824
 8013554:	0801b83c 	.word	0x0801b83c

08013558 <rcl_service_get_rmw_handle>:
 8013558:	b118      	cbz	r0, 8013562 <rcl_service_get_rmw_handle+0xa>
 801355a:	6800      	ldr	r0, [r0, #0]
 801355c:	b108      	cbz	r0, 8013562 <rcl_service_get_rmw_handle+0xa>
 801355e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013562:	4770      	bx	lr

08013564 <rcl_take_request>:
 8013564:	b570      	push	{r4, r5, r6, lr}
 8013566:	468e      	mov	lr, r1
 8013568:	460c      	mov	r4, r1
 801356a:	4616      	mov	r6, r2
 801356c:	4605      	mov	r5, r0
 801356e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013572:	b08c      	sub	sp, #48	@ 0x30
 8013574:	f10d 0c18 	add.w	ip, sp, #24
 8013578:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801357c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013580:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013584:	b30d      	cbz	r5, 80135ca <rcl_take_request+0x66>
 8013586:	682b      	ldr	r3, [r5, #0]
 8013588:	b1fb      	cbz	r3, 80135ca <rcl_take_request+0x66>
 801358a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801358e:	b1e0      	cbz	r0, 80135ca <rcl_take_request+0x66>
 8013590:	b336      	cbz	r6, 80135e0 <rcl_take_request+0x7c>
 8013592:	2300      	movs	r3, #0
 8013594:	f88d 3007 	strb.w	r3, [sp, #7]
 8013598:	4632      	mov	r2, r6
 801359a:	f10d 0307 	add.w	r3, sp, #7
 801359e:	a902      	add	r1, sp, #8
 80135a0:	f002 ff58 	bl	8016454 <rmw_take_request>
 80135a4:	4605      	mov	r5, r0
 80135a6:	b198      	cbz	r0, 80135d0 <rcl_take_request+0x6c>
 80135a8:	280a      	cmp	r0, #10
 80135aa:	bf18      	it	ne
 80135ac:	2501      	movne	r5, #1
 80135ae:	f10d 0e18 	add.w	lr, sp, #24
 80135b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135b6:	46a4      	mov	ip, r4
 80135b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80135c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80135c4:	4628      	mov	r0, r5
 80135c6:	b00c      	add	sp, #48	@ 0x30
 80135c8:	bd70      	pop	{r4, r5, r6, pc}
 80135ca:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80135ce:	e7ee      	b.n	80135ae <rcl_take_request+0x4a>
 80135d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80135d4:	f240 2359 	movw	r3, #601	@ 0x259
 80135d8:	2a00      	cmp	r2, #0
 80135da:	bf08      	it	eq
 80135dc:	461d      	moveq	r5, r3
 80135de:	e7e6      	b.n	80135ae <rcl_take_request+0x4a>
 80135e0:	250b      	movs	r5, #11
 80135e2:	e7e4      	b.n	80135ae <rcl_take_request+0x4a>

080135e4 <rcl_send_response>:
 80135e4:	b170      	cbz	r0, 8013604 <rcl_send_response+0x20>
 80135e6:	6800      	ldr	r0, [r0, #0]
 80135e8:	b160      	cbz	r0, 8013604 <rcl_send_response+0x20>
 80135ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80135ee:	b148      	cbz	r0, 8013604 <rcl_send_response+0x20>
 80135f0:	b159      	cbz	r1, 801360a <rcl_send_response+0x26>
 80135f2:	b510      	push	{r4, lr}
 80135f4:	b15a      	cbz	r2, 801360e <rcl_send_response+0x2a>
 80135f6:	f002 ff8b 	bl	8016510 <rmw_send_response>
 80135fa:	b110      	cbz	r0, 8013602 <rcl_send_response+0x1e>
 80135fc:	2802      	cmp	r0, #2
 80135fe:	bf18      	it	ne
 8013600:	2001      	movne	r0, #1
 8013602:	bd10      	pop	{r4, pc}
 8013604:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013608:	4770      	bx	lr
 801360a:	200b      	movs	r0, #11
 801360c:	4770      	bx	lr
 801360e:	200b      	movs	r0, #11
 8013610:	bd10      	pop	{r4, pc}
 8013612:	bf00      	nop

08013614 <rcl_service_is_valid>:
 8013614:	b130      	cbz	r0, 8013624 <rcl_service_is_valid+0x10>
 8013616:	6800      	ldr	r0, [r0, #0]
 8013618:	b120      	cbz	r0, 8013624 <rcl_service_is_valid+0x10>
 801361a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801361e:	3800      	subs	r0, #0
 8013620:	bf18      	it	ne
 8013622:	2001      	movne	r0, #1
 8013624:	4770      	bx	lr
 8013626:	bf00      	nop

08013628 <rcl_take>:
 8013628:	2800      	cmp	r0, #0
 801362a:	d04a      	beq.n	80136c2 <rcl_take+0x9a>
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	4604      	mov	r4, r0
 8013632:	6800      	ldr	r0, [r0, #0]
 8013634:	b0a4      	sub	sp, #144	@ 0x90
 8013636:	2800      	cmp	r0, #0
 8013638:	d03b      	beq.n	80136b2 <rcl_take+0x8a>
 801363a:	461f      	mov	r7, r3
 801363c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8013640:	2b00      	cmp	r3, #0
 8013642:	d036      	beq.n	80136b2 <rcl_take+0x8a>
 8013644:	460e      	mov	r6, r1
 8013646:	2900      	cmp	r1, #0
 8013648:	d039      	beq.n	80136be <rcl_take+0x96>
 801364a:	4615      	mov	r5, r2
 801364c:	2a00      	cmp	r2, #0
 801364e:	d03c      	beq.n	80136ca <rcl_take+0xa2>
 8013650:	a802      	add	r0, sp, #8
 8013652:	f002 fba1 	bl	8015d98 <rmw_get_zero_initialized_message_info>
 8013656:	f10d 0c08 	add.w	ip, sp, #8
 801365a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801365e:	46ae      	mov	lr, r5
 8013660:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013664:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013668:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801366c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013670:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013674:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013678:	f04f 0800 	mov.w	r8, #0
 801367c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013680:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8013684:	6822      	ldr	r2, [r4, #0]
 8013686:	462b      	mov	r3, r5
 8013688:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801368c:	9700      	str	r7, [sp, #0]
 801368e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8013692:	4631      	mov	r1, r6
 8013694:	f002 ffe2 	bl	801665c <rmw_take_with_info>
 8013698:	4603      	mov	r3, r0
 801369a:	b9c0      	cbnz	r0, 80136ce <rcl_take+0xa6>
 801369c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80136a0:	f240 1291 	movw	r2, #401	@ 0x191
 80136a4:	2900      	cmp	r1, #0
 80136a6:	bf08      	it	eq
 80136a8:	4613      	moveq	r3, r2
 80136aa:	4618      	mov	r0, r3
 80136ac:	b024      	add	sp, #144	@ 0x90
 80136ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136b2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80136b6:	4618      	mov	r0, r3
 80136b8:	b024      	add	sp, #144	@ 0x90
 80136ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136be:	230b      	movs	r3, #11
 80136c0:	e7f3      	b.n	80136aa <rcl_take+0x82>
 80136c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80136c6:	4618      	mov	r0, r3
 80136c8:	4770      	bx	lr
 80136ca:	ad14      	add	r5, sp, #80	@ 0x50
 80136cc:	e7c0      	b.n	8013650 <rcl_take+0x28>
 80136ce:	f7ff fa51 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 80136d2:	4603      	mov	r3, r0
 80136d4:	e7e9      	b.n	80136aa <rcl_take+0x82>
 80136d6:	bf00      	nop

080136d8 <rcl_subscription_get_rmw_handle>:
 80136d8:	b118      	cbz	r0, 80136e2 <rcl_subscription_get_rmw_handle+0xa>
 80136da:	6800      	ldr	r0, [r0, #0]
 80136dc:	b108      	cbz	r0, 80136e2 <rcl_subscription_get_rmw_handle+0xa>
 80136de:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80136e2:	4770      	bx	lr

080136e4 <rcl_subscription_is_valid>:
 80136e4:	b130      	cbz	r0, 80136f4 <rcl_subscription_is_valid+0x10>
 80136e6:	6800      	ldr	r0, [r0, #0]
 80136e8:	b120      	cbz	r0, 80136f4 <rcl_subscription_is_valid+0x10>
 80136ea:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80136ee:	3800      	subs	r0, #0
 80136f0:	bf18      	it	ne
 80136f2:	2001      	movne	r0, #1
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop

080136f8 <rcl_get_system_time>:
 80136f8:	4608      	mov	r0, r1
 80136fa:	f7f9 be11 	b.w	800d320 <rcutils_system_time_now>
 80136fe:	bf00      	nop

08013700 <rcl_get_steady_time>:
 8013700:	4608      	mov	r0, r1
 8013702:	f7f9 be35 	b.w	800d370 <rcutils_steady_time_now>
 8013706:	bf00      	nop

08013708 <rcl_get_ros_time>:
 8013708:	7a03      	ldrb	r3, [r0, #8]
 801370a:	b510      	push	{r4, lr}
 801370c:	460c      	mov	r4, r1
 801370e:	b133      	cbz	r3, 801371e <rcl_get_ros_time+0x16>
 8013710:	2105      	movs	r1, #5
 8013712:	f001 ff5d 	bl	80155d0 <__atomic_load_8>
 8013716:	e9c4 0100 	strd	r0, r1, [r4]
 801371a:	2000      	movs	r0, #0
 801371c:	bd10      	pop	{r4, pc}
 801371e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013722:	4608      	mov	r0, r1
 8013724:	f7f9 bdfc 	b.w	800d320 <rcutils_system_time_now>

08013728 <rcl_clock_init>:
 8013728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372a:	4605      	mov	r5, r0
 801372c:	4610      	mov	r0, r2
 801372e:	4614      	mov	r4, r2
 8013730:	460e      	mov	r6, r1
 8013732:	f7f9 fdb3 	bl	800d29c <rcutils_allocator_is_valid>
 8013736:	b128      	cbz	r0, 8013744 <rcl_clock_init+0x1c>
 8013738:	2d03      	cmp	r5, #3
 801373a:	d803      	bhi.n	8013744 <rcl_clock_init+0x1c>
 801373c:	e8df f005 	tbb	[pc, r5]
 8013740:	06532e1d 	.word	0x06532e1d
 8013744:	f04f 0c0b 	mov.w	ip, #11
 8013748:	4660      	mov	r0, ip
 801374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801374c:	2e00      	cmp	r6, #0
 801374e:	d0f9      	beq.n	8013744 <rcl_clock_init+0x1c>
 8013750:	2c00      	cmp	r4, #0
 8013752:	d0f7      	beq.n	8013744 <rcl_clock_init+0x1c>
 8013754:	2300      	movs	r3, #0
 8013756:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801375a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8013810 <rcl_clock_init+0xe8>
 801375e:	6133      	str	r3, [r6, #16]
 8013760:	f106 0514 	add.w	r5, r6, #20
 8013764:	469c      	mov	ip, r3
 8013766:	2703      	movs	r7, #3
 8013768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801376a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801376c:	6823      	ldr	r3, [r4, #0]
 801376e:	602b      	str	r3, [r5, #0]
 8013770:	7037      	strb	r7, [r6, #0]
 8013772:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013776:	4660      	mov	r0, ip
 8013778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801377a:	2e00      	cmp	r6, #0
 801377c:	d0e2      	beq.n	8013744 <rcl_clock_init+0x1c>
 801377e:	2300      	movs	r3, #0
 8013780:	7033      	strb	r3, [r6, #0]
 8013782:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013786:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801378a:	469c      	mov	ip, r3
 801378c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801378e:	f106 0514 	add.w	r5, r6, #20
 8013792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	602b      	str	r3, [r5, #0]
 8013798:	4660      	mov	r0, ip
 801379a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801379c:	2e00      	cmp	r6, #0
 801379e:	d0d1      	beq.n	8013744 <rcl_clock_init+0x1c>
 80137a0:	2c00      	cmp	r4, #0
 80137a2:	d0cf      	beq.n	8013744 <rcl_clock_init+0x1c>
 80137a4:	2700      	movs	r7, #0
 80137a6:	7037      	strb	r7, [r6, #0]
 80137a8:	46a4      	mov	ip, r4
 80137aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137ae:	f106 0514 	add.w	r5, r6, #20
 80137b2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80137b6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80137ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137bc:	f8dc 3000 	ldr.w	r3, [ip]
 80137c0:	602b      	str	r3, [r5, #0]
 80137c2:	6921      	ldr	r1, [r4, #16]
 80137c4:	6823      	ldr	r3, [r4, #0]
 80137c6:	2010      	movs	r0, #16
 80137c8:	4798      	blx	r3
 80137ca:	6130      	str	r0, [r6, #16]
 80137cc:	b1d0      	cbz	r0, 8013804 <rcl_clock_init+0xdc>
 80137ce:	2200      	movs	r2, #0
 80137d0:	2300      	movs	r3, #0
 80137d2:	e9c0 2300 	strd	r2, r3, [r0]
 80137d6:	2301      	movs	r3, #1
 80137d8:	7207      	strb	r7, [r0, #8]
 80137da:	4a0c      	ldr	r2, [pc, #48]	@ (801380c <rcl_clock_init+0xe4>)
 80137dc:	7033      	strb	r3, [r6, #0]
 80137de:	46bc      	mov	ip, r7
 80137e0:	60f2      	str	r2, [r6, #12]
 80137e2:	4660      	mov	r0, ip
 80137e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137e6:	2e00      	cmp	r6, #0
 80137e8:	d0ac      	beq.n	8013744 <rcl_clock_init+0x1c>
 80137ea:	2c00      	cmp	r4, #0
 80137ec:	d0aa      	beq.n	8013744 <rcl_clock_init+0x1c>
 80137ee:	2300      	movs	r3, #0
 80137f0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80137f4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8013814 <rcl_clock_init+0xec>
 80137f8:	6133      	str	r3, [r6, #16]
 80137fa:	f106 0514 	add.w	r5, r6, #20
 80137fe:	469c      	mov	ip, r3
 8013800:	2702      	movs	r7, #2
 8013802:	e7b1      	b.n	8013768 <rcl_clock_init+0x40>
 8013804:	f04f 0c0a 	mov.w	ip, #10
 8013808:	e79e      	b.n	8013748 <rcl_clock_init+0x20>
 801380a:	bf00      	nop
 801380c:	08013709 	.word	0x08013709
 8013810:	08013701 	.word	0x08013701
 8013814:	080136f9 	.word	0x080136f9

08013818 <rcl_clock_get_now>:
 8013818:	b140      	cbz	r0, 801382c <rcl_clock_get_now+0x14>
 801381a:	b139      	cbz	r1, 801382c <rcl_clock_get_now+0x14>
 801381c:	7803      	ldrb	r3, [r0, #0]
 801381e:	b11b      	cbz	r3, 8013828 <rcl_clock_get_now+0x10>
 8013820:	68c3      	ldr	r3, [r0, #12]
 8013822:	b10b      	cbz	r3, 8013828 <rcl_clock_get_now+0x10>
 8013824:	6900      	ldr	r0, [r0, #16]
 8013826:	4718      	bx	r3
 8013828:	2001      	movs	r0, #1
 801382a:	4770      	bx	lr
 801382c:	200b      	movs	r0, #11
 801382e:	4770      	bx	lr

08013830 <rcl_clock_add_jump_callback>:
 8013830:	b082      	sub	sp, #8
 8013832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013836:	a906      	add	r1, sp, #24
 8013838:	e881 000c 	stmia.w	r1, {r2, r3}
 801383c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8013840:	b320      	cbz	r0, 801388c <rcl_clock_add_jump_callback+0x5c>
 8013842:	4604      	mov	r4, r0
 8013844:	3014      	adds	r0, #20
 8013846:	f7f9 fd29 	bl	800d29c <rcutils_allocator_is_valid>
 801384a:	b1f8      	cbz	r0, 801388c <rcl_clock_add_jump_callback+0x5c>
 801384c:	b1f6      	cbz	r6, 801388c <rcl_clock_add_jump_callback+0x5c>
 801384e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013850:	2b00      	cmp	r3, #0
 8013852:	db1b      	blt.n	801388c <rcl_clock_add_jump_callback+0x5c>
 8013854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8013858:	2a01      	cmp	r2, #1
 801385a:	f173 0300 	sbcs.w	r3, r3, #0
 801385e:	da15      	bge.n	801388c <rcl_clock_add_jump_callback+0x5c>
 8013860:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8013864:	2f00      	cmp	r7, #0
 8013866:	d042      	beq.n	80138ee <rcl_clock_add_jump_callback+0xbe>
 8013868:	2300      	movs	r3, #0
 801386a:	4602      	mov	r2, r0
 801386c:	e003      	b.n	8013876 <rcl_clock_add_jump_callback+0x46>
 801386e:	42bb      	cmp	r3, r7
 8013870:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8013874:	d011      	beq.n	801389a <rcl_clock_add_jump_callback+0x6a>
 8013876:	6811      	ldr	r1, [r2, #0]
 8013878:	42b1      	cmp	r1, r6
 801387a:	f103 0301 	add.w	r3, r3, #1
 801387e:	d1f6      	bne.n	801386e <rcl_clock_add_jump_callback+0x3e>
 8013880:	6a11      	ldr	r1, [r2, #32]
 8013882:	42a9      	cmp	r1, r5
 8013884:	d1f3      	bne.n	801386e <rcl_clock_add_jump_callback+0x3e>
 8013886:	f04f 0e01 	mov.w	lr, #1
 801388a:	e001      	b.n	8013890 <rcl_clock_add_jump_callback+0x60>
 801388c:	f04f 0e0b 	mov.w	lr, #11
 8013890:	4670      	mov	r0, lr
 8013892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013896:	b002      	add	sp, #8
 8013898:	4770      	bx	lr
 801389a:	3301      	adds	r3, #1
 801389c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80138a0:	00d9      	lsls	r1, r3, #3
 80138a2:	69e3      	ldr	r3, [r4, #28]
 80138a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80138a6:	4798      	blx	r3
 80138a8:	b1f0      	cbz	r0, 80138e8 <rcl_clock_add_jump_callback+0xb8>
 80138aa:	68a3      	ldr	r3, [r4, #8]
 80138ac:	6060      	str	r0, [r4, #4]
 80138ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80138b2:	f10d 0c18 	add.w	ip, sp, #24
 80138b6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80138ba:	f103 0801 	add.w	r8, r3, #1
 80138be:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80138c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138c6:	f106 0708 	add.w	r7, r6, #8
 80138ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80138cc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80138d0:	f04f 0e00 	mov.w	lr, #0
 80138d4:	e887 0003 	stmia.w	r7, {r0, r1}
 80138d8:	6235      	str	r5, [r6, #32]
 80138da:	4670      	mov	r0, lr
 80138dc:	f8c4 8008 	str.w	r8, [r4, #8]
 80138e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138e4:	b002      	add	sp, #8
 80138e6:	4770      	bx	lr
 80138e8:	f04f 0e0a 	mov.w	lr, #10
 80138ec:	e7d0      	b.n	8013890 <rcl_clock_add_jump_callback+0x60>
 80138ee:	2128      	movs	r1, #40	@ 0x28
 80138f0:	e7d7      	b.n	80138a2 <rcl_clock_add_jump_callback+0x72>
 80138f2:	bf00      	nop

080138f4 <rcl_clock_remove_jump_callback>:
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d057      	beq.n	80139a8 <rcl_clock_remove_jump_callback+0xb4>
 80138f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138fc:	4605      	mov	r5, r0
 80138fe:	3014      	adds	r0, #20
 8013900:	4688      	mov	r8, r1
 8013902:	4692      	mov	sl, r2
 8013904:	f7f9 fcca 	bl	800d29c <rcutils_allocator_is_valid>
 8013908:	2800      	cmp	r0, #0
 801390a:	d03b      	beq.n	8013984 <rcl_clock_remove_jump_callback+0x90>
 801390c:	f1b8 0f00 	cmp.w	r8, #0
 8013910:	d038      	beq.n	8013984 <rcl_clock_remove_jump_callback+0x90>
 8013912:	68ae      	ldr	r6, [r5, #8]
 8013914:	b166      	cbz	r6, 8013930 <rcl_clock_remove_jump_callback+0x3c>
 8013916:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801391a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801391e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8013922:	464c      	mov	r4, r9
 8013924:	6823      	ldr	r3, [r4, #0]
 8013926:	4543      	cmp	r3, r8
 8013928:	d005      	beq.n	8013936 <rcl_clock_remove_jump_callback+0x42>
 801392a:	3428      	adds	r4, #40	@ 0x28
 801392c:	42a7      	cmp	r7, r4
 801392e:	d1f9      	bne.n	8013924 <rcl_clock_remove_jump_callback+0x30>
 8013930:	2001      	movs	r0, #1
 8013932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013936:	6a23      	ldr	r3, [r4, #32]
 8013938:	3428      	adds	r4, #40	@ 0x28
 801393a:	42bc      	cmp	r4, r7
 801393c:	d02d      	beq.n	801399a <rcl_clock_remove_jump_callback+0xa6>
 801393e:	4553      	cmp	r3, sl
 8013940:	d1f0      	bne.n	8013924 <rcl_clock_remove_jump_callback+0x30>
 8013942:	46a6      	mov	lr, r4
 8013944:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013948:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801394c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013950:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013954:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013958:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801395c:	3428      	adds	r4, #40	@ 0x28
 801395e:	42a7      	cmp	r7, r4
 8013960:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013964:	d1ed      	bne.n	8013942 <rcl_clock_remove_jump_callback+0x4e>
 8013966:	3e01      	subs	r6, #1
 8013968:	60ae      	str	r6, [r5, #8]
 801396a:	b176      	cbz	r6, 801398a <rcl_clock_remove_jump_callback+0x96>
 801396c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8013970:	69eb      	ldr	r3, [r5, #28]
 8013972:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8013974:	00f1      	lsls	r1, r6, #3
 8013976:	4648      	mov	r0, r9
 8013978:	4798      	blx	r3
 801397a:	b1b8      	cbz	r0, 80139ac <rcl_clock_remove_jump_callback+0xb8>
 801397c:	6068      	str	r0, [r5, #4]
 801397e:	2000      	movs	r0, #0
 8013980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013984:	200b      	movs	r0, #11
 8013986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801398a:	4648      	mov	r0, r9
 801398c:	69ab      	ldr	r3, [r5, #24]
 801398e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8013990:	4798      	blx	r3
 8013992:	606e      	str	r6, [r5, #4]
 8013994:	4630      	mov	r0, r6
 8013996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801399a:	4553      	cmp	r3, sl
 801399c:	d1c8      	bne.n	8013930 <rcl_clock_remove_jump_callback+0x3c>
 801399e:	3e01      	subs	r6, #1
 80139a0:	60ae      	str	r6, [r5, #8]
 80139a2:	2e00      	cmp	r6, #0
 80139a4:	d1e2      	bne.n	801396c <rcl_clock_remove_jump_callback+0x78>
 80139a6:	e7f0      	b.n	801398a <rcl_clock_remove_jump_callback+0x96>
 80139a8:	200b      	movs	r0, #11
 80139aa:	4770      	bx	lr
 80139ac:	200a      	movs	r0, #10
 80139ae:	e7ea      	b.n	8013986 <rcl_clock_remove_jump_callback+0x92>

080139b0 <_rcl_timer_time_jump>:
 80139b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139b4:	4605      	mov	r5, r0
 80139b6:	b084      	sub	sp, #16
 80139b8:	4614      	mov	r4, r2
 80139ba:	b131      	cbz	r1, 80139ca <_rcl_timer_time_jump+0x1a>
 80139bc:	7803      	ldrb	r3, [r0, #0]
 80139be:	3b02      	subs	r3, #2
 80139c0:	2b01      	cmp	r3, #1
 80139c2:	d93f      	bls.n	8013a44 <_rcl_timer_time_jump+0x94>
 80139c4:	b004      	add	sp, #16
 80139c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ca:	6813      	ldr	r3, [r2, #0]
 80139cc:	a902      	add	r1, sp, #8
 80139ce:	6818      	ldr	r0, [r3, #0]
 80139d0:	f7ff ff22 	bl	8013818 <rcl_clock_get_now>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d1f5      	bne.n	80139c4 <_rcl_timer_time_jump+0x14>
 80139d8:	6820      	ldr	r0, [r4, #0]
 80139da:	2105      	movs	r1, #5
 80139dc:	3020      	adds	r0, #32
 80139de:	f001 fdf7 	bl	80155d0 <__atomic_load_8>
 80139e2:	6823      	ldr	r3, [r4, #0]
 80139e4:	4681      	mov	r9, r0
 80139e6:	4688      	mov	r8, r1
 80139e8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80139ec:	2105      	movs	r1, #5
 80139ee:	f001 fdef 	bl	80155d0 <__atomic_load_8>
 80139f2:	4607      	mov	r7, r0
 80139f4:	6820      	ldr	r0, [r4, #0]
 80139f6:	460e      	mov	r6, r1
 80139f8:	3018      	adds	r0, #24
 80139fa:	2105      	movs	r1, #5
 80139fc:	f001 fde8 	bl	80155d0 <__atomic_load_8>
 8013a00:	782b      	ldrb	r3, [r5, #0]
 8013a02:	9a02      	ldr	r2, [sp, #8]
 8013a04:	3b02      	subs	r3, #2
 8013a06:	2b01      	cmp	r3, #1
 8013a08:	460d      	mov	r5, r1
 8013a0a:	9b03      	ldr	r3, [sp, #12]
 8013a0c:	4682      	mov	sl, r0
 8013a0e:	d937      	bls.n	8013a80 <_rcl_timer_time_jump+0xd0>
 8013a10:	42ba      	cmp	r2, r7
 8013a12:	eb73 0106 	sbcs.w	r1, r3, r6
 8013a16:	da5f      	bge.n	8013ad8 <_rcl_timer_time_jump+0x128>
 8013a18:	454a      	cmp	r2, r9
 8013a1a:	eb73 0108 	sbcs.w	r1, r3, r8
 8013a1e:	dad1      	bge.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013a20:	6820      	ldr	r0, [r4, #0]
 8013a22:	eb1a 0202 	adds.w	r2, sl, r2
 8013a26:	eb43 0305 	adc.w	r3, r3, r5
 8013a2a:	2505      	movs	r5, #5
 8013a2c:	3028      	adds	r0, #40	@ 0x28
 8013a2e:	9500      	str	r5, [sp, #0]
 8013a30:	f001 fe04 	bl	801563c <__atomic_store_8>
 8013a34:	6820      	ldr	r0, [r4, #0]
 8013a36:	9500      	str	r5, [sp, #0]
 8013a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a3c:	3020      	adds	r0, #32
 8013a3e:	f001 fdfd 	bl	801563c <__atomic_store_8>
 8013a42:	e7bf      	b.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013a44:	6813      	ldr	r3, [r2, #0]
 8013a46:	a902      	add	r1, sp, #8
 8013a48:	6818      	ldr	r0, [r3, #0]
 8013a4a:	f7ff fee5 	bl	8013818 <rcl_clock_get_now>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d1b8      	bne.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a56:	4313      	orrs	r3, r2
 8013a58:	d0b4      	beq.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013a5a:	6820      	ldr	r0, [r4, #0]
 8013a5c:	2105      	movs	r1, #5
 8013a5e:	3028      	adds	r0, #40	@ 0x28
 8013a60:	f001 fdb6 	bl	80155d0 <__atomic_load_8>
 8013a64:	9d02      	ldr	r5, [sp, #8]
 8013a66:	9b03      	ldr	r3, [sp, #12]
 8013a68:	4602      	mov	r2, r0
 8013a6a:	6820      	ldr	r0, [r4, #0]
 8013a6c:	1b52      	subs	r2, r2, r5
 8013a6e:	f04f 0405 	mov.w	r4, #5
 8013a72:	9400      	str	r4, [sp, #0]
 8013a74:	eb61 0303 	sbc.w	r3, r1, r3
 8013a78:	3030      	adds	r0, #48	@ 0x30
 8013a7a:	f001 fddf 	bl	801563c <__atomic_store_8>
 8013a7e:	e7a1      	b.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013a80:	4313      	orrs	r3, r2
 8013a82:	d09f      	beq.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013a84:	6820      	ldr	r0, [r4, #0]
 8013a86:	f04f 0805 	mov.w	r8, #5
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	f8cd 8000 	str.w	r8, [sp]
 8013a90:	3030      	adds	r0, #48	@ 0x30
 8013a92:	2200      	movs	r2, #0
 8013a94:	f001 fe08 	bl	80156a8 <__atomic_exchange_8>
 8013a98:	ea51 0300 	orrs.w	r3, r1, r0
 8013a9c:	4606      	mov	r6, r0
 8013a9e:	460f      	mov	r7, r1
 8013aa0:	d090      	beq.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013aa2:	9a02      	ldr	r2, [sp, #8]
 8013aa4:	9b03      	ldr	r3, [sp, #12]
 8013aa6:	f8cd 8000 	str.w	r8, [sp]
 8013aaa:	1a12      	subs	r2, r2, r0
 8013aac:	6820      	ldr	r0, [r4, #0]
 8013aae:	eb63 0301 	sbc.w	r3, r3, r1
 8013ab2:	eb12 020a 	adds.w	r2, r2, sl
 8013ab6:	eb43 0305 	adc.w	r3, r3, r5
 8013aba:	3028      	adds	r0, #40	@ 0x28
 8013abc:	f001 fdbe 	bl	801563c <__atomic_store_8>
 8013ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ac4:	f8cd 8000 	str.w	r8, [sp]
 8013ac8:	6820      	ldr	r0, [r4, #0]
 8013aca:	1b92      	subs	r2, r2, r6
 8013acc:	eb63 0307 	sbc.w	r3, r3, r7
 8013ad0:	3020      	adds	r0, #32
 8013ad2:	f001 fdb3 	bl	801563c <__atomic_store_8>
 8013ad6:	e775      	b.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013ad8:	6820      	ldr	r0, [r4, #0]
 8013ada:	3008      	adds	r0, #8
 8013adc:	f004 f86e 	bl	8017bbc <rcl_trigger_guard_condition>
 8013ae0:	e770      	b.n	80139c4 <_rcl_timer_time_jump+0x14>
 8013ae2:	bf00      	nop

08013ae4 <rcl_get_zero_initialized_timer>:
 8013ae4:	4b01      	ldr	r3, [pc, #4]	@ (8013aec <rcl_get_zero_initialized_timer+0x8>)
 8013ae6:	6818      	ldr	r0, [r3, #0]
 8013ae8:	4770      	bx	lr
 8013aea:	bf00      	nop
 8013aec:	0801b888 	.word	0x0801b888

08013af0 <rcl_timer_init>:
 8013af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013af4:	b0aa      	sub	sp, #168	@ 0xa8
 8013af6:	4604      	mov	r4, r0
 8013af8:	a835      	add	r0, sp, #212	@ 0xd4
 8013afa:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8013afe:	460d      	mov	r5, r1
 8013b00:	4692      	mov	sl, r2
 8013b02:	f7f9 fbcb 	bl	800d29c <rcutils_allocator_is_valid>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	d064      	beq.n	8013bd4 <rcl_timer_init+0xe4>
 8013b0a:	2c00      	cmp	r4, #0
 8013b0c:	d062      	beq.n	8013bd4 <rcl_timer_init+0xe4>
 8013b0e:	2d00      	cmp	r5, #0
 8013b10:	d060      	beq.n	8013bd4 <rcl_timer_init+0xe4>
 8013b12:	2f00      	cmp	r7, #0
 8013b14:	db5e      	blt.n	8013bd4 <rcl_timer_init+0xe4>
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	b123      	cbz	r3, 8013b24 <rcl_timer_init+0x34>
 8013b1a:	2664      	movs	r6, #100	@ 0x64
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	b02a      	add	sp, #168	@ 0xa8
 8013b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b24:	a908      	add	r1, sp, #32
 8013b26:	4628      	mov	r0, r5
 8013b28:	f7ff fe76 	bl	8013818 <rcl_clock_get_now>
 8013b2c:	4606      	mov	r6, r0
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d1f4      	bne.n	8013b1c <rcl_timer_init+0x2c>
 8013b32:	ae06      	add	r6, sp, #24
 8013b34:	4630      	mov	r0, r6
 8013b36:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8013b3a:	f003 ff47 	bl	80179cc <rcl_get_zero_initialized_guard_condition>
 8013b3e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013b42:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8013b46:	ae0b      	add	r6, sp, #44	@ 0x2c
 8013b48:	e889 0003 	stmia.w	r9, {r0, r1}
 8013b4c:	4630      	mov	r0, r6
 8013b4e:	f004 f819 	bl	8017b84 <rcl_guard_condition_get_default_options>
 8013b52:	ab0d      	add	r3, sp, #52	@ 0x34
 8013b54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013b58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b5c:	4651      	mov	r1, sl
 8013b5e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013b62:	4648      	mov	r0, r9
 8013b64:	f003 ff3c 	bl	80179e0 <rcl_guard_condition_init>
 8013b68:	4606      	mov	r6, r0
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	d1d6      	bne.n	8013b1c <rcl_timer_init+0x2c>
 8013b6e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d033      	beq.n	8013bde <rcl_timer_init+0xee>
 8013b76:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8013b78:	911a      	str	r1, [sp, #104]	@ 0x68
 8013b7a:	4642      	mov	r2, r8
 8013b7c:	463b      	mov	r3, r7
 8013b7e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8013b82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b86:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013c38 <rcl_timer_init+0x148>
 8013b8a:	eb12 0008 	adds.w	r0, r2, r8
 8013b8e:	eb47 0103 	adc.w	r1, r7, r3
 8013b92:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8013b96:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8013b9a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8013b9e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8013ba2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ba6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8013baa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bae:	f8de 3000 	ldr.w	r3, [lr]
 8013bb2:	f8cc 3000 	str.w	r3, [ip]
 8013bb6:	f04f 0a00 	mov.w	sl, #0
 8013bba:	4619      	mov	r1, r3
 8013bbc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8013bc0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8013bc2:	2050      	movs	r0, #80	@ 0x50
 8013bc4:	4798      	blx	r3
 8013bc6:	6020      	str	r0, [r4, #0]
 8013bc8:	b358      	cbz	r0, 8013c22 <rcl_timer_init+0x132>
 8013bca:	2250      	movs	r2, #80	@ 0x50
 8013bcc:	a916      	add	r1, sp, #88	@ 0x58
 8013bce:	f004 ff26 	bl	8018a1e <memcpy>
 8013bd2:	e7a3      	b.n	8013b1c <rcl_timer_init+0x2c>
 8013bd4:	260b      	movs	r6, #11
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	b02a      	add	sp, #168	@ 0xa8
 8013bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bde:	2001      	movs	r0, #1
 8013be0:	2100      	movs	r1, #0
 8013be2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013be6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013bea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013bee:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8013bf2:	4a13      	ldr	r2, [pc, #76]	@ (8013c40 <rcl_timer_init+0x150>)
 8013bf4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013bf8:	9405      	str	r4, [sp, #20]
 8013bfa:	9204      	str	r2, [sp, #16]
 8013bfc:	ab12      	add	r3, sp, #72	@ 0x48
 8013bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013c00:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013c04:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013c08:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f7ff fe0f 	bl	8013830 <rcl_clock_add_jump_callback>
 8013c12:	4682      	mov	sl, r0
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d0ae      	beq.n	8013b76 <rcl_timer_init+0x86>
 8013c18:	4648      	mov	r0, r9
 8013c1a:	f003 ff8d 	bl	8017b38 <rcl_guard_condition_fini>
 8013c1e:	4656      	mov	r6, sl
 8013c20:	e77c      	b.n	8013b1c <rcl_timer_init+0x2c>
 8013c22:	4648      	mov	r0, r9
 8013c24:	f003 ff88 	bl	8017b38 <rcl_guard_condition_fini>
 8013c28:	4905      	ldr	r1, [pc, #20]	@ (8013c40 <rcl_timer_init+0x150>)
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	f7ff fe61 	bl	80138f4 <rcl_clock_remove_jump_callback>
 8013c32:	260a      	movs	r6, #10
 8013c34:	e772      	b.n	8013b1c <rcl_timer_init+0x2c>
 8013c36:	bf00      	nop
	...
 8013c40:	080139b1 	.word	0x080139b1

08013c44 <rcl_timer_call>:
 8013c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c48:	b087      	sub	sp, #28
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d06d      	beq.n	8013d2a <rcl_timer_call+0xe6>
 8013c4e:	6803      	ldr	r3, [r0, #0]
 8013c50:	4604      	mov	r4, r0
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d063      	beq.n	8013d1e <rcl_timer_call+0xda>
 8013c56:	f3bf 8f5b 	dmb	ish
 8013c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013c5e:	f3bf 8f5b 	dmb	ish
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d150      	bne.n	8013d08 <rcl_timer_call+0xc4>
 8013c66:	6803      	ldr	r3, [r0, #0]
 8013c68:	a904      	add	r1, sp, #16
 8013c6a:	6818      	ldr	r0, [r3, #0]
 8013c6c:	f7ff fdd4 	bl	8013818 <rcl_clock_get_now>
 8013c70:	4605      	mov	r5, r0
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d14a      	bne.n	8013d0c <rcl_timer_call+0xc8>
 8013c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	db4a      	blt.n	8013d14 <rcl_timer_call+0xd0>
 8013c7e:	6820      	ldr	r0, [r4, #0]
 8013c80:	f04f 0a05 	mov.w	sl, #5
 8013c84:	f8cd a000 	str.w	sl, [sp]
 8013c88:	3020      	adds	r0, #32
 8013c8a:	f001 fd0d 	bl	80156a8 <__atomic_exchange_8>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	f3bf 8f5b 	dmb	ish
 8013c94:	4680      	mov	r8, r0
 8013c96:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013c9a:	f3bf 8f5b 	dmb	ish
 8013c9e:	6820      	ldr	r0, [r4, #0]
 8013ca0:	4689      	mov	r9, r1
 8013ca2:	3028      	adds	r0, #40	@ 0x28
 8013ca4:	4651      	mov	r1, sl
 8013ca6:	f001 fc93 	bl	80155d0 <__atomic_load_8>
 8013caa:	4606      	mov	r6, r0
 8013cac:	6820      	ldr	r0, [r4, #0]
 8013cae:	460f      	mov	r7, r1
 8013cb0:	3018      	adds	r0, #24
 8013cb2:	4651      	mov	r1, sl
 8013cb4:	f001 fc8c 	bl	80155d0 <__atomic_load_8>
 8013cb8:	1836      	adds	r6, r6, r0
 8013cba:	4602      	mov	r2, r0
 8013cbc:	4682      	mov	sl, r0
 8013cbe:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8013cc2:	eb47 0701 	adc.w	r7, r7, r1
 8013cc6:	4286      	cmp	r6, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	eb77 010c 	sbcs.w	r1, r7, ip
 8013cce:	da04      	bge.n	8013cda <rcl_timer_call+0x96>
 8013cd0:	ea53 0102 	orrs.w	r1, r3, r2
 8013cd4:	d12e      	bne.n	8013d34 <rcl_timer_call+0xf0>
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	4667      	mov	r7, ip
 8013cda:	6820      	ldr	r0, [r4, #0]
 8013cdc:	2105      	movs	r1, #5
 8013cde:	4632      	mov	r2, r6
 8013ce0:	463b      	mov	r3, r7
 8013ce2:	3028      	adds	r0, #40	@ 0x28
 8013ce4:	9100      	str	r1, [sp, #0]
 8013ce6:	f001 fca9 	bl	801563c <__atomic_store_8>
 8013cea:	f1bb 0f00 	cmp.w	fp, #0
 8013cee:	d00d      	beq.n	8013d0c <rcl_timer_call+0xc8>
 8013cf0:	9a04      	ldr	r2, [sp, #16]
 8013cf2:	9b05      	ldr	r3, [sp, #20]
 8013cf4:	ebb2 0208 	subs.w	r2, r2, r8
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	eb63 0309 	sbc.w	r3, r3, r9
 8013cfe:	47d8      	blx	fp
 8013d00:	4628      	mov	r0, r5
 8013d02:	b007      	add	sp, #28
 8013d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d08:	f240 3521 	movw	r5, #801	@ 0x321
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	b007      	add	sp, #28
 8013d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d14:	2501      	movs	r5, #1
 8013d16:	4628      	mov	r0, r5
 8013d18:	b007      	add	sp, #28
 8013d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013d22:	4628      	mov	r0, r5
 8013d24:	b007      	add	sp, #28
 8013d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2a:	250b      	movs	r5, #11
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	b007      	add	sp, #28
 8013d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d34:	1b80      	subs	r0, r0, r6
 8013d36:	eb6c 0107 	sbc.w	r1, ip, r7
 8013d3a:	3801      	subs	r0, #1
 8013d3c:	f161 0100 	sbc.w	r1, r1, #0
 8013d40:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013d44:	f7ec ff68 	bl	8000c18 <__aeabi_ldivmod>
 8013d48:	9b02      	ldr	r3, [sp, #8]
 8013d4a:	3001      	adds	r0, #1
 8013d4c:	f141 0100 	adc.w	r1, r1, #0
 8013d50:	fb00 f303 	mul.w	r3, r0, r3
 8013d54:	fb01 330a 	mla	r3, r1, sl, r3
 8013d58:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013d5c:	1986      	adds	r6, r0, r6
 8013d5e:	4453      	add	r3, sl
 8013d60:	eb43 0707 	adc.w	r7, r3, r7
 8013d64:	e7b9      	b.n	8013cda <rcl_timer_call+0x96>
 8013d66:	bf00      	nop

08013d68 <rcl_timer_is_ready>:
 8013d68:	b570      	push	{r4, r5, r6, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	b378      	cbz	r0, 8013dce <rcl_timer_is_ready+0x66>
 8013d6e:	6803      	ldr	r3, [r0, #0]
 8013d70:	4604      	mov	r4, r0
 8013d72:	b383      	cbz	r3, 8013dd6 <rcl_timer_is_ready+0x6e>
 8013d74:	460d      	mov	r5, r1
 8013d76:	b351      	cbz	r1, 8013dce <rcl_timer_is_ready+0x66>
 8013d78:	f3bf 8f5b 	dmb	ish
 8013d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013d80:	f3bf 8f5b 	dmb	ish
 8013d84:	b953      	cbnz	r3, 8013d9c <rcl_timer_is_ready+0x34>
 8013d86:	6803      	ldr	r3, [r0, #0]
 8013d88:	4669      	mov	r1, sp
 8013d8a:	6818      	ldr	r0, [r3, #0]
 8013d8c:	f7ff fd44 	bl	8013818 <rcl_clock_get_now>
 8013d90:	4606      	mov	r6, r0
 8013d92:	b140      	cbz	r0, 8013da6 <rcl_timer_is_ready+0x3e>
 8013d94:	f240 3321 	movw	r3, #801	@ 0x321
 8013d98:	4298      	cmp	r0, r3
 8013d9a:	d101      	bne.n	8013da0 <rcl_timer_is_ready+0x38>
 8013d9c:	2600      	movs	r6, #0
 8013d9e:	702e      	strb	r6, [r5, #0]
 8013da0:	4630      	mov	r0, r6
 8013da2:	b002      	add	sp, #8
 8013da4:	bd70      	pop	{r4, r5, r6, pc}
 8013da6:	6820      	ldr	r0, [r4, #0]
 8013da8:	2105      	movs	r1, #5
 8013daa:	3028      	adds	r0, #40	@ 0x28
 8013dac:	f001 fc10 	bl	80155d0 <__atomic_load_8>
 8013db0:	9b00      	ldr	r3, [sp, #0]
 8013db2:	1ac0      	subs	r0, r0, r3
 8013db4:	9b01      	ldr	r3, [sp, #4]
 8013db6:	eb61 0103 	sbc.w	r1, r1, r3
 8013dba:	2801      	cmp	r0, #1
 8013dbc:	f171 0300 	sbcs.w	r3, r1, #0
 8013dc0:	bfb4      	ite	lt
 8013dc2:	2301      	movlt	r3, #1
 8013dc4:	2300      	movge	r3, #0
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	702b      	strb	r3, [r5, #0]
 8013dca:	b002      	add	sp, #8
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}
 8013dce:	260b      	movs	r6, #11
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	b002      	add	sp, #8
 8013dd4:	bd70      	pop	{r4, r5, r6, pc}
 8013dd6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013dda:	e7e1      	b.n	8013da0 <rcl_timer_is_ready+0x38>

08013ddc <rcl_timer_get_time_until_next_call>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	b330      	cbz	r0, 8013e30 <rcl_timer_get_time_until_next_call+0x54>
 8013de2:	6803      	ldr	r3, [r0, #0]
 8013de4:	4604      	mov	r4, r0
 8013de6:	b33b      	cbz	r3, 8013e38 <rcl_timer_get_time_until_next_call+0x5c>
 8013de8:	460d      	mov	r5, r1
 8013dea:	b309      	cbz	r1, 8013e30 <rcl_timer_get_time_until_next_call+0x54>
 8013dec:	f3bf 8f5b 	dmb	ish
 8013df0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013df4:	f3bf 8f5b 	dmb	ish
 8013df8:	b9ab      	cbnz	r3, 8013e26 <rcl_timer_get_time_until_next_call+0x4a>
 8013dfa:	6803      	ldr	r3, [r0, #0]
 8013dfc:	4669      	mov	r1, sp
 8013dfe:	6818      	ldr	r0, [r3, #0]
 8013e00:	f7ff fd0a 	bl	8013818 <rcl_clock_get_now>
 8013e04:	4606      	mov	r6, r0
 8013e06:	b958      	cbnz	r0, 8013e20 <rcl_timer_get_time_until_next_call+0x44>
 8013e08:	6820      	ldr	r0, [r4, #0]
 8013e0a:	2105      	movs	r1, #5
 8013e0c:	3028      	adds	r0, #40	@ 0x28
 8013e0e:	f001 fbdf 	bl	80155d0 <__atomic_load_8>
 8013e12:	9b00      	ldr	r3, [sp, #0]
 8013e14:	1ac0      	subs	r0, r0, r3
 8013e16:	9b01      	ldr	r3, [sp, #4]
 8013e18:	6028      	str	r0, [r5, #0]
 8013e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8013e1e:	6069      	str	r1, [r5, #4]
 8013e20:	4630      	mov	r0, r6
 8013e22:	b002      	add	sp, #8
 8013e24:	bd70      	pop	{r4, r5, r6, pc}
 8013e26:	f240 3621 	movw	r6, #801	@ 0x321
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	b002      	add	sp, #8
 8013e2e:	bd70      	pop	{r4, r5, r6, pc}
 8013e30:	260b      	movs	r6, #11
 8013e32:	4630      	mov	r0, r6
 8013e34:	b002      	add	sp, #8
 8013e36:	bd70      	pop	{r4, r5, r6, pc}
 8013e38:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013e3c:	e7f0      	b.n	8013e20 <rcl_timer_get_time_until_next_call+0x44>
 8013e3e:	bf00      	nop

08013e40 <rcl_timer_get_guard_condition>:
 8013e40:	b130      	cbz	r0, 8013e50 <rcl_timer_get_guard_condition+0x10>
 8013e42:	6800      	ldr	r0, [r0, #0]
 8013e44:	b120      	cbz	r0, 8013e50 <rcl_timer_get_guard_condition+0x10>
 8013e46:	68c3      	ldr	r3, [r0, #12]
 8013e48:	b10b      	cbz	r3, 8013e4e <rcl_timer_get_guard_condition+0xe>
 8013e4a:	3008      	adds	r0, #8
 8013e4c:	4770      	bx	lr
 8013e4e:	4618      	mov	r0, r3
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop

08013e54 <rcl_validate_enclave_name_with_size>:
 8013e54:	b378      	cbz	r0, 8013eb6 <rcl_validate_enclave_name_with_size+0x62>
 8013e56:	b570      	push	{r4, r5, r6, lr}
 8013e58:	4615      	mov	r5, r2
 8013e5a:	b0c2      	sub	sp, #264	@ 0x108
 8013e5c:	b302      	cbz	r2, 8013ea0 <rcl_validate_enclave_name_with_size+0x4c>
 8013e5e:	461e      	mov	r6, r3
 8013e60:	466a      	mov	r2, sp
 8013e62:	ab01      	add	r3, sp, #4
 8013e64:	460c      	mov	r4, r1
 8013e66:	f002 f815 	bl	8015e94 <rmw_validate_namespace_with_size>
 8013e6a:	4684      	mov	ip, r0
 8013e6c:	b9e8      	cbnz	r0, 8013eaa <rcl_validate_enclave_name_with_size+0x56>
 8013e6e:	9b00      	ldr	r3, [sp, #0]
 8013e70:	b923      	cbnz	r3, 8013e7c <rcl_validate_enclave_name_with_size+0x28>
 8013e72:	2300      	movs	r3, #0
 8013e74:	602b      	str	r3, [r5, #0]
 8013e76:	4660      	mov	r0, ip
 8013e78:	b042      	add	sp, #264	@ 0x108
 8013e7a:	bd70      	pop	{r4, r5, r6, pc}
 8013e7c:	2b07      	cmp	r3, #7
 8013e7e:	d007      	beq.n	8013e90 <rcl_validate_enclave_name_with_size+0x3c>
 8013e80:	1e5a      	subs	r2, r3, #1
 8013e82:	2a05      	cmp	r2, #5
 8013e84:	d833      	bhi.n	8013eee <rcl_validate_enclave_name_with_size+0x9a>
 8013e86:	e8df f002 	tbb	[pc, r2]
 8013e8a:	2c2f      	.short	0x2c2f
 8013e8c:	1a232629 	.word	0x1a232629
 8013e90:	2cff      	cmp	r4, #255	@ 0xff
 8013e92:	d9ee      	bls.n	8013e72 <rcl_validate_enclave_name_with_size+0x1e>
 8013e94:	602b      	str	r3, [r5, #0]
 8013e96:	2e00      	cmp	r6, #0
 8013e98:	d0ed      	beq.n	8013e76 <rcl_validate_enclave_name_with_size+0x22>
 8013e9a:	23fe      	movs	r3, #254	@ 0xfe
 8013e9c:	6033      	str	r3, [r6, #0]
 8013e9e:	e7ea      	b.n	8013e76 <rcl_validate_enclave_name_with_size+0x22>
 8013ea0:	f04f 0c0b 	mov.w	ip, #11
 8013ea4:	4660      	mov	r0, ip
 8013ea6:	b042      	add	sp, #264	@ 0x108
 8013ea8:	bd70      	pop	{r4, r5, r6, pc}
 8013eaa:	f7fe fe63 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8013eae:	4684      	mov	ip, r0
 8013eb0:	4660      	mov	r0, ip
 8013eb2:	b042      	add	sp, #264	@ 0x108
 8013eb4:	bd70      	pop	{r4, r5, r6, pc}
 8013eb6:	f04f 0c0b 	mov.w	ip, #11
 8013eba:	4660      	mov	r0, ip
 8013ebc:	4770      	bx	lr
 8013ebe:	2306      	movs	r3, #6
 8013ec0:	602b      	str	r3, [r5, #0]
 8013ec2:	2e00      	cmp	r6, #0
 8013ec4:	d0d7      	beq.n	8013e76 <rcl_validate_enclave_name_with_size+0x22>
 8013ec6:	9b01      	ldr	r3, [sp, #4]
 8013ec8:	6033      	str	r3, [r6, #0]
 8013eca:	4660      	mov	r0, ip
 8013ecc:	b042      	add	sp, #264	@ 0x108
 8013ece:	bd70      	pop	{r4, r5, r6, pc}
 8013ed0:	2305      	movs	r3, #5
 8013ed2:	602b      	str	r3, [r5, #0]
 8013ed4:	e7f5      	b.n	8013ec2 <rcl_validate_enclave_name_with_size+0x6e>
 8013ed6:	2304      	movs	r3, #4
 8013ed8:	602b      	str	r3, [r5, #0]
 8013eda:	e7f2      	b.n	8013ec2 <rcl_validate_enclave_name_with_size+0x6e>
 8013edc:	2303      	movs	r3, #3
 8013ede:	602b      	str	r3, [r5, #0]
 8013ee0:	e7ef      	b.n	8013ec2 <rcl_validate_enclave_name_with_size+0x6e>
 8013ee2:	2302      	movs	r3, #2
 8013ee4:	602b      	str	r3, [r5, #0]
 8013ee6:	e7ec      	b.n	8013ec2 <rcl_validate_enclave_name_with_size+0x6e>
 8013ee8:	2301      	movs	r3, #1
 8013eea:	602b      	str	r3, [r5, #0]
 8013eec:	e7e9      	b.n	8013ec2 <rcl_validate_enclave_name_with_size+0x6e>
 8013eee:	4a04      	ldr	r2, [pc, #16]	@ (8013f00 <rcl_validate_enclave_name_with_size+0xac>)
 8013ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013ef4:	a802      	add	r0, sp, #8
 8013ef6:	f001 fd25 	bl	8015944 <rcutils_snprintf>
 8013efa:	f04f 0c01 	mov.w	ip, #1
 8013efe:	e7ba      	b.n	8013e76 <rcl_validate_enclave_name_with_size+0x22>
 8013f00:	0801b88c 	.word	0x0801b88c

08013f04 <rcl_validate_enclave_name>:
 8013f04:	b168      	cbz	r0, 8013f22 <rcl_validate_enclave_name+0x1e>
 8013f06:	b570      	push	{r4, r5, r6, lr}
 8013f08:	460d      	mov	r5, r1
 8013f0a:	4616      	mov	r6, r2
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	f7ec f991 	bl	8000234 <strlen>
 8013f12:	4633      	mov	r3, r6
 8013f14:	4601      	mov	r1, r0
 8013f16:	462a      	mov	r2, r5
 8013f18:	4620      	mov	r0, r4
 8013f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f1e:	f7ff bf99 	b.w	8013e54 <rcl_validate_enclave_name_with_size>
 8013f22:	200b      	movs	r0, #11
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop

08013f28 <rcl_get_zero_initialized_wait_set>:
 8013f28:	b510      	push	{r4, lr}
 8013f2a:	4c08      	ldr	r4, [pc, #32]	@ (8013f4c <rcl_get_zero_initialized_wait_set+0x24>)
 8013f2c:	4686      	mov	lr, r0
 8013f2e:	4684      	mov	ip, r0
 8013f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	f8cc 3000 	str.w	r3, [ip]
 8013f48:	4670      	mov	r0, lr
 8013f4a:	bd10      	pop	{r4, pc}
 8013f4c:	0801b8ec 	.word	0x0801b8ec

08013f50 <rcl_wait_set_is_valid>:
 8013f50:	b118      	cbz	r0, 8013f5a <rcl_wait_set_is_valid+0xa>
 8013f52:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013f54:	3800      	subs	r0, #0
 8013f56:	bf18      	it	ne
 8013f58:	2001      	movne	r0, #1
 8013f5a:	4770      	bx	lr

08013f5c <rcl_wait_set_fini>:
 8013f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f60:	b082      	sub	sp, #8
 8013f62:	2800      	cmp	r0, #0
 8013f64:	f000 8095 	beq.w	8014092 <rcl_wait_set_fini+0x136>
 8013f68:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013f6a:	4604      	mov	r4, r0
 8013f6c:	2e00      	cmp	r6, #0
 8013f6e:	f000 808c 	beq.w	801408a <rcl_wait_set_fini+0x12e>
 8013f72:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8013f74:	f002 fd48 	bl	8016a08 <rmw_destroy_wait_set>
 8013f78:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013f7a:	1e06      	subs	r6, r0, #0
 8013f7c:	bf18      	it	ne
 8013f7e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8013f82:	2d00      	cmp	r5, #0
 8013f84:	f000 8081 	beq.w	801408a <rcl_wait_set_fini+0x12e>
 8013f88:	6820      	ldr	r0, [r4, #0]
 8013f8a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013f8e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013f90:	2700      	movs	r7, #0
 8013f92:	6067      	str	r7, [r4, #4]
 8013f94:	602f      	str	r7, [r5, #0]
 8013f96:	b120      	cbz	r0, 8013fa2 <rcl_wait_set_fini+0x46>
 8013f98:	9101      	str	r1, [sp, #4]
 8013f9a:	47c0      	blx	r8
 8013f9c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013f9e:	9901      	ldr	r1, [sp, #4]
 8013fa0:	6027      	str	r7, [r4, #0]
 8013fa2:	68a8      	ldr	r0, [r5, #8]
 8013fa4:	b120      	cbz	r0, 8013fb0 <rcl_wait_set_fini+0x54>
 8013fa6:	47c0      	blx	r8
 8013fa8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013faa:	2300      	movs	r3, #0
 8013fac:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013fb0:	68a0      	ldr	r0, [r4, #8]
 8013fb2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013fb4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013fb6:	f04f 0800 	mov.w	r8, #0
 8013fba:	f8c4 800c 	str.w	r8, [r4, #12]
 8013fbe:	f8c5 800c 	str.w	r8, [r5, #12]
 8013fc2:	b128      	cbz	r0, 8013fd0 <rcl_wait_set_fini+0x74>
 8013fc4:	47b8      	blx	r7
 8013fc6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013fc8:	f8c4 8008 	str.w	r8, [r4, #8]
 8013fcc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013fce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013fd0:	6968      	ldr	r0, [r5, #20]
 8013fd2:	f04f 0800 	mov.w	r8, #0
 8013fd6:	f8c5 8010 	str.w	r8, [r5, #16]
 8013fda:	b128      	cbz	r0, 8013fe8 <rcl_wait_set_fini+0x8c>
 8013fdc:	47b8      	blx	r7
 8013fde:	f8c5 8014 	str.w	r8, [r5, #20]
 8013fe2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013fe4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013fe6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013fe8:	6920      	ldr	r0, [r4, #16]
 8013fea:	f04f 0800 	mov.w	r8, #0
 8013fee:	f8c4 8014 	str.w	r8, [r4, #20]
 8013ff2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8013ff6:	b128      	cbz	r0, 8014004 <rcl_wait_set_fini+0xa8>
 8013ff8:	47b8      	blx	r7
 8013ffa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013ffc:	f8c4 8010 	str.w	r8, [r4, #16]
 8014000:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014002:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014004:	69a0      	ldr	r0, [r4, #24]
 8014006:	f04f 0800 	mov.w	r8, #0
 801400a:	f8c4 801c 	str.w	r8, [r4, #28]
 801400e:	f8c5 8018 	str.w	r8, [r5, #24]
 8014012:	b128      	cbz	r0, 8014020 <rcl_wait_set_fini+0xc4>
 8014014:	9101      	str	r1, [sp, #4]
 8014016:	47b8      	blx	r7
 8014018:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801401a:	9901      	ldr	r1, [sp, #4]
 801401c:	f8c4 8018 	str.w	r8, [r4, #24]
 8014020:	6a28      	ldr	r0, [r5, #32]
 8014022:	b120      	cbz	r0, 801402e <rcl_wait_set_fini+0xd2>
 8014024:	47b8      	blx	r7
 8014026:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014028:	2300      	movs	r3, #0
 801402a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801402e:	6a20      	ldr	r0, [r4, #32]
 8014030:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014034:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014036:	2700      	movs	r7, #0
 8014038:	6267      	str	r7, [r4, #36]	@ 0x24
 801403a:	626f      	str	r7, [r5, #36]	@ 0x24
 801403c:	b120      	cbz	r0, 8014048 <rcl_wait_set_fini+0xec>
 801403e:	9101      	str	r1, [sp, #4]
 8014040:	47c0      	blx	r8
 8014042:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014044:	9901      	ldr	r1, [sp, #4]
 8014046:	6227      	str	r7, [r4, #32]
 8014048:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801404a:	b120      	cbz	r0, 8014056 <rcl_wait_set_fini+0xfa>
 801404c:	47c0      	blx	r8
 801404e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014050:	2300      	movs	r3, #0
 8014052:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014056:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014058:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801405c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801405e:	2700      	movs	r7, #0
 8014060:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014062:	632f      	str	r7, [r5, #48]	@ 0x30
 8014064:	b120      	cbz	r0, 8014070 <rcl_wait_set_fini+0x114>
 8014066:	9101      	str	r1, [sp, #4]
 8014068:	47c0      	blx	r8
 801406a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801406c:	9901      	ldr	r1, [sp, #4]
 801406e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014070:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014072:	b120      	cbz	r0, 801407e <rcl_wait_set_fini+0x122>
 8014074:	47c0      	blx	r8
 8014076:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014078:	2300      	movs	r3, #0
 801407a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801407e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014080:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014082:	4628      	mov	r0, r5
 8014084:	4798      	blx	r3
 8014086:	2300      	movs	r3, #0
 8014088:	6323      	str	r3, [r4, #48]	@ 0x30
 801408a:	4630      	mov	r0, r6
 801408c:	b002      	add	sp, #8
 801408e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014092:	260b      	movs	r6, #11
 8014094:	4630      	mov	r0, r6
 8014096:	b002      	add	sp, #8
 8014098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801409c <rcl_wait_set_add_subscription>:
 801409c:	b318      	cbz	r0, 80140e6 <rcl_wait_set_add_subscription+0x4a>
 801409e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80140a0:	b570      	push	{r4, r5, r6, lr}
 80140a2:	4604      	mov	r4, r0
 80140a4:	b30b      	cbz	r3, 80140ea <rcl_wait_set_add_subscription+0x4e>
 80140a6:	b319      	cbz	r1, 80140f0 <rcl_wait_set_add_subscription+0x54>
 80140a8:	681d      	ldr	r5, [r3, #0]
 80140aa:	6840      	ldr	r0, [r0, #4]
 80140ac:	4285      	cmp	r5, r0
 80140ae:	d217      	bcs.n	80140e0 <rcl_wait_set_add_subscription+0x44>
 80140b0:	6820      	ldr	r0, [r4, #0]
 80140b2:	1c6e      	adds	r6, r5, #1
 80140b4:	601e      	str	r6, [r3, #0]
 80140b6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80140ba:	b102      	cbz	r2, 80140be <rcl_wait_set_add_subscription+0x22>
 80140bc:	6015      	str	r5, [r2, #0]
 80140be:	4608      	mov	r0, r1
 80140c0:	f7ff fb0a 	bl	80136d8 <rcl_subscription_get_rmw_handle>
 80140c4:	b150      	cbz	r0, 80140dc <rcl_wait_set_add_subscription+0x40>
 80140c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80140c8:	6842      	ldr	r2, [r0, #4]
 80140ca:	689b      	ldr	r3, [r3, #8]
 80140cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80140d2:	6853      	ldr	r3, [r2, #4]
 80140d4:	3301      	adds	r3, #1
 80140d6:	2000      	movs	r0, #0
 80140d8:	6053      	str	r3, [r2, #4]
 80140da:	bd70      	pop	{r4, r5, r6, pc}
 80140dc:	2001      	movs	r0, #1
 80140de:	bd70      	pop	{r4, r5, r6, pc}
 80140e0:	f240 3086 	movw	r0, #902	@ 0x386
 80140e4:	bd70      	pop	{r4, r5, r6, pc}
 80140e6:	200b      	movs	r0, #11
 80140e8:	4770      	bx	lr
 80140ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	200b      	movs	r0, #11
 80140f2:	bd70      	pop	{r4, r5, r6, pc}

080140f4 <rcl_wait_set_clear>:
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d073      	beq.n	80141e0 <rcl_wait_set_clear+0xec>
 80140f8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80140fa:	b510      	push	{r4, lr}
 80140fc:	4604      	mov	r4, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d070      	beq.n	80141e4 <rcl_wait_set_clear+0xf0>
 8014102:	6800      	ldr	r0, [r0, #0]
 8014104:	b138      	cbz	r0, 8014116 <rcl_wait_set_clear+0x22>
 8014106:	6862      	ldr	r2, [r4, #4]
 8014108:	2100      	movs	r1, #0
 801410a:	0092      	lsls	r2, r2, #2
 801410c:	f004 fbbe 	bl	801888c <memset>
 8014110:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014112:	2200      	movs	r2, #0
 8014114:	601a      	str	r2, [r3, #0]
 8014116:	68a0      	ldr	r0, [r4, #8]
 8014118:	b138      	cbz	r0, 801412a <rcl_wait_set_clear+0x36>
 801411a:	68e2      	ldr	r2, [r4, #12]
 801411c:	2100      	movs	r1, #0
 801411e:	0092      	lsls	r2, r2, #2
 8014120:	f004 fbb4 	bl	801888c <memset>
 8014124:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014126:	2200      	movs	r2, #0
 8014128:	60da      	str	r2, [r3, #12]
 801412a:	69a0      	ldr	r0, [r4, #24]
 801412c:	b138      	cbz	r0, 801413e <rcl_wait_set_clear+0x4a>
 801412e:	69e2      	ldr	r2, [r4, #28]
 8014130:	2100      	movs	r1, #0
 8014132:	0092      	lsls	r2, r2, #2
 8014134:	f004 fbaa 	bl	801888c <memset>
 8014138:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801413a:	2200      	movs	r2, #0
 801413c:	619a      	str	r2, [r3, #24]
 801413e:	6a20      	ldr	r0, [r4, #32]
 8014140:	b138      	cbz	r0, 8014152 <rcl_wait_set_clear+0x5e>
 8014142:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014144:	2100      	movs	r1, #0
 8014146:	0092      	lsls	r2, r2, #2
 8014148:	f004 fba0 	bl	801888c <memset>
 801414c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801414e:	2200      	movs	r2, #0
 8014150:	625a      	str	r2, [r3, #36]	@ 0x24
 8014152:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014154:	b138      	cbz	r0, 8014166 <rcl_wait_set_clear+0x72>
 8014156:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014158:	2100      	movs	r1, #0
 801415a:	0092      	lsls	r2, r2, #2
 801415c:	f004 fb96 	bl	801888c <memset>
 8014160:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014162:	2200      	movs	r2, #0
 8014164:	631a      	str	r2, [r3, #48]	@ 0x30
 8014166:	6920      	ldr	r0, [r4, #16]
 8014168:	b138      	cbz	r0, 801417a <rcl_wait_set_clear+0x86>
 801416a:	6962      	ldr	r2, [r4, #20]
 801416c:	2100      	movs	r1, #0
 801416e:	0092      	lsls	r2, r2, #2
 8014170:	f004 fb8c 	bl	801888c <memset>
 8014174:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014176:	2200      	movs	r2, #0
 8014178:	641a      	str	r2, [r3, #64]	@ 0x40
 801417a:	6898      	ldr	r0, [r3, #8]
 801417c:	b138      	cbz	r0, 801418e <rcl_wait_set_clear+0x9a>
 801417e:	685a      	ldr	r2, [r3, #4]
 8014180:	2100      	movs	r1, #0
 8014182:	0092      	lsls	r2, r2, #2
 8014184:	f004 fb82 	bl	801888c <memset>
 8014188:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801418a:	2200      	movs	r2, #0
 801418c:	605a      	str	r2, [r3, #4]
 801418e:	6958      	ldr	r0, [r3, #20]
 8014190:	b138      	cbz	r0, 80141a2 <rcl_wait_set_clear+0xae>
 8014192:	691a      	ldr	r2, [r3, #16]
 8014194:	2100      	movs	r1, #0
 8014196:	0092      	lsls	r2, r2, #2
 8014198:	f004 fb78 	bl	801888c <memset>
 801419c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801419e:	2200      	movs	r2, #0
 80141a0:	611a      	str	r2, [r3, #16]
 80141a2:	6a18      	ldr	r0, [r3, #32]
 80141a4:	b138      	cbz	r0, 80141b6 <rcl_wait_set_clear+0xc2>
 80141a6:	69da      	ldr	r2, [r3, #28]
 80141a8:	2100      	movs	r1, #0
 80141aa:	0092      	lsls	r2, r2, #2
 80141ac:	f004 fb6e 	bl	801888c <memset>
 80141b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141b2:	2200      	movs	r2, #0
 80141b4:	61da      	str	r2, [r3, #28]
 80141b6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80141b8:	b138      	cbz	r0, 80141ca <rcl_wait_set_clear+0xd6>
 80141ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80141bc:	2100      	movs	r1, #0
 80141be:	0092      	lsls	r2, r2, #2
 80141c0:	f004 fb64 	bl	801888c <memset>
 80141c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141c6:	2200      	movs	r2, #0
 80141c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80141ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80141cc:	b138      	cbz	r0, 80141de <rcl_wait_set_clear+0xea>
 80141ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80141d0:	2100      	movs	r1, #0
 80141d2:	0092      	lsls	r2, r2, #2
 80141d4:	f004 fb5a 	bl	801888c <memset>
 80141d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141da:	2000      	movs	r0, #0
 80141dc:	6358      	str	r0, [r3, #52]	@ 0x34
 80141de:	bd10      	pop	{r4, pc}
 80141e0:	200b      	movs	r0, #11
 80141e2:	4770      	bx	lr
 80141e4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80141e8:	bd10      	pop	{r4, pc}
 80141ea:	bf00      	nop

080141ec <rcl_wait_set_resize>:
 80141ec:	2800      	cmp	r0, #0
 80141ee:	f000 8185 	beq.w	80144fc <rcl_wait_set_resize+0x310>
 80141f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80141f8:	b083      	sub	sp, #12
 80141fa:	4605      	mov	r5, r0
 80141fc:	2c00      	cmp	r4, #0
 80141fe:	f000 817f 	beq.w	8014500 <rcl_wait_set_resize+0x314>
 8014202:	f04f 0900 	mov.w	r9, #0
 8014206:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801420a:	461f      	mov	r7, r3
 801420c:	4688      	mov	r8, r1
 801420e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014212:	4616      	mov	r6, r2
 8014214:	f8c0 9004 	str.w	r9, [r0, #4]
 8014218:	f8c4 9000 	str.w	r9, [r4]
 801421c:	2900      	cmp	r1, #0
 801421e:	f000 80bd 	beq.w	801439c <rcl_wait_set_resize+0x1b0>
 8014222:	008c      	lsls	r4, r1, #2
 8014224:	6800      	ldr	r0, [r0, #0]
 8014226:	9301      	str	r3, [sp, #4]
 8014228:	4652      	mov	r2, sl
 801422a:	4621      	mov	r1, r4
 801422c:	4798      	blx	r3
 801422e:	9b01      	ldr	r3, [sp, #4]
 8014230:	6028      	str	r0, [r5, #0]
 8014232:	2800      	cmp	r0, #0
 8014234:	f000 80cb 	beq.w	80143ce <rcl_wait_set_resize+0x1e2>
 8014238:	4622      	mov	r2, r4
 801423a:	4649      	mov	r1, r9
 801423c:	9301      	str	r3, [sp, #4]
 801423e:	f004 fb25 	bl	801888c <memset>
 8014242:	f8c5 8004 	str.w	r8, [r5, #4]
 8014246:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801424a:	9b01      	ldr	r3, [sp, #4]
 801424c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014250:	f8c8 9004 	str.w	r9, [r8, #4]
 8014254:	4652      	mov	r2, sl
 8014256:	4621      	mov	r1, r4
 8014258:	4798      	blx	r3
 801425a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801425c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014260:	689b      	ldr	r3, [r3, #8]
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 80ac 	beq.w	80143c0 <rcl_wait_set_resize+0x1d4>
 8014268:	4622      	mov	r2, r4
 801426a:	4649      	mov	r1, r9
 801426c:	4618      	mov	r0, r3
 801426e:	f004 fb0d 	bl	801888c <memset>
 8014272:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014274:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014278:	f04f 0800 	mov.w	r8, #0
 801427c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014280:	f8c5 800c 	str.w	r8, [r5, #12]
 8014284:	f8c4 800c 	str.w	r8, [r4, #12]
 8014288:	2e00      	cmp	r6, #0
 801428a:	f040 80a4 	bne.w	80143d6 <rcl_wait_set_resize+0x1ea>
 801428e:	68a8      	ldr	r0, [r5, #8]
 8014290:	b128      	cbz	r0, 801429e <rcl_wait_set_resize+0xb2>
 8014292:	4649      	mov	r1, r9
 8014294:	4790      	blx	r2
 8014296:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014298:	60ae      	str	r6, [r5, #8]
 801429a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801429e:	f04f 0800 	mov.w	r8, #0
 80142a2:	19f6      	adds	r6, r6, r7
 80142a4:	f8c4 8010 	str.w	r8, [r4, #16]
 80142a8:	f040 80ac 	bne.w	8014404 <rcl_wait_set_resize+0x218>
 80142ac:	6960      	ldr	r0, [r4, #20]
 80142ae:	b130      	cbz	r0, 80142be <rcl_wait_set_resize+0xd2>
 80142b0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80142b2:	4649      	mov	r1, r9
 80142b4:	4798      	blx	r3
 80142b6:	6166      	str	r6, [r4, #20]
 80142b8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80142ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80142be:	2600      	movs	r6, #0
 80142c0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80142c4:	616e      	str	r6, [r5, #20]
 80142c6:	6426      	str	r6, [r4, #64]	@ 0x40
 80142c8:	2f00      	cmp	r7, #0
 80142ca:	f040 80ad 	bne.w	8014428 <rcl_wait_set_resize+0x23c>
 80142ce:	6928      	ldr	r0, [r5, #16]
 80142d0:	b138      	cbz	r0, 80142e2 <rcl_wait_set_resize+0xf6>
 80142d2:	4649      	mov	r1, r9
 80142d4:	47d0      	blx	sl
 80142d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80142d8:	612f      	str	r7, [r5, #16]
 80142da:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80142de:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80142e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142e4:	2600      	movs	r6, #0
 80142e6:	61ee      	str	r6, [r5, #28]
 80142e8:	61a6      	str	r6, [r4, #24]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f040 80af 	bne.w	801444e <rcl_wait_set_resize+0x262>
 80142f0:	69a8      	ldr	r0, [r5, #24]
 80142f2:	b120      	cbz	r0, 80142fe <rcl_wait_set_resize+0x112>
 80142f4:	4649      	mov	r1, r9
 80142f6:	47d0      	blx	sl
 80142f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80142fc:	61ab      	str	r3, [r5, #24]
 80142fe:	6a20      	ldr	r0, [r4, #32]
 8014300:	b128      	cbz	r0, 801430e <rcl_wait_set_resize+0x122>
 8014302:	4649      	mov	r1, r9
 8014304:	47d0      	blx	sl
 8014306:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014308:	2300      	movs	r3, #0
 801430a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801430e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014310:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014312:	2600      	movs	r6, #0
 8014314:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014318:	626e      	str	r6, [r5, #36]	@ 0x24
 801431a:	6266      	str	r6, [r4, #36]	@ 0x24
 801431c:	2b00      	cmp	r3, #0
 801431e:	f000 80b6 	beq.w	801448e <rcl_wait_set_resize+0x2a2>
 8014322:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014326:	6a28      	ldr	r0, [r5, #32]
 8014328:	463a      	mov	r2, r7
 801432a:	4651      	mov	r1, sl
 801432c:	47c8      	blx	r9
 801432e:	6228      	str	r0, [r5, #32]
 8014330:	2800      	cmp	r0, #0
 8014332:	d04c      	beq.n	80143ce <rcl_wait_set_resize+0x1e2>
 8014334:	4652      	mov	r2, sl
 8014336:	4631      	mov	r1, r6
 8014338:	f004 faa8 	bl	801888c <memset>
 801433c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801433e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014340:	626b      	str	r3, [r5, #36]	@ 0x24
 8014342:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014344:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014346:	463a      	mov	r2, r7
 8014348:	4651      	mov	r1, sl
 801434a:	47c8      	blx	r9
 801434c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801434e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014350:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014352:	2c00      	cmp	r4, #0
 8014354:	f000 80f0 	beq.w	8014538 <rcl_wait_set_resize+0x34c>
 8014358:	4620      	mov	r0, r4
 801435a:	4652      	mov	r2, sl
 801435c:	4631      	mov	r1, r6
 801435e:	f004 fa95 	bl	801888c <memset>
 8014362:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014366:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014368:	2600      	movs	r6, #0
 801436a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801436e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014370:	6326      	str	r6, [r4, #48]	@ 0x30
 8014372:	2b00      	cmp	r3, #0
 8014374:	f040 809d 	bne.w	80144b2 <rcl_wait_set_resize+0x2c6>
 8014378:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801437a:	b120      	cbz	r0, 8014386 <rcl_wait_set_resize+0x19a>
 801437c:	4639      	mov	r1, r7
 801437e:	47c0      	blx	r8
 8014380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014382:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014384:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014386:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014388:	b310      	cbz	r0, 80143d0 <rcl_wait_set_resize+0x1e4>
 801438a:	4639      	mov	r1, r7
 801438c:	47c0      	blx	r8
 801438e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014390:	2000      	movs	r0, #0
 8014392:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014396:	b003      	add	sp, #12
 8014398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801439c:	6800      	ldr	r0, [r0, #0]
 801439e:	b120      	cbz	r0, 80143aa <rcl_wait_set_resize+0x1be>
 80143a0:	4651      	mov	r1, sl
 80143a2:	47d8      	blx	fp
 80143a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80143a6:	f8c5 8000 	str.w	r8, [r5]
 80143aa:	68a0      	ldr	r0, [r4, #8]
 80143ac:	2800      	cmp	r0, #0
 80143ae:	f43f af61 	beq.w	8014274 <rcl_wait_set_resize+0x88>
 80143b2:	4651      	mov	r1, sl
 80143b4:	47d8      	blx	fp
 80143b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80143b8:	2300      	movs	r3, #0
 80143ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80143be:	e759      	b.n	8014274 <rcl_wait_set_resize+0x88>
 80143c0:	6828      	ldr	r0, [r5, #0]
 80143c2:	9301      	str	r3, [sp, #4]
 80143c4:	4651      	mov	r1, sl
 80143c6:	47d8      	blx	fp
 80143c8:	9b01      	ldr	r3, [sp, #4]
 80143ca:	e9c5 3300 	strd	r3, r3, [r5]
 80143ce:	200a      	movs	r0, #10
 80143d0:	b003      	add	sp, #12
 80143d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143d6:	00b4      	lsls	r4, r6, #2
 80143d8:	68a8      	ldr	r0, [r5, #8]
 80143da:	464a      	mov	r2, r9
 80143dc:	4621      	mov	r1, r4
 80143de:	4798      	blx	r3
 80143e0:	60a8      	str	r0, [r5, #8]
 80143e2:	2800      	cmp	r0, #0
 80143e4:	d0f3      	beq.n	80143ce <rcl_wait_set_resize+0x1e2>
 80143e6:	4622      	mov	r2, r4
 80143e8:	4641      	mov	r1, r8
 80143ea:	f004 fa4f 	bl	801888c <memset>
 80143ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80143f0:	60ee      	str	r6, [r5, #12]
 80143f2:	f04f 0800 	mov.w	r8, #0
 80143f6:	19f6      	adds	r6, r6, r7
 80143f8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80143fc:	f8c4 8010 	str.w	r8, [r4, #16]
 8014400:	f43f af54 	beq.w	80142ac <rcl_wait_set_resize+0xc0>
 8014404:	00b6      	lsls	r6, r6, #2
 8014406:	464a      	mov	r2, r9
 8014408:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801440a:	6960      	ldr	r0, [r4, #20]
 801440c:	4631      	mov	r1, r6
 801440e:	4798      	blx	r3
 8014410:	4681      	mov	r9, r0
 8014412:	6160      	str	r0, [r4, #20]
 8014414:	2800      	cmp	r0, #0
 8014416:	d076      	beq.n	8014506 <rcl_wait_set_resize+0x31a>
 8014418:	4632      	mov	r2, r6
 801441a:	4641      	mov	r1, r8
 801441c:	f004 fa36 	bl	801888c <memset>
 8014420:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014422:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014426:	e74a      	b.n	80142be <rcl_wait_set_resize+0xd2>
 8014428:	00bc      	lsls	r4, r7, #2
 801442a:	6928      	ldr	r0, [r5, #16]
 801442c:	464a      	mov	r2, r9
 801442e:	4621      	mov	r1, r4
 8014430:	47c0      	blx	r8
 8014432:	6128      	str	r0, [r5, #16]
 8014434:	2800      	cmp	r0, #0
 8014436:	d0ca      	beq.n	80143ce <rcl_wait_set_resize+0x1e2>
 8014438:	4622      	mov	r2, r4
 801443a:	4631      	mov	r1, r6
 801443c:	f004 fa26 	bl	801888c <memset>
 8014440:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014442:	616f      	str	r7, [r5, #20]
 8014444:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014448:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801444c:	e749      	b.n	80142e2 <rcl_wait_set_resize+0xf6>
 801444e:	009c      	lsls	r4, r3, #2
 8014450:	69a8      	ldr	r0, [r5, #24]
 8014452:	464a      	mov	r2, r9
 8014454:	4621      	mov	r1, r4
 8014456:	47c0      	blx	r8
 8014458:	61a8      	str	r0, [r5, #24]
 801445a:	2800      	cmp	r0, #0
 801445c:	d0b7      	beq.n	80143ce <rcl_wait_set_resize+0x1e2>
 801445e:	4622      	mov	r2, r4
 8014460:	4631      	mov	r1, r6
 8014462:	f004 fa13 	bl	801888c <memset>
 8014466:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801446a:	61eb      	str	r3, [r5, #28]
 801446c:	6a38      	ldr	r0, [r7, #32]
 801446e:	61fe      	str	r6, [r7, #28]
 8014470:	464a      	mov	r2, r9
 8014472:	4621      	mov	r1, r4
 8014474:	47c0      	blx	r8
 8014476:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014478:	6238      	str	r0, [r7, #32]
 801447a:	6a1f      	ldr	r7, [r3, #32]
 801447c:	2f00      	cmp	r7, #0
 801447e:	d054      	beq.n	801452a <rcl_wait_set_resize+0x33e>
 8014480:	4622      	mov	r2, r4
 8014482:	4631      	mov	r1, r6
 8014484:	4638      	mov	r0, r7
 8014486:	f004 fa01 	bl	801888c <memset>
 801448a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801448c:	e73f      	b.n	801430e <rcl_wait_set_resize+0x122>
 801448e:	6a28      	ldr	r0, [r5, #32]
 8014490:	b120      	cbz	r0, 801449c <rcl_wait_set_resize+0x2b0>
 8014492:	4639      	mov	r1, r7
 8014494:	47c0      	blx	r8
 8014496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014498:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801449a:	622b      	str	r3, [r5, #32]
 801449c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801449e:	2800      	cmp	r0, #0
 80144a0:	f43f af60 	beq.w	8014364 <rcl_wait_set_resize+0x178>
 80144a4:	4639      	mov	r1, r7
 80144a6:	47c0      	blx	r8
 80144a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80144aa:	2300      	movs	r3, #0
 80144ac:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80144b0:	e758      	b.n	8014364 <rcl_wait_set_resize+0x178>
 80144b2:	009c      	lsls	r4, r3, #2
 80144b4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80144b6:	463a      	mov	r2, r7
 80144b8:	4621      	mov	r1, r4
 80144ba:	47c8      	blx	r9
 80144bc:	62a8      	str	r0, [r5, #40]	@ 0x28
 80144be:	2800      	cmp	r0, #0
 80144c0:	d085      	beq.n	80143ce <rcl_wait_set_resize+0x1e2>
 80144c2:	4622      	mov	r2, r4
 80144c4:	4631      	mov	r1, r6
 80144c6:	f004 f9e1 	bl	801888c <memset>
 80144ca:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80144ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144d0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80144d2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80144d6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80144da:	463a      	mov	r2, r7
 80144dc:	4621      	mov	r1, r4
 80144de:	47c8      	blx	r9
 80144e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80144e2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80144e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144e8:	b36b      	cbz	r3, 8014546 <rcl_wait_set_resize+0x35a>
 80144ea:	4622      	mov	r2, r4
 80144ec:	4631      	mov	r1, r6
 80144ee:	4618      	mov	r0, r3
 80144f0:	f004 f9cc 	bl	801888c <memset>
 80144f4:	4630      	mov	r0, r6
 80144f6:	b003      	add	sp, #12
 80144f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144fc:	200b      	movs	r0, #11
 80144fe:	4770      	bx	lr
 8014500:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014504:	e764      	b.n	80143d0 <rcl_wait_set_resize+0x1e4>
 8014506:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014508:	68a8      	ldr	r0, [r5, #8]
 801450a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801450e:	4798      	blx	r3
 8014510:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014512:	6928      	ldr	r0, [r5, #16]
 8014514:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014516:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014518:	f8c5 900c 	str.w	r9, [r5, #12]
 801451c:	f8c5 9008 	str.w	r9, [r5, #8]
 8014520:	4790      	blx	r2
 8014522:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014526:	200a      	movs	r0, #10
 8014528:	e752      	b.n	80143d0 <rcl_wait_set_resize+0x1e4>
 801452a:	69a8      	ldr	r0, [r5, #24]
 801452c:	4649      	mov	r1, r9
 801452e:	47d0      	blx	sl
 8014530:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014534:	200a      	movs	r0, #10
 8014536:	e74b      	b.n	80143d0 <rcl_wait_set_resize+0x1e4>
 8014538:	6a28      	ldr	r0, [r5, #32]
 801453a:	4639      	mov	r1, r7
 801453c:	47c0      	blx	r8
 801453e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014542:	200a      	movs	r0, #10
 8014544:	e744      	b.n	80143d0 <rcl_wait_set_resize+0x1e4>
 8014546:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014548:	9301      	str	r3, [sp, #4]
 801454a:	4639      	mov	r1, r7
 801454c:	47c0      	blx	r8
 801454e:	9b01      	ldr	r3, [sp, #4]
 8014550:	200a      	movs	r0, #10
 8014552:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014556:	e73b      	b.n	80143d0 <rcl_wait_set_resize+0x1e4>

08014558 <rcl_wait_set_init>:
 8014558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801455c:	b084      	sub	sp, #16
 801455e:	4604      	mov	r4, r0
 8014560:	a810      	add	r0, sp, #64	@ 0x40
 8014562:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014566:	460f      	mov	r7, r1
 8014568:	4690      	mov	r8, r2
 801456a:	4699      	mov	r9, r3
 801456c:	f7f8 fe96 	bl	800d29c <rcutils_allocator_is_valid>
 8014570:	2800      	cmp	r0, #0
 8014572:	d06b      	beq.n	801464c <rcl_wait_set_init+0xf4>
 8014574:	2c00      	cmp	r4, #0
 8014576:	d069      	beq.n	801464c <rcl_wait_set_init+0xf4>
 8014578:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801457a:	b125      	cbz	r5, 8014586 <rcl_wait_set_init+0x2e>
 801457c:	2564      	movs	r5, #100	@ 0x64
 801457e:	4628      	mov	r0, r5
 8014580:	b004      	add	sp, #16
 8014582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014586:	f1ba 0f00 	cmp.w	sl, #0
 801458a:	d05f      	beq.n	801464c <rcl_wait_set_init+0xf4>
 801458c:	4650      	mov	r0, sl
 801458e:	f7fe fb0f 	bl	8012bb0 <rcl_context_is_valid>
 8014592:	2800      	cmp	r0, #0
 8014594:	d067      	beq.n	8014666 <rcl_wait_set_init+0x10e>
 8014596:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014598:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801459a:	205c      	movs	r0, #92	@ 0x5c
 801459c:	4798      	blx	r3
 801459e:	6320      	str	r0, [r4, #48]	@ 0x30
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d062      	beq.n	801466a <rcl_wait_set_init+0x112>
 80145a4:	4629      	mov	r1, r5
 80145a6:	225c      	movs	r2, #92	@ 0x5c
 80145a8:	f004 f970 	bl	801888c <memset>
 80145ac:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80145b0:	eb03 0e02 	add.w	lr, r3, r2
 80145b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80145b6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80145b8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80145bc:	449e      	add	lr, r3
 80145be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145c2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80145c6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80145ca:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80145ce:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80145d2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80145d6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80145da:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80145de:	f8da a000 	ldr.w	sl, [sl]
 80145e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145e4:	44c6      	add	lr, r8
 80145e6:	f8dc 3000 	ldr.w	r3, [ip]
 80145ea:	602b      	str	r3, [r5, #0]
 80145ec:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80145f0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80145f4:	f002 f9fe 	bl	80169f4 <rmw_create_wait_set>
 80145f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80145fa:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80145fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80145fe:	b350      	cbz	r0, 8014656 <rcl_wait_set_init+0xfe>
 8014600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014602:	9302      	str	r3, [sp, #8]
 8014604:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014606:	9301      	str	r3, [sp, #4]
 8014608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	4642      	mov	r2, r8
 801460e:	464b      	mov	r3, r9
 8014610:	4639      	mov	r1, r7
 8014612:	4620      	mov	r0, r4
 8014614:	f7ff fdea 	bl	80141ec <rcl_wait_set_resize>
 8014618:	4605      	mov	r5, r0
 801461a:	2800      	cmp	r0, #0
 801461c:	d0af      	beq.n	801457e <rcl_wait_set_init+0x26>
 801461e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014620:	bb2b      	cbnz	r3, 801466e <rcl_wait_set_init+0x116>
 8014622:	2600      	movs	r6, #0
 8014624:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014628:	9600      	str	r6, [sp, #0]
 801462a:	4633      	mov	r3, r6
 801462c:	4632      	mov	r2, r6
 801462e:	4631      	mov	r1, r6
 8014630:	4620      	mov	r0, r4
 8014632:	f7ff fddb 	bl	80141ec <rcl_wait_set_resize>
 8014636:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014638:	2800      	cmp	r0, #0
 801463a:	d0a0      	beq.n	801457e <rcl_wait_set_init+0x26>
 801463c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801463e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014640:	4798      	blx	r3
 8014642:	4628      	mov	r0, r5
 8014644:	6326      	str	r6, [r4, #48]	@ 0x30
 8014646:	b004      	add	sp, #16
 8014648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801464c:	250b      	movs	r5, #11
 801464e:	4628      	mov	r0, r5
 8014650:	b004      	add	sp, #16
 8014652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014656:	2501      	movs	r5, #1
 8014658:	f002 f9d6 	bl	8016a08 <rmw_destroy_wait_set>
 801465c:	2800      	cmp	r0, #0
 801465e:	bf18      	it	ne
 8014660:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014664:	e7dd      	b.n	8014622 <rcl_wait_set_init+0xca>
 8014666:	2565      	movs	r5, #101	@ 0x65
 8014668:	e789      	b.n	801457e <rcl_wait_set_init+0x26>
 801466a:	250a      	movs	r5, #10
 801466c:	e787      	b.n	801457e <rcl_wait_set_init+0x26>
 801466e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014670:	e7f2      	b.n	8014658 <rcl_wait_set_init+0x100>
 8014672:	bf00      	nop

08014674 <rcl_wait_set_add_guard_condition>:
 8014674:	b318      	cbz	r0, 80146be <rcl_wait_set_add_guard_condition+0x4a>
 8014676:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014678:	b570      	push	{r4, r5, r6, lr}
 801467a:	4604      	mov	r4, r0
 801467c:	b30b      	cbz	r3, 80146c2 <rcl_wait_set_add_guard_condition+0x4e>
 801467e:	b319      	cbz	r1, 80146c8 <rcl_wait_set_add_guard_condition+0x54>
 8014680:	68dd      	ldr	r5, [r3, #12]
 8014682:	68c0      	ldr	r0, [r0, #12]
 8014684:	4285      	cmp	r5, r0
 8014686:	d217      	bcs.n	80146b8 <rcl_wait_set_add_guard_condition+0x44>
 8014688:	68a0      	ldr	r0, [r4, #8]
 801468a:	1c6e      	adds	r6, r5, #1
 801468c:	60de      	str	r6, [r3, #12]
 801468e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014692:	b102      	cbz	r2, 8014696 <rcl_wait_set_add_guard_condition+0x22>
 8014694:	6015      	str	r5, [r2, #0]
 8014696:	4608      	mov	r0, r1
 8014698:	f003 faa0 	bl	8017bdc <rcl_guard_condition_get_rmw_handle>
 801469c:	b150      	cbz	r0, 80146b4 <rcl_wait_set_add_guard_condition+0x40>
 801469e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80146a0:	6842      	ldr	r2, [r0, #4]
 80146a2:	695b      	ldr	r3, [r3, #20]
 80146a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80146aa:	6913      	ldr	r3, [r2, #16]
 80146ac:	3301      	adds	r3, #1
 80146ae:	2000      	movs	r0, #0
 80146b0:	6113      	str	r3, [r2, #16]
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	2001      	movs	r0, #1
 80146b6:	bd70      	pop	{r4, r5, r6, pc}
 80146b8:	f240 3086 	movw	r0, #902	@ 0x386
 80146bc:	bd70      	pop	{r4, r5, r6, pc}
 80146be:	200b      	movs	r0, #11
 80146c0:	4770      	bx	lr
 80146c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80146c6:	bd70      	pop	{r4, r5, r6, pc}
 80146c8:	200b      	movs	r0, #11
 80146ca:	bd70      	pop	{r4, r5, r6, pc}

080146cc <rcl_wait_set_add_timer>:
 80146cc:	b328      	cbz	r0, 801471a <rcl_wait_set_add_timer+0x4e>
 80146ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	4604      	mov	r4, r0
 80146d4:	b31b      	cbz	r3, 801471e <rcl_wait_set_add_timer+0x52>
 80146d6:	b329      	cbz	r1, 8014724 <rcl_wait_set_add_timer+0x58>
 80146d8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80146da:	6965      	ldr	r5, [r4, #20]
 80146dc:	42a8      	cmp	r0, r5
 80146de:	d219      	bcs.n	8014714 <rcl_wait_set_add_timer+0x48>
 80146e0:	6925      	ldr	r5, [r4, #16]
 80146e2:	1c46      	adds	r6, r0, #1
 80146e4:	641e      	str	r6, [r3, #64]	@ 0x40
 80146e6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80146ea:	b102      	cbz	r2, 80146ee <rcl_wait_set_add_timer+0x22>
 80146ec:	6010      	str	r0, [r2, #0]
 80146ee:	4608      	mov	r0, r1
 80146f0:	f7ff fba6 	bl	8013e40 <rcl_timer_get_guard_condition>
 80146f4:	b168      	cbz	r0, 8014712 <rcl_wait_set_add_timer+0x46>
 80146f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80146f8:	68e3      	ldr	r3, [r4, #12]
 80146fa:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80146fc:	3b01      	subs	r3, #1
 80146fe:	441d      	add	r5, r3
 8014700:	f003 fa6c 	bl	8017bdc <rcl_guard_condition_get_rmw_handle>
 8014704:	b180      	cbz	r0, 8014728 <rcl_wait_set_add_timer+0x5c>
 8014706:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014708:	6842      	ldr	r2, [r0, #4]
 801470a:	695b      	ldr	r3, [r3, #20]
 801470c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014710:	2000      	movs	r0, #0
 8014712:	bd70      	pop	{r4, r5, r6, pc}
 8014714:	f240 3086 	movw	r0, #902	@ 0x386
 8014718:	bd70      	pop	{r4, r5, r6, pc}
 801471a:	200b      	movs	r0, #11
 801471c:	4770      	bx	lr
 801471e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014722:	bd70      	pop	{r4, r5, r6, pc}
 8014724:	200b      	movs	r0, #11
 8014726:	bd70      	pop	{r4, r5, r6, pc}
 8014728:	2001      	movs	r0, #1
 801472a:	bd70      	pop	{r4, r5, r6, pc}

0801472c <rcl_wait_set_add_client>:
 801472c:	b318      	cbz	r0, 8014776 <rcl_wait_set_add_client+0x4a>
 801472e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014730:	b570      	push	{r4, r5, r6, lr}
 8014732:	4604      	mov	r4, r0
 8014734:	b30b      	cbz	r3, 801477a <rcl_wait_set_add_client+0x4e>
 8014736:	b319      	cbz	r1, 8014780 <rcl_wait_set_add_client+0x54>
 8014738:	699d      	ldr	r5, [r3, #24]
 801473a:	69c0      	ldr	r0, [r0, #28]
 801473c:	4285      	cmp	r5, r0
 801473e:	d217      	bcs.n	8014770 <rcl_wait_set_add_client+0x44>
 8014740:	69a0      	ldr	r0, [r4, #24]
 8014742:	1c6e      	adds	r6, r5, #1
 8014744:	619e      	str	r6, [r3, #24]
 8014746:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801474a:	b102      	cbz	r2, 801474e <rcl_wait_set_add_client+0x22>
 801474c:	6015      	str	r5, [r2, #0]
 801474e:	4608      	mov	r0, r1
 8014750:	f7fe f982 	bl	8012a58 <rcl_client_get_rmw_handle>
 8014754:	b150      	cbz	r0, 801476c <rcl_wait_set_add_client+0x40>
 8014756:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014758:	6842      	ldr	r2, [r0, #4]
 801475a:	6a1b      	ldr	r3, [r3, #32]
 801475c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014760:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014762:	69d3      	ldr	r3, [r2, #28]
 8014764:	3301      	adds	r3, #1
 8014766:	2000      	movs	r0, #0
 8014768:	61d3      	str	r3, [r2, #28]
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	2001      	movs	r0, #1
 801476e:	bd70      	pop	{r4, r5, r6, pc}
 8014770:	f240 3086 	movw	r0, #902	@ 0x386
 8014774:	bd70      	pop	{r4, r5, r6, pc}
 8014776:	200b      	movs	r0, #11
 8014778:	4770      	bx	lr
 801477a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801477e:	bd70      	pop	{r4, r5, r6, pc}
 8014780:	200b      	movs	r0, #11
 8014782:	bd70      	pop	{r4, r5, r6, pc}

08014784 <rcl_wait_set_add_service>:
 8014784:	b318      	cbz	r0, 80147ce <rcl_wait_set_add_service+0x4a>
 8014786:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014788:	b570      	push	{r4, r5, r6, lr}
 801478a:	4604      	mov	r4, r0
 801478c:	b30b      	cbz	r3, 80147d2 <rcl_wait_set_add_service+0x4e>
 801478e:	b319      	cbz	r1, 80147d8 <rcl_wait_set_add_service+0x54>
 8014790:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014792:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014794:	4285      	cmp	r5, r0
 8014796:	d217      	bcs.n	80147c8 <rcl_wait_set_add_service+0x44>
 8014798:	6a20      	ldr	r0, [r4, #32]
 801479a:	1c6e      	adds	r6, r5, #1
 801479c:	625e      	str	r6, [r3, #36]	@ 0x24
 801479e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80147a2:	b102      	cbz	r2, 80147a6 <rcl_wait_set_add_service+0x22>
 80147a4:	6015      	str	r5, [r2, #0]
 80147a6:	4608      	mov	r0, r1
 80147a8:	f7fe fed6 	bl	8013558 <rcl_service_get_rmw_handle>
 80147ac:	b150      	cbz	r0, 80147c4 <rcl_wait_set_add_service+0x40>
 80147ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147b0:	6842      	ldr	r2, [r0, #4]
 80147b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80147ba:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80147bc:	3301      	adds	r3, #1
 80147be:	2000      	movs	r0, #0
 80147c0:	6293      	str	r3, [r2, #40]	@ 0x28
 80147c2:	bd70      	pop	{r4, r5, r6, pc}
 80147c4:	2001      	movs	r0, #1
 80147c6:	bd70      	pop	{r4, r5, r6, pc}
 80147c8:	f240 3086 	movw	r0, #902	@ 0x386
 80147cc:	bd70      	pop	{r4, r5, r6, pc}
 80147ce:	200b      	movs	r0, #11
 80147d0:	4770      	bx	lr
 80147d2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80147d6:	bd70      	pop	{r4, r5, r6, pc}
 80147d8:	200b      	movs	r0, #11
 80147da:	bd70      	pop	{r4, r5, r6, pc}
 80147dc:	0000      	movs	r0, r0
	...

080147e0 <rcl_wait>:
 80147e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e4:	ed2d 8b02 	vpush	{d8}
 80147e8:	b08d      	sub	sp, #52	@ 0x34
 80147ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80147ee:	2800      	cmp	r0, #0
 80147f0:	f000 8143 	beq.w	8014a7a <rcl_wait+0x29a>
 80147f4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80147f6:	4605      	mov	r5, r0
 80147f8:	2e00      	cmp	r6, #0
 80147fa:	f000 8112 	beq.w	8014a22 <rcl_wait+0x242>
 80147fe:	6843      	ldr	r3, [r0, #4]
 8014800:	b983      	cbnz	r3, 8014824 <rcl_wait+0x44>
 8014802:	68eb      	ldr	r3, [r5, #12]
 8014804:	b973      	cbnz	r3, 8014824 <rcl_wait+0x44>
 8014806:	696b      	ldr	r3, [r5, #20]
 8014808:	b963      	cbnz	r3, 8014824 <rcl_wait+0x44>
 801480a:	69eb      	ldr	r3, [r5, #28]
 801480c:	b953      	cbnz	r3, 8014824 <rcl_wait+0x44>
 801480e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014810:	b943      	cbnz	r3, 8014824 <rcl_wait+0x44>
 8014812:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014814:	b933      	cbnz	r3, 8014824 <rcl_wait+0x44>
 8014816:	f240 3085 	movw	r0, #901	@ 0x385
 801481a:	b00d      	add	sp, #52	@ 0x34
 801481c:	ecbd 8b02 	vpop	{d8}
 8014820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014824:	9b04      	ldr	r3, [sp, #16]
 8014826:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014828:	2b01      	cmp	r3, #1
 801482a:	9b05      	ldr	r3, [sp, #20]
 801482c:	f173 0300 	sbcs.w	r3, r3, #0
 8014830:	f2c0 80f0 	blt.w	8014a14 <rcl_wait+0x234>
 8014834:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014838:	4643      	mov	r3, r8
 801483a:	2a00      	cmp	r2, #0
 801483c:	f000 8133 	beq.w	8014aa6 <rcl_wait+0x2c6>
 8014840:	2400      	movs	r4, #0
 8014842:	4613      	mov	r3, r2
 8014844:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014ab8 <rcl_wait+0x2d8>
 8014848:	46a2      	mov	sl, r4
 801484a:	46a3      	mov	fp, r4
 801484c:	f240 3921 	movw	r9, #801	@ 0x321
 8014850:	4632      	mov	r2, r6
 8014852:	e014      	b.n	801487e <rcl_wait+0x9e>
 8014854:	2800      	cmp	r0, #0
 8014856:	d1e0      	bne.n	801481a <rcl_wait+0x3a>
 8014858:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801485c:	4542      	cmp	r2, r8
 801485e:	eb73 0107 	sbcs.w	r1, r3, r7
 8014862:	da03      	bge.n	801486c <rcl_wait+0x8c>
 8014864:	4690      	mov	r8, r2
 8014866:	461f      	mov	r7, r3
 8014868:	f04f 0b01 	mov.w	fp, #1
 801486c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801486e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014870:	3401      	adds	r4, #1
 8014872:	f14a 0a00 	adc.w	sl, sl, #0
 8014876:	429c      	cmp	r4, r3
 8014878:	f17a 0100 	sbcs.w	r1, sl, #0
 801487c:	d228      	bcs.n	80148d0 <rcl_wait+0xf0>
 801487e:	6928      	ldr	r0, [r5, #16]
 8014880:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014884:	a908      	add	r1, sp, #32
 8014886:	00a6      	lsls	r6, r4, #2
 8014888:	2800      	cmp	r0, #0
 801488a:	d0f1      	beq.n	8014870 <rcl_wait+0x90>
 801488c:	68eb      	ldr	r3, [r5, #12]
 801488e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8014892:	4423      	add	r3, r4
 8014894:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8014898:	f1be 0f00 	cmp.w	lr, #0
 801489c:	d006      	beq.n	80148ac <rcl_wait+0xcc>
 801489e:	6913      	ldr	r3, [r2, #16]
 80148a0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80148a4:	3301      	adds	r3, #1
 80148a6:	6113      	str	r3, [r2, #16]
 80148a8:	692b      	ldr	r3, [r5, #16]
 80148aa:	5998      	ldr	r0, [r3, r6]
 80148ac:	ed8d 8b08 	vstr	d8, [sp, #32]
 80148b0:	f7ff fa94 	bl	8013ddc <rcl_timer_get_time_until_next_call>
 80148b4:	4548      	cmp	r0, r9
 80148b6:	d1cd      	bne.n	8014854 <rcl_wait+0x74>
 80148b8:	692b      	ldr	r3, [r5, #16]
 80148ba:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80148bc:	2100      	movs	r1, #0
 80148be:	5199      	str	r1, [r3, r6]
 80148c0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80148c2:	3401      	adds	r4, #1
 80148c4:	f14a 0a00 	adc.w	sl, sl, #0
 80148c8:	429c      	cmp	r4, r3
 80148ca:	f17a 0100 	sbcs.w	r1, sl, #0
 80148ce:	d3d6      	bcc.n	801487e <rcl_wait+0x9e>
 80148d0:	4616      	mov	r6, r2
 80148d2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80148d6:	4313      	orrs	r3, r2
 80148d8:	46d9      	mov	r9, fp
 80148da:	f040 80a9 	bne.w	8014a30 <rcl_wait+0x250>
 80148de:	2300      	movs	r3, #0
 80148e0:	2200      	movs	r2, #0
 80148e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80148e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80148ea:	ab08      	add	r3, sp, #32
 80148ec:	9302      	str	r3, [sp, #8]
 80148ee:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80148f0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80148f4:	e9cd 3200 	strd	r3, r2, [sp]
 80148f8:	f106 0110 	add.w	r1, r6, #16
 80148fc:	f106 031c 	add.w	r3, r6, #28
 8014900:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8014904:	1d30      	adds	r0, r6, #4
 8014906:	f001 fefd 	bl	8016704 <rmw_wait>
 801490a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801490c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801490e:	4680      	mov	r8, r0
 8014910:	b1ca      	cbz	r2, 8014946 <rcl_wait+0x166>
 8014912:	2400      	movs	r4, #0
 8014914:	4627      	mov	r7, r4
 8014916:	692a      	ldr	r2, [r5, #16]
 8014918:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801491c:	f10d 011f 	add.w	r1, sp, #31
 8014920:	00a6      	lsls	r6, r4, #2
 8014922:	b160      	cbz	r0, 801493e <rcl_wait+0x15e>
 8014924:	f88d 701f 	strb.w	r7, [sp, #31]
 8014928:	f7ff fa1e 	bl	8013d68 <rcl_timer_is_ready>
 801492c:	2800      	cmp	r0, #0
 801492e:	f47f af74 	bne.w	801481a <rcl_wait+0x3a>
 8014932:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014936:	b90b      	cbnz	r3, 801493c <rcl_wait+0x15c>
 8014938:	692a      	ldr	r2, [r5, #16]
 801493a:	5193      	str	r3, [r2, r6]
 801493c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801493e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014940:	3401      	adds	r4, #1
 8014942:	42a2      	cmp	r2, r4
 8014944:	d8e7      	bhi.n	8014916 <rcl_wait+0x136>
 8014946:	f038 0002 	bics.w	r0, r8, #2
 801494a:	f040 8090 	bne.w	8014a6e <rcl_wait+0x28e>
 801494e:	686e      	ldr	r6, [r5, #4]
 8014950:	4602      	mov	r2, r0
 8014952:	b91e      	cbnz	r6, 801495c <rcl_wait+0x17c>
 8014954:	e00d      	b.n	8014972 <rcl_wait+0x192>
 8014956:	3201      	adds	r2, #1
 8014958:	42b2      	cmp	r2, r6
 801495a:	d00a      	beq.n	8014972 <rcl_wait+0x192>
 801495c:	6899      	ldr	r1, [r3, #8]
 801495e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014962:	2900      	cmp	r1, #0
 8014964:	d1f7      	bne.n	8014956 <rcl_wait+0x176>
 8014966:	682c      	ldr	r4, [r5, #0]
 8014968:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801496c:	3201      	adds	r2, #1
 801496e:	42b2      	cmp	r2, r6
 8014970:	d1f4      	bne.n	801495c <rcl_wait+0x17c>
 8014972:	68ee      	ldr	r6, [r5, #12]
 8014974:	2200      	movs	r2, #0
 8014976:	b91e      	cbnz	r6, 8014980 <rcl_wait+0x1a0>
 8014978:	e00d      	b.n	8014996 <rcl_wait+0x1b6>
 801497a:	3201      	adds	r2, #1
 801497c:	42b2      	cmp	r2, r6
 801497e:	d00a      	beq.n	8014996 <rcl_wait+0x1b6>
 8014980:	6959      	ldr	r1, [r3, #20]
 8014982:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014986:	2900      	cmp	r1, #0
 8014988:	d1f7      	bne.n	801497a <rcl_wait+0x19a>
 801498a:	68ac      	ldr	r4, [r5, #8]
 801498c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014990:	3201      	adds	r2, #1
 8014992:	42b2      	cmp	r2, r6
 8014994:	d1f4      	bne.n	8014980 <rcl_wait+0x1a0>
 8014996:	69ee      	ldr	r6, [r5, #28]
 8014998:	2200      	movs	r2, #0
 801499a:	b91e      	cbnz	r6, 80149a4 <rcl_wait+0x1c4>
 801499c:	e00d      	b.n	80149ba <rcl_wait+0x1da>
 801499e:	3201      	adds	r2, #1
 80149a0:	42b2      	cmp	r2, r6
 80149a2:	d00a      	beq.n	80149ba <rcl_wait+0x1da>
 80149a4:	6a19      	ldr	r1, [r3, #32]
 80149a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80149aa:	2900      	cmp	r1, #0
 80149ac:	d1f7      	bne.n	801499e <rcl_wait+0x1be>
 80149ae:	69ac      	ldr	r4, [r5, #24]
 80149b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80149b4:	3201      	adds	r2, #1
 80149b6:	42b2      	cmp	r2, r6
 80149b8:	d1f4      	bne.n	80149a4 <rcl_wait+0x1c4>
 80149ba:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80149bc:	2200      	movs	r2, #0
 80149be:	b91e      	cbnz	r6, 80149c8 <rcl_wait+0x1e8>
 80149c0:	e00d      	b.n	80149de <rcl_wait+0x1fe>
 80149c2:	3201      	adds	r2, #1
 80149c4:	4296      	cmp	r6, r2
 80149c6:	d00a      	beq.n	80149de <rcl_wait+0x1fe>
 80149c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80149ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80149ce:	2900      	cmp	r1, #0
 80149d0:	d1f7      	bne.n	80149c2 <rcl_wait+0x1e2>
 80149d2:	6a2c      	ldr	r4, [r5, #32]
 80149d4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80149d8:	3201      	adds	r2, #1
 80149da:	4296      	cmp	r6, r2
 80149dc:	d1f4      	bne.n	80149c8 <rcl_wait+0x1e8>
 80149de:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80149e0:	2200      	movs	r2, #0
 80149e2:	b91e      	cbnz	r6, 80149ec <rcl_wait+0x20c>
 80149e4:	e00d      	b.n	8014a02 <rcl_wait+0x222>
 80149e6:	3201      	adds	r2, #1
 80149e8:	42b2      	cmp	r2, r6
 80149ea:	d00a      	beq.n	8014a02 <rcl_wait+0x222>
 80149ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80149ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80149f2:	2900      	cmp	r1, #0
 80149f4:	d1f7      	bne.n	80149e6 <rcl_wait+0x206>
 80149f6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80149f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80149fc:	3201      	adds	r2, #1
 80149fe:	42b2      	cmp	r2, r6
 8014a00:	d1f4      	bne.n	80149ec <rcl_wait+0x20c>
 8014a02:	f1b8 0f02 	cmp.w	r8, #2
 8014a06:	f47f af08 	bne.w	801481a <rcl_wait+0x3a>
 8014a0a:	464b      	mov	r3, r9
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	bf08      	it	eq
 8014a10:	2002      	moveq	r0, #2
 8014a12:	e702      	b.n	801481a <rcl_wait+0x3a>
 8014a14:	2a00      	cmp	r2, #0
 8014a16:	d03a      	beq.n	8014a8e <rcl_wait+0x2ae>
 8014a18:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014a1c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014a20:	e70e      	b.n	8014840 <rcl_wait+0x60>
 8014a22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a26:	b00d      	add	sp, #52	@ 0x34
 8014a28:	ecbd 8b02 	vpop	{d8}
 8014a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	9b05      	ldr	r3, [sp, #20]
 8014a36:	f173 0300 	sbcs.w	r3, r3, #0
 8014a3a:	db24      	blt.n	8014a86 <rcl_wait+0x2a6>
 8014a3c:	2f00      	cmp	r7, #0
 8014a3e:	bfbc      	itt	lt
 8014a40:	f04f 0800 	movlt.w	r8, #0
 8014a44:	4647      	movlt	r7, r8
 8014a46:	a31e      	add	r3, pc, #120	@ (adr r3, 8014ac0 <rcl_wait+0x2e0>)
 8014a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4c:	4640      	mov	r0, r8
 8014a4e:	4639      	mov	r1, r7
 8014a50:	f7ec f8e2 	bl	8000c18 <__aeabi_ldivmod>
 8014a54:	a31a      	add	r3, pc, #104	@ (adr r3, 8014ac0 <rcl_wait+0x2e0>)
 8014a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014a5e:	4640      	mov	r0, r8
 8014a60:	4639      	mov	r1, r7
 8014a62:	f7ec f8d9 	bl	8000c18 <__aeabi_ldivmod>
 8014a66:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014a6a:	ab08      	add	r3, sp, #32
 8014a6c:	e73e      	b.n	80148ec <rcl_wait+0x10c>
 8014a6e:	2001      	movs	r0, #1
 8014a70:	b00d      	add	sp, #52	@ 0x34
 8014a72:	ecbd 8b02 	vpop	{d8}
 8014a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a7a:	200b      	movs	r0, #11
 8014a7c:	b00d      	add	sp, #52	@ 0x34
 8014a7e:	ecbd 8b02 	vpop	{d8}
 8014a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a86:	465b      	mov	r3, fp
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d1d7      	bne.n	8014a3c <rcl_wait+0x25c>
 8014a8c:	e72e      	b.n	80148ec <rcl_wait+0x10c>
 8014a8e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014a92:	430b      	orrs	r3, r1
 8014a94:	bf08      	it	eq
 8014a96:	4691      	moveq	r9, r2
 8014a98:	f43f af21 	beq.w	80148de <rcl_wait+0xfe>
 8014a9c:	9b04      	ldr	r3, [sp, #16]
 8014a9e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014aa2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	9b05      	ldr	r3, [sp, #20]
 8014aaa:	f173 0300 	sbcs.w	r3, r3, #0
 8014aae:	f04f 0300 	mov.w	r3, #0
 8014ab2:	4699      	mov	r9, r3
 8014ab4:	dac2      	bge.n	8014a3c <rcl_wait+0x25c>
 8014ab6:	e719      	b.n	80148ec <rcl_wait+0x10c>
 8014ab8:	ffffffff 	.word	0xffffffff
 8014abc:	7fffffff 	.word	0x7fffffff
 8014ac0:	3b9aca00 	.word	0x3b9aca00
 8014ac4:	00000000 	.word	0x00000000

08014ac8 <rcl_action_take_goal_response>:
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d039      	beq.n	8014b40 <rcl_action_take_goal_response+0x78>
 8014acc:	b570      	push	{r4, r5, r6, lr}
 8014ace:	4604      	mov	r4, r0
 8014ad0:	6800      	ldr	r0, [r0, #0]
 8014ad2:	b380      	cbz	r0, 8014b36 <rcl_action_take_goal_response+0x6e>
 8014ad4:	460d      	mov	r5, r1
 8014ad6:	4616      	mov	r6, r2
 8014ad8:	f7fe f842 	bl	8012b60 <rcl_client_is_valid>
 8014adc:	b330      	cbz	r0, 8014b2c <rcl_action_take_goal_response+0x64>
 8014ade:	6820      	ldr	r0, [r4, #0]
 8014ae0:	3004      	adds	r0, #4
 8014ae2:	f7fe f83d 	bl	8012b60 <rcl_client_is_valid>
 8014ae6:	b308      	cbz	r0, 8014b2c <rcl_action_take_goal_response+0x64>
 8014ae8:	6820      	ldr	r0, [r4, #0]
 8014aea:	3008      	adds	r0, #8
 8014aec:	f7fe f838 	bl	8012b60 <rcl_client_is_valid>
 8014af0:	b1e0      	cbz	r0, 8014b2c <rcl_action_take_goal_response+0x64>
 8014af2:	6820      	ldr	r0, [r4, #0]
 8014af4:	300c      	adds	r0, #12
 8014af6:	f7fe fdf5 	bl	80136e4 <rcl_subscription_is_valid>
 8014afa:	b1b8      	cbz	r0, 8014b2c <rcl_action_take_goal_response+0x64>
 8014afc:	6820      	ldr	r0, [r4, #0]
 8014afe:	3010      	adds	r0, #16
 8014b00:	f7fe fdf0 	bl	80136e4 <rcl_subscription_is_valid>
 8014b04:	b190      	cbz	r0, 8014b2c <rcl_action_take_goal_response+0x64>
 8014b06:	b1cd      	cbz	r5, 8014b3c <rcl_action_take_goal_response+0x74>
 8014b08:	b1c6      	cbz	r6, 8014b3c <rcl_action_take_goal_response+0x74>
 8014b0a:	6820      	ldr	r0, [r4, #0]
 8014b0c:	4632      	mov	r2, r6
 8014b0e:	4629      	mov	r1, r5
 8014b10:	f7fd ffde 	bl	8012ad0 <rcl_take_response>
 8014b14:	b148      	cbz	r0, 8014b2a <rcl_action_take_goal_response+0x62>
 8014b16:	280a      	cmp	r0, #10
 8014b18:	d007      	beq.n	8014b2a <rcl_action_take_goal_response+0x62>
 8014b1a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014b1e:	f640 0337 	movw	r3, #2103	@ 0x837
 8014b22:	4290      	cmp	r0, r2
 8014b24:	bf0c      	ite	eq
 8014b26:	4618      	moveq	r0, r3
 8014b28:	2001      	movne	r0, #1
 8014b2a:	bd70      	pop	{r4, r5, r6, pc}
 8014b2c:	f7f8 fbdc 	bl	800d2e8 <rcutils_reset_error>
 8014b30:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b34:	bd70      	pop	{r4, r5, r6, pc}
 8014b36:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	200b      	movs	r0, #11
 8014b3e:	bd70      	pop	{r4, r5, r6, pc}
 8014b40:	f640 0036 	movw	r0, #2102	@ 0x836
 8014b44:	4770      	bx	lr
 8014b46:	bf00      	nop

08014b48 <rcl_action_send_result_request>:
 8014b48:	b390      	cbz	r0, 8014bb0 <rcl_action_send_result_request+0x68>
 8014b4a:	b570      	push	{r4, r5, r6, lr}
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	6800      	ldr	r0, [r0, #0]
 8014b50:	b348      	cbz	r0, 8014ba6 <rcl_action_send_result_request+0x5e>
 8014b52:	460d      	mov	r5, r1
 8014b54:	4616      	mov	r6, r2
 8014b56:	f7fe f803 	bl	8012b60 <rcl_client_is_valid>
 8014b5a:	b1f8      	cbz	r0, 8014b9c <rcl_action_send_result_request+0x54>
 8014b5c:	6820      	ldr	r0, [r4, #0]
 8014b5e:	3004      	adds	r0, #4
 8014b60:	f7fd fffe 	bl	8012b60 <rcl_client_is_valid>
 8014b64:	b1d0      	cbz	r0, 8014b9c <rcl_action_send_result_request+0x54>
 8014b66:	6820      	ldr	r0, [r4, #0]
 8014b68:	3008      	adds	r0, #8
 8014b6a:	f7fd fff9 	bl	8012b60 <rcl_client_is_valid>
 8014b6e:	b1a8      	cbz	r0, 8014b9c <rcl_action_send_result_request+0x54>
 8014b70:	6820      	ldr	r0, [r4, #0]
 8014b72:	300c      	adds	r0, #12
 8014b74:	f7fe fdb6 	bl	80136e4 <rcl_subscription_is_valid>
 8014b78:	b180      	cbz	r0, 8014b9c <rcl_action_send_result_request+0x54>
 8014b7a:	6820      	ldr	r0, [r4, #0]
 8014b7c:	3010      	adds	r0, #16
 8014b7e:	f7fe fdb1 	bl	80136e4 <rcl_subscription_is_valid>
 8014b82:	b158      	cbz	r0, 8014b9c <rcl_action_send_result_request+0x54>
 8014b84:	b195      	cbz	r5, 8014bac <rcl_action_send_result_request+0x64>
 8014b86:	b18e      	cbz	r6, 8014bac <rcl_action_send_result_request+0x64>
 8014b88:	6820      	ldr	r0, [r4, #0]
 8014b8a:	4632      	mov	r2, r6
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	3008      	adds	r0, #8
 8014b90:	f7fd ff68 	bl	8012a64 <rcl_send_request>
 8014b94:	3800      	subs	r0, #0
 8014b96:	bf18      	it	ne
 8014b98:	2001      	movne	r0, #1
 8014b9a:	bd70      	pop	{r4, r5, r6, pc}
 8014b9c:	f7f8 fba4 	bl	800d2e8 <rcutils_reset_error>
 8014ba0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ba4:	bd70      	pop	{r4, r5, r6, pc}
 8014ba6:	f640 0036 	movw	r0, #2102	@ 0x836
 8014baa:	bd70      	pop	{r4, r5, r6, pc}
 8014bac:	200b      	movs	r0, #11
 8014bae:	bd70      	pop	{r4, r5, r6, pc}
 8014bb0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop

08014bb8 <rcl_action_take_result_response>:
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d03a      	beq.n	8014c32 <rcl_action_take_result_response+0x7a>
 8014bbc:	b570      	push	{r4, r5, r6, lr}
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	6800      	ldr	r0, [r0, #0]
 8014bc2:	b388      	cbz	r0, 8014c28 <rcl_action_take_result_response+0x70>
 8014bc4:	460d      	mov	r5, r1
 8014bc6:	4616      	mov	r6, r2
 8014bc8:	f7fd ffca 	bl	8012b60 <rcl_client_is_valid>
 8014bcc:	b338      	cbz	r0, 8014c1e <rcl_action_take_result_response+0x66>
 8014bce:	6820      	ldr	r0, [r4, #0]
 8014bd0:	3004      	adds	r0, #4
 8014bd2:	f7fd ffc5 	bl	8012b60 <rcl_client_is_valid>
 8014bd6:	b310      	cbz	r0, 8014c1e <rcl_action_take_result_response+0x66>
 8014bd8:	6820      	ldr	r0, [r4, #0]
 8014bda:	3008      	adds	r0, #8
 8014bdc:	f7fd ffc0 	bl	8012b60 <rcl_client_is_valid>
 8014be0:	b1e8      	cbz	r0, 8014c1e <rcl_action_take_result_response+0x66>
 8014be2:	6820      	ldr	r0, [r4, #0]
 8014be4:	300c      	adds	r0, #12
 8014be6:	f7fe fd7d 	bl	80136e4 <rcl_subscription_is_valid>
 8014bea:	b1c0      	cbz	r0, 8014c1e <rcl_action_take_result_response+0x66>
 8014bec:	6820      	ldr	r0, [r4, #0]
 8014bee:	3010      	adds	r0, #16
 8014bf0:	f7fe fd78 	bl	80136e4 <rcl_subscription_is_valid>
 8014bf4:	b198      	cbz	r0, 8014c1e <rcl_action_take_result_response+0x66>
 8014bf6:	b1d5      	cbz	r5, 8014c2e <rcl_action_take_result_response+0x76>
 8014bf8:	b1ce      	cbz	r6, 8014c2e <rcl_action_take_result_response+0x76>
 8014bfa:	6820      	ldr	r0, [r4, #0]
 8014bfc:	4632      	mov	r2, r6
 8014bfe:	4629      	mov	r1, r5
 8014c00:	3008      	adds	r0, #8
 8014c02:	f7fd ff65 	bl	8012ad0 <rcl_take_response>
 8014c06:	b148      	cbz	r0, 8014c1c <rcl_action_take_result_response+0x64>
 8014c08:	280a      	cmp	r0, #10
 8014c0a:	d007      	beq.n	8014c1c <rcl_action_take_result_response+0x64>
 8014c0c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014c10:	f640 0337 	movw	r3, #2103	@ 0x837
 8014c14:	4290      	cmp	r0, r2
 8014c16:	bf0c      	ite	eq
 8014c18:	4618      	moveq	r0, r3
 8014c1a:	2001      	movne	r0, #1
 8014c1c:	bd70      	pop	{r4, r5, r6, pc}
 8014c1e:	f7f8 fb63 	bl	800d2e8 <rcutils_reset_error>
 8014c22:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c26:	bd70      	pop	{r4, r5, r6, pc}
 8014c28:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c2c:	bd70      	pop	{r4, r5, r6, pc}
 8014c2e:	200b      	movs	r0, #11
 8014c30:	bd70      	pop	{r4, r5, r6, pc}
 8014c32:	f640 0036 	movw	r0, #2102	@ 0x836
 8014c36:	4770      	bx	lr

08014c38 <rcl_action_take_cancel_response>:
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d03a      	beq.n	8014cb2 <rcl_action_take_cancel_response+0x7a>
 8014c3c:	b570      	push	{r4, r5, r6, lr}
 8014c3e:	4604      	mov	r4, r0
 8014c40:	6800      	ldr	r0, [r0, #0]
 8014c42:	b388      	cbz	r0, 8014ca8 <rcl_action_take_cancel_response+0x70>
 8014c44:	460d      	mov	r5, r1
 8014c46:	4616      	mov	r6, r2
 8014c48:	f7fd ff8a 	bl	8012b60 <rcl_client_is_valid>
 8014c4c:	b338      	cbz	r0, 8014c9e <rcl_action_take_cancel_response+0x66>
 8014c4e:	6820      	ldr	r0, [r4, #0]
 8014c50:	3004      	adds	r0, #4
 8014c52:	f7fd ff85 	bl	8012b60 <rcl_client_is_valid>
 8014c56:	b310      	cbz	r0, 8014c9e <rcl_action_take_cancel_response+0x66>
 8014c58:	6820      	ldr	r0, [r4, #0]
 8014c5a:	3008      	adds	r0, #8
 8014c5c:	f7fd ff80 	bl	8012b60 <rcl_client_is_valid>
 8014c60:	b1e8      	cbz	r0, 8014c9e <rcl_action_take_cancel_response+0x66>
 8014c62:	6820      	ldr	r0, [r4, #0]
 8014c64:	300c      	adds	r0, #12
 8014c66:	f7fe fd3d 	bl	80136e4 <rcl_subscription_is_valid>
 8014c6a:	b1c0      	cbz	r0, 8014c9e <rcl_action_take_cancel_response+0x66>
 8014c6c:	6820      	ldr	r0, [r4, #0]
 8014c6e:	3010      	adds	r0, #16
 8014c70:	f7fe fd38 	bl	80136e4 <rcl_subscription_is_valid>
 8014c74:	b198      	cbz	r0, 8014c9e <rcl_action_take_cancel_response+0x66>
 8014c76:	b1d5      	cbz	r5, 8014cae <rcl_action_take_cancel_response+0x76>
 8014c78:	b1ce      	cbz	r6, 8014cae <rcl_action_take_cancel_response+0x76>
 8014c7a:	6820      	ldr	r0, [r4, #0]
 8014c7c:	4632      	mov	r2, r6
 8014c7e:	4629      	mov	r1, r5
 8014c80:	3004      	adds	r0, #4
 8014c82:	f7fd ff25 	bl	8012ad0 <rcl_take_response>
 8014c86:	b148      	cbz	r0, 8014c9c <rcl_action_take_cancel_response+0x64>
 8014c88:	280a      	cmp	r0, #10
 8014c8a:	d007      	beq.n	8014c9c <rcl_action_take_cancel_response+0x64>
 8014c8c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014c90:	f640 0337 	movw	r3, #2103	@ 0x837
 8014c94:	4290      	cmp	r0, r2
 8014c96:	bf0c      	ite	eq
 8014c98:	4618      	moveq	r0, r3
 8014c9a:	2001      	movne	r0, #1
 8014c9c:	bd70      	pop	{r4, r5, r6, pc}
 8014c9e:	f7f8 fb23 	bl	800d2e8 <rcutils_reset_error>
 8014ca2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ca6:	bd70      	pop	{r4, r5, r6, pc}
 8014ca8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014cac:	bd70      	pop	{r4, r5, r6, pc}
 8014cae:	200b      	movs	r0, #11
 8014cb0:	bd70      	pop	{r4, r5, r6, pc}
 8014cb2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014cb6:	4770      	bx	lr

08014cb8 <rcl_action_take_feedback>:
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d038      	beq.n	8014d2e <rcl_action_take_feedback+0x76>
 8014cbc:	b530      	push	{r4, r5, lr}
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	6800      	ldr	r0, [r0, #0]
 8014cc2:	b091      	sub	sp, #68	@ 0x44
 8014cc4:	b378      	cbz	r0, 8014d26 <rcl_action_take_feedback+0x6e>
 8014cc6:	460d      	mov	r5, r1
 8014cc8:	f7fd ff4a 	bl	8012b60 <rcl_client_is_valid>
 8014ccc:	b328      	cbz	r0, 8014d1a <rcl_action_take_feedback+0x62>
 8014cce:	6820      	ldr	r0, [r4, #0]
 8014cd0:	3004      	adds	r0, #4
 8014cd2:	f7fd ff45 	bl	8012b60 <rcl_client_is_valid>
 8014cd6:	b300      	cbz	r0, 8014d1a <rcl_action_take_feedback+0x62>
 8014cd8:	6820      	ldr	r0, [r4, #0]
 8014cda:	3008      	adds	r0, #8
 8014cdc:	f7fd ff40 	bl	8012b60 <rcl_client_is_valid>
 8014ce0:	b1d8      	cbz	r0, 8014d1a <rcl_action_take_feedback+0x62>
 8014ce2:	6820      	ldr	r0, [r4, #0]
 8014ce4:	300c      	adds	r0, #12
 8014ce6:	f7fe fcfd 	bl	80136e4 <rcl_subscription_is_valid>
 8014cea:	b1b0      	cbz	r0, 8014d1a <rcl_action_take_feedback+0x62>
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	3010      	adds	r0, #16
 8014cf0:	f7fe fcf8 	bl	80136e4 <rcl_subscription_is_valid>
 8014cf4:	b188      	cbz	r0, 8014d1a <rcl_action_take_feedback+0x62>
 8014cf6:	b1ed      	cbz	r5, 8014d34 <rcl_action_take_feedback+0x7c>
 8014cf8:	6820      	ldr	r0, [r4, #0]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	466a      	mov	r2, sp
 8014cfe:	4629      	mov	r1, r5
 8014d00:	300c      	adds	r0, #12
 8014d02:	f7fe fc91 	bl	8013628 <rcl_take>
 8014d06:	b160      	cbz	r0, 8014d22 <rcl_action_take_feedback+0x6a>
 8014d08:	f240 1391 	movw	r3, #401	@ 0x191
 8014d0c:	4298      	cmp	r0, r3
 8014d0e:	d014      	beq.n	8014d3a <rcl_action_take_feedback+0x82>
 8014d10:	280a      	cmp	r0, #10
 8014d12:	bf18      	it	ne
 8014d14:	2001      	movne	r0, #1
 8014d16:	b011      	add	sp, #68	@ 0x44
 8014d18:	bd30      	pop	{r4, r5, pc}
 8014d1a:	f7f8 fae5 	bl	800d2e8 <rcutils_reset_error>
 8014d1e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d22:	b011      	add	sp, #68	@ 0x44
 8014d24:	bd30      	pop	{r4, r5, pc}
 8014d26:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d2a:	b011      	add	sp, #68	@ 0x44
 8014d2c:	bd30      	pop	{r4, r5, pc}
 8014d2e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014d32:	4770      	bx	lr
 8014d34:	200b      	movs	r0, #11
 8014d36:	b011      	add	sp, #68	@ 0x44
 8014d38:	bd30      	pop	{r4, r5, pc}
 8014d3a:	f640 0037 	movw	r0, #2103	@ 0x837
 8014d3e:	e7f0      	b.n	8014d22 <rcl_action_take_feedback+0x6a>

08014d40 <rcl_action_wait_set_add_action_client>:
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d048      	beq.n	8014dd6 <rcl_action_wait_set_add_action_client+0x96>
 8014d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d46:	460c      	mov	r4, r1
 8014d48:	2900      	cmp	r1, #0
 8014d4a:	d03c      	beq.n	8014dc6 <rcl_action_wait_set_add_action_client+0x86>
 8014d4c:	4605      	mov	r5, r0
 8014d4e:	6808      	ldr	r0, [r1, #0]
 8014d50:	2800      	cmp	r0, #0
 8014d52:	d038      	beq.n	8014dc6 <rcl_action_wait_set_add_action_client+0x86>
 8014d54:	4617      	mov	r7, r2
 8014d56:	461e      	mov	r6, r3
 8014d58:	f7fd ff02 	bl	8012b60 <rcl_client_is_valid>
 8014d5c:	b3b0      	cbz	r0, 8014dcc <rcl_action_wait_set_add_action_client+0x8c>
 8014d5e:	6820      	ldr	r0, [r4, #0]
 8014d60:	3004      	adds	r0, #4
 8014d62:	f7fd fefd 	bl	8012b60 <rcl_client_is_valid>
 8014d66:	b388      	cbz	r0, 8014dcc <rcl_action_wait_set_add_action_client+0x8c>
 8014d68:	6820      	ldr	r0, [r4, #0]
 8014d6a:	3008      	adds	r0, #8
 8014d6c:	f7fd fef8 	bl	8012b60 <rcl_client_is_valid>
 8014d70:	b360      	cbz	r0, 8014dcc <rcl_action_wait_set_add_action_client+0x8c>
 8014d72:	6820      	ldr	r0, [r4, #0]
 8014d74:	300c      	adds	r0, #12
 8014d76:	f7fe fcb5 	bl	80136e4 <rcl_subscription_is_valid>
 8014d7a:	b338      	cbz	r0, 8014dcc <rcl_action_wait_set_add_action_client+0x8c>
 8014d7c:	6820      	ldr	r0, [r4, #0]
 8014d7e:	3010      	adds	r0, #16
 8014d80:	f7fe fcb0 	bl	80136e4 <rcl_subscription_is_valid>
 8014d84:	b310      	cbz	r0, 8014dcc <rcl_action_wait_set_add_action_client+0x8c>
 8014d86:	6821      	ldr	r1, [r4, #0]
 8014d88:	4628      	mov	r0, r5
 8014d8a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014d8e:	f7ff fccd 	bl	801472c <rcl_wait_set_add_client>
 8014d92:	b9b8      	cbnz	r0, 8014dc4 <rcl_action_wait_set_add_action_client+0x84>
 8014d94:	6821      	ldr	r1, [r4, #0]
 8014d96:	4628      	mov	r0, r5
 8014d98:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014d9c:	3104      	adds	r1, #4
 8014d9e:	f7ff fcc5 	bl	801472c <rcl_wait_set_add_client>
 8014da2:	b978      	cbnz	r0, 8014dc4 <rcl_action_wait_set_add_action_client+0x84>
 8014da4:	6821      	ldr	r1, [r4, #0]
 8014da6:	4628      	mov	r0, r5
 8014da8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014dac:	3108      	adds	r1, #8
 8014dae:	f7ff fcbd 	bl	801472c <rcl_wait_set_add_client>
 8014db2:	b938      	cbnz	r0, 8014dc4 <rcl_action_wait_set_add_action_client+0x84>
 8014db4:	6821      	ldr	r1, [r4, #0]
 8014db6:	4628      	mov	r0, r5
 8014db8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014dbc:	310c      	adds	r1, #12
 8014dbe:	f7ff f96d 	bl	801409c <rcl_wait_set_add_subscription>
 8014dc2:	b158      	cbz	r0, 8014ddc <rcl_action_wait_set_add_action_client+0x9c>
 8014dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dc6:	f640 0036 	movw	r0, #2102	@ 0x836
 8014dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dcc:	f7f8 fa8c 	bl	800d2e8 <rcutils_reset_error>
 8014dd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014dda:	4770      	bx	lr
 8014ddc:	6821      	ldr	r1, [r4, #0]
 8014dde:	4628      	mov	r0, r5
 8014de0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014de4:	3110      	adds	r1, #16
 8014de6:	f7ff f959 	bl	801409c <rcl_wait_set_add_subscription>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	d1ea      	bne.n	8014dc4 <rcl_action_wait_set_add_action_client+0x84>
 8014dee:	b11f      	cbz	r7, 8014df8 <rcl_action_wait_set_add_action_client+0xb8>
 8014df0:	6823      	ldr	r3, [r4, #0]
 8014df2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014df6:	603b      	str	r3, [r7, #0]
 8014df8:	2e00      	cmp	r6, #0
 8014dfa:	d0e3      	beq.n	8014dc4 <rcl_action_wait_set_add_action_client+0x84>
 8014dfc:	6823      	ldr	r3, [r4, #0]
 8014dfe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014e02:	6033      	str	r3, [r6, #0]
 8014e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e06:	bf00      	nop

08014e08 <rcl_action_client_wait_set_get_entities_ready>:
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	f000 808d 	beq.w	8014f28 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8014e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e12:	460c      	mov	r4, r1
 8014e14:	2900      	cmp	r1, #0
 8014e16:	d077      	beq.n	8014f08 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014e18:	4605      	mov	r5, r0
 8014e1a:	6808      	ldr	r0, [r1, #0]
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d073      	beq.n	8014f08 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014e20:	4616      	mov	r6, r2
 8014e22:	461f      	mov	r7, r3
 8014e24:	f7fd fe9c 	bl	8012b60 <rcl_client_is_valid>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d071      	beq.n	8014f10 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014e2c:	6820      	ldr	r0, [r4, #0]
 8014e2e:	3004      	adds	r0, #4
 8014e30:	f7fd fe96 	bl	8012b60 <rcl_client_is_valid>
 8014e34:	2800      	cmp	r0, #0
 8014e36:	d06b      	beq.n	8014f10 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014e38:	6820      	ldr	r0, [r4, #0]
 8014e3a:	3008      	adds	r0, #8
 8014e3c:	f7fd fe90 	bl	8012b60 <rcl_client_is_valid>
 8014e40:	2800      	cmp	r0, #0
 8014e42:	d065      	beq.n	8014f10 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014e44:	6820      	ldr	r0, [r4, #0]
 8014e46:	300c      	adds	r0, #12
 8014e48:	f7fe fc4c 	bl	80136e4 <rcl_subscription_is_valid>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	d05f      	beq.n	8014f10 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014e50:	6820      	ldr	r0, [r4, #0]
 8014e52:	3010      	adds	r0, #16
 8014e54:	f7fe fc46 	bl	80136e4 <rcl_subscription_is_valid>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d059      	beq.n	8014f10 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014e5c:	2e00      	cmp	r6, #0
 8014e5e:	d060      	beq.n	8014f22 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014e60:	2f00      	cmp	r7, #0
 8014e62:	d05e      	beq.n	8014f22 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014e64:	9b06      	ldr	r3, [sp, #24]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d05b      	beq.n	8014f22 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014e6a:	9b07      	ldr	r3, [sp, #28]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d058      	beq.n	8014f22 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014e70:	9b08      	ldr	r3, [sp, #32]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d055      	beq.n	8014f22 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014e76:	6823      	ldr	r3, [r4, #0]
 8014e78:	686a      	ldr	r2, [r5, #4]
 8014e7a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014e7e:	428a      	cmp	r2, r1
 8014e80:	d94c      	bls.n	8014f1c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014e82:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014e86:	4282      	cmp	r2, r0
 8014e88:	d948      	bls.n	8014f1c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014e8a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014e8e:	69ea      	ldr	r2, [r5, #28]
 8014e90:	42a2      	cmp	r2, r4
 8014e92:	d943      	bls.n	8014f1c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014e94:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014e98:	4562      	cmp	r2, ip
 8014e9a:	d93f      	bls.n	8014f1c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014e9c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014ea0:	4572      	cmp	r2, lr
 8014ea2:	d93b      	bls.n	8014f1c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014ea4:	69aa      	ldr	r2, [r5, #24]
 8014ea6:	682d      	ldr	r5, [r5, #0]
 8014ea8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014eac:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014eb0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8014eb4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014eb8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014ebc:	f103 0c0c 	add.w	ip, r3, #12
 8014ec0:	eba5 050c 	sub.w	r5, r5, ip
 8014ec4:	fab5 f585 	clz	r5, r5
 8014ec8:	096d      	lsrs	r5, r5, #5
 8014eca:	7035      	strb	r5, [r6, #0]
 8014ecc:	f103 0510 	add.w	r5, r3, #16
 8014ed0:	1b64      	subs	r4, r4, r5
 8014ed2:	fab4 f484 	clz	r4, r4
 8014ed6:	0964      	lsrs	r4, r4, #5
 8014ed8:	703c      	strb	r4, [r7, #0]
 8014eda:	eba3 0008 	sub.w	r0, r3, r8
 8014ede:	1d1c      	adds	r4, r3, #4
 8014ee0:	3308      	adds	r3, #8
 8014ee2:	1ad3      	subs	r3, r2, r3
 8014ee4:	fab0 f080 	clz	r0, r0
 8014ee8:	9a06      	ldr	r2, [sp, #24]
 8014eea:	0940      	lsrs	r0, r0, #5
 8014eec:	1b09      	subs	r1, r1, r4
 8014eee:	7010      	strb	r0, [r2, #0]
 8014ef0:	fab1 f181 	clz	r1, r1
 8014ef4:	9a07      	ldr	r2, [sp, #28]
 8014ef6:	0949      	lsrs	r1, r1, #5
 8014ef8:	7011      	strb	r1, [r2, #0]
 8014efa:	fab3 f383 	clz	r3, r3
 8014efe:	9a08      	ldr	r2, [sp, #32]
 8014f00:	095b      	lsrs	r3, r3, #5
 8014f02:	2000      	movs	r0, #0
 8014f04:	7013      	strb	r3, [r2, #0]
 8014f06:	e001      	b.n	8014f0c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014f08:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f10:	f7f8 f9ea 	bl	800d2e8 <rcutils_reset_error>
 8014f14:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1c:	2001      	movs	r0, #1
 8014f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f22:	200b      	movs	r0, #11
 8014f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop

08014f30 <rcl_action_take_goal_request>:
 8014f30:	2800      	cmp	r0, #0
 8014f32:	d039      	beq.n	8014fa8 <rcl_action_take_goal_request+0x78>
 8014f34:	b570      	push	{r4, r5, r6, lr}
 8014f36:	4604      	mov	r4, r0
 8014f38:	6800      	ldr	r0, [r0, #0]
 8014f3a:	b380      	cbz	r0, 8014f9e <rcl_action_take_goal_request+0x6e>
 8014f3c:	460d      	mov	r5, r1
 8014f3e:	4616      	mov	r6, r2
 8014f40:	f7fe fb68 	bl	8013614 <rcl_service_is_valid>
 8014f44:	b330      	cbz	r0, 8014f94 <rcl_action_take_goal_request+0x64>
 8014f46:	6820      	ldr	r0, [r4, #0]
 8014f48:	3004      	adds	r0, #4
 8014f4a:	f7fe fb63 	bl	8013614 <rcl_service_is_valid>
 8014f4e:	b308      	cbz	r0, 8014f94 <rcl_action_take_goal_request+0x64>
 8014f50:	6820      	ldr	r0, [r4, #0]
 8014f52:	3008      	adds	r0, #8
 8014f54:	f7fe fb5e 	bl	8013614 <rcl_service_is_valid>
 8014f58:	b1e0      	cbz	r0, 8014f94 <rcl_action_take_goal_request+0x64>
 8014f5a:	6820      	ldr	r0, [r4, #0]
 8014f5c:	300c      	adds	r0, #12
 8014f5e:	f7f7 fa17 	bl	800c390 <rcl_publisher_is_valid>
 8014f62:	b1b8      	cbz	r0, 8014f94 <rcl_action_take_goal_request+0x64>
 8014f64:	6820      	ldr	r0, [r4, #0]
 8014f66:	3010      	adds	r0, #16
 8014f68:	f7f7 fa12 	bl	800c390 <rcl_publisher_is_valid>
 8014f6c:	b190      	cbz	r0, 8014f94 <rcl_action_take_goal_request+0x64>
 8014f6e:	b1cd      	cbz	r5, 8014fa4 <rcl_action_take_goal_request+0x74>
 8014f70:	b1c6      	cbz	r6, 8014fa4 <rcl_action_take_goal_request+0x74>
 8014f72:	6820      	ldr	r0, [r4, #0]
 8014f74:	4632      	mov	r2, r6
 8014f76:	4629      	mov	r1, r5
 8014f78:	f7fe faf4 	bl	8013564 <rcl_take_request>
 8014f7c:	b148      	cbz	r0, 8014f92 <rcl_action_take_goal_request+0x62>
 8014f7e:	280a      	cmp	r0, #10
 8014f80:	d007      	beq.n	8014f92 <rcl_action_take_goal_request+0x62>
 8014f82:	f240 2259 	movw	r2, #601	@ 0x259
 8014f86:	f640 0399 	movw	r3, #2201	@ 0x899
 8014f8a:	4290      	cmp	r0, r2
 8014f8c:	bf0c      	ite	eq
 8014f8e:	4618      	moveq	r0, r3
 8014f90:	2001      	movne	r0, #1
 8014f92:	bd70      	pop	{r4, r5, r6, pc}
 8014f94:	f7f8 f9a8 	bl	800d2e8 <rcutils_reset_error>
 8014f98:	f640 0098 	movw	r0, #2200	@ 0x898
 8014f9c:	bd70      	pop	{r4, r5, r6, pc}
 8014f9e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014fa2:	bd70      	pop	{r4, r5, r6, pc}
 8014fa4:	200b      	movs	r0, #11
 8014fa6:	bd70      	pop	{r4, r5, r6, pc}
 8014fa8:	f640 0098 	movw	r0, #2200	@ 0x898
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop

08014fb0 <rcl_action_send_goal_response>:
 8014fb0:	b390      	cbz	r0, 8015018 <rcl_action_send_goal_response+0x68>
 8014fb2:	b570      	push	{r4, r5, r6, lr}
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	6800      	ldr	r0, [r0, #0]
 8014fb8:	b348      	cbz	r0, 801500e <rcl_action_send_goal_response+0x5e>
 8014fba:	460d      	mov	r5, r1
 8014fbc:	4616      	mov	r6, r2
 8014fbe:	f7fe fb29 	bl	8013614 <rcl_service_is_valid>
 8014fc2:	b1f8      	cbz	r0, 8015004 <rcl_action_send_goal_response+0x54>
 8014fc4:	6820      	ldr	r0, [r4, #0]
 8014fc6:	3004      	adds	r0, #4
 8014fc8:	f7fe fb24 	bl	8013614 <rcl_service_is_valid>
 8014fcc:	b1d0      	cbz	r0, 8015004 <rcl_action_send_goal_response+0x54>
 8014fce:	6820      	ldr	r0, [r4, #0]
 8014fd0:	3008      	adds	r0, #8
 8014fd2:	f7fe fb1f 	bl	8013614 <rcl_service_is_valid>
 8014fd6:	b1a8      	cbz	r0, 8015004 <rcl_action_send_goal_response+0x54>
 8014fd8:	6820      	ldr	r0, [r4, #0]
 8014fda:	300c      	adds	r0, #12
 8014fdc:	f7f7 f9d8 	bl	800c390 <rcl_publisher_is_valid>
 8014fe0:	b180      	cbz	r0, 8015004 <rcl_action_send_goal_response+0x54>
 8014fe2:	6820      	ldr	r0, [r4, #0]
 8014fe4:	3010      	adds	r0, #16
 8014fe6:	f7f7 f9d3 	bl	800c390 <rcl_publisher_is_valid>
 8014fea:	b158      	cbz	r0, 8015004 <rcl_action_send_goal_response+0x54>
 8014fec:	b195      	cbz	r5, 8015014 <rcl_action_send_goal_response+0x64>
 8014fee:	b18e      	cbz	r6, 8015014 <rcl_action_send_goal_response+0x64>
 8014ff0:	6820      	ldr	r0, [r4, #0]
 8014ff2:	4632      	mov	r2, r6
 8014ff4:	4629      	mov	r1, r5
 8014ff6:	f7fe faf5 	bl	80135e4 <rcl_send_response>
 8014ffa:	b110      	cbz	r0, 8015002 <rcl_action_send_goal_response+0x52>
 8014ffc:	2802      	cmp	r0, #2
 8014ffe:	bf18      	it	ne
 8015000:	2001      	movne	r0, #1
 8015002:	bd70      	pop	{r4, r5, r6, pc}
 8015004:	f7f8 f970 	bl	800d2e8 <rcutils_reset_error>
 8015008:	f640 0098 	movw	r0, #2200	@ 0x898
 801500c:	bd70      	pop	{r4, r5, r6, pc}
 801500e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015012:	bd70      	pop	{r4, r5, r6, pc}
 8015014:	200b      	movs	r0, #11
 8015016:	bd70      	pop	{r4, r5, r6, pc}
 8015018:	f640 0098 	movw	r0, #2200	@ 0x898
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop

08015020 <rcl_action_take_result_request>:
 8015020:	2800      	cmp	r0, #0
 8015022:	d03a      	beq.n	801509a <rcl_action_take_result_request+0x7a>
 8015024:	b570      	push	{r4, r5, r6, lr}
 8015026:	4604      	mov	r4, r0
 8015028:	6800      	ldr	r0, [r0, #0]
 801502a:	b388      	cbz	r0, 8015090 <rcl_action_take_result_request+0x70>
 801502c:	460d      	mov	r5, r1
 801502e:	4616      	mov	r6, r2
 8015030:	f7fe faf0 	bl	8013614 <rcl_service_is_valid>
 8015034:	b338      	cbz	r0, 8015086 <rcl_action_take_result_request+0x66>
 8015036:	6820      	ldr	r0, [r4, #0]
 8015038:	3004      	adds	r0, #4
 801503a:	f7fe faeb 	bl	8013614 <rcl_service_is_valid>
 801503e:	b310      	cbz	r0, 8015086 <rcl_action_take_result_request+0x66>
 8015040:	6820      	ldr	r0, [r4, #0]
 8015042:	3008      	adds	r0, #8
 8015044:	f7fe fae6 	bl	8013614 <rcl_service_is_valid>
 8015048:	b1e8      	cbz	r0, 8015086 <rcl_action_take_result_request+0x66>
 801504a:	6820      	ldr	r0, [r4, #0]
 801504c:	300c      	adds	r0, #12
 801504e:	f7f7 f99f 	bl	800c390 <rcl_publisher_is_valid>
 8015052:	b1c0      	cbz	r0, 8015086 <rcl_action_take_result_request+0x66>
 8015054:	6820      	ldr	r0, [r4, #0]
 8015056:	3010      	adds	r0, #16
 8015058:	f7f7 f99a 	bl	800c390 <rcl_publisher_is_valid>
 801505c:	b198      	cbz	r0, 8015086 <rcl_action_take_result_request+0x66>
 801505e:	b1d5      	cbz	r5, 8015096 <rcl_action_take_result_request+0x76>
 8015060:	b1ce      	cbz	r6, 8015096 <rcl_action_take_result_request+0x76>
 8015062:	6820      	ldr	r0, [r4, #0]
 8015064:	4632      	mov	r2, r6
 8015066:	4629      	mov	r1, r5
 8015068:	3008      	adds	r0, #8
 801506a:	f7fe fa7b 	bl	8013564 <rcl_take_request>
 801506e:	b148      	cbz	r0, 8015084 <rcl_action_take_result_request+0x64>
 8015070:	280a      	cmp	r0, #10
 8015072:	d007      	beq.n	8015084 <rcl_action_take_result_request+0x64>
 8015074:	f240 2259 	movw	r2, #601	@ 0x259
 8015078:	f640 0399 	movw	r3, #2201	@ 0x899
 801507c:	4290      	cmp	r0, r2
 801507e:	bf0c      	ite	eq
 8015080:	4618      	moveq	r0, r3
 8015082:	2001      	movne	r0, #1
 8015084:	bd70      	pop	{r4, r5, r6, pc}
 8015086:	f7f8 f92f 	bl	800d2e8 <rcutils_reset_error>
 801508a:	f640 0098 	movw	r0, #2200	@ 0x898
 801508e:	bd70      	pop	{r4, r5, r6, pc}
 8015090:	f640 0098 	movw	r0, #2200	@ 0x898
 8015094:	bd70      	pop	{r4, r5, r6, pc}
 8015096:	200b      	movs	r0, #11
 8015098:	bd70      	pop	{r4, r5, r6, pc}
 801509a:	f640 0098 	movw	r0, #2200	@ 0x898
 801509e:	4770      	bx	lr

080150a0 <rcl_action_take_cancel_request>:
 80150a0:	2800      	cmp	r0, #0
 80150a2:	d03a      	beq.n	801511a <rcl_action_take_cancel_request+0x7a>
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	4604      	mov	r4, r0
 80150a8:	6800      	ldr	r0, [r0, #0]
 80150aa:	b388      	cbz	r0, 8015110 <rcl_action_take_cancel_request+0x70>
 80150ac:	460d      	mov	r5, r1
 80150ae:	4616      	mov	r6, r2
 80150b0:	f7fe fab0 	bl	8013614 <rcl_service_is_valid>
 80150b4:	b338      	cbz	r0, 8015106 <rcl_action_take_cancel_request+0x66>
 80150b6:	6820      	ldr	r0, [r4, #0]
 80150b8:	3004      	adds	r0, #4
 80150ba:	f7fe faab 	bl	8013614 <rcl_service_is_valid>
 80150be:	b310      	cbz	r0, 8015106 <rcl_action_take_cancel_request+0x66>
 80150c0:	6820      	ldr	r0, [r4, #0]
 80150c2:	3008      	adds	r0, #8
 80150c4:	f7fe faa6 	bl	8013614 <rcl_service_is_valid>
 80150c8:	b1e8      	cbz	r0, 8015106 <rcl_action_take_cancel_request+0x66>
 80150ca:	6820      	ldr	r0, [r4, #0]
 80150cc:	300c      	adds	r0, #12
 80150ce:	f7f7 f95f 	bl	800c390 <rcl_publisher_is_valid>
 80150d2:	b1c0      	cbz	r0, 8015106 <rcl_action_take_cancel_request+0x66>
 80150d4:	6820      	ldr	r0, [r4, #0]
 80150d6:	3010      	adds	r0, #16
 80150d8:	f7f7 f95a 	bl	800c390 <rcl_publisher_is_valid>
 80150dc:	b198      	cbz	r0, 8015106 <rcl_action_take_cancel_request+0x66>
 80150de:	b1d5      	cbz	r5, 8015116 <rcl_action_take_cancel_request+0x76>
 80150e0:	b1ce      	cbz	r6, 8015116 <rcl_action_take_cancel_request+0x76>
 80150e2:	6820      	ldr	r0, [r4, #0]
 80150e4:	4632      	mov	r2, r6
 80150e6:	4629      	mov	r1, r5
 80150e8:	3004      	adds	r0, #4
 80150ea:	f7fe fa3b 	bl	8013564 <rcl_take_request>
 80150ee:	b148      	cbz	r0, 8015104 <rcl_action_take_cancel_request+0x64>
 80150f0:	280a      	cmp	r0, #10
 80150f2:	d007      	beq.n	8015104 <rcl_action_take_cancel_request+0x64>
 80150f4:	f240 2259 	movw	r2, #601	@ 0x259
 80150f8:	f640 0399 	movw	r3, #2201	@ 0x899
 80150fc:	4290      	cmp	r0, r2
 80150fe:	bf0c      	ite	eq
 8015100:	4618      	moveq	r0, r3
 8015102:	2001      	movne	r0, #1
 8015104:	bd70      	pop	{r4, r5, r6, pc}
 8015106:	f7f8 f8ef 	bl	800d2e8 <rcutils_reset_error>
 801510a:	f640 0098 	movw	r0, #2200	@ 0x898
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	f640 0098 	movw	r0, #2200	@ 0x898
 8015114:	bd70      	pop	{r4, r5, r6, pc}
 8015116:	200b      	movs	r0, #11
 8015118:	bd70      	pop	{r4, r5, r6, pc}
 801511a:	f640 0098 	movw	r0, #2200	@ 0x898
 801511e:	4770      	bx	lr

08015120 <rcl_action_send_cancel_response>:
 8015120:	b398      	cbz	r0, 801518a <rcl_action_send_cancel_response+0x6a>
 8015122:	b570      	push	{r4, r5, r6, lr}
 8015124:	4604      	mov	r4, r0
 8015126:	6800      	ldr	r0, [r0, #0]
 8015128:	b350      	cbz	r0, 8015180 <rcl_action_send_cancel_response+0x60>
 801512a:	460d      	mov	r5, r1
 801512c:	4616      	mov	r6, r2
 801512e:	f7fe fa71 	bl	8013614 <rcl_service_is_valid>
 8015132:	b300      	cbz	r0, 8015176 <rcl_action_send_cancel_response+0x56>
 8015134:	6820      	ldr	r0, [r4, #0]
 8015136:	3004      	adds	r0, #4
 8015138:	f7fe fa6c 	bl	8013614 <rcl_service_is_valid>
 801513c:	b1d8      	cbz	r0, 8015176 <rcl_action_send_cancel_response+0x56>
 801513e:	6820      	ldr	r0, [r4, #0]
 8015140:	3008      	adds	r0, #8
 8015142:	f7fe fa67 	bl	8013614 <rcl_service_is_valid>
 8015146:	b1b0      	cbz	r0, 8015176 <rcl_action_send_cancel_response+0x56>
 8015148:	6820      	ldr	r0, [r4, #0]
 801514a:	300c      	adds	r0, #12
 801514c:	f7f7 f920 	bl	800c390 <rcl_publisher_is_valid>
 8015150:	b188      	cbz	r0, 8015176 <rcl_action_send_cancel_response+0x56>
 8015152:	6820      	ldr	r0, [r4, #0]
 8015154:	3010      	adds	r0, #16
 8015156:	f7f7 f91b 	bl	800c390 <rcl_publisher_is_valid>
 801515a:	b160      	cbz	r0, 8015176 <rcl_action_send_cancel_response+0x56>
 801515c:	b19d      	cbz	r5, 8015186 <rcl_action_send_cancel_response+0x66>
 801515e:	b196      	cbz	r6, 8015186 <rcl_action_send_cancel_response+0x66>
 8015160:	6820      	ldr	r0, [r4, #0]
 8015162:	4632      	mov	r2, r6
 8015164:	4629      	mov	r1, r5
 8015166:	3004      	adds	r0, #4
 8015168:	f7fe fa3c 	bl	80135e4 <rcl_send_response>
 801516c:	b110      	cbz	r0, 8015174 <rcl_action_send_cancel_response+0x54>
 801516e:	2802      	cmp	r0, #2
 8015170:	bf18      	it	ne
 8015172:	2001      	movne	r0, #1
 8015174:	bd70      	pop	{r4, r5, r6, pc}
 8015176:	f7f8 f8b7 	bl	800d2e8 <rcutils_reset_error>
 801517a:	f640 0098 	movw	r0, #2200	@ 0x898
 801517e:	bd70      	pop	{r4, r5, r6, pc}
 8015180:	f640 0098 	movw	r0, #2200	@ 0x898
 8015184:	bd70      	pop	{r4, r5, r6, pc}
 8015186:	200b      	movs	r0, #11
 8015188:	bd70      	pop	{r4, r5, r6, pc}
 801518a:	f640 0098 	movw	r0, #2200	@ 0x898
 801518e:	4770      	bx	lr

08015190 <rcl_action_wait_set_add_action_server>:
 8015190:	2800      	cmp	r0, #0
 8015192:	d04d      	beq.n	8015230 <rcl_action_wait_set_add_action_server+0xa0>
 8015194:	b570      	push	{r4, r5, r6, lr}
 8015196:	460c      	mov	r4, r1
 8015198:	b159      	cbz	r1, 80151b2 <rcl_action_wait_set_add_action_server+0x22>
 801519a:	4605      	mov	r5, r0
 801519c:	6808      	ldr	r0, [r1, #0]
 801519e:	b140      	cbz	r0, 80151b2 <rcl_action_wait_set_add_action_server+0x22>
 80151a0:	4616      	mov	r6, r2
 80151a2:	f7fe fa37 	bl	8013614 <rcl_service_is_valid>
 80151a6:	b120      	cbz	r0, 80151b2 <rcl_action_wait_set_add_action_server+0x22>
 80151a8:	6820      	ldr	r0, [r4, #0]
 80151aa:	3004      	adds	r0, #4
 80151ac:	f7fe fa32 	bl	8013614 <rcl_service_is_valid>
 80151b0:	b910      	cbnz	r0, 80151b8 <rcl_action_wait_set_add_action_server+0x28>
 80151b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80151b6:	bd70      	pop	{r4, r5, r6, pc}
 80151b8:	6820      	ldr	r0, [r4, #0]
 80151ba:	3008      	adds	r0, #8
 80151bc:	f7fe fa2a 	bl	8013614 <rcl_service_is_valid>
 80151c0:	2800      	cmp	r0, #0
 80151c2:	d0f6      	beq.n	80151b2 <rcl_action_wait_set_add_action_server+0x22>
 80151c4:	6820      	ldr	r0, [r4, #0]
 80151c6:	300c      	adds	r0, #12
 80151c8:	f7f7 f8fa 	bl	800c3c0 <rcl_publisher_is_valid_except_context>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	d0f0      	beq.n	80151b2 <rcl_action_wait_set_add_action_server+0x22>
 80151d0:	6820      	ldr	r0, [r4, #0]
 80151d2:	3010      	adds	r0, #16
 80151d4:	f7f7 f8f4 	bl	800c3c0 <rcl_publisher_is_valid_except_context>
 80151d8:	2800      	cmp	r0, #0
 80151da:	d0ea      	beq.n	80151b2 <rcl_action_wait_set_add_action_server+0x22>
 80151dc:	6821      	ldr	r1, [r4, #0]
 80151de:	4628      	mov	r0, r5
 80151e0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80151e4:	f7ff face 	bl	8014784 <rcl_wait_set_add_service>
 80151e8:	2800      	cmp	r0, #0
 80151ea:	d1e4      	bne.n	80151b6 <rcl_action_wait_set_add_action_server+0x26>
 80151ec:	6821      	ldr	r1, [r4, #0]
 80151ee:	4628      	mov	r0, r5
 80151f0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80151f4:	3104      	adds	r1, #4
 80151f6:	f7ff fac5 	bl	8014784 <rcl_wait_set_add_service>
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d1db      	bne.n	80151b6 <rcl_action_wait_set_add_action_server+0x26>
 80151fe:	6821      	ldr	r1, [r4, #0]
 8015200:	4628      	mov	r0, r5
 8015202:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015206:	3108      	adds	r1, #8
 8015208:	f7ff fabc 	bl	8014784 <rcl_wait_set_add_service>
 801520c:	2800      	cmp	r0, #0
 801520e:	d1d2      	bne.n	80151b6 <rcl_action_wait_set_add_action_server+0x26>
 8015210:	6821      	ldr	r1, [r4, #0]
 8015212:	4628      	mov	r0, r5
 8015214:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015218:	3114      	adds	r1, #20
 801521a:	f7ff fa57 	bl	80146cc <rcl_wait_set_add_timer>
 801521e:	2800      	cmp	r0, #0
 8015220:	d1c9      	bne.n	80151b6 <rcl_action_wait_set_add_action_server+0x26>
 8015222:	2e00      	cmp	r6, #0
 8015224:	d0c7      	beq.n	80151b6 <rcl_action_wait_set_add_action_server+0x26>
 8015226:	6823      	ldr	r3, [r4, #0]
 8015228:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801522c:	6033      	str	r3, [r6, #0]
 801522e:	bd70      	pop	{r4, r5, r6, pc}
 8015230:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015234:	4770      	bx	lr
 8015236:	bf00      	nop

08015238 <rcl_action_server_wait_set_get_entities_ready>:
 8015238:	2800      	cmp	r0, #0
 801523a:	d05a      	beq.n	80152f2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523e:	460c      	mov	r4, r1
 8015240:	b161      	cbz	r1, 801525c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015242:	4605      	mov	r5, r0
 8015244:	6808      	ldr	r0, [r1, #0]
 8015246:	b148      	cbz	r0, 801525c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015248:	4616      	mov	r6, r2
 801524a:	461f      	mov	r7, r3
 801524c:	f7fe f9e2 	bl	8013614 <rcl_service_is_valid>
 8015250:	b120      	cbz	r0, 801525c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015252:	6820      	ldr	r0, [r4, #0]
 8015254:	3004      	adds	r0, #4
 8015256:	f7fe f9dd 	bl	8013614 <rcl_service_is_valid>
 801525a:	b910      	cbnz	r0, 8015262 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801525c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015262:	6820      	ldr	r0, [r4, #0]
 8015264:	3008      	adds	r0, #8
 8015266:	f7fe f9d5 	bl	8013614 <rcl_service_is_valid>
 801526a:	2800      	cmp	r0, #0
 801526c:	d0f6      	beq.n	801525c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801526e:	6820      	ldr	r0, [r4, #0]
 8015270:	300c      	adds	r0, #12
 8015272:	f7f7 f8a5 	bl	800c3c0 <rcl_publisher_is_valid_except_context>
 8015276:	2800      	cmp	r0, #0
 8015278:	d0f0      	beq.n	801525c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801527a:	6820      	ldr	r0, [r4, #0]
 801527c:	3010      	adds	r0, #16
 801527e:	f7f7 f89f 	bl	800c3c0 <rcl_publisher_is_valid_except_context>
 8015282:	2800      	cmp	r0, #0
 8015284:	d0ea      	beq.n	801525c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015286:	b3be      	cbz	r6, 80152f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015288:	b3b7      	cbz	r7, 80152f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801528a:	9b06      	ldr	r3, [sp, #24]
 801528c:	b3a3      	cbz	r3, 80152f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801528e:	9b07      	ldr	r3, [sp, #28]
 8015290:	b393      	cbz	r3, 80152f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015292:	6821      	ldr	r1, [r4, #0]
 8015294:	692a      	ldr	r2, [r5, #16]
 8015296:	6a2c      	ldr	r4, [r5, #32]
 8015298:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801529c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80152a0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80152a4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80152a8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80152ac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80152b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80152b4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80152b8:	1a64      	subs	r4, r4, r1
 80152ba:	fab4 f484 	clz	r4, r4
 80152be:	0964      	lsrs	r4, r4, #5
 80152c0:	7034      	strb	r4, [r6, #0]
 80152c2:	1d0c      	adds	r4, r1, #4
 80152c4:	1b1b      	subs	r3, r3, r4
 80152c6:	fab3 f383 	clz	r3, r3
 80152ca:	095b      	lsrs	r3, r3, #5
 80152cc:	f101 0408 	add.w	r4, r1, #8
 80152d0:	703b      	strb	r3, [r7, #0]
 80152d2:	f101 0314 	add.w	r3, r1, #20
 80152d6:	1b01      	subs	r1, r0, r4
 80152d8:	1ad3      	subs	r3, r2, r3
 80152da:	fab1 f181 	clz	r1, r1
 80152de:	9a06      	ldr	r2, [sp, #24]
 80152e0:	0949      	lsrs	r1, r1, #5
 80152e2:	7011      	strb	r1, [r2, #0]
 80152e4:	fab3 f383 	clz	r3, r3
 80152e8:	9a07      	ldr	r2, [sp, #28]
 80152ea:	095b      	lsrs	r3, r3, #5
 80152ec:	2000      	movs	r0, #0
 80152ee:	7013      	strb	r3, [r2, #0]
 80152f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80152f6:	4770      	bx	lr
 80152f8:	200b      	movs	r0, #11
 80152fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080152fc <_execute_event_handler>:
 80152fc:	2002      	movs	r0, #2
 80152fe:	4770      	bx	lr

08015300 <_cancel_goal_event_handler>:
 8015300:	2003      	movs	r0, #3
 8015302:	4770      	bx	lr

08015304 <_succeed_event_handler>:
 8015304:	2004      	movs	r0, #4
 8015306:	4770      	bx	lr

08015308 <_abort_event_handler>:
 8015308:	2006      	movs	r0, #6
 801530a:	4770      	bx	lr

0801530c <_canceled_event_handler>:
 801530c:	2005      	movs	r0, #5
 801530e:	4770      	bx	lr

08015310 <rcl_action_transition_goal_state>:
 8015310:	b2c2      	uxtb	r2, r0
 8015312:	2a06      	cmp	r2, #6
 8015314:	d80c      	bhi.n	8015330 <rcl_action_transition_goal_state+0x20>
 8015316:	2904      	cmp	r1, #4
 8015318:	d80a      	bhi.n	8015330 <rcl_action_transition_goal_state+0x20>
 801531a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801531e:	b410      	push	{r4}
 8015320:	1853      	adds	r3, r2, r1
 8015322:	4c06      	ldr	r4, [pc, #24]	@ (801533c <rcl_action_transition_goal_state+0x2c>)
 8015324:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015328:	b123      	cbz	r3, 8015334 <rcl_action_transition_goal_state+0x24>
 801532a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801532e:	4718      	bx	r3
 8015330:	2000      	movs	r0, #0
 8015332:	4770      	bx	lr
 8015334:	2000      	movs	r0, #0
 8015336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801533a:	4770      	bx	lr
 801533c:	0801b920 	.word	0x0801b920

08015340 <rcl_action_get_zero_initialized_cancel_response>:
 8015340:	b510      	push	{r4, lr}
 8015342:	4c07      	ldr	r4, [pc, #28]	@ (8015360 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015344:	4686      	mov	lr, r0
 8015346:	4684      	mov	ip, r0
 8015348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801534a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801534e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	f8cc 3000 	str.w	r3, [ip]
 801535a:	4670      	mov	r0, lr
 801535c:	bd10      	pop	{r4, pc}
 801535e:	bf00      	nop
 8015360:	0801b9ac 	.word	0x0801b9ac

08015364 <rclc_action_send_result_request>:
 8015364:	b1d0      	cbz	r0, 801539c <rclc_action_send_result_request+0x38>
 8015366:	b500      	push	{lr}
 8015368:	4684      	mov	ip, r0
 801536a:	b087      	sub	sp, #28
 801536c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015370:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015374:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015378:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801537c:	f10d 0e08 	add.w	lr, sp, #8
 8015380:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015384:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015388:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801538c:	a902      	add	r1, sp, #8
 801538e:	3010      	adds	r0, #16
 8015390:	f7ff fbda 	bl	8014b48 <rcl_action_send_result_request>
 8015394:	b920      	cbnz	r0, 80153a0 <rclc_action_send_result_request+0x3c>
 8015396:	b007      	add	sp, #28
 8015398:	f85d fb04 	ldr.w	pc, [sp], #4
 801539c:	200b      	movs	r0, #11
 801539e:	4770      	bx	lr
 80153a0:	9001      	str	r0, [sp, #4]
 80153a2:	f7f7 ffa1 	bl	800d2e8 <rcutils_reset_error>
 80153a6:	9801      	ldr	r0, [sp, #4]
 80153a8:	b007      	add	sp, #28
 80153aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80153ae:	bf00      	nop

080153b0 <rclc_action_take_goal_handle>:
 80153b0:	b160      	cbz	r0, 80153cc <rclc_action_take_goal_handle+0x1c>
 80153b2:	6883      	ldr	r3, [r0, #8]
 80153b4:	b143      	cbz	r3, 80153c8 <rclc_action_take_goal_handle+0x18>
 80153b6:	6819      	ldr	r1, [r3, #0]
 80153b8:	6081      	str	r1, [r0, #8]
 80153ba:	2200      	movs	r2, #0
 80153bc:	721a      	strb	r2, [r3, #8]
 80153be:	68c1      	ldr	r1, [r0, #12]
 80153c0:	6019      	str	r1, [r3, #0]
 80153c2:	621a      	str	r2, [r3, #32]
 80153c4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80153c6:	60c3      	str	r3, [r0, #12]
 80153c8:	4618      	mov	r0, r3
 80153ca:	4770      	bx	lr
 80153cc:	4603      	mov	r3, r0
 80153ce:	e7fb      	b.n	80153c8 <rclc_action_take_goal_handle+0x18>

080153d0 <rclc_action_remove_used_goal_handle>:
 80153d0:	b180      	cbz	r0, 80153f4 <rclc_action_remove_used_goal_handle+0x24>
 80153d2:	b179      	cbz	r1, 80153f4 <rclc_action_remove_used_goal_handle+0x24>
 80153d4:	68c3      	ldr	r3, [r0, #12]
 80153d6:	4299      	cmp	r1, r3
 80153d8:	d00d      	beq.n	80153f6 <rclc_action_remove_used_goal_handle+0x26>
 80153da:	b12b      	cbz	r3, 80153e8 <rclc_action_remove_used_goal_handle+0x18>
 80153dc:	681a      	ldr	r2, [r3, #0]
 80153de:	4291      	cmp	r1, r2
 80153e0:	d003      	beq.n	80153ea <rclc_action_remove_used_goal_handle+0x1a>
 80153e2:	4613      	mov	r3, r2
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d1f9      	bne.n	80153dc <rclc_action_remove_used_goal_handle+0xc>
 80153e8:	4770      	bx	lr
 80153ea:	680a      	ldr	r2, [r1, #0]
 80153ec:	601a      	str	r2, [r3, #0]
 80153ee:	6883      	ldr	r3, [r0, #8]
 80153f0:	600b      	str	r3, [r1, #0]
 80153f2:	6081      	str	r1, [r0, #8]
 80153f4:	4770      	bx	lr
 80153f6:	680b      	ldr	r3, [r1, #0]
 80153f8:	60c3      	str	r3, [r0, #12]
 80153fa:	e7f8      	b.n	80153ee <rclc_action_remove_used_goal_handle+0x1e>

080153fc <rclc_action_find_goal_handle_by_uuid>:
 80153fc:	b538      	push	{r3, r4, r5, lr}
 80153fe:	b180      	cbz	r0, 8015422 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015400:	460d      	mov	r5, r1
 8015402:	b181      	cbz	r1, 8015426 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015404:	68c4      	ldr	r4, [r0, #12]
 8015406:	b914      	cbnz	r4, 801540e <rclc_action_find_goal_handle_by_uuid+0x12>
 8015408:	e009      	b.n	801541e <rclc_action_find_goal_handle_by_uuid+0x22>
 801540a:	6824      	ldr	r4, [r4, #0]
 801540c:	b13c      	cbz	r4, 801541e <rclc_action_find_goal_handle_by_uuid+0x22>
 801540e:	f104 0009 	add.w	r0, r4, #9
 8015412:	2210      	movs	r2, #16
 8015414:	4629      	mov	r1, r5
 8015416:	f003 fa0f 	bl	8018838 <memcmp>
 801541a:	2800      	cmp	r0, #0
 801541c:	d1f5      	bne.n	801540a <rclc_action_find_goal_handle_by_uuid+0xe>
 801541e:	4620      	mov	r0, r4
 8015420:	bd38      	pop	{r3, r4, r5, pc}
 8015422:	4604      	mov	r4, r0
 8015424:	e7fb      	b.n	801541e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015426:	460c      	mov	r4, r1
 8015428:	e7f9      	b.n	801541e <rclc_action_find_goal_handle_by_uuid+0x22>
 801542a:	bf00      	nop

0801542c <rclc_action_find_first_handle_by_status>:
 801542c:	b140      	cbz	r0, 8015440 <rclc_action_find_first_handle_by_status+0x14>
 801542e:	68c0      	ldr	r0, [r0, #12]
 8015430:	b910      	cbnz	r0, 8015438 <rclc_action_find_first_handle_by_status+0xc>
 8015432:	e005      	b.n	8015440 <rclc_action_find_first_handle_by_status+0x14>
 8015434:	6800      	ldr	r0, [r0, #0]
 8015436:	b118      	cbz	r0, 8015440 <rclc_action_find_first_handle_by_status+0x14>
 8015438:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801543c:	428b      	cmp	r3, r1
 801543e:	d1f9      	bne.n	8015434 <rclc_action_find_first_handle_by_status+0x8>
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop

08015444 <rclc_action_find_first_terminated_handle>:
 8015444:	b140      	cbz	r0, 8015458 <rclc_action_find_first_terminated_handle+0x14>
 8015446:	68c0      	ldr	r0, [r0, #12]
 8015448:	b910      	cbnz	r0, 8015450 <rclc_action_find_first_terminated_handle+0xc>
 801544a:	e005      	b.n	8015458 <rclc_action_find_first_terminated_handle+0x14>
 801544c:	6800      	ldr	r0, [r0, #0]
 801544e:	b118      	cbz	r0, 8015458 <rclc_action_find_first_terminated_handle+0x14>
 8015450:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015454:	2b03      	cmp	r3, #3
 8015456:	ddf9      	ble.n	801544c <rclc_action_find_first_terminated_handle+0x8>
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop

0801545c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801545c:	b170      	cbz	r0, 801547c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801545e:	68c0      	ldr	r0, [r0, #12]
 8015460:	b160      	cbz	r0, 801547c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015462:	b410      	push	{r4}
 8015464:	e001      	b.n	801546a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015466:	6800      	ldr	r0, [r0, #0]
 8015468:	b128      	cbz	r0, 8015476 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801546a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801546e:	4299      	cmp	r1, r3
 8015470:	bf08      	it	eq
 8015472:	4294      	cmpeq	r4, r2
 8015474:	d1f7      	bne.n	8015466 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801547a:	4770      	bx	lr
 801547c:	4770      	bx	lr
 801547e:	bf00      	nop

08015480 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015480:	b170      	cbz	r0, 80154a0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015482:	68c0      	ldr	r0, [r0, #12]
 8015484:	b160      	cbz	r0, 80154a0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015486:	b410      	push	{r4}
 8015488:	e001      	b.n	801548e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801548a:	6800      	ldr	r0, [r0, #0]
 801548c:	b128      	cbz	r0, 801549a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801548e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015492:	4299      	cmp	r1, r3
 8015494:	bf08      	it	eq
 8015496:	4294      	cmpeq	r4, r2
 8015498:	d1f7      	bne.n	801548a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801549a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801549e:	4770      	bx	lr
 80154a0:	4770      	bx	lr
 80154a2:	bf00      	nop

080154a4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80154a4:	b170      	cbz	r0, 80154c4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80154a6:	68c0      	ldr	r0, [r0, #12]
 80154a8:	b160      	cbz	r0, 80154c4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80154aa:	b410      	push	{r4}
 80154ac:	e001      	b.n	80154b2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80154ae:	6800      	ldr	r0, [r0, #0]
 80154b0:	b128      	cbz	r0, 80154be <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80154b2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80154b6:	4299      	cmp	r1, r3
 80154b8:	bf08      	it	eq
 80154ba:	4294      	cmpeq	r4, r2
 80154bc:	d1f7      	bne.n	80154ae <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80154be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154c2:	4770      	bx	lr
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop

080154c8 <rclc_action_find_first_handle_with_goal_response>:
 80154c8:	b140      	cbz	r0, 80154dc <rclc_action_find_first_handle_with_goal_response+0x14>
 80154ca:	68c0      	ldr	r0, [r0, #12]
 80154cc:	b910      	cbnz	r0, 80154d4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80154ce:	e005      	b.n	80154dc <rclc_action_find_first_handle_with_goal_response+0x14>
 80154d0:	6800      	ldr	r0, [r0, #0]
 80154d2:	b118      	cbz	r0, 80154dc <rclc_action_find_first_handle_with_goal_response+0x14>
 80154d4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d0f9      	beq.n	80154d0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80154dc:	4770      	bx	lr
 80154de:	bf00      	nop

080154e0 <rclc_action_find_first_handle_with_result_response>:
 80154e0:	b140      	cbz	r0, 80154f4 <rclc_action_find_first_handle_with_result_response+0x14>
 80154e2:	68c0      	ldr	r0, [r0, #12]
 80154e4:	b910      	cbnz	r0, 80154ec <rclc_action_find_first_handle_with_result_response+0xc>
 80154e6:	e005      	b.n	80154f4 <rclc_action_find_first_handle_with_result_response+0x14>
 80154e8:	6800      	ldr	r0, [r0, #0]
 80154ea:	b118      	cbz	r0, 80154f4 <rclc_action_find_first_handle_with_result_response+0x14>
 80154ec:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d0f9      	beq.n	80154e8 <rclc_action_find_first_handle_with_result_response+0x8>
 80154f4:	4770      	bx	lr
 80154f6:	bf00      	nop

080154f8 <rclc_action_server_response_goal_request>:
 80154f8:	b198      	cbz	r0, 8015522 <rclc_action_server_response_goal_request+0x2a>
 80154fa:	b510      	push	{r4, lr}
 80154fc:	6844      	ldr	r4, [r0, #4]
 80154fe:	b086      	sub	sp, #24
 8015500:	2200      	movs	r2, #0
 8015502:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015506:	460b      	mov	r3, r1
 8015508:	9205      	str	r2, [sp, #20]
 801550a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801550e:	aa03      	add	r2, sp, #12
 8015510:	f104 0010 	add.w	r0, r4, #16
 8015514:	f88d 300c 	strb.w	r3, [sp, #12]
 8015518:	f7ff fd4a 	bl	8014fb0 <rcl_action_send_goal_response>
 801551c:	b918      	cbnz	r0, 8015526 <rclc_action_server_response_goal_request+0x2e>
 801551e:	b006      	add	sp, #24
 8015520:	bd10      	pop	{r4, pc}
 8015522:	200b      	movs	r0, #11
 8015524:	4770      	bx	lr
 8015526:	9001      	str	r0, [sp, #4]
 8015528:	f7f7 fede 	bl	800d2e8 <rcutils_reset_error>
 801552c:	9801      	ldr	r0, [sp, #4]
 801552e:	b006      	add	sp, #24
 8015530:	bd10      	pop	{r4, pc}
 8015532:	bf00      	nop
 8015534:	0000      	movs	r0, r0
	...

08015538 <rclc_action_server_goal_cancel_accept>:
 8015538:	b310      	cbz	r0, 8015580 <rclc_action_server_goal_cancel_accept+0x48>
 801553a:	b510      	push	{r4, lr}
 801553c:	b090      	sub	sp, #64	@ 0x40
 801553e:	4604      	mov	r4, r0
 8015540:	a806      	add	r0, sp, #24
 8015542:	f7ff fefd 	bl	8015340 <rcl_action_get_zero_initialized_cancel_response>
 8015546:	2300      	movs	r3, #0
 8015548:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801554c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015550:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015554:	f88d 3018 	strb.w	r3, [sp, #24]
 8015558:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801555c:	f8cd d01c 	str.w	sp, [sp, #28]
 8015560:	46ec      	mov	ip, sp
 8015562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015566:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015588 <rclc_action_server_goal_cancel_accept+0x50>
 801556a:	6860      	ldr	r0, [r4, #4]
 801556c:	aa06      	add	r2, sp, #24
 801556e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015572:	3010      	adds	r0, #16
 8015574:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015578:	f7ff fdd2 	bl	8015120 <rcl_action_send_cancel_response>
 801557c:	b010      	add	sp, #64	@ 0x40
 801557e:	bd10      	pop	{r4, pc}
 8015580:	200b      	movs	r0, #11
 8015582:	4770      	bx	lr
 8015584:	f3af 8000 	nop.w
 8015588:	00000001 	.word	0x00000001
 801558c:	00000001 	.word	0x00000001

08015590 <rclc_action_server_goal_cancel_reject>:
 8015590:	b082      	sub	sp, #8
 8015592:	b530      	push	{r4, r5, lr}
 8015594:	b08b      	sub	sp, #44	@ 0x2c
 8015596:	ac0e      	add	r4, sp, #56	@ 0x38
 8015598:	e884 000c 	stmia.w	r4, {r2, r3}
 801559c:	b188      	cbz	r0, 80155c2 <rclc_action_server_goal_cancel_reject+0x32>
 801559e:	4604      	mov	r4, r0
 80155a0:	a801      	add	r0, sp, #4
 80155a2:	460d      	mov	r5, r1
 80155a4:	f7ff fecc 	bl	8015340 <rcl_action_get_zero_initialized_cancel_response>
 80155a8:	aa01      	add	r2, sp, #4
 80155aa:	a90e      	add	r1, sp, #56	@ 0x38
 80155ac:	f104 0010 	add.w	r0, r4, #16
 80155b0:	f88d 5004 	strb.w	r5, [sp, #4]
 80155b4:	f7ff fdb4 	bl	8015120 <rcl_action_send_cancel_response>
 80155b8:	b00b      	add	sp, #44	@ 0x2c
 80155ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155be:	b002      	add	sp, #8
 80155c0:	4770      	bx	lr
 80155c2:	200b      	movs	r0, #11
 80155c4:	b00b      	add	sp, #44	@ 0x2c
 80155c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155ca:	b002      	add	sp, #8
 80155cc:	4770      	bx	lr
 80155ce:	bf00      	nop

080155d0 <__atomic_load_8>:
 80155d0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80155d4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80155d8:	4a15      	ldr	r2, [pc, #84]	@ (8015630 <__atomic_load_8+0x60>)
 80155da:	4b16      	ldr	r3, [pc, #88]	@ (8015634 <__atomic_load_8+0x64>)
 80155dc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80155e0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80155e4:	fb02 f101 	mul.w	r1, r2, r1
 80155e8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80155ec:	fba3 2301 	umull	r2, r3, r3, r1
 80155f0:	091b      	lsrs	r3, r3, #4
 80155f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80155f6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80155fa:	b4d0      	push	{r4, r6, r7}
 80155fc:	4c0e      	ldr	r4, [pc, #56]	@ (8015638 <__atomic_load_8+0x68>)
 80155fe:	1ac9      	subs	r1, r1, r3
 8015600:	1862      	adds	r2, r4, r1
 8015602:	f04f 0c01 	mov.w	ip, #1
 8015606:	e8d2 3f4f 	ldrexb	r3, [r2]
 801560a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801560e:	2e00      	cmp	r6, #0
 8015610:	d1f9      	bne.n	8015606 <__atomic_load_8+0x36>
 8015612:	f3bf 8f5b 	dmb	ish
 8015616:	b2db      	uxtb	r3, r3
 8015618:	2b00      	cmp	r3, #0
 801561a:	d1f4      	bne.n	8015606 <__atomic_load_8+0x36>
 801561c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015620:	f3bf 8f5b 	dmb	ish
 8015624:	5463      	strb	r3, [r4, r1]
 8015626:	4630      	mov	r0, r6
 8015628:	4639      	mov	r1, r7
 801562a:	bcd0      	pop	{r4, r6, r7}
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop
 8015630:	27d4eb2d 	.word	0x27d4eb2d
 8015634:	b21642c9 	.word	0xb21642c9
 8015638:	2000b31c 	.word	0x2000b31c

0801563c <__atomic_store_8>:
 801563c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015640:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015644:	b570      	push	{r4, r5, r6, lr}
 8015646:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801564a:	4c14      	ldr	r4, [pc, #80]	@ (801569c <__atomic_store_8+0x60>)
 801564c:	4d14      	ldr	r5, [pc, #80]	@ (80156a0 <__atomic_store_8+0x64>)
 801564e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015652:	fb04 f101 	mul.w	r1, r4, r1
 8015656:	4c13      	ldr	r4, [pc, #76]	@ (80156a4 <__atomic_store_8+0x68>)
 8015658:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801565c:	fba4 4e01 	umull	r4, lr, r4, r1
 8015660:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8015664:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8015668:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801566c:	eba1 0e0e 	sub.w	lr, r1, lr
 8015670:	eb05 0c0e 	add.w	ip, r5, lr
 8015674:	f04f 0401 	mov.w	r4, #1
 8015678:	e8dc 1f4f 	ldrexb	r1, [ip]
 801567c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8015680:	2e00      	cmp	r6, #0
 8015682:	d1f9      	bne.n	8015678 <__atomic_store_8+0x3c>
 8015684:	f3bf 8f5b 	dmb	ish
 8015688:	b2c9      	uxtb	r1, r1
 801568a:	2900      	cmp	r1, #0
 801568c:	d1f4      	bne.n	8015678 <__atomic_store_8+0x3c>
 801568e:	e9c0 2300 	strd	r2, r3, [r0]
 8015692:	f3bf 8f5b 	dmb	ish
 8015696:	f805 100e 	strb.w	r1, [r5, lr]
 801569a:	bd70      	pop	{r4, r5, r6, pc}
 801569c:	27d4eb2d 	.word	0x27d4eb2d
 80156a0:	2000b31c 	.word	0x2000b31c
 80156a4:	b21642c9 	.word	0xb21642c9

080156a8 <__atomic_exchange_8>:
 80156a8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80156ac:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80156b0:	4916      	ldr	r1, [pc, #88]	@ (801570c <__atomic_exchange_8+0x64>)
 80156b2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80156b6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80156ba:	fb01 fc0c 	mul.w	ip, r1, ip
 80156be:	4914      	ldr	r1, [pc, #80]	@ (8015710 <__atomic_exchange_8+0x68>)
 80156c0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80156c4:	b570      	push	{r4, r5, r6, lr}
 80156c6:	4605      	mov	r5, r0
 80156c8:	fba1 010c 	umull	r0, r1, r1, ip
 80156cc:	0909      	lsrs	r1, r1, #4
 80156ce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80156d2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80156d6:	4e0f      	ldr	r6, [pc, #60]	@ (8015714 <__atomic_exchange_8+0x6c>)
 80156d8:	ebac 0c01 	sub.w	ip, ip, r1
 80156dc:	eb06 010c 	add.w	r1, r6, ip
 80156e0:	f04f 0e01 	mov.w	lr, #1
 80156e4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80156e8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d1f9      	bne.n	80156e4 <__atomic_exchange_8+0x3c>
 80156f0:	f3bf 8f5b 	dmb	ish
 80156f4:	b2e4      	uxtb	r4, r4
 80156f6:	2c00      	cmp	r4, #0
 80156f8:	d1f4      	bne.n	80156e4 <__atomic_exchange_8+0x3c>
 80156fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80156fe:	e9c5 2300 	strd	r2, r3, [r5]
 8015702:	f3bf 8f5b 	dmb	ish
 8015706:	f806 400c 	strb.w	r4, [r6, ip]
 801570a:	bd70      	pop	{r4, r5, r6, pc}
 801570c:	27d4eb2d 	.word	0x27d4eb2d
 8015710:	b21642c9 	.word	0xb21642c9
 8015714:	2000b31c 	.word	0x2000b31c

08015718 <rcutils_get_env>:
 8015718:	b168      	cbz	r0, 8015736 <rcutils_get_env+0x1e>
 801571a:	b510      	push	{r4, lr}
 801571c:	460c      	mov	r4, r1
 801571e:	b129      	cbz	r1, 801572c <rcutils_get_env+0x14>
 8015720:	f002 fbf8 	bl	8017f14 <getenv>
 8015724:	b120      	cbz	r0, 8015730 <rcutils_get_env+0x18>
 8015726:	6020      	str	r0, [r4, #0]
 8015728:	2000      	movs	r0, #0
 801572a:	bd10      	pop	{r4, pc}
 801572c:	4803      	ldr	r0, [pc, #12]	@ (801573c <rcutils_get_env+0x24>)
 801572e:	bd10      	pop	{r4, pc}
 8015730:	4b03      	ldr	r3, [pc, #12]	@ (8015740 <rcutils_get_env+0x28>)
 8015732:	6023      	str	r3, [r4, #0]
 8015734:	bd10      	pop	{r4, pc}
 8015736:	4803      	ldr	r0, [pc, #12]	@ (8015744 <rcutils_get_env+0x2c>)
 8015738:	4770      	bx	lr
 801573a:	bf00      	nop
 801573c:	0801b9ec 	.word	0x0801b9ec
 8015740:	0801bdc4 	.word	0x0801bdc4
 8015744:	0801b9d0 	.word	0x0801b9d0

08015748 <rcutils_is_directory>:
 8015748:	2000      	movs	r0, #0
 801574a:	4770      	bx	lr

0801574c <rcutils_join_path>:
 801574c:	b082      	sub	sp, #8
 801574e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015752:	2000      	movs	r0, #0
 8015754:	b002      	add	sp, #8
 8015756:	4770      	bx	lr

08015758 <rcutils_to_native_path>:
 8015758:	b084      	sub	sp, #16
 801575a:	a801      	add	r0, sp, #4
 801575c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015760:	b004      	add	sp, #16
 8015762:	2000      	movs	r0, #0
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop

08015768 <rcutils_format_string_limit>:
 8015768:	b40f      	push	{r0, r1, r2, r3}
 801576a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801576c:	b083      	sub	sp, #12
 801576e:	ac08      	add	r4, sp, #32
 8015770:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015776:	b34e      	cbz	r6, 80157cc <rcutils_format_string_limit+0x64>
 8015778:	a808      	add	r0, sp, #32
 801577a:	f7f7 fd8f 	bl	800d29c <rcutils_allocator_is_valid>
 801577e:	b328      	cbz	r0, 80157cc <rcutils_format_string_limit+0x64>
 8015780:	2100      	movs	r1, #0
 8015782:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015784:	4632      	mov	r2, r6
 8015786:	4608      	mov	r0, r1
 8015788:	e9cd 3300 	strd	r3, r3, [sp]
 801578c:	f000 f8f4 	bl	8015978 <rcutils_vsnprintf>
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	4605      	mov	r5, r0
 8015794:	d01a      	beq.n	80157cc <rcutils_format_string_limit+0x64>
 8015796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015798:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801579a:	1c47      	adds	r7, r0, #1
 801579c:	429f      	cmp	r7, r3
 801579e:	bf84      	itt	hi
 80157a0:	461f      	movhi	r7, r3
 80157a2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80157a6:	4638      	mov	r0, r7
 80157a8:	9b08      	ldr	r3, [sp, #32]
 80157aa:	4798      	blx	r3
 80157ac:	4604      	mov	r4, r0
 80157ae:	b168      	cbz	r0, 80157cc <rcutils_format_string_limit+0x64>
 80157b0:	9b01      	ldr	r3, [sp, #4]
 80157b2:	4632      	mov	r2, r6
 80157b4:	4639      	mov	r1, r7
 80157b6:	f000 f8df 	bl	8015978 <rcutils_vsnprintf>
 80157ba:	2800      	cmp	r0, #0
 80157bc:	db02      	blt.n	80157c4 <rcutils_format_string_limit+0x5c>
 80157be:	2300      	movs	r3, #0
 80157c0:	5563      	strb	r3, [r4, r5]
 80157c2:	e004      	b.n	80157ce <rcutils_format_string_limit+0x66>
 80157c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80157c8:	4620      	mov	r0, r4
 80157ca:	4798      	blx	r3
 80157cc:	2400      	movs	r4, #0
 80157ce:	4620      	mov	r0, r4
 80157d0:	b003      	add	sp, #12
 80157d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80157d6:	b004      	add	sp, #16
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop

080157dc <rcutils_repl_str>:
 80157dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e0:	ed2d 8b02 	vpush	{d8}
 80157e4:	b087      	sub	sp, #28
 80157e6:	4680      	mov	r8, r0
 80157e8:	4608      	mov	r0, r1
 80157ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80157ee:	ee08 2a10 	vmov	s16, r2
 80157f2:	468a      	mov	sl, r1
 80157f4:	4699      	mov	r9, r3
 80157f6:	f7ea fd1d 	bl	8000234 <strlen>
 80157fa:	2600      	movs	r6, #0
 80157fc:	4647      	mov	r7, r8
 80157fe:	9002      	str	r0, [sp, #8]
 8015800:	46b3      	mov	fp, r6
 8015802:	2510      	movs	r5, #16
 8015804:	46b0      	mov	r8, r6
 8015806:	e01d      	b.n	8015844 <rcutils_repl_str+0x68>
 8015808:	f10b 0b01 	add.w	fp, fp, #1
 801580c:	455e      	cmp	r6, fp
 801580e:	d211      	bcs.n	8015834 <rcutils_repl_str+0x58>
 8015810:	442e      	add	r6, r5
 8015812:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015816:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801581a:	00b1      	lsls	r1, r6, #2
 801581c:	4798      	blx	r3
 801581e:	2800      	cmp	r0, #0
 8015820:	f000 8088 	beq.w	8015934 <rcutils_repl_str+0x158>
 8015824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015828:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801582c:	4680      	mov	r8, r0
 801582e:	bf28      	it	cs
 8015830:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8015834:	9a01      	ldr	r2, [sp, #4]
 8015836:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801583a:	1aa2      	subs	r2, r4, r2
 801583c:	f843 2c04 	str.w	r2, [r3, #-4]
 8015840:	9b02      	ldr	r3, [sp, #8]
 8015842:	18e7      	adds	r7, r4, r3
 8015844:	4651      	mov	r1, sl
 8015846:	4638      	mov	r0, r7
 8015848:	f003 f847 	bl	80188da <strstr>
 801584c:	4604      	mov	r4, r0
 801584e:	4640      	mov	r0, r8
 8015850:	2c00      	cmp	r4, #0
 8015852:	d1d9      	bne.n	8015808 <rcutils_repl_str+0x2c>
 8015854:	46b8      	mov	r8, r7
 8015856:	4607      	mov	r7, r0
 8015858:	4640      	mov	r0, r8
 801585a:	f7ea fceb 	bl	8000234 <strlen>
 801585e:	9b01      	ldr	r3, [sp, #4]
 8015860:	eba8 0303 	sub.w	r3, r8, r3
 8015864:	181c      	adds	r4, r3, r0
 8015866:	9404      	str	r4, [sp, #16]
 8015868:	f1bb 0f00 	cmp.w	fp, #0
 801586c:	d04a      	beq.n	8015904 <rcutils_repl_str+0x128>
 801586e:	ee18 0a10 	vmov	r0, s16
 8015872:	f7ea fcdf 	bl	8000234 <strlen>
 8015876:	9b02      	ldr	r3, [sp, #8]
 8015878:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801587c:	1ac3      	subs	r3, r0, r3
 801587e:	fb0b 4303 	mla	r3, fp, r3, r4
 8015882:	461a      	mov	r2, r3
 8015884:	9305      	str	r3, [sp, #20]
 8015886:	4606      	mov	r6, r0
 8015888:	f8d9 3000 	ldr.w	r3, [r9]
 801588c:	1c50      	adds	r0, r2, #1
 801588e:	4798      	blx	r3
 8015890:	9003      	str	r0, [sp, #12]
 8015892:	2800      	cmp	r0, #0
 8015894:	d04f      	beq.n	8015936 <rcutils_repl_str+0x15a>
 8015896:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801589a:	683a      	ldr	r2, [r7, #0]
 801589c:	4641      	mov	r1, r8
 801589e:	f003 f8be 	bl	8018a1e <memcpy>
 80158a2:	683d      	ldr	r5, [r7, #0]
 80158a4:	9b03      	ldr	r3, [sp, #12]
 80158a6:	9701      	str	r7, [sp, #4]
 80158a8:	46ba      	mov	sl, r7
 80158aa:	441d      	add	r5, r3
 80158ac:	9f02      	ldr	r7, [sp, #8]
 80158ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80158b2:	2401      	movs	r4, #1
 80158b4:	46d1      	mov	r9, sl
 80158b6:	ee18 aa10 	vmov	sl, s16
 80158ba:	e00a      	b.n	80158d2 <rcutils_repl_str+0xf6>
 80158bc:	f8d9 5000 	ldr.w	r5, [r9]
 80158c0:	1aaa      	subs	r2, r5, r2
 80158c2:	1885      	adds	r5, r0, r2
 80158c4:	f003 f8ab 	bl	8018a1e <memcpy>
 80158c8:	45a3      	cmp	fp, r4
 80158ca:	f104 0201 	add.w	r2, r4, #1
 80158ce:	d935      	bls.n	801593c <rcutils_repl_str+0x160>
 80158d0:	4614      	mov	r4, r2
 80158d2:	4632      	mov	r2, r6
 80158d4:	4651      	mov	r1, sl
 80158d6:	4628      	mov	r0, r5
 80158d8:	f003 f8a1 	bl	8018a1e <memcpy>
 80158dc:	f859 2b04 	ldr.w	r2, [r9], #4
 80158e0:	45a3      	cmp	fp, r4
 80158e2:	443a      	add	r2, r7
 80158e4:	eb05 0006 	add.w	r0, r5, r6
 80158e8:	eb08 0102 	add.w	r1, r8, r2
 80158ec:	d1e6      	bne.n	80158bc <rcutils_repl_str+0xe0>
 80158ee:	9b04      	ldr	r3, [sp, #16]
 80158f0:	1a9a      	subs	r2, r3, r2
 80158f2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80158f6:	f003 f892 	bl	8018a1e <memcpy>
 80158fa:	9a03      	ldr	r2, [sp, #12]
 80158fc:	9905      	ldr	r1, [sp, #20]
 80158fe:	2300      	movs	r3, #0
 8015900:	5453      	strb	r3, [r2, r1]
 8015902:	e00b      	b.n	801591c <rcutils_repl_str+0x140>
 8015904:	4620      	mov	r0, r4
 8015906:	f8d9 3000 	ldr.w	r3, [r9]
 801590a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801590e:	3001      	adds	r0, #1
 8015910:	4798      	blx	r3
 8015912:	9003      	str	r0, [sp, #12]
 8015914:	b110      	cbz	r0, 801591c <rcutils_repl_str+0x140>
 8015916:	9901      	ldr	r1, [sp, #4]
 8015918:	f003 f879 	bl	8018a0e <strcpy>
 801591c:	4638      	mov	r0, r7
 801591e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015922:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015926:	4798      	blx	r3
 8015928:	9803      	ldr	r0, [sp, #12]
 801592a:	b007      	add	sp, #28
 801592c:	ecbd 8b02 	vpop	{d8}
 8015930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015934:	4647      	mov	r7, r8
 8015936:	2300      	movs	r3, #0
 8015938:	9303      	str	r3, [sp, #12]
 801593a:	e7ef      	b.n	801591c <rcutils_repl_str+0x140>
 801593c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8015940:	e7db      	b.n	80158fa <rcutils_repl_str+0x11e>
 8015942:	bf00      	nop

08015944 <rcutils_snprintf>:
 8015944:	b40c      	push	{r2, r3}
 8015946:	b530      	push	{r4, r5, lr}
 8015948:	b083      	sub	sp, #12
 801594a:	ab06      	add	r3, sp, #24
 801594c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015950:	9301      	str	r3, [sp, #4]
 8015952:	b152      	cbz	r2, 801596a <rcutils_snprintf+0x26>
 8015954:	b138      	cbz	r0, 8015966 <rcutils_snprintf+0x22>
 8015956:	b141      	cbz	r1, 801596a <rcutils_snprintf+0x26>
 8015958:	f002 fecc 	bl	80186f4 <vsniprintf>
 801595c:	b003      	add	sp, #12
 801595e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015962:	b002      	add	sp, #8
 8015964:	4770      	bx	lr
 8015966:	2900      	cmp	r1, #0
 8015968:	d0f6      	beq.n	8015958 <rcutils_snprintf+0x14>
 801596a:	f003 f823 	bl	80189b4 <__errno>
 801596e:	2316      	movs	r3, #22
 8015970:	6003      	str	r3, [r0, #0]
 8015972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015976:	e7f1      	b.n	801595c <rcutils_snprintf+0x18>

08015978 <rcutils_vsnprintf>:
 8015978:	b570      	push	{r4, r5, r6, lr}
 801597a:	b13a      	cbz	r2, 801598c <rcutils_vsnprintf+0x14>
 801597c:	b120      	cbz	r0, 8015988 <rcutils_vsnprintf+0x10>
 801597e:	b129      	cbz	r1, 801598c <rcutils_vsnprintf+0x14>
 8015980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015984:	f002 beb6 	b.w	80186f4 <vsniprintf>
 8015988:	2900      	cmp	r1, #0
 801598a:	d0f9      	beq.n	8015980 <rcutils_vsnprintf+0x8>
 801598c:	f003 f812 	bl	80189b4 <__errno>
 8015990:	2316      	movs	r3, #22
 8015992:	6003      	str	r3, [r0, #0]
 8015994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015998:	bd70      	pop	{r4, r5, r6, pc}
 801599a:	bf00      	nop

0801599c <rcutils_strdup>:
 801599c:	b084      	sub	sp, #16
 801599e:	b570      	push	{r4, r5, r6, lr}
 80159a0:	b082      	sub	sp, #8
 80159a2:	ac07      	add	r4, sp, #28
 80159a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80159a8:	4605      	mov	r5, r0
 80159aa:	b1b0      	cbz	r0, 80159da <rcutils_strdup+0x3e>
 80159ac:	f7ea fc42 	bl	8000234 <strlen>
 80159b0:	1c42      	adds	r2, r0, #1
 80159b2:	9b07      	ldr	r3, [sp, #28]
 80159b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80159b6:	9201      	str	r2, [sp, #4]
 80159b8:	4606      	mov	r6, r0
 80159ba:	4610      	mov	r0, r2
 80159bc:	4798      	blx	r3
 80159be:	4604      	mov	r4, r0
 80159c0:	b128      	cbz	r0, 80159ce <rcutils_strdup+0x32>
 80159c2:	9a01      	ldr	r2, [sp, #4]
 80159c4:	4629      	mov	r1, r5
 80159c6:	f003 f82a 	bl	8018a1e <memcpy>
 80159ca:	2300      	movs	r3, #0
 80159cc:	55a3      	strb	r3, [r4, r6]
 80159ce:	4620      	mov	r0, r4
 80159d0:	b002      	add	sp, #8
 80159d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159d6:	b004      	add	sp, #16
 80159d8:	4770      	bx	lr
 80159da:	4604      	mov	r4, r0
 80159dc:	e7f7      	b.n	80159ce <rcutils_strdup+0x32>
 80159de:	bf00      	nop

080159e0 <rcutils_strndup>:
 80159e0:	b082      	sub	sp, #8
 80159e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159e4:	ac06      	add	r4, sp, #24
 80159e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80159ea:	4605      	mov	r5, r0
 80159ec:	b188      	cbz	r0, 8015a12 <rcutils_strndup+0x32>
 80159ee:	1c4f      	adds	r7, r1, #1
 80159f0:	460e      	mov	r6, r1
 80159f2:	4638      	mov	r0, r7
 80159f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80159f6:	4790      	blx	r2
 80159f8:	4604      	mov	r4, r0
 80159fa:	b128      	cbz	r0, 8015a08 <rcutils_strndup+0x28>
 80159fc:	463a      	mov	r2, r7
 80159fe:	4629      	mov	r1, r5
 8015a00:	f003 f80d 	bl	8018a1e <memcpy>
 8015a04:	2300      	movs	r3, #0
 8015a06:	55a3      	strb	r3, [r4, r6]
 8015a08:	4620      	mov	r0, r4
 8015a0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015a0e:	b002      	add	sp, #8
 8015a10:	4770      	bx	lr
 8015a12:	4604      	mov	r4, r0
 8015a14:	e7f8      	b.n	8015a08 <rcutils_strndup+0x28>
 8015a16:	bf00      	nop

08015a18 <rcutils_get_zero_initialized_string_map>:
 8015a18:	4b01      	ldr	r3, [pc, #4]	@ (8015a20 <rcutils_get_zero_initialized_string_map+0x8>)
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	6018      	str	r0, [r3, #0]
 8015a1e:	4770      	bx	lr
 8015a20:	2000b334 	.word	0x2000b334

08015a24 <rcutils_string_map_reserve>:
 8015a24:	2800      	cmp	r0, #0
 8015a26:	d05f      	beq.n	8015ae8 <rcutils_string_map_reserve+0xc4>
 8015a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	6801      	ldr	r1, [r0, #0]
 8015a30:	b082      	sub	sp, #8
 8015a32:	4605      	mov	r5, r0
 8015a34:	b129      	cbz	r1, 8015a42 <rcutils_string_map_reserve+0x1e>
 8015a36:	68cb      	ldr	r3, [r1, #12]
 8015a38:	42a3      	cmp	r3, r4
 8015a3a:	d906      	bls.n	8015a4a <rcutils_string_map_reserve+0x26>
 8015a3c:	461c      	mov	r4, r3
 8015a3e:	2900      	cmp	r1, #0
 8015a40:	d1f9      	bne.n	8015a36 <rcutils_string_map_reserve+0x12>
 8015a42:	201f      	movs	r0, #31
 8015a44:	b002      	add	sp, #8
 8015a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a4a:	688b      	ldr	r3, [r1, #8]
 8015a4c:	42a3      	cmp	r3, r4
 8015a4e:	d047      	beq.n	8015ae0 <rcutils_string_map_reserve+0xbc>
 8015a50:	6a0e      	ldr	r6, [r1, #32]
 8015a52:	2c00      	cmp	r4, #0
 8015a54:	d034      	beq.n	8015ac0 <rcutils_string_map_reserve+0x9c>
 8015a56:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015a5a:	d243      	bcs.n	8015ae4 <rcutils_string_map_reserve+0xc0>
 8015a5c:	00a7      	lsls	r7, r4, #2
 8015a5e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015a62:	6808      	ldr	r0, [r1, #0]
 8015a64:	4632      	mov	r2, r6
 8015a66:	4639      	mov	r1, r7
 8015a68:	47c0      	blx	r8
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d03a      	beq.n	8015ae4 <rcutils_string_map_reserve+0xc0>
 8015a6e:	682b      	ldr	r3, [r5, #0]
 8015a70:	4632      	mov	r2, r6
 8015a72:	6018      	str	r0, [r3, #0]
 8015a74:	4639      	mov	r1, r7
 8015a76:	6858      	ldr	r0, [r3, #4]
 8015a78:	47c0      	blx	r8
 8015a7a:	2800      	cmp	r0, #0
 8015a7c:	d032      	beq.n	8015ae4 <rcutils_string_map_reserve+0xc0>
 8015a7e:	682d      	ldr	r5, [r5, #0]
 8015a80:	68ab      	ldr	r3, [r5, #8]
 8015a82:	6068      	str	r0, [r5, #4]
 8015a84:	42a3      	cmp	r3, r4
 8015a86:	d226      	bcs.n	8015ad6 <rcutils_string_map_reserve+0xb2>
 8015a88:	682a      	ldr	r2, [r5, #0]
 8015a8a:	eb00 0c07 	add.w	ip, r0, r7
 8015a8e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015a92:	45e6      	cmp	lr, ip
 8015a94:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015a98:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015a9c:	d203      	bcs.n	8015aa6 <rcutils_string_map_reserve+0x82>
 8015a9e:	eb02 0c07 	add.w	ip, r2, r7
 8015aa2:	4566      	cmp	r6, ip
 8015aa4:	d322      	bcc.n	8015aec <rcutils_string_map_reserve+0xc8>
 8015aa6:	1ae3      	subs	r3, r4, r3
 8015aa8:	009a      	lsls	r2, r3, #2
 8015aaa:	4670      	mov	r0, lr
 8015aac:	2100      	movs	r1, #0
 8015aae:	9201      	str	r2, [sp, #4]
 8015ab0:	f002 feec 	bl	801888c <memset>
 8015ab4:	9a01      	ldr	r2, [sp, #4]
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f002 fee7 	bl	801888c <memset>
 8015abe:	e00a      	b.n	8015ad6 <rcutils_string_map_reserve+0xb2>
 8015ac0:	694f      	ldr	r7, [r1, #20]
 8015ac2:	6808      	ldr	r0, [r1, #0]
 8015ac4:	4631      	mov	r1, r6
 8015ac6:	47b8      	blx	r7
 8015ac8:	682b      	ldr	r3, [r5, #0]
 8015aca:	4631      	mov	r1, r6
 8015acc:	6858      	ldr	r0, [r3, #4]
 8015ace:	601c      	str	r4, [r3, #0]
 8015ad0:	47b8      	blx	r7
 8015ad2:	682d      	ldr	r5, [r5, #0]
 8015ad4:	606c      	str	r4, [r5, #4]
 8015ad6:	2000      	movs	r0, #0
 8015ad8:	60ac      	str	r4, [r5, #8]
 8015ada:	b002      	add	sp, #8
 8015adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae0:	2000      	movs	r0, #0
 8015ae2:	e7af      	b.n	8015a44 <rcutils_string_map_reserve+0x20>
 8015ae4:	200a      	movs	r0, #10
 8015ae6:	e7ad      	b.n	8015a44 <rcutils_string_map_reserve+0x20>
 8015ae8:	200b      	movs	r0, #11
 8015aea:	4770      	bx	lr
 8015aec:	1f0b      	subs	r3, r1, #4
 8015aee:	4418      	add	r0, r3
 8015af0:	4413      	add	r3, r2
 8015af2:	3a04      	subs	r2, #4
 8015af4:	4417      	add	r7, r2
 8015af6:	2200      	movs	r2, #0
 8015af8:	f843 2f04 	str.w	r2, [r3, #4]!
 8015afc:	42bb      	cmp	r3, r7
 8015afe:	f840 2f04 	str.w	r2, [r0, #4]!
 8015b02:	d1f9      	bne.n	8015af8 <rcutils_string_map_reserve+0xd4>
 8015b04:	e7e7      	b.n	8015ad6 <rcutils_string_map_reserve+0xb2>
 8015b06:	bf00      	nop

08015b08 <rcutils_string_map_init>:
 8015b08:	b082      	sub	sp, #8
 8015b0a:	b570      	push	{r4, r5, r6, lr}
 8015b0c:	ac04      	add	r4, sp, #16
 8015b0e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015b12:	b380      	cbz	r0, 8015b76 <rcutils_string_map_init+0x6e>
 8015b14:	6806      	ldr	r6, [r0, #0]
 8015b16:	4604      	mov	r4, r0
 8015b18:	b12e      	cbz	r6, 8015b26 <rcutils_string_map_init+0x1e>
 8015b1a:	251e      	movs	r5, #30
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b22:	b002      	add	sp, #8
 8015b24:	4770      	bx	lr
 8015b26:	a804      	add	r0, sp, #16
 8015b28:	460d      	mov	r5, r1
 8015b2a:	f7f7 fbb7 	bl	800d29c <rcutils_allocator_is_valid>
 8015b2e:	b310      	cbz	r0, 8015b76 <rcutils_string_map_init+0x6e>
 8015b30:	9b04      	ldr	r3, [sp, #16]
 8015b32:	9908      	ldr	r1, [sp, #32]
 8015b34:	2024      	movs	r0, #36	@ 0x24
 8015b36:	4798      	blx	r3
 8015b38:	6020      	str	r0, [r4, #0]
 8015b3a:	b310      	cbz	r0, 8015b82 <rcutils_string_map_init+0x7a>
 8015b3c:	f10d 0e10 	add.w	lr, sp, #16
 8015b40:	e9c0 6600 	strd	r6, r6, [r0]
 8015b44:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015b48:	f100 0c10 	add.w	ip, r0, #16
 8015b4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b54:	f8de 3000 	ldr.w	r3, [lr]
 8015b58:	f8cc 3000 	str.w	r3, [ip]
 8015b5c:	4629      	mov	r1, r5
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f7ff ff60 	bl	8015a24 <rcutils_string_map_reserve>
 8015b64:	4605      	mov	r5, r0
 8015b66:	2800      	cmp	r0, #0
 8015b68:	d0d8      	beq.n	8015b1c <rcutils_string_map_init+0x14>
 8015b6a:	9b05      	ldr	r3, [sp, #20]
 8015b6c:	9908      	ldr	r1, [sp, #32]
 8015b6e:	6820      	ldr	r0, [r4, #0]
 8015b70:	4798      	blx	r3
 8015b72:	6026      	str	r6, [r4, #0]
 8015b74:	e7d2      	b.n	8015b1c <rcutils_string_map_init+0x14>
 8015b76:	250b      	movs	r5, #11
 8015b78:	4628      	mov	r0, r5
 8015b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b7e:	b002      	add	sp, #8
 8015b80:	4770      	bx	lr
 8015b82:	250a      	movs	r5, #10
 8015b84:	e7ca      	b.n	8015b1c <rcutils_string_map_init+0x14>
 8015b86:	bf00      	nop

08015b88 <rcutils_string_map_fini>:
 8015b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b8c:	b082      	sub	sp, #8
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	d03a      	beq.n	8015c08 <rcutils_string_map_fini+0x80>
 8015b92:	6804      	ldr	r4, [r0, #0]
 8015b94:	4606      	mov	r6, r0
 8015b96:	2c00      	cmp	r4, #0
 8015b98:	d032      	beq.n	8015c00 <rcutils_string_map_fini+0x78>
 8015b9a:	68a3      	ldr	r3, [r4, #8]
 8015b9c:	b32b      	cbz	r3, 8015bea <rcutils_string_map_fini+0x62>
 8015b9e:	2500      	movs	r5, #0
 8015ba0:	6822      	ldr	r2, [r4, #0]
 8015ba2:	462f      	mov	r7, r5
 8015ba4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015ba8:	b1e0      	cbz	r0, 8015be4 <rcutils_string_map_fini+0x5c>
 8015baa:	6a21      	ldr	r1, [r4, #32]
 8015bac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015bb0:	9101      	str	r1, [sp, #4]
 8015bb2:	47c0      	blx	r8
 8015bb4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015bb8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015bbc:	9901      	ldr	r1, [sp, #4]
 8015bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015bc2:	47c0      	blx	r8
 8015bc4:	68e3      	ldr	r3, [r4, #12]
 8015bc6:	6862      	ldr	r2, [r4, #4]
 8015bc8:	3b01      	subs	r3, #1
 8015bca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015bce:	60e3      	str	r3, [r4, #12]
 8015bd0:	6834      	ldr	r4, [r6, #0]
 8015bd2:	68a3      	ldr	r3, [r4, #8]
 8015bd4:	3501      	adds	r5, #1
 8015bd6:	429d      	cmp	r5, r3
 8015bd8:	d207      	bcs.n	8015bea <rcutils_string_map_fini+0x62>
 8015bda:	6822      	ldr	r2, [r4, #0]
 8015bdc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015be0:	2800      	cmp	r0, #0
 8015be2:	d1e2      	bne.n	8015baa <rcutils_string_map_fini+0x22>
 8015be4:	3501      	adds	r5, #1
 8015be6:	429d      	cmp	r5, r3
 8015be8:	d3dc      	bcc.n	8015ba4 <rcutils_string_map_fini+0x1c>
 8015bea:	2100      	movs	r1, #0
 8015bec:	4630      	mov	r0, r6
 8015bee:	f7ff ff19 	bl	8015a24 <rcutils_string_map_reserve>
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	b920      	cbnz	r0, 8015c00 <rcutils_string_map_fini+0x78>
 8015bf6:	6830      	ldr	r0, [r6, #0]
 8015bf8:	6943      	ldr	r3, [r0, #20]
 8015bfa:	6a01      	ldr	r1, [r0, #32]
 8015bfc:	4798      	blx	r3
 8015bfe:	6034      	str	r4, [r6, #0]
 8015c00:	4620      	mov	r0, r4
 8015c02:	b002      	add	sp, #8
 8015c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c08:	240b      	movs	r4, #11
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	b002      	add	sp, #8
 8015c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c12:	bf00      	nop

08015c14 <rcutils_string_map_getn>:
 8015c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c18:	b300      	cbz	r0, 8015c5c <rcutils_string_map_getn+0x48>
 8015c1a:	6807      	ldr	r7, [r0, #0]
 8015c1c:	b1ff      	cbz	r7, 8015c5e <rcutils_string_map_getn+0x4a>
 8015c1e:	4688      	mov	r8, r1
 8015c20:	b1e1      	cbz	r1, 8015c5c <rcutils_string_map_getn+0x48>
 8015c22:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015c26:	683e      	ldr	r6, [r7, #0]
 8015c28:	f1ba 0f00 	cmp.w	sl, #0
 8015c2c:	d016      	beq.n	8015c5c <rcutils_string_map_getn+0x48>
 8015c2e:	4691      	mov	r9, r2
 8015c30:	3e04      	subs	r6, #4
 8015c32:	2400      	movs	r4, #0
 8015c34:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015c38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	3401      	adds	r4, #1
 8015c40:	b155      	cbz	r5, 8015c58 <rcutils_string_map_getn+0x44>
 8015c42:	f7ea faf7 	bl	8000234 <strlen>
 8015c46:	4548      	cmp	r0, r9
 8015c48:	4602      	mov	r2, r0
 8015c4a:	4629      	mov	r1, r5
 8015c4c:	bf38      	it	cc
 8015c4e:	464a      	movcc	r2, r9
 8015c50:	4640      	mov	r0, r8
 8015c52:	f002 fe30 	bl	80188b6 <strncmp>
 8015c56:	b128      	cbz	r0, 8015c64 <rcutils_string_map_getn+0x50>
 8015c58:	45a2      	cmp	sl, r4
 8015c5a:	d1eb      	bne.n	8015c34 <rcutils_string_map_getn+0x20>
 8015c5c:	2700      	movs	r7, #0
 8015c5e:	4638      	mov	r0, r7
 8015c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f853 700b 	ldr.w	r7, [r3, fp]
 8015c6a:	4638      	mov	r0, r7
 8015c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c70 <rmw_get_zero_initialized_context>:
 8015c70:	b510      	push	{r4, lr}
 8015c72:	4604      	mov	r4, r0
 8015c74:	3010      	adds	r0, #16
 8015c76:	f7f7 fba3 	bl	800d3c0 <rmw_get_zero_initialized_init_options>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	2000      	movs	r0, #0
 8015c7e:	2100      	movs	r1, #0
 8015c80:	e9c4 0100 	strd	r0, r1, [r4]
 8015c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015c88:	60a3      	str	r3, [r4, #8]
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	bd10      	pop	{r4, pc}
 8015c8e:	bf00      	nop

08015c90 <rmw_time_equal>:
 8015c90:	b4f0      	push	{r4, r5, r6, r7}
 8015c92:	b084      	sub	sp, #16
 8015c94:	ac04      	add	r4, sp, #16
 8015c96:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	4924      	ldr	r1, [pc, #144]	@ (8015d30 <rmw_time_equal+0xa0>)
 8015c9e:	9e03      	ldr	r6, [sp, #12]
 8015ca0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015ca4:	2202      	movs	r2, #2
 8015ca6:	4299      	cmp	r1, r3
 8015ca8:	41aa      	sbcs	r2, r5
 8015caa:	d330      	bcc.n	8015d0e <rmw_time_equal+0x7e>
 8015cac:	4c21      	ldr	r4, [pc, #132]	@ (8015d34 <rmw_time_equal+0xa4>)
 8015cae:	fba3 3204 	umull	r3, r2, r3, r4
 8015cb2:	fb04 2205 	mla	r2, r4, r5, r2
 8015cb6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015cba:	43dd      	mvns	r5, r3
 8015cbc:	1a8c      	subs	r4, r1, r2
 8015cbe:	4285      	cmp	r5, r0
 8015cc0:	41b4      	sbcs	r4, r6
 8015cc2:	d332      	bcc.n	8015d2a <rmw_time_equal+0x9a>
 8015cc4:	eb10 0c03 	adds.w	ip, r0, r3
 8015cc8:	eb42 0106 	adc.w	r1, r2, r6
 8015ccc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015cd0:	4817      	ldr	r0, [pc, #92]	@ (8015d30 <rmw_time_equal+0xa0>)
 8015cd2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015cd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015cd6:	2202      	movs	r2, #2
 8015cd8:	4298      	cmp	r0, r3
 8015cda:	41b2      	sbcs	r2, r6
 8015cdc:	d31c      	bcc.n	8015d18 <rmw_time_equal+0x88>
 8015cde:	4c15      	ldr	r4, [pc, #84]	@ (8015d34 <rmw_time_equal+0xa4>)
 8015ce0:	fba3 3204 	umull	r3, r2, r3, r4
 8015ce4:	fb04 2206 	mla	r2, r4, r6, r2
 8015ce8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015cec:	43de      	mvns	r6, r3
 8015cee:	1a84      	subs	r4, r0, r2
 8015cf0:	42ae      	cmp	r6, r5
 8015cf2:	41bc      	sbcs	r4, r7
 8015cf4:	d315      	bcc.n	8015d22 <rmw_time_equal+0x92>
 8015cf6:	195b      	adds	r3, r3, r5
 8015cf8:	eb42 0207 	adc.w	r2, r2, r7
 8015cfc:	428a      	cmp	r2, r1
 8015cfe:	bf08      	it	eq
 8015d00:	4563      	cmpeq	r3, ip
 8015d02:	bf0c      	ite	eq
 8015d04:	2001      	moveq	r0, #1
 8015d06:	2000      	movne	r0, #0
 8015d08:	b004      	add	sp, #16
 8015d0a:	bcf0      	pop	{r4, r5, r6, r7}
 8015d0c:	4770      	bx	lr
 8015d0e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015d12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d16:	e7d9      	b.n	8015ccc <rmw_time_equal+0x3c>
 8015d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d1c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015d20:	e7ec      	b.n	8015cfc <rmw_time_equal+0x6c>
 8015d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015d26:	4602      	mov	r2, r0
 8015d28:	e7e8      	b.n	8015cfc <rmw_time_equal+0x6c>
 8015d2a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015d2e:	e7cd      	b.n	8015ccc <rmw_time_equal+0x3c>
 8015d30:	25c17d04 	.word	0x25c17d04
 8015d34:	3b9aca00 	.word	0x3b9aca00

08015d38 <rmw_time_total_nsec>:
 8015d38:	b470      	push	{r4, r5, r6}
 8015d3a:	b085      	sub	sp, #20
 8015d3c:	ac04      	add	r4, sp, #16
 8015d3e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015d42:	4603      	mov	r3, r0
 8015d44:	4912      	ldr	r1, [pc, #72]	@ (8015d90 <rmw_time_total_nsec+0x58>)
 8015d46:	9e03      	ldr	r6, [sp, #12]
 8015d48:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015d4c:	2202      	movs	r2, #2
 8015d4e:	4299      	cmp	r1, r3
 8015d50:	41aa      	sbcs	r2, r5
 8015d52:	d311      	bcc.n	8015d78 <rmw_time_total_nsec+0x40>
 8015d54:	4c0f      	ldr	r4, [pc, #60]	@ (8015d94 <rmw_time_total_nsec+0x5c>)
 8015d56:	fba3 3204 	umull	r3, r2, r3, r4
 8015d5a:	fb04 2205 	mla	r2, r4, r5, r2
 8015d5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d62:	43dd      	mvns	r5, r3
 8015d64:	1a8c      	subs	r4, r1, r2
 8015d66:	4285      	cmp	r5, r0
 8015d68:	41b4      	sbcs	r4, r6
 8015d6a:	d30c      	bcc.n	8015d86 <rmw_time_total_nsec+0x4e>
 8015d6c:	1818      	adds	r0, r3, r0
 8015d6e:	eb42 0106 	adc.w	r1, r2, r6
 8015d72:	b005      	add	sp, #20
 8015d74:	bc70      	pop	{r4, r5, r6}
 8015d76:	4770      	bx	lr
 8015d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d80:	b005      	add	sp, #20
 8015d82:	bc70      	pop	{r4, r5, r6}
 8015d84:	4770      	bx	lr
 8015d86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d8a:	b005      	add	sp, #20
 8015d8c:	bc70      	pop	{r4, r5, r6}
 8015d8e:	4770      	bx	lr
 8015d90:	25c17d04 	.word	0x25c17d04
 8015d94:	3b9aca00 	.word	0x3b9aca00

08015d98 <rmw_get_zero_initialized_message_info>:
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	2240      	movs	r2, #64	@ 0x40
 8015d9c:	4604      	mov	r4, r0
 8015d9e:	2100      	movs	r1, #0
 8015da0:	f002 fd74 	bl	801888c <memset>
 8015da4:	4620      	mov	r0, r4
 8015da6:	bd10      	pop	{r4, pc}

08015da8 <rmw_validate_full_topic_name>:
 8015da8:	2800      	cmp	r0, #0
 8015daa:	d057      	beq.n	8015e5c <rmw_validate_full_topic_name+0xb4>
 8015dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015db0:	460d      	mov	r5, r1
 8015db2:	2900      	cmp	r1, #0
 8015db4:	d054      	beq.n	8015e60 <rmw_validate_full_topic_name+0xb8>
 8015db6:	4616      	mov	r6, r2
 8015db8:	4604      	mov	r4, r0
 8015dba:	f7ea fa3b 	bl	8000234 <strlen>
 8015dbe:	b148      	cbz	r0, 8015dd4 <rmw_validate_full_topic_name+0x2c>
 8015dc0:	7823      	ldrb	r3, [r4, #0]
 8015dc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015dc4:	d00d      	beq.n	8015de2 <rmw_validate_full_topic_name+0x3a>
 8015dc6:	2302      	movs	r3, #2
 8015dc8:	602b      	str	r3, [r5, #0]
 8015dca:	b13e      	cbz	r6, 8015ddc <rmw_validate_full_topic_name+0x34>
 8015dcc:	2000      	movs	r0, #0
 8015dce:	6030      	str	r0, [r6, #0]
 8015dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	602b      	str	r3, [r5, #0]
 8015dd8:	2e00      	cmp	r6, #0
 8015dda:	d1f7      	bne.n	8015dcc <rmw_validate_full_topic_name+0x24>
 8015ddc:	2000      	movs	r0, #0
 8015dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de2:	1e43      	subs	r3, r0, #1
 8015de4:	5ce2      	ldrb	r2, [r4, r3]
 8015de6:	2a2f      	cmp	r2, #47	@ 0x2f
 8015de8:	d03c      	beq.n	8015e64 <rmw_validate_full_topic_name+0xbc>
 8015dea:	1e63      	subs	r3, r4, #1
 8015dec:	eb03 0800 	add.w	r8, r3, r0
 8015df0:	f1c4 0e01 	rsb	lr, r4, #1
 8015df4:	eb0e 0703 	add.w	r7, lr, r3
 8015df8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015dfc:	f021 0220 	bic.w	r2, r1, #32
 8015e00:	3a41      	subs	r2, #65	@ 0x41
 8015e02:	2a19      	cmp	r2, #25
 8015e04:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015e08:	d90b      	bls.n	8015e22 <rmw_validate_full_topic_name+0x7a>
 8015e0a:	295f      	cmp	r1, #95	@ 0x5f
 8015e0c:	d009      	beq.n	8015e22 <rmw_validate_full_topic_name+0x7a>
 8015e0e:	f1bc 0f0a 	cmp.w	ip, #10
 8015e12:	d906      	bls.n	8015e22 <rmw_validate_full_topic_name+0x7a>
 8015e14:	2304      	movs	r3, #4
 8015e16:	602b      	str	r3, [r5, #0]
 8015e18:	2e00      	cmp	r6, #0
 8015e1a:	d0df      	beq.n	8015ddc <rmw_validate_full_topic_name+0x34>
 8015e1c:	6037      	str	r7, [r6, #0]
 8015e1e:	2000      	movs	r0, #0
 8015e20:	e7d6      	b.n	8015dd0 <rmw_validate_full_topic_name+0x28>
 8015e22:	4543      	cmp	r3, r8
 8015e24:	d1e6      	bne.n	8015df4 <rmw_validate_full_topic_name+0x4c>
 8015e26:	4f1a      	ldr	r7, [pc, #104]	@ (8015e90 <rmw_validate_full_topic_name+0xe8>)
 8015e28:	2301      	movs	r3, #1
 8015e2a:	e004      	b.n	8015e36 <rmw_validate_full_topic_name+0x8e>
 8015e2c:	4298      	cmp	r0, r3
 8015e2e:	f104 0401 	add.w	r4, r4, #1
 8015e32:	d91c      	bls.n	8015e6e <rmw_validate_full_topic_name+0xc6>
 8015e34:	4613      	mov	r3, r2
 8015e36:	4298      	cmp	r0, r3
 8015e38:	f103 0201 	add.w	r2, r3, #1
 8015e3c:	d0f6      	beq.n	8015e2c <rmw_validate_full_topic_name+0x84>
 8015e3e:	7821      	ldrb	r1, [r4, #0]
 8015e40:	292f      	cmp	r1, #47	@ 0x2f
 8015e42:	d1f3      	bne.n	8015e2c <rmw_validate_full_topic_name+0x84>
 8015e44:	7861      	ldrb	r1, [r4, #1]
 8015e46:	292f      	cmp	r1, #47	@ 0x2f
 8015e48:	d01c      	beq.n	8015e84 <rmw_validate_full_topic_name+0xdc>
 8015e4a:	5dc9      	ldrb	r1, [r1, r7]
 8015e4c:	0749      	lsls	r1, r1, #29
 8015e4e:	d5ed      	bpl.n	8015e2c <rmw_validate_full_topic_name+0x84>
 8015e50:	2206      	movs	r2, #6
 8015e52:	602a      	str	r2, [r5, #0]
 8015e54:	2e00      	cmp	r6, #0
 8015e56:	d0c1      	beq.n	8015ddc <rmw_validate_full_topic_name+0x34>
 8015e58:	6033      	str	r3, [r6, #0]
 8015e5a:	e7bf      	b.n	8015ddc <rmw_validate_full_topic_name+0x34>
 8015e5c:	200b      	movs	r0, #11
 8015e5e:	4770      	bx	lr
 8015e60:	200b      	movs	r0, #11
 8015e62:	e7b5      	b.n	8015dd0 <rmw_validate_full_topic_name+0x28>
 8015e64:	2203      	movs	r2, #3
 8015e66:	602a      	str	r2, [r5, #0]
 8015e68:	2e00      	cmp	r6, #0
 8015e6a:	d1f5      	bne.n	8015e58 <rmw_validate_full_topic_name+0xb0>
 8015e6c:	e7b6      	b.n	8015ddc <rmw_validate_full_topic_name+0x34>
 8015e6e:	28f7      	cmp	r0, #247	@ 0xf7
 8015e70:	d802      	bhi.n	8015e78 <rmw_validate_full_topic_name+0xd0>
 8015e72:	2000      	movs	r0, #0
 8015e74:	6028      	str	r0, [r5, #0]
 8015e76:	e7ab      	b.n	8015dd0 <rmw_validate_full_topic_name+0x28>
 8015e78:	2307      	movs	r3, #7
 8015e7a:	602b      	str	r3, [r5, #0]
 8015e7c:	2e00      	cmp	r6, #0
 8015e7e:	d0ad      	beq.n	8015ddc <rmw_validate_full_topic_name+0x34>
 8015e80:	23f6      	movs	r3, #246	@ 0xf6
 8015e82:	e7e9      	b.n	8015e58 <rmw_validate_full_topic_name+0xb0>
 8015e84:	2205      	movs	r2, #5
 8015e86:	602a      	str	r2, [r5, #0]
 8015e88:	2e00      	cmp	r6, #0
 8015e8a:	d1e5      	bne.n	8015e58 <rmw_validate_full_topic_name+0xb0>
 8015e8c:	e7a6      	b.n	8015ddc <rmw_validate_full_topic_name+0x34>
 8015e8e:	bf00      	nop
 8015e90:	0801beda 	.word	0x0801beda

08015e94 <rmw_validate_namespace_with_size>:
 8015e94:	b340      	cbz	r0, 8015ee8 <rmw_validate_namespace_with_size+0x54>
 8015e96:	b570      	push	{r4, r5, r6, lr}
 8015e98:	4614      	mov	r4, r2
 8015e9a:	b0c2      	sub	sp, #264	@ 0x108
 8015e9c:	b332      	cbz	r2, 8015eec <rmw_validate_namespace_with_size+0x58>
 8015e9e:	2901      	cmp	r1, #1
 8015ea0:	460d      	mov	r5, r1
 8015ea2:	461e      	mov	r6, r3
 8015ea4:	d102      	bne.n	8015eac <rmw_validate_namespace_with_size+0x18>
 8015ea6:	7803      	ldrb	r3, [r0, #0]
 8015ea8:	2b2f      	cmp	r3, #47	@ 0x2f
 8015eaa:	d012      	beq.n	8015ed2 <rmw_validate_namespace_with_size+0x3e>
 8015eac:	aa01      	add	r2, sp, #4
 8015eae:	4669      	mov	r1, sp
 8015eb0:	f7ff ff7a 	bl	8015da8 <rmw_validate_full_topic_name>
 8015eb4:	b978      	cbnz	r0, 8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015eb6:	9b00      	ldr	r3, [sp, #0]
 8015eb8:	b14b      	cbz	r3, 8015ece <rmw_validate_namespace_with_size+0x3a>
 8015eba:	2b07      	cmp	r3, #7
 8015ebc:	d007      	beq.n	8015ece <rmw_validate_namespace_with_size+0x3a>
 8015ebe:	1e5a      	subs	r2, r3, #1
 8015ec0:	2a05      	cmp	r2, #5
 8015ec2:	d82b      	bhi.n	8015f1c <rmw_validate_namespace_with_size+0x88>
 8015ec4:	e8df f002 	tbb	[pc, r2]
 8015ec8:	1e212427 	.word	0x1e212427
 8015ecc:	141b      	.short	0x141b
 8015ece:	2df5      	cmp	r5, #245	@ 0xf5
 8015ed0:	d803      	bhi.n	8015eda <rmw_validate_namespace_with_size+0x46>
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	6020      	str	r0, [r4, #0]
 8015ed6:	b042      	add	sp, #264	@ 0x108
 8015ed8:	bd70      	pop	{r4, r5, r6, pc}
 8015eda:	2307      	movs	r3, #7
 8015edc:	6023      	str	r3, [r4, #0]
 8015ede:	2e00      	cmp	r6, #0
 8015ee0:	d0f9      	beq.n	8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015ee2:	23f4      	movs	r3, #244	@ 0xf4
 8015ee4:	6033      	str	r3, [r6, #0]
 8015ee6:	e7f6      	b.n	8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015ee8:	200b      	movs	r0, #11
 8015eea:	4770      	bx	lr
 8015eec:	200b      	movs	r0, #11
 8015eee:	e7f2      	b.n	8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015ef0:	2306      	movs	r3, #6
 8015ef2:	6023      	str	r3, [r4, #0]
 8015ef4:	2e00      	cmp	r6, #0
 8015ef6:	d0ee      	beq.n	8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015ef8:	9b01      	ldr	r3, [sp, #4]
 8015efa:	6033      	str	r3, [r6, #0]
 8015efc:	e7eb      	b.n	8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015efe:	2305      	movs	r3, #5
 8015f00:	6023      	str	r3, [r4, #0]
 8015f02:	e7f7      	b.n	8015ef4 <rmw_validate_namespace_with_size+0x60>
 8015f04:	2304      	movs	r3, #4
 8015f06:	6023      	str	r3, [r4, #0]
 8015f08:	e7f4      	b.n	8015ef4 <rmw_validate_namespace_with_size+0x60>
 8015f0a:	2303      	movs	r3, #3
 8015f0c:	6023      	str	r3, [r4, #0]
 8015f0e:	e7f1      	b.n	8015ef4 <rmw_validate_namespace_with_size+0x60>
 8015f10:	2302      	movs	r3, #2
 8015f12:	6023      	str	r3, [r4, #0]
 8015f14:	e7ee      	b.n	8015ef4 <rmw_validate_namespace_with_size+0x60>
 8015f16:	2301      	movs	r3, #1
 8015f18:	6023      	str	r3, [r4, #0]
 8015f1a:	e7eb      	b.n	8015ef4 <rmw_validate_namespace_with_size+0x60>
 8015f1c:	4a03      	ldr	r2, [pc, #12]	@ (8015f2c <rmw_validate_namespace_with_size+0x98>)
 8015f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015f22:	a802      	add	r0, sp, #8
 8015f24:	f7ff fd0e 	bl	8015944 <rcutils_snprintf>
 8015f28:	2001      	movs	r0, #1
 8015f2a:	e7d4      	b.n	8015ed6 <rmw_validate_namespace_with_size+0x42>
 8015f2c:	0801ba08 	.word	0x0801ba08

08015f30 <rmw_validate_namespace>:
 8015f30:	b168      	cbz	r0, 8015f4e <rmw_validate_namespace+0x1e>
 8015f32:	b570      	push	{r4, r5, r6, lr}
 8015f34:	460d      	mov	r5, r1
 8015f36:	4616      	mov	r6, r2
 8015f38:	4604      	mov	r4, r0
 8015f3a:	f7ea f97b 	bl	8000234 <strlen>
 8015f3e:	4633      	mov	r3, r6
 8015f40:	4601      	mov	r1, r0
 8015f42:	462a      	mov	r2, r5
 8015f44:	4620      	mov	r0, r4
 8015f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f4a:	f7ff bfa3 	b.w	8015e94 <rmw_validate_namespace_with_size>
 8015f4e:	200b      	movs	r0, #11
 8015f50:	4770      	bx	lr
 8015f52:	bf00      	nop

08015f54 <rmw_namespace_validation_result_string>:
 8015f54:	2807      	cmp	r0, #7
 8015f56:	bf9a      	itte	ls
 8015f58:	4b02      	ldrls	r3, [pc, #8]	@ (8015f64 <rmw_namespace_validation_result_string+0x10>)
 8015f5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015f5e:	4802      	ldrhi	r0, [pc, #8]	@ (8015f68 <rmw_namespace_validation_result_string+0x14>)
 8015f60:	4770      	bx	lr
 8015f62:	bf00      	nop
 8015f64:	0801bc00 	.word	0x0801bc00
 8015f68:	0801ba58 	.word	0x0801ba58

08015f6c <rmw_validate_node_name>:
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d03b      	beq.n	8015fe8 <rmw_validate_node_name+0x7c>
 8015f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f74:	460d      	mov	r5, r1
 8015f76:	2900      	cmp	r1, #0
 8015f78:	d038      	beq.n	8015fec <rmw_validate_node_name+0x80>
 8015f7a:	4616      	mov	r6, r2
 8015f7c:	4604      	mov	r4, r0
 8015f7e:	f7ea f959 	bl	8000234 <strlen>
 8015f82:	b1e0      	cbz	r0, 8015fbe <rmw_validate_node_name+0x52>
 8015f84:	1e63      	subs	r3, r4, #1
 8015f86:	eb03 0800 	add.w	r8, r3, r0
 8015f8a:	f1c4 0101 	rsb	r1, r4, #1
 8015f8e:	18cf      	adds	r7, r1, r3
 8015f90:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015f94:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015f98:	f02e 0c20 	bic.w	ip, lr, #32
 8015f9c:	2a09      	cmp	r2, #9
 8015f9e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015fa2:	d914      	bls.n	8015fce <rmw_validate_node_name+0x62>
 8015fa4:	f1bc 0f19 	cmp.w	ip, #25
 8015fa8:	d911      	bls.n	8015fce <rmw_validate_node_name+0x62>
 8015faa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015fae:	d00e      	beq.n	8015fce <rmw_validate_node_name+0x62>
 8015fb0:	2302      	movs	r3, #2
 8015fb2:	602b      	str	r3, [r5, #0]
 8015fb4:	b106      	cbz	r6, 8015fb8 <rmw_validate_node_name+0x4c>
 8015fb6:	6037      	str	r7, [r6, #0]
 8015fb8:	2000      	movs	r0, #0
 8015fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	602b      	str	r3, [r5, #0]
 8015fc2:	2e00      	cmp	r6, #0
 8015fc4:	d0f8      	beq.n	8015fb8 <rmw_validate_node_name+0x4c>
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	6030      	str	r0, [r6, #0]
 8015fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fce:	4543      	cmp	r3, r8
 8015fd0:	d1dd      	bne.n	8015f8e <rmw_validate_node_name+0x22>
 8015fd2:	7822      	ldrb	r2, [r4, #0]
 8015fd4:	4b0d      	ldr	r3, [pc, #52]	@ (801600c <rmw_validate_node_name+0xa0>)
 8015fd6:	5cd3      	ldrb	r3, [r2, r3]
 8015fd8:	f013 0304 	ands.w	r3, r3, #4
 8015fdc:	d110      	bne.n	8016000 <rmw_validate_node_name+0x94>
 8015fde:	28ff      	cmp	r0, #255	@ 0xff
 8015fe0:	d806      	bhi.n	8015ff0 <rmw_validate_node_name+0x84>
 8015fe2:	602b      	str	r3, [r5, #0]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	e7e8      	b.n	8015fba <rmw_validate_node_name+0x4e>
 8015fe8:	200b      	movs	r0, #11
 8015fea:	4770      	bx	lr
 8015fec:	200b      	movs	r0, #11
 8015fee:	e7e4      	b.n	8015fba <rmw_validate_node_name+0x4e>
 8015ff0:	2204      	movs	r2, #4
 8015ff2:	602a      	str	r2, [r5, #0]
 8015ff4:	2e00      	cmp	r6, #0
 8015ff6:	d0df      	beq.n	8015fb8 <rmw_validate_node_name+0x4c>
 8015ff8:	22fe      	movs	r2, #254	@ 0xfe
 8015ffa:	6032      	str	r2, [r6, #0]
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	e7dc      	b.n	8015fba <rmw_validate_node_name+0x4e>
 8016000:	2303      	movs	r3, #3
 8016002:	602b      	str	r3, [r5, #0]
 8016004:	2e00      	cmp	r6, #0
 8016006:	d1de      	bne.n	8015fc6 <rmw_validate_node_name+0x5a>
 8016008:	e7d6      	b.n	8015fb8 <rmw_validate_node_name+0x4c>
 801600a:	bf00      	nop
 801600c:	0801beda 	.word	0x0801beda

08016010 <rmw_node_name_validation_result_string>:
 8016010:	2804      	cmp	r0, #4
 8016012:	bf9a      	itte	ls
 8016014:	4b02      	ldrls	r3, [pc, #8]	@ (8016020 <rmw_node_name_validation_result_string+0x10>)
 8016016:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801601a:	4802      	ldrhi	r0, [pc, #8]	@ (8016024 <rmw_node_name_validation_result_string+0x14>)
 801601c:	4770      	bx	lr
 801601e:	bf00      	nop
 8016020:	0801bd0c 	.word	0x0801bd0c
 8016024:	0801bc20 	.word	0x0801bc20

08016028 <on_status>:
 8016028:	b082      	sub	sp, #8
 801602a:	b002      	add	sp, #8
 801602c:	4770      	bx	lr
 801602e:	bf00      	nop

08016030 <on_topic>:
 8016030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016034:	4a22      	ldr	r2, [pc, #136]	@ (80160c0 <on_topic+0x90>)
 8016036:	b094      	sub	sp, #80	@ 0x50
 8016038:	6812      	ldr	r2, [r2, #0]
 801603a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801603c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016040:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016044:	b3c2      	cbz	r2, 80160b8 <on_topic+0x88>
 8016046:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801604a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801604e:	e001      	b.n	8016054 <on_topic+0x24>
 8016050:	6852      	ldr	r2, [r2, #4]
 8016052:	b38a      	cbz	r2, 80160b8 <on_topic+0x88>
 8016054:	6894      	ldr	r4, [r2, #8]
 8016056:	8aa3      	ldrh	r3, [r4, #20]
 8016058:	428b      	cmp	r3, r1
 801605a:	d1f9      	bne.n	8016050 <on_topic+0x20>
 801605c:	7da3      	ldrb	r3, [r4, #22]
 801605e:	4283      	cmp	r3, r0
 8016060:	d1f6      	bne.n	8016050 <on_topic+0x20>
 8016062:	2248      	movs	r2, #72	@ 0x48
 8016064:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016068:	4668      	mov	r0, sp
 801606a:	f002 fcd8 	bl	8018a1e <memcpy>
 801606e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016072:	cb0c      	ldmia	r3, {r2, r3}
 8016074:	4620      	mov	r0, r4
 8016076:	f7f8 f9b5 	bl	800e3e4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801607a:	4607      	mov	r7, r0
 801607c:	b1e0      	cbz	r0, 80160b8 <on_topic+0x88>
 801607e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016082:	4632      	mov	r2, r6
 8016084:	4628      	mov	r0, r5
 8016086:	f108 0110 	add.w	r1, r8, #16
 801608a:	f7f8 ffcf 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 801608e:	b930      	cbnz	r0, 801609e <on_topic+0x6e>
 8016090:	480c      	ldr	r0, [pc, #48]	@ (80160c4 <on_topic+0x94>)
 8016092:	4639      	mov	r1, r7
 8016094:	b014      	add	sp, #80	@ 0x50
 8016096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801609a:	f000 b8bd 	b.w	8016218 <put_memory>
 801609e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80160a2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80160a6:	f7f7 ff9b 	bl	800dfe0 <rmw_uros_epoch_nanos>
 80160aa:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80160ae:	2305      	movs	r3, #5
 80160b0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80160b4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80160b8:	b014      	add	sp, #80	@ 0x50
 80160ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160be:	bf00      	nop
 80160c0:	2000b2e4 	.word	0x2000b2e4
 80160c4:	2000b2d4 	.word	0x2000b2d4

080160c8 <on_request>:
 80160c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160cc:	4823      	ldr	r0, [pc, #140]	@ (801615c <on_request+0x94>)
 80160ce:	b094      	sub	sp, #80	@ 0x50
 80160d0:	6800      	ldr	r0, [r0, #0]
 80160d2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80160d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80160d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80160da:	2800      	cmp	r0, #0
 80160dc:	d03b      	beq.n	8016156 <on_request+0x8e>
 80160de:	461d      	mov	r5, r3
 80160e0:	e001      	b.n	80160e6 <on_request+0x1e>
 80160e2:	6840      	ldr	r0, [r0, #4]
 80160e4:	b3b8      	cbz	r0, 8016156 <on_request+0x8e>
 80160e6:	6884      	ldr	r4, [r0, #8]
 80160e8:	8b21      	ldrh	r1, [r4, #24]
 80160ea:	4291      	cmp	r1, r2
 80160ec:	d1f9      	bne.n	80160e2 <on_request+0x1a>
 80160ee:	2248      	movs	r2, #72	@ 0x48
 80160f0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80160f4:	4668      	mov	r0, sp
 80160f6:	f002 fc92 	bl	8018a1e <memcpy>
 80160fa:	f104 0320 	add.w	r3, r4, #32
 80160fe:	cb0c      	ldmia	r3, {r2, r3}
 8016100:	4620      	mov	r0, r4
 8016102:	f7f8 f96f 	bl	800e3e4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016106:	4680      	mov	r8, r0
 8016108:	b328      	cbz	r0, 8016156 <on_request+0x8e>
 801610a:	4638      	mov	r0, r7
 801610c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016110:	4632      	mov	r2, r6
 8016112:	f107 0110 	add.w	r1, r7, #16
 8016116:	f7f8 ff89 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 801611a:	b930      	cbnz	r0, 801612a <on_request+0x62>
 801611c:	4810      	ldr	r0, [pc, #64]	@ (8016160 <on_request+0x98>)
 801611e:	4641      	mov	r1, r8
 8016120:	b014      	add	sp, #80	@ 0x50
 8016122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016126:	f000 b877 	b.w	8016218 <put_memory>
 801612a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801612c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016130:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016134:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801613c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016140:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016144:	f7f7 ff4c 	bl	800dfe0 <rmw_uros_epoch_nanos>
 8016148:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801614c:	2303      	movs	r3, #3
 801614e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016152:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016156:	b014      	add	sp, #80	@ 0x50
 8016158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801615c:	2000b2b4 	.word	0x2000b2b4
 8016160:	2000b2d4 	.word	0x2000b2d4

08016164 <on_reply>:
 8016164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016168:	4821      	ldr	r0, [pc, #132]	@ (80161f0 <on_reply+0x8c>)
 801616a:	b094      	sub	sp, #80	@ 0x50
 801616c:	6800      	ldr	r0, [r0, #0]
 801616e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016170:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016174:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016176:	b3b8      	cbz	r0, 80161e8 <on_reply+0x84>
 8016178:	461d      	mov	r5, r3
 801617a:	e001      	b.n	8016180 <on_reply+0x1c>
 801617c:	6840      	ldr	r0, [r0, #4]
 801617e:	b398      	cbz	r0, 80161e8 <on_reply+0x84>
 8016180:	6884      	ldr	r4, [r0, #8]
 8016182:	8b21      	ldrh	r1, [r4, #24]
 8016184:	4291      	cmp	r1, r2
 8016186:	d1f9      	bne.n	801617c <on_reply+0x18>
 8016188:	2248      	movs	r2, #72	@ 0x48
 801618a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801618e:	4668      	mov	r0, sp
 8016190:	f002 fc45 	bl	8018a1e <memcpy>
 8016194:	f104 0320 	add.w	r3, r4, #32
 8016198:	cb0c      	ldmia	r3, {r2, r3}
 801619a:	4620      	mov	r0, r4
 801619c:	f7f8 f922 	bl	800e3e4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80161a0:	4680      	mov	r8, r0
 80161a2:	b308      	cbz	r0, 80161e8 <on_reply+0x84>
 80161a4:	4638      	mov	r0, r7
 80161a6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80161aa:	4632      	mov	r2, r6
 80161ac:	f107 0110 	add.w	r1, r7, #16
 80161b0:	f7f8 ff3c 	bl	800f02c <ucdr_deserialize_array_uint8_t>
 80161b4:	b930      	cbnz	r0, 80161c4 <on_reply+0x60>
 80161b6:	480f      	ldr	r0, [pc, #60]	@ (80161f4 <on_reply+0x90>)
 80161b8:	4641      	mov	r1, r8
 80161ba:	b014      	add	sp, #80	@ 0x50
 80161bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161c0:	f000 b82a 	b.w	8016218 <put_memory>
 80161c4:	2200      	movs	r2, #0
 80161c6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80161ca:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80161ce:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80161d2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80161d6:	f7f7 ff03 	bl	800dfe0 <rmw_uros_epoch_nanos>
 80161da:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80161de:	2304      	movs	r3, #4
 80161e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80161e4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80161e8:	b014      	add	sp, #80	@ 0x50
 80161ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ee:	bf00      	nop
 80161f0:	200069c4 	.word	0x200069c4
 80161f4:	2000b2d4 	.word	0x2000b2d4

080161f8 <get_memory>:
 80161f8:	4603      	mov	r3, r0
 80161fa:	6840      	ldr	r0, [r0, #4]
 80161fc:	b158      	cbz	r0, 8016216 <get_memory+0x1e>
 80161fe:	6842      	ldr	r2, [r0, #4]
 8016200:	605a      	str	r2, [r3, #4]
 8016202:	b10a      	cbz	r2, 8016208 <get_memory+0x10>
 8016204:	2100      	movs	r1, #0
 8016206:	6011      	str	r1, [r2, #0]
 8016208:	681a      	ldr	r2, [r3, #0]
 801620a:	6042      	str	r2, [r0, #4]
 801620c:	b102      	cbz	r2, 8016210 <get_memory+0x18>
 801620e:	6010      	str	r0, [r2, #0]
 8016210:	2200      	movs	r2, #0
 8016212:	6002      	str	r2, [r0, #0]
 8016214:	6018      	str	r0, [r3, #0]
 8016216:	4770      	bx	lr

08016218 <put_memory>:
 8016218:	680b      	ldr	r3, [r1, #0]
 801621a:	b10b      	cbz	r3, 8016220 <put_memory+0x8>
 801621c:	684a      	ldr	r2, [r1, #4]
 801621e:	605a      	str	r2, [r3, #4]
 8016220:	684a      	ldr	r2, [r1, #4]
 8016222:	b102      	cbz	r2, 8016226 <put_memory+0xe>
 8016224:	6013      	str	r3, [r2, #0]
 8016226:	6803      	ldr	r3, [r0, #0]
 8016228:	428b      	cmp	r3, r1
 801622a:	6843      	ldr	r3, [r0, #4]
 801622c:	bf08      	it	eq
 801622e:	6002      	streq	r2, [r0, #0]
 8016230:	604b      	str	r3, [r1, #4]
 8016232:	b103      	cbz	r3, 8016236 <put_memory+0x1e>
 8016234:	6019      	str	r1, [r3, #0]
 8016236:	2300      	movs	r3, #0
 8016238:	600b      	str	r3, [r1, #0]
 801623a:	6041      	str	r1, [r0, #4]
 801623c:	4770      	bx	lr
 801623e:	bf00      	nop

08016240 <rmw_destroy_client>:
 8016240:	b570      	push	{r4, r5, r6, lr}
 8016242:	b128      	cbz	r0, 8016250 <rmw_destroy_client+0x10>
 8016244:	4604      	mov	r4, r0
 8016246:	6800      	ldr	r0, [r0, #0]
 8016248:	460d      	mov	r5, r1
 801624a:	f7f8 fa3f 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 801624e:	b910      	cbnz	r0, 8016256 <rmw_destroy_client+0x16>
 8016250:	2401      	movs	r4, #1
 8016252:	4620      	mov	r0, r4
 8016254:	bd70      	pop	{r4, r5, r6, pc}
 8016256:	6863      	ldr	r3, [r4, #4]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d0f9      	beq.n	8016250 <rmw_destroy_client+0x10>
 801625c:	2d00      	cmp	r5, #0
 801625e:	d0f7      	beq.n	8016250 <rmw_destroy_client+0x10>
 8016260:	6828      	ldr	r0, [r5, #0]
 8016262:	f7f8 fa33 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 8016266:	2800      	cmp	r0, #0
 8016268:	d0f2      	beq.n	8016250 <rmw_destroy_client+0x10>
 801626a:	686e      	ldr	r6, [r5, #4]
 801626c:	2e00      	cmp	r6, #0
 801626e:	d0ef      	beq.n	8016250 <rmw_destroy_client+0x10>
 8016270:	6864      	ldr	r4, [r4, #4]
 8016272:	6932      	ldr	r2, [r6, #16]
 8016274:	6920      	ldr	r0, [r4, #16]
 8016276:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801627a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801627e:	6819      	ldr	r1, [r3, #0]
 8016280:	f7f9 fa86 	bl	800f790 <uxr_buffer_cancel_data>
 8016284:	4602      	mov	r2, r0
 8016286:	6920      	ldr	r0, [r4, #16]
 8016288:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801628c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016290:	f7f8 f99c 	bl	800e5cc <run_xrce_session>
 8016294:	6920      	ldr	r0, [r4, #16]
 8016296:	6932      	ldr	r2, [r6, #16]
 8016298:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801629c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80162a0:	6819      	ldr	r1, [r3, #0]
 80162a2:	f7f9 f829 	bl	800f2f8 <uxr_buffer_delete_entity>
 80162a6:	4602      	mov	r2, r0
 80162a8:	6920      	ldr	r0, [r4, #16]
 80162aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80162ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80162b2:	f7f8 f98b 	bl	800e5cc <run_xrce_session>
 80162b6:	2800      	cmp	r0, #0
 80162b8:	4628      	mov	r0, r5
 80162ba:	bf14      	ite	ne
 80162bc:	2400      	movne	r4, #0
 80162be:	2402      	moveq	r4, #2
 80162c0:	f7f8 f86e 	bl	800e3a0 <rmw_uxrce_fini_client_memory>
 80162c4:	e7c5      	b.n	8016252 <rmw_destroy_client+0x12>
 80162c6:	bf00      	nop

080162c8 <rmw_get_implementation_identifier>:
 80162c8:	4b01      	ldr	r3, [pc, #4]	@ (80162d0 <rmw_get_implementation_identifier+0x8>)
 80162ca:	6818      	ldr	r0, [r3, #0]
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop
 80162d0:	0801bd38 	.word	0x0801bd38

080162d4 <create_topic>:
 80162d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d8:	4605      	mov	r5, r0
 80162da:	b084      	sub	sp, #16
 80162dc:	4822      	ldr	r0, [pc, #136]	@ (8016368 <create_topic+0x94>)
 80162de:	460f      	mov	r7, r1
 80162e0:	4616      	mov	r6, r2
 80162e2:	f7ff ff89 	bl	80161f8 <get_memory>
 80162e6:	4604      	mov	r4, r0
 80162e8:	2800      	cmp	r0, #0
 80162ea:	d039      	beq.n	8016360 <create_topic+0x8c>
 80162ec:	692b      	ldr	r3, [r5, #16]
 80162ee:	6884      	ldr	r4, [r0, #8]
 80162f0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016370 <create_topic+0x9c>
 80162f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80162f8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80162fc:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016300:	1c42      	adds	r2, r0, #1
 8016302:	2102      	movs	r1, #2
 8016304:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016308:	f7f9 fa12 	bl	800f730 <uxr_object_id>
 801630c:	223c      	movs	r2, #60	@ 0x3c
 801630e:	6120      	str	r0, [r4, #16]
 8016310:	4641      	mov	r1, r8
 8016312:	4638      	mov	r0, r7
 8016314:	f7f8 f9c0 	bl	800e698 <generate_topic_name>
 8016318:	b1f0      	cbz	r0, 8016358 <create_topic+0x84>
 801631a:	4f14      	ldr	r7, [pc, #80]	@ (801636c <create_topic+0x98>)
 801631c:	4630      	mov	r0, r6
 801631e:	2264      	movs	r2, #100	@ 0x64
 8016320:	4639      	mov	r1, r7
 8016322:	f7f8 f989 	bl	800e638 <generate_type_name>
 8016326:	b1b8      	cbz	r0, 8016358 <create_topic+0x84>
 8016328:	6928      	ldr	r0, [r5, #16]
 801632a:	2306      	movs	r3, #6
 801632c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016330:	f8cd 8000 	str.w	r8, [sp]
 8016334:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016338:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801633c:	6811      	ldr	r1, [r2, #0]
 801633e:	696b      	ldr	r3, [r5, #20]
 8016340:	6922      	ldr	r2, [r4, #16]
 8016342:	f7f9 f857 	bl	800f3f4 <uxr_buffer_create_topic_bin>
 8016346:	4602      	mov	r2, r0
 8016348:	6928      	ldr	r0, [r5, #16]
 801634a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801634e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016352:	f7f8 f93b 	bl	800e5cc <run_xrce_session>
 8016356:	b918      	cbnz	r0, 8016360 <create_topic+0x8c>
 8016358:	4620      	mov	r0, r4
 801635a:	f7f8 f837 	bl	800e3cc <rmw_uxrce_fini_topic_memory>
 801635e:	2400      	movs	r4, #0
 8016360:	4620      	mov	r0, r4
 8016362:	b004      	add	sp, #16
 8016364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016368:	2000b2f4 	.word	0x2000b2f4
 801636c:	2000b374 	.word	0x2000b374
 8016370:	2000b338 	.word	0x2000b338

08016374 <destroy_topic>:
 8016374:	b538      	push	{r3, r4, r5, lr}
 8016376:	6985      	ldr	r5, [r0, #24]
 8016378:	b1d5      	cbz	r5, 80163b0 <destroy_topic+0x3c>
 801637a:	4604      	mov	r4, r0
 801637c:	6928      	ldr	r0, [r5, #16]
 801637e:	6922      	ldr	r2, [r4, #16]
 8016380:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016388:	6819      	ldr	r1, [r3, #0]
 801638a:	f7f8 ffb5 	bl	800f2f8 <uxr_buffer_delete_entity>
 801638e:	4602      	mov	r2, r0
 8016390:	6928      	ldr	r0, [r5, #16]
 8016392:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016396:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801639a:	f7f8 f917 	bl	800e5cc <run_xrce_session>
 801639e:	2800      	cmp	r0, #0
 80163a0:	4620      	mov	r0, r4
 80163a2:	bf14      	ite	ne
 80163a4:	2400      	movne	r4, #0
 80163a6:	2402      	moveq	r4, #2
 80163a8:	f7f8 f810 	bl	800e3cc <rmw_uxrce_fini_topic_memory>
 80163ac:	4620      	mov	r0, r4
 80163ae:	bd38      	pop	{r3, r4, r5, pc}
 80163b0:	2401      	movs	r4, #1
 80163b2:	4620      	mov	r0, r4
 80163b4:	bd38      	pop	{r3, r4, r5, pc}
 80163b6:	bf00      	nop

080163b8 <rmw_send_request>:
 80163b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163bc:	4604      	mov	r4, r0
 80163be:	6800      	ldr	r0, [r0, #0]
 80163c0:	b08b      	sub	sp, #44	@ 0x2c
 80163c2:	460e      	mov	r6, r1
 80163c4:	4615      	mov	r5, r2
 80163c6:	b128      	cbz	r0, 80163d4 <rmw_send_request+0x1c>
 80163c8:	4b21      	ldr	r3, [pc, #132]	@ (8016450 <rmw_send_request+0x98>)
 80163ca:	6819      	ldr	r1, [r3, #0]
 80163cc:	f7e9 ff28 	bl	8000220 <strcmp>
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d139      	bne.n	8016448 <rmw_send_request+0x90>
 80163d4:	6864      	ldr	r4, [r4, #4]
 80163d6:	6963      	ldr	r3, [r4, #20]
 80163d8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80163dc:	689b      	ldr	r3, [r3, #8]
 80163de:	4798      	blx	r3
 80163e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80163e4:	4630      	mov	r0, r6
 80163e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163ea:	4798      	blx	r3
 80163ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163f0:	9000      	str	r0, [sp, #0]
 80163f2:	6922      	ldr	r2, [r4, #16]
 80163f4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80163f6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80163fa:	ab02      	add	r3, sp, #8
 80163fc:	f7fb fa82 	bl	8011904 <uxr_prepare_output_stream>
 8016400:	2700      	movs	r7, #0
 8016402:	6028      	str	r0, [r5, #0]
 8016404:	606f      	str	r7, [r5, #4]
 8016406:	b198      	cbz	r0, 8016430 <rmw_send_request+0x78>
 8016408:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801640c:	a902      	add	r1, sp, #8
 801640e:	4630      	mov	r0, r6
 8016410:	4798      	blx	r3
 8016412:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016416:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801641a:	2b01      	cmp	r3, #1
 801641c:	d00c      	beq.n	8016438 <rmw_send_request+0x80>
 801641e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016420:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016424:	f7f9 ff9a 	bl	801035c <uxr_run_session_until_confirm_delivery>
 8016428:	4638      	mov	r0, r7
 801642a:	b00b      	add	sp, #44	@ 0x2c
 801642c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016430:	2001      	movs	r0, #1
 8016432:	b00b      	add	sp, #44	@ 0x2c
 8016434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016438:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801643c:	f7f9 fbce 	bl	800fbdc <uxr_flash_output_streams>
 8016440:	4638      	mov	r0, r7
 8016442:	b00b      	add	sp, #44	@ 0x2c
 8016444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016448:	200c      	movs	r0, #12
 801644a:	b00b      	add	sp, #44	@ 0x2c
 801644c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016450:	0801bd38 	.word	0x0801bd38

08016454 <rmw_take_request>:
 8016454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016458:	4605      	mov	r5, r0
 801645a:	6800      	ldr	r0, [r0, #0]
 801645c:	b089      	sub	sp, #36	@ 0x24
 801645e:	460c      	mov	r4, r1
 8016460:	4690      	mov	r8, r2
 8016462:	461e      	mov	r6, r3
 8016464:	b128      	cbz	r0, 8016472 <rmw_take_request+0x1e>
 8016466:	4b28      	ldr	r3, [pc, #160]	@ (8016508 <rmw_take_request+0xb4>)
 8016468:	6819      	ldr	r1, [r3, #0]
 801646a:	f7e9 fed9 	bl	8000220 <strcmp>
 801646e:	2800      	cmp	r0, #0
 8016470:	d146      	bne.n	8016500 <rmw_take_request+0xac>
 8016472:	b10e      	cbz	r6, 8016478 <rmw_take_request+0x24>
 8016474:	2300      	movs	r3, #0
 8016476:	7033      	strb	r3, [r6, #0]
 8016478:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801647c:	f7f8 f828 	bl	800e4d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016480:	4648      	mov	r0, r9
 8016482:	f7f7 ffff 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016486:	4607      	mov	r7, r0
 8016488:	b3b0      	cbz	r0, 80164f8 <rmw_take_request+0xa4>
 801648a:	6885      	ldr	r5, [r0, #8]
 801648c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016490:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016494:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016498:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801649c:	7423      	strb	r3, [r4, #16]
 801649e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80164a2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80164a6:	74e2      	strb	r2, [r4, #19]
 80164a8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80164ac:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80164b0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80164b4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80164b8:	61e1      	str	r1, [r4, #28]
 80164ba:	6162      	str	r2, [r4, #20]
 80164bc:	61a3      	str	r3, [r4, #24]
 80164be:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80164c2:	689b      	ldr	r3, [r3, #8]
 80164c4:	4798      	blx	r3
 80164c6:	6844      	ldr	r4, [r0, #4]
 80164c8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80164cc:	f105 0110 	add.w	r1, r5, #16
 80164d0:	4668      	mov	r0, sp
 80164d2:	f7f5 fcf9 	bl	800bec8 <ucdr_init_buffer>
 80164d6:	68e3      	ldr	r3, [r4, #12]
 80164d8:	4641      	mov	r1, r8
 80164da:	4668      	mov	r0, sp
 80164dc:	4798      	blx	r3
 80164de:	4639      	mov	r1, r7
 80164e0:	4604      	mov	r4, r0
 80164e2:	480a      	ldr	r0, [pc, #40]	@ (801650c <rmw_take_request+0xb8>)
 80164e4:	f7ff fe98 	bl	8016218 <put_memory>
 80164e8:	b106      	cbz	r6, 80164ec <rmw_take_request+0x98>
 80164ea:	7034      	strb	r4, [r6, #0]
 80164ec:	f084 0001 	eor.w	r0, r4, #1
 80164f0:	b2c0      	uxtb	r0, r0
 80164f2:	b009      	add	sp, #36	@ 0x24
 80164f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164f8:	2001      	movs	r0, #1
 80164fa:	b009      	add	sp, #36	@ 0x24
 80164fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016500:	200c      	movs	r0, #12
 8016502:	b009      	add	sp, #36	@ 0x24
 8016504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016508:	0801bd38 	.word	0x0801bd38
 801650c:	2000b2d4 	.word	0x2000b2d4

08016510 <rmw_send_response>:
 8016510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016512:	4605      	mov	r5, r0
 8016514:	6800      	ldr	r0, [r0, #0]
 8016516:	b091      	sub	sp, #68	@ 0x44
 8016518:	460c      	mov	r4, r1
 801651a:	4616      	mov	r6, r2
 801651c:	b128      	cbz	r0, 801652a <rmw_send_response+0x1a>
 801651e:	4b29      	ldr	r3, [pc, #164]	@ (80165c4 <rmw_send_response+0xb4>)
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	f7e9 fe7d 	bl	8000220 <strcmp>
 8016526:	2800      	cmp	r0, #0
 8016528:	d141      	bne.n	80165ae <rmw_send_response+0x9e>
 801652a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801652e:	9306      	str	r3, [sp, #24]
 8016530:	4623      	mov	r3, r4
 8016532:	9207      	str	r2, [sp, #28]
 8016534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016538:	686d      	ldr	r5, [r5, #4]
 801653a:	789b      	ldrb	r3, [r3, #2]
 801653c:	68a1      	ldr	r1, [r4, #8]
 801653e:	f88d 2017 	strb.w	r2, [sp, #23]
 8016542:	f88d 3016 	strb.w	r3, [sp, #22]
 8016546:	68e2      	ldr	r2, [r4, #12]
 8016548:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801654c:	6860      	ldr	r0, [r4, #4]
 801654e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016552:	ab02      	add	r3, sp, #8
 8016554:	c307      	stmia	r3!, {r0, r1, r2}
 8016556:	696b      	ldr	r3, [r5, #20]
 8016558:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	4798      	blx	r3
 801655e:	6844      	ldr	r4, [r0, #4]
 8016560:	4630      	mov	r0, r6
 8016562:	6923      	ldr	r3, [r4, #16]
 8016564:	4798      	blx	r3
 8016566:	f100 0318 	add.w	r3, r0, #24
 801656a:	6938      	ldr	r0, [r7, #16]
 801656c:	9300      	str	r3, [sp, #0]
 801656e:	692a      	ldr	r2, [r5, #16]
 8016570:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016572:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016576:	ab08      	add	r3, sp, #32
 8016578:	f7fb f9c4 	bl	8011904 <uxr_prepare_output_stream>
 801657c:	b910      	cbnz	r0, 8016584 <rmw_send_response+0x74>
 801657e:	2001      	movs	r0, #1
 8016580:	b011      	add	sp, #68	@ 0x44
 8016582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016584:	a902      	add	r1, sp, #8
 8016586:	a808      	add	r0, sp, #32
 8016588:	f7fc fa16 	bl	80129b8 <uxr_serialize_SampleIdentity>
 801658c:	68a3      	ldr	r3, [r4, #8]
 801658e:	a908      	add	r1, sp, #32
 8016590:	4630      	mov	r0, r6
 8016592:	4798      	blx	r3
 8016594:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016598:	6938      	ldr	r0, [r7, #16]
 801659a:	2b01      	cmp	r3, #1
 801659c:	d00a      	beq.n	80165b4 <rmw_send_response+0xa4>
 801659e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80165a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80165a4:	f7f9 feda 	bl	801035c <uxr_run_session_until_confirm_delivery>
 80165a8:	2000      	movs	r0, #0
 80165aa:	b011      	add	sp, #68	@ 0x44
 80165ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ae:	200c      	movs	r0, #12
 80165b0:	b011      	add	sp, #68	@ 0x44
 80165b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80165b8:	f7f9 fb10 	bl	800fbdc <uxr_flash_output_streams>
 80165bc:	2000      	movs	r0, #0
 80165be:	b011      	add	sp, #68	@ 0x44
 80165c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165c2:	bf00      	nop
 80165c4:	0801bd38 	.word	0x0801bd38

080165c8 <rmw_take_response>:
 80165c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165cc:	4604      	mov	r4, r0
 80165ce:	6800      	ldr	r0, [r0, #0]
 80165d0:	b088      	sub	sp, #32
 80165d2:	4688      	mov	r8, r1
 80165d4:	4617      	mov	r7, r2
 80165d6:	461d      	mov	r5, r3
 80165d8:	b120      	cbz	r0, 80165e4 <rmw_take_response+0x1c>
 80165da:	4b1e      	ldr	r3, [pc, #120]	@ (8016654 <rmw_take_response+0x8c>)
 80165dc:	6819      	ldr	r1, [r3, #0]
 80165de:	f7e9 fe1f 	bl	8000220 <strcmp>
 80165e2:	bb78      	cbnz	r0, 8016644 <rmw_take_response+0x7c>
 80165e4:	b10d      	cbz	r5, 80165ea <rmw_take_response+0x22>
 80165e6:	2300      	movs	r3, #0
 80165e8:	702b      	strb	r3, [r5, #0]
 80165ea:	6864      	ldr	r4, [r4, #4]
 80165ec:	f7f7 ff70 	bl	800e4d0 <rmw_uxrce_clean_expired_static_input_buffer>
 80165f0:	4620      	mov	r0, r4
 80165f2:	f7f7 ff47 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 80165f6:	4606      	mov	r6, r0
 80165f8:	b340      	cbz	r0, 801664c <rmw_take_response+0x84>
 80165fa:	6963      	ldr	r3, [r4, #20]
 80165fc:	6884      	ldr	r4, [r0, #8]
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016604:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016608:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801660c:	4798      	blx	r3
 801660e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016612:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016616:	f104 0110 	add.w	r1, r4, #16
 801661a:	4668      	mov	r0, sp
 801661c:	f7f5 fc54 	bl	800bec8 <ucdr_init_buffer>
 8016620:	4639      	mov	r1, r7
 8016622:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016626:	4668      	mov	r0, sp
 8016628:	4798      	blx	r3
 801662a:	4631      	mov	r1, r6
 801662c:	4604      	mov	r4, r0
 801662e:	480a      	ldr	r0, [pc, #40]	@ (8016658 <rmw_take_response+0x90>)
 8016630:	f7ff fdf2 	bl	8016218 <put_memory>
 8016634:	b105      	cbz	r5, 8016638 <rmw_take_response+0x70>
 8016636:	702c      	strb	r4, [r5, #0]
 8016638:	f084 0001 	eor.w	r0, r4, #1
 801663c:	b2c0      	uxtb	r0, r0
 801663e:	b008      	add	sp, #32
 8016640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016644:	200c      	movs	r0, #12
 8016646:	b008      	add	sp, #32
 8016648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664c:	2001      	movs	r0, #1
 801664e:	b008      	add	sp, #32
 8016650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016654:	0801bd38 	.word	0x0801bd38
 8016658:	2000b2d4 	.word	0x2000b2d4

0801665c <rmw_take_with_info>:
 801665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665e:	4604      	mov	r4, r0
 8016660:	6800      	ldr	r0, [r0, #0]
 8016662:	b089      	sub	sp, #36	@ 0x24
 8016664:	460f      	mov	r7, r1
 8016666:	4615      	mov	r5, r2
 8016668:	b128      	cbz	r0, 8016676 <rmw_take_with_info+0x1a>
 801666a:	4b24      	ldr	r3, [pc, #144]	@ (80166fc <rmw_take_with_info+0xa0>)
 801666c:	6819      	ldr	r1, [r3, #0]
 801666e:	f7e9 fdd7 	bl	8000220 <strcmp>
 8016672:	2800      	cmp	r0, #0
 8016674:	d13e      	bne.n	80166f4 <rmw_take_with_info+0x98>
 8016676:	b305      	cbz	r5, 80166ba <rmw_take_with_info+0x5e>
 8016678:	6864      	ldr	r4, [r4, #4]
 801667a:	2300      	movs	r3, #0
 801667c:	702b      	strb	r3, [r5, #0]
 801667e:	f7f7 ff27 	bl	800e4d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016682:	4620      	mov	r0, r4
 8016684:	f7f7 fefe 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016688:	4606      	mov	r6, r0
 801668a:	b1f0      	cbz	r0, 80166ca <rmw_take_with_info+0x6e>
 801668c:	6881      	ldr	r1, [r0, #8]
 801668e:	4668      	mov	r0, sp
 8016690:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016694:	3110      	adds	r1, #16
 8016696:	f7f5 fc17 	bl	800bec8 <ucdr_init_buffer>
 801669a:	69a3      	ldr	r3, [r4, #24]
 801669c:	4639      	mov	r1, r7
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	4668      	mov	r0, sp
 80166a2:	4798      	blx	r3
 80166a4:	4631      	mov	r1, r6
 80166a6:	4604      	mov	r4, r0
 80166a8:	4815      	ldr	r0, [pc, #84]	@ (8016700 <rmw_take_with_info+0xa4>)
 80166aa:	f7ff fdb5 	bl	8016218 <put_memory>
 80166ae:	702c      	strb	r4, [r5, #0]
 80166b0:	f084 0001 	eor.w	r0, r4, #1
 80166b4:	b2c0      	uxtb	r0, r0
 80166b6:	b009      	add	sp, #36	@ 0x24
 80166b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ba:	6864      	ldr	r4, [r4, #4]
 80166bc:	f7f7 ff08 	bl	800e4d0 <rmw_uxrce_clean_expired_static_input_buffer>
 80166c0:	4620      	mov	r0, r4
 80166c2:	f7f7 fedf 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 80166c6:	4605      	mov	r5, r0
 80166c8:	b910      	cbnz	r0, 80166d0 <rmw_take_with_info+0x74>
 80166ca:	2001      	movs	r0, #1
 80166cc:	b009      	add	sp, #36	@ 0x24
 80166ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166d0:	68a9      	ldr	r1, [r5, #8]
 80166d2:	4668      	mov	r0, sp
 80166d4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80166d8:	3110      	adds	r1, #16
 80166da:	f7f5 fbf5 	bl	800bec8 <ucdr_init_buffer>
 80166de:	69a3      	ldr	r3, [r4, #24]
 80166e0:	4639      	mov	r1, r7
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	4668      	mov	r0, sp
 80166e6:	4798      	blx	r3
 80166e8:	4629      	mov	r1, r5
 80166ea:	4604      	mov	r4, r0
 80166ec:	4804      	ldr	r0, [pc, #16]	@ (8016700 <rmw_take_with_info+0xa4>)
 80166ee:	f7ff fd93 	bl	8016218 <put_memory>
 80166f2:	e7dd      	b.n	80166b0 <rmw_take_with_info+0x54>
 80166f4:	200c      	movs	r0, #12
 80166f6:	b009      	add	sp, #36	@ 0x24
 80166f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166fa:	bf00      	nop
 80166fc:	0801bd38 	.word	0x0801bd38
 8016700:	2000b2d4 	.word	0x2000b2d4

08016704 <rmw_wait>:
 8016704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016708:	b089      	sub	sp, #36	@ 0x24
 801670a:	4605      	mov	r5, r0
 801670c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801670e:	460e      	mov	r6, r1
 8016710:	4698      	mov	r8, r3
 8016712:	4691      	mov	r9, r2
 8016714:	2a00      	cmp	r2, #0
 8016716:	f000 810a 	beq.w	801692e <rmw_wait+0x22a>
 801671a:	b16c      	cbz	r4, 8016738 <rmw_wait+0x34>
 801671c:	4bae      	ldr	r3, [pc, #696]	@ (80169d8 <rmw_wait+0x2d4>)
 801671e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016720:	af04      	add	r7, sp, #16
 8016722:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016726:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801672a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801672e:	f7ff faaf 	bl	8015c90 <rmw_time_equal>
 8016732:	2800      	cmp	r0, #0
 8016734:	f000 8127 	beq.w	8016986 <rmw_wait+0x282>
 8016738:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801673c:	f7f7 fec8 	bl	800e4d0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016740:	4ba6      	ldr	r3, [pc, #664]	@ (80169dc <rmw_wait+0x2d8>)
 8016742:	681c      	ldr	r4, [r3, #0]
 8016744:	b14c      	cbz	r4, 801675a <rmw_wait+0x56>
 8016746:	4623      	mov	r3, r4
 8016748:	2100      	movs	r1, #0
 801674a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801674e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016752:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016756:	2b00      	cmp	r3, #0
 8016758:	d1f7      	bne.n	801674a <rmw_wait+0x46>
 801675a:	f1b9 0f00 	cmp.w	r9, #0
 801675e:	d011      	beq.n	8016784 <rmw_wait+0x80>
 8016760:	f8d9 1000 	ldr.w	r1, [r9]
 8016764:	b171      	cbz	r1, 8016784 <rmw_wait+0x80>
 8016766:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801676a:	2300      	movs	r3, #0
 801676c:	2001      	movs	r0, #1
 801676e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016772:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016774:	6912      	ldr	r2, [r2, #16]
 8016776:	3301      	adds	r3, #1
 8016778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801677c:	4299      	cmp	r1, r3
 801677e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016782:	d1f4      	bne.n	801676e <rmw_wait+0x6a>
 8016784:	f1b8 0f00 	cmp.w	r8, #0
 8016788:	d011      	beq.n	80167ae <rmw_wait+0xaa>
 801678a:	f8d8 1000 	ldr.w	r1, [r8]
 801678e:	b171      	cbz	r1, 80167ae <rmw_wait+0xaa>
 8016790:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016794:	2300      	movs	r3, #0
 8016796:	2001      	movs	r0, #1
 8016798:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801679c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801679e:	6912      	ldr	r2, [r2, #16]
 80167a0:	3301      	adds	r3, #1
 80167a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80167a6:	4299      	cmp	r1, r3
 80167a8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80167ac:	d1f4      	bne.n	8016798 <rmw_wait+0x94>
 80167ae:	b185      	cbz	r5, 80167d2 <rmw_wait+0xce>
 80167b0:	6829      	ldr	r1, [r5, #0]
 80167b2:	b171      	cbz	r1, 80167d2 <rmw_wait+0xce>
 80167b4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80167b8:	2300      	movs	r3, #0
 80167ba:	2001      	movs	r0, #1
 80167bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80167c0:	6a12      	ldr	r2, [r2, #32]
 80167c2:	6912      	ldr	r2, [r2, #16]
 80167c4:	3301      	adds	r3, #1
 80167c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80167ca:	4299      	cmp	r1, r3
 80167cc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80167d0:	d1f4      	bne.n	80167bc <rmw_wait+0xb8>
 80167d2:	b34c      	cbz	r4, 8016828 <rmw_wait+0x124>
 80167d4:	4622      	mov	r2, r4
 80167d6:	2300      	movs	r3, #0
 80167d8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80167dc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80167e0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80167e4:	440b      	add	r3, r1
 80167e6:	b2db      	uxtb	r3, r3
 80167e8:	2a00      	cmp	r2, #0
 80167ea:	d1f5      	bne.n	80167d8 <rmw_wait+0xd4>
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	f000 8084 	beq.w	80168fa <rmw_wait+0x1f6>
 80167f2:	1c7a      	adds	r2, r7, #1
 80167f4:	d00d      	beq.n	8016812 <rmw_wait+0x10e>
 80167f6:	ee07 7a90 	vmov	s15, r7
 80167fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80167fe:	ee07 3a90 	vmov	s15, r3
 8016802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801680a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801680e:	ee17 7a90 	vmov	r7, s15
 8016812:	68a0      	ldr	r0, [r4, #8]
 8016814:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016818:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801681c:	2b00      	cmp	r3, #0
 801681e:	f040 8090 	bne.w	8016942 <rmw_wait+0x23e>
 8016822:	6864      	ldr	r4, [r4, #4]
 8016824:	2c00      	cmp	r4, #0
 8016826:	d1f4      	bne.n	8016812 <rmw_wait+0x10e>
 8016828:	f1b9 0f00 	cmp.w	r9, #0
 801682c:	f000 80bc 	beq.w	80169a8 <rmw_wait+0x2a4>
 8016830:	f8d9 7000 	ldr.w	r7, [r9]
 8016834:	2f00      	cmp	r7, #0
 8016836:	f000 808e 	beq.w	8016956 <rmw_wait+0x252>
 801683a:	2400      	movs	r4, #0
 801683c:	4627      	mov	r7, r4
 801683e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016842:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016846:	f7f7 fe1d 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 801684a:	2800      	cmp	r0, #0
 801684c:	d05f      	beq.n	801690e <rmw_wait+0x20a>
 801684e:	f8d9 3000 	ldr.w	r3, [r9]
 8016852:	3401      	adds	r4, #1
 8016854:	42a3      	cmp	r3, r4
 8016856:	f04f 0701 	mov.w	r7, #1
 801685a:	d8f0      	bhi.n	801683e <rmw_wait+0x13a>
 801685c:	f1b8 0f00 	cmp.w	r8, #0
 8016860:	d012      	beq.n	8016888 <rmw_wait+0x184>
 8016862:	f8d8 3000 	ldr.w	r3, [r8]
 8016866:	b17b      	cbz	r3, 8016888 <rmw_wait+0x184>
 8016868:	2400      	movs	r4, #0
 801686a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801686e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016872:	f7f7 fe07 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016876:	2800      	cmp	r0, #0
 8016878:	d051      	beq.n	801691e <rmw_wait+0x21a>
 801687a:	f8d8 3000 	ldr.w	r3, [r8]
 801687e:	3401      	adds	r4, #1
 8016880:	42a3      	cmp	r3, r4
 8016882:	f04f 0701 	mov.w	r7, #1
 8016886:	d8f0      	bhi.n	801686a <rmw_wait+0x166>
 8016888:	b1dd      	cbz	r5, 80168c2 <rmw_wait+0x1be>
 801688a:	682b      	ldr	r3, [r5, #0]
 801688c:	b1cb      	cbz	r3, 80168c2 <rmw_wait+0x1be>
 801688e:	2400      	movs	r4, #0
 8016890:	686b      	ldr	r3, [r5, #4]
 8016892:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016896:	f7f7 fdf5 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 801689a:	b158      	cbz	r0, 80168b4 <rmw_wait+0x1b0>
 801689c:	682b      	ldr	r3, [r5, #0]
 801689e:	3401      	adds	r4, #1
 80168a0:	42a3      	cmp	r3, r4
 80168a2:	d969      	bls.n	8016978 <rmw_wait+0x274>
 80168a4:	686b      	ldr	r3, [r5, #4]
 80168a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80168aa:	2701      	movs	r7, #1
 80168ac:	f7f7 fdea 	bl	800e484 <rmw_uxrce_find_static_input_buffer_by_owner>
 80168b0:	2800      	cmp	r0, #0
 80168b2:	d1f3      	bne.n	801689c <rmw_wait+0x198>
 80168b4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80168b8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80168bc:	3401      	adds	r4, #1
 80168be:	42a3      	cmp	r3, r4
 80168c0:	d8e6      	bhi.n	8016890 <rmw_wait+0x18c>
 80168c2:	b1a6      	cbz	r6, 80168ee <rmw_wait+0x1ea>
 80168c4:	6834      	ldr	r4, [r6, #0]
 80168c6:	b194      	cbz	r4, 80168ee <rmw_wait+0x1ea>
 80168c8:	2300      	movs	r3, #0
 80168ca:	461d      	mov	r5, r3
 80168cc:	e004      	b.n	80168d8 <rmw_wait+0x1d4>
 80168ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80168d2:	3301      	adds	r3, #1
 80168d4:	42a3      	cmp	r3, r4
 80168d6:	d00a      	beq.n	80168ee <rmw_wait+0x1ea>
 80168d8:	6870      	ldr	r0, [r6, #4]
 80168da:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80168de:	7c0a      	ldrb	r2, [r1, #16]
 80168e0:	2a00      	cmp	r2, #0
 80168e2:	d0f4      	beq.n	80168ce <rmw_wait+0x1ca>
 80168e4:	3301      	adds	r3, #1
 80168e6:	42a3      	cmp	r3, r4
 80168e8:	740d      	strb	r5, [r1, #16]
 80168ea:	4617      	mov	r7, r2
 80168ec:	d1f4      	bne.n	80168d8 <rmw_wait+0x1d4>
 80168ee:	2f00      	cmp	r7, #0
 80168f0:	d03e      	beq.n	8016970 <rmw_wait+0x26c>
 80168f2:	2000      	movs	r0, #0
 80168f4:	b009      	add	sp, #36	@ 0x24
 80168f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168fa:	68a0      	ldr	r0, [r4, #8]
 80168fc:	2100      	movs	r1, #0
 80168fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016902:	f7f9 fcf1 	bl	80102e8 <uxr_run_session_timeout>
 8016906:	6864      	ldr	r4, [r4, #4]
 8016908:	2c00      	cmp	r4, #0
 801690a:	d1f6      	bne.n	80168fa <rmw_wait+0x1f6>
 801690c:	e78c      	b.n	8016828 <rmw_wait+0x124>
 801690e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016912:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016916:	3401      	adds	r4, #1
 8016918:	42a3      	cmp	r3, r4
 801691a:	d890      	bhi.n	801683e <rmw_wait+0x13a>
 801691c:	e79e      	b.n	801685c <rmw_wait+0x158>
 801691e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016922:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016926:	3401      	adds	r4, #1
 8016928:	429c      	cmp	r4, r3
 801692a:	d39e      	bcc.n	801686a <rmw_wait+0x166>
 801692c:	e7ac      	b.n	8016888 <rmw_wait+0x184>
 801692e:	2b00      	cmp	r3, #0
 8016930:	f47f aef3 	bne.w	801671a <rmw_wait+0x16>
 8016934:	2800      	cmp	r0, #0
 8016936:	f47f aef0 	bne.w	801671a <rmw_wait+0x16>
 801693a:	2900      	cmp	r1, #0
 801693c:	f47f aeed 	bne.w	801671a <rmw_wait+0x16>
 8016940:	e7d7      	b.n	80168f2 <rmw_wait+0x1ee>
 8016942:	4639      	mov	r1, r7
 8016944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016948:	f7f9 fce8 	bl	801031c <uxr_run_session_until_data>
 801694c:	6864      	ldr	r4, [r4, #4]
 801694e:	2c00      	cmp	r4, #0
 8016950:	f47f af5f 	bne.w	8016812 <rmw_wait+0x10e>
 8016954:	e768      	b.n	8016828 <rmw_wait+0x124>
 8016956:	f1b8 0f00 	cmp.w	r8, #0
 801695a:	d032      	beq.n	80169c2 <rmw_wait+0x2be>
 801695c:	f8d8 3000 	ldr.w	r3, [r8]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d181      	bne.n	8016868 <rmw_wait+0x164>
 8016964:	461f      	mov	r7, r3
 8016966:	2d00      	cmp	r5, #0
 8016968:	d18f      	bne.n	801688a <rmw_wait+0x186>
 801696a:	462f      	mov	r7, r5
 801696c:	2e00      	cmp	r6, #0
 801696e:	d1a9      	bne.n	80168c4 <rmw_wait+0x1c0>
 8016970:	2002      	movs	r0, #2
 8016972:	b009      	add	sp, #36	@ 0x24
 8016974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016978:	2e00      	cmp	r6, #0
 801697a:	d0ba      	beq.n	80168f2 <rmw_wait+0x1ee>
 801697c:	6834      	ldr	r4, [r6, #0]
 801697e:	2701      	movs	r7, #1
 8016980:	2c00      	cmp	r4, #0
 8016982:	d1a1      	bne.n	80168c8 <rmw_wait+0x1c4>
 8016984:	e7b5      	b.n	80168f2 <rmw_wait+0x1ee>
 8016986:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801698a:	f7ff f9d5 	bl	8015d38 <rmw_time_total_nsec>
 801698e:	2300      	movs	r3, #0
 8016990:	4a13      	ldr	r2, [pc, #76]	@ (80169e0 <rmw_wait+0x2dc>)
 8016992:	f7ea f991 	bl	8000cb8 <__aeabi_uldivmod>
 8016996:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801699a:	f171 0300 	sbcs.w	r3, r1, #0
 801699e:	4607      	mov	r7, r0
 80169a0:	bfa8      	it	ge
 80169a2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80169a6:	e6c9      	b.n	801673c <rmw_wait+0x38>
 80169a8:	f1b8 0f00 	cmp.w	r8, #0
 80169ac:	d009      	beq.n	80169c2 <rmw_wait+0x2be>
 80169ae:	f8d8 3000 	ldr.w	r3, [r8]
 80169b2:	464f      	mov	r7, r9
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	f47f af57 	bne.w	8016868 <rmw_wait+0x164>
 80169ba:	2d00      	cmp	r5, #0
 80169bc:	f47f af65 	bne.w	801688a <rmw_wait+0x186>
 80169c0:	e7d3      	b.n	801696a <rmw_wait+0x266>
 80169c2:	b17d      	cbz	r5, 80169e4 <rmw_wait+0x2e0>
 80169c4:	682b      	ldr	r3, [r5, #0]
 80169c6:	4647      	mov	r7, r8
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f47f af60 	bne.w	801688e <rmw_wait+0x18a>
 80169ce:	2e00      	cmp	r6, #0
 80169d0:	f47f af78 	bne.w	80168c4 <rmw_wait+0x1c0>
 80169d4:	e7cc      	b.n	8016970 <rmw_wait+0x26c>
 80169d6:	bf00      	nop
 80169d8:	0801af28 	.word	0x0801af28
 80169dc:	2000b2c4 	.word	0x2000b2c4
 80169e0:	000f4240 	.word	0x000f4240
 80169e4:	2e00      	cmp	r6, #0
 80169e6:	d0c3      	beq.n	8016970 <rmw_wait+0x26c>
 80169e8:	6834      	ldr	r4, [r6, #0]
 80169ea:	462f      	mov	r7, r5
 80169ec:	2c00      	cmp	r4, #0
 80169ee:	f47f af6b 	bne.w	80168c8 <rmw_wait+0x1c4>
 80169f2:	e7bd      	b.n	8016970 <rmw_wait+0x26c>

080169f4 <rmw_create_wait_set>:
 80169f4:	b508      	push	{r3, lr}
 80169f6:	4803      	ldr	r0, [pc, #12]	@ (8016a04 <rmw_create_wait_set+0x10>)
 80169f8:	f7ff fbfe 	bl	80161f8 <get_memory>
 80169fc:	b108      	cbz	r0, 8016a02 <rmw_create_wait_set+0xe>
 80169fe:	6880      	ldr	r0, [r0, #8]
 8016a00:	3010      	adds	r0, #16
 8016a02:	bd08      	pop	{r3, pc}
 8016a04:	2000b304 	.word	0x2000b304

08016a08 <rmw_destroy_wait_set>:
 8016a08:	b508      	push	{r3, lr}
 8016a0a:	4b08      	ldr	r3, [pc, #32]	@ (8016a2c <rmw_destroy_wait_set+0x24>)
 8016a0c:	6819      	ldr	r1, [r3, #0]
 8016a0e:	b911      	cbnz	r1, 8016a16 <rmw_destroy_wait_set+0xe>
 8016a10:	e00a      	b.n	8016a28 <rmw_destroy_wait_set+0x20>
 8016a12:	6849      	ldr	r1, [r1, #4]
 8016a14:	b141      	cbz	r1, 8016a28 <rmw_destroy_wait_set+0x20>
 8016a16:	688b      	ldr	r3, [r1, #8]
 8016a18:	3310      	adds	r3, #16
 8016a1a:	4298      	cmp	r0, r3
 8016a1c:	d1f9      	bne.n	8016a12 <rmw_destroy_wait_set+0xa>
 8016a1e:	4803      	ldr	r0, [pc, #12]	@ (8016a2c <rmw_destroy_wait_set+0x24>)
 8016a20:	f7ff fbfa 	bl	8016218 <put_memory>
 8016a24:	2000      	movs	r0, #0
 8016a26:	bd08      	pop	{r3, pc}
 8016a28:	2001      	movs	r0, #1
 8016a2a:	bd08      	pop	{r3, pc}
 8016a2c:	2000b304 	.word	0x2000b304

08016a30 <sensor_msgs__msg__Imu__init>:
 8016a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a34:	4605      	mov	r5, r0
 8016a36:	b3c0      	cbz	r0, 8016aaa <sensor_msgs__msg__Imu__init+0x7a>
 8016a38:	f000 f864 	bl	8016b04 <std_msgs__msg__Header__init>
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	b310      	cbz	r0, 8016a86 <sensor_msgs__msg__Imu__init+0x56>
 8016a40:	f105 0618 	add.w	r6, r5, #24
 8016a44:	4630      	mov	r0, r6
 8016a46:	f000 f893 	bl	8016b70 <geometry_msgs__msg__Quaternion__init>
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	d040      	beq.n	8016ad2 <sensor_msgs__msg__Imu__init+0xa2>
 8016a50:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8016a54:	4638      	mov	r0, r7
 8016a56:	f7f8 f951 	bl	800ecfc <geometry_msgs__msg__Vector3__init>
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	b348      	cbz	r0, 8016ab2 <sensor_msgs__msg__Imu__init+0x82>
 8016a5e:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8016a62:	4640      	mov	r0, r8
 8016a64:	f7f8 f94a 	bl	800ecfc <geometry_msgs__msg__Vector3__init>
 8016a68:	4604      	mov	r4, r0
 8016a6a:	b9d8      	cbnz	r0, 8016aa4 <sensor_msgs__msg__Imu__init+0x74>
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	f000 f86d 	bl	8016b4c <std_msgs__msg__Header__fini>
 8016a72:	4630      	mov	r0, r6
 8016a74:	f000 f890 	bl	8016b98 <geometry_msgs__msg__Quaternion__fini>
 8016a78:	4638      	mov	r0, r7
 8016a7a:	f7f8 f943 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016a7e:	4640      	mov	r0, r8
 8016a80:	f7f8 f940 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016a84:	e00e      	b.n	8016aa4 <sensor_msgs__msg__Imu__init+0x74>
 8016a86:	4628      	mov	r0, r5
 8016a88:	f000 f860 	bl	8016b4c <std_msgs__msg__Header__fini>
 8016a8c:	f105 0018 	add.w	r0, r5, #24
 8016a90:	f000 f882 	bl	8016b98 <geometry_msgs__msg__Quaternion__fini>
 8016a94:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8016a98:	f7f8 f934 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016a9c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016aa0:	f7f8 f930 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aaa:	4604      	mov	r4, r0
 8016aac:	4620      	mov	r0, r4
 8016aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	f000 f84a 	bl	8016b4c <std_msgs__msg__Header__fini>
 8016ab8:	4630      	mov	r0, r6
 8016aba:	f000 f86d 	bl	8016b98 <geometry_msgs__msg__Quaternion__fini>
 8016abe:	4638      	mov	r0, r7
 8016ac0:	f7f8 f920 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016ac4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016ac8:	f7f8 f91c 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016acc:	4620      	mov	r0, r4
 8016ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	f000 f83a 	bl	8016b4c <std_msgs__msg__Header__fini>
 8016ad8:	4630      	mov	r0, r6
 8016ada:	e7d9      	b.n	8016a90 <sensor_msgs__msg__Imu__init+0x60>

08016adc <sensor_msgs__msg__Imu__fini>:
 8016adc:	b188      	cbz	r0, 8016b02 <sensor_msgs__msg__Imu__fini+0x26>
 8016ade:	b510      	push	{r4, lr}
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	f000 f833 	bl	8016b4c <std_msgs__msg__Header__fini>
 8016ae6:	f104 0018 	add.w	r0, r4, #24
 8016aea:	f000 f855 	bl	8016b98 <geometry_msgs__msg__Quaternion__fini>
 8016aee:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8016af2:	f7f8 f907 	bl	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016af6:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8016afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016afe:	f7f8 b901 	b.w	800ed04 <geometry_msgs__msg__Vector3__fini>
 8016b02:	4770      	bx	lr

08016b04 <std_msgs__msg__Header__init>:
 8016b04:	b570      	push	{r4, r5, r6, lr}
 8016b06:	4605      	mov	r5, r0
 8016b08:	b1a8      	cbz	r0, 8016b36 <std_msgs__msg__Header__init+0x32>
 8016b0a:	f000 f82b 	bl	8016b64 <builtin_interfaces__msg__Time__init>
 8016b0e:	4604      	mov	r4, r0
 8016b10:	b140      	cbz	r0, 8016b24 <std_msgs__msg__Header__init+0x20>
 8016b12:	f105 0608 	add.w	r6, r5, #8
 8016b16:	4630      	mov	r0, r6
 8016b18:	f001 f970 	bl	8017dfc <rosidl_runtime_c__String__init>
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	b168      	cbz	r0, 8016b3c <std_msgs__msg__Header__init+0x38>
 8016b20:	4620      	mov	r0, r4
 8016b22:	bd70      	pop	{r4, r5, r6, pc}
 8016b24:	4628      	mov	r0, r5
 8016b26:	f000 f821 	bl	8016b6c <builtin_interfaces__msg__Time__fini>
 8016b2a:	f105 0008 	add.w	r0, r5, #8
 8016b2e:	f001 f97b 	bl	8017e28 <rosidl_runtime_c__String__fini>
 8016b32:	4620      	mov	r0, r4
 8016b34:	bd70      	pop	{r4, r5, r6, pc}
 8016b36:	4604      	mov	r4, r0
 8016b38:	4620      	mov	r0, r4
 8016b3a:	bd70      	pop	{r4, r5, r6, pc}
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	f000 f815 	bl	8016b6c <builtin_interfaces__msg__Time__fini>
 8016b42:	4630      	mov	r0, r6
 8016b44:	f001 f970 	bl	8017e28 <rosidl_runtime_c__String__fini>
 8016b48:	e7ea      	b.n	8016b20 <std_msgs__msg__Header__init+0x1c>
 8016b4a:	bf00      	nop

08016b4c <std_msgs__msg__Header__fini>:
 8016b4c:	b148      	cbz	r0, 8016b62 <std_msgs__msg__Header__fini+0x16>
 8016b4e:	b510      	push	{r4, lr}
 8016b50:	4604      	mov	r4, r0
 8016b52:	f000 f80b 	bl	8016b6c <builtin_interfaces__msg__Time__fini>
 8016b56:	f104 0008 	add.w	r0, r4, #8
 8016b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b5e:	f001 b963 	b.w	8017e28 <rosidl_runtime_c__String__fini>
 8016b62:	4770      	bx	lr

08016b64 <builtin_interfaces__msg__Time__init>:
 8016b64:	3800      	subs	r0, #0
 8016b66:	bf18      	it	ne
 8016b68:	2001      	movne	r0, #1
 8016b6a:	4770      	bx	lr

08016b6c <builtin_interfaces__msg__Time__fini>:
 8016b6c:	4770      	bx	lr
 8016b6e:	bf00      	nop

08016b70 <geometry_msgs__msg__Quaternion__init>:
 8016b70:	b160      	cbz	r0, 8016b8c <geometry_msgs__msg__Quaternion__init+0x1c>
 8016b72:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016b90 <geometry_msgs__msg__Quaternion__init+0x20>
 8016b76:	2200      	movs	r2, #0
 8016b78:	2300      	movs	r3, #0
 8016b7a:	e9c0 2300 	strd	r2, r3, [r0]
 8016b7e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016b82:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016b86:	ed80 7b06 	vstr	d7, [r0, #24]
 8016b8a:	2001      	movs	r0, #1
 8016b8c:	4770      	bx	lr
 8016b8e:	bf00      	nop
 8016b90:	00000000 	.word	0x00000000
 8016b94:	3ff00000 	.word	0x3ff00000

08016b98 <geometry_msgs__msg__Quaternion__fini>:
 8016b98:	4770      	bx	lr
 8016b9a:	bf00      	nop

08016b9c <ucdr_serialize_string>:
 8016b9c:	b510      	push	{r4, lr}
 8016b9e:	b082      	sub	sp, #8
 8016ba0:	4604      	mov	r4, r0
 8016ba2:	4608      	mov	r0, r1
 8016ba4:	9101      	str	r1, [sp, #4]
 8016ba6:	f7e9 fb45 	bl	8000234 <strlen>
 8016baa:	9901      	ldr	r1, [sp, #4]
 8016bac:	1c42      	adds	r2, r0, #1
 8016bae:	4620      	mov	r0, r4
 8016bb0:	b002      	add	sp, #8
 8016bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bb6:	f7f8 bb47 	b.w	800f248 <ucdr_serialize_sequence_char>
 8016bba:	bf00      	nop

08016bbc <ucdr_deserialize_string>:
 8016bbc:	b500      	push	{lr}
 8016bbe:	b083      	sub	sp, #12
 8016bc0:	ab01      	add	r3, sp, #4
 8016bc2:	f7f8 fb53 	bl	800f26c <ucdr_deserialize_sequence_char>
 8016bc6:	b003      	add	sp, #12
 8016bc8:	f85d fb04 	ldr.w	pc, [sp], #4

08016bcc <uxr_init_input_best_effort_stream>:
 8016bcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016bd0:	8003      	strh	r3, [r0, #0]
 8016bd2:	4770      	bx	lr

08016bd4 <uxr_reset_input_best_effort_stream>:
 8016bd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016bd8:	8003      	strh	r3, [r0, #0]
 8016bda:	4770      	bx	lr

08016bdc <uxr_receive_best_effort_message>:
 8016bdc:	b538      	push	{r3, r4, r5, lr}
 8016bde:	4604      	mov	r4, r0
 8016be0:	8800      	ldrh	r0, [r0, #0]
 8016be2:	460d      	mov	r5, r1
 8016be4:	f000 fd42 	bl	801766c <uxr_seq_num_cmp>
 8016be8:	4603      	mov	r3, r0
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016bf0:	bfb8      	it	lt
 8016bf2:	8025      	strhlt	r5, [r4, #0]
 8016bf4:	bd38      	pop	{r3, r4, r5, pc}
 8016bf6:	bf00      	nop

08016bf8 <on_full_input_buffer>:
 8016bf8:	b570      	push	{r4, r5, r6, lr}
 8016bfa:	4605      	mov	r5, r0
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	682b      	ldr	r3, [r5, #0]
 8016c00:	6809      	ldr	r1, [r1, #0]
 8016c02:	8920      	ldrh	r0, [r4, #8]
 8016c04:	6862      	ldr	r2, [r4, #4]
 8016c06:	fbb2 f2f0 	udiv	r2, r2, r0
 8016c0a:	eba3 0c01 	sub.w	ip, r3, r1
 8016c0e:	fbbc fcf2 	udiv	ip, ip, r2
 8016c12:	f10c 0c01 	add.w	ip, ip, #1
 8016c16:	fa1f f38c 	uxth.w	r3, ip
 8016c1a:	fbb3 f6f0 	udiv	r6, r3, r0
 8016c1e:	fb00 3316 	mls	r3, r0, r6, r3
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	fb02 f303 	mul.w	r3, r2, r3
 8016c28:	1d18      	adds	r0, r3, #4
 8016c2a:	4408      	add	r0, r1
 8016c2c:	7d26      	ldrb	r6, [r4, #20]
 8016c2e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016c32:	b116      	cbz	r6, 8016c3a <on_full_input_buffer+0x42>
 8016c34:	2600      	movs	r6, #0
 8016c36:	f840 6c04 	str.w	r6, [r0, #-4]
 8016c3a:	2a03      	cmp	r2, #3
 8016c3c:	d801      	bhi.n	8016c42 <on_full_input_buffer+0x4a>
 8016c3e:	2001      	movs	r0, #1
 8016c40:	bd70      	pop	{r4, r5, r6, pc}
 8016c42:	3308      	adds	r3, #8
 8016c44:	4419      	add	r1, r3
 8016c46:	4628      	mov	r0, r5
 8016c48:	692b      	ldr	r3, [r5, #16]
 8016c4a:	3a04      	subs	r2, #4
 8016c4c:	f7f5 f934 	bl	800beb8 <ucdr_init_buffer_origin>
 8016c50:	4628      	mov	r0, r5
 8016c52:	4903      	ldr	r1, [pc, #12]	@ (8016c60 <on_full_input_buffer+0x68>)
 8016c54:	4622      	mov	r2, r4
 8016c56:	f7f5 f90b 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	bf00      	nop
 8016c60:	08016bf9 	.word	0x08016bf9

08016c64 <uxr_init_input_reliable_stream>:
 8016c64:	b500      	push	{lr}
 8016c66:	e9c0 1200 	strd	r1, r2, [r0]
 8016c6a:	f04f 0e00 	mov.w	lr, #0
 8016c6e:	9a01      	ldr	r2, [sp, #4]
 8016c70:	8103      	strh	r3, [r0, #8]
 8016c72:	6102      	str	r2, [r0, #16]
 8016c74:	f880 e014 	strb.w	lr, [r0, #20]
 8016c78:	b1d3      	cbz	r3, 8016cb0 <uxr_init_input_reliable_stream+0x4c>
 8016c7a:	f8c1 e000 	str.w	lr, [r1]
 8016c7e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016c82:	f1bc 0f01 	cmp.w	ip, #1
 8016c86:	d913      	bls.n	8016cb0 <uxr_init_input_reliable_stream+0x4c>
 8016c88:	2301      	movs	r3, #1
 8016c8a:	fbb3 f1fc 	udiv	r1, r3, ip
 8016c8e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016c92:	b289      	uxth	r1, r1
 8016c94:	6842      	ldr	r2, [r0, #4]
 8016c96:	fbb2 f2fc 	udiv	r2, r2, ip
 8016c9a:	fb01 f202 	mul.w	r2, r1, r2
 8016c9e:	6801      	ldr	r1, [r0, #0]
 8016ca0:	f841 e002 	str.w	lr, [r1, r2]
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	459c      	cmp	ip, r3
 8016cae:	d8ec      	bhi.n	8016c8a <uxr_init_input_reliable_stream+0x26>
 8016cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cb4:	60c3      	str	r3, [r0, #12]
 8016cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cba:	bf00      	nop

08016cbc <uxr_reset_input_reliable_stream>:
 8016cbc:	8901      	ldrh	r1, [r0, #8]
 8016cbe:	b1e9      	cbz	r1, 8016cfc <uxr_reset_input_reliable_stream+0x40>
 8016cc0:	f04f 0c00 	mov.w	ip, #0
 8016cc4:	b500      	push	{lr}
 8016cc6:	4663      	mov	r3, ip
 8016cc8:	46e6      	mov	lr, ip
 8016cca:	fbb3 f2f1 	udiv	r2, r3, r1
 8016cce:	fb01 3312 	mls	r3, r1, r2, r3
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	6842      	ldr	r2, [r0, #4]
 8016cd6:	fbb2 f2f1 	udiv	r2, r2, r1
 8016cda:	fb02 f303 	mul.w	r3, r2, r3
 8016cde:	6802      	ldr	r2, [r0, #0]
 8016ce0:	f842 e003 	str.w	lr, [r2, r3]
 8016ce4:	f10c 0c01 	add.w	ip, ip, #1
 8016ce8:	8901      	ldrh	r1, [r0, #8]
 8016cea:	fa1f f38c 	uxth.w	r3, ip
 8016cee:	4299      	cmp	r1, r3
 8016cf0:	d8eb      	bhi.n	8016cca <uxr_reset_input_reliable_stream+0xe>
 8016cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cf6:	60c3      	str	r3, [r0, #12]
 8016cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d00:	60c3      	str	r3, [r0, #12]
 8016d02:	4770      	bx	lr

08016d04 <uxr_receive_reliable_message>:
 8016d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d08:	4604      	mov	r4, r0
 8016d0a:	460d      	mov	r5, r1
 8016d0c:	8901      	ldrh	r1, [r0, #8]
 8016d0e:	8980      	ldrh	r0, [r0, #12]
 8016d10:	4690      	mov	r8, r2
 8016d12:	461f      	mov	r7, r3
 8016d14:	f000 fca2 	bl	801765c <uxr_seq_num_add>
 8016d18:	4629      	mov	r1, r5
 8016d1a:	4606      	mov	r6, r0
 8016d1c:	89a0      	ldrh	r0, [r4, #12]
 8016d1e:	f000 fca5 	bl	801766c <uxr_seq_num_cmp>
 8016d22:	2800      	cmp	r0, #0
 8016d24:	db0a      	blt.n	8016d3c <uxr_receive_reliable_message+0x38>
 8016d26:	2600      	movs	r6, #0
 8016d28:	89e0      	ldrh	r0, [r4, #14]
 8016d2a:	4629      	mov	r1, r5
 8016d2c:	f000 fc9e 	bl	801766c <uxr_seq_num_cmp>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	da00      	bge.n	8016d36 <uxr_receive_reliable_message+0x32>
 8016d34:	81e5      	strh	r5, [r4, #14]
 8016d36:	4630      	mov	r0, r6
 8016d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d3c:	4630      	mov	r0, r6
 8016d3e:	4629      	mov	r1, r5
 8016d40:	f000 fc94 	bl	801766c <uxr_seq_num_cmp>
 8016d44:	2800      	cmp	r0, #0
 8016d46:	dbee      	blt.n	8016d26 <uxr_receive_reliable_message+0x22>
 8016d48:	6923      	ldr	r3, [r4, #16]
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	4798      	blx	r3
 8016d4e:	2101      	movs	r1, #1
 8016d50:	4681      	mov	r9, r0
 8016d52:	89a0      	ldrh	r0, [r4, #12]
 8016d54:	f000 fc82 	bl	801765c <uxr_seq_num_add>
 8016d58:	f1b9 0f00 	cmp.w	r9, #0
 8016d5c:	d101      	bne.n	8016d62 <uxr_receive_reliable_message+0x5e>
 8016d5e:	4285      	cmp	r5, r0
 8016d60:	d047      	beq.n	8016df2 <uxr_receive_reliable_message+0xee>
 8016d62:	8922      	ldrh	r2, [r4, #8]
 8016d64:	fbb5 f0f2 	udiv	r0, r5, r2
 8016d68:	fb02 5010 	mls	r0, r2, r0, r5
 8016d6c:	b280      	uxth	r0, r0
 8016d6e:	6863      	ldr	r3, [r4, #4]
 8016d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d74:	fb00 f303 	mul.w	r3, r0, r3
 8016d78:	6820      	ldr	r0, [r4, #0]
 8016d7a:	3304      	adds	r3, #4
 8016d7c:	4418      	add	r0, r3
 8016d7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d1cf      	bne.n	8016d26 <uxr_receive_reliable_message+0x22>
 8016d86:	4641      	mov	r1, r8
 8016d88:	463a      	mov	r2, r7
 8016d8a:	f001 fe48 	bl	8018a1e <memcpy>
 8016d8e:	8921      	ldrh	r1, [r4, #8]
 8016d90:	fbb5 f2f1 	udiv	r2, r5, r1
 8016d94:	fb01 5212 	mls	r2, r1, r2, r5
 8016d98:	b292      	uxth	r2, r2
 8016d9a:	6863      	ldr	r3, [r4, #4]
 8016d9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8016da0:	fb02 f303 	mul.w	r3, r2, r3
 8016da4:	6822      	ldr	r2, [r4, #0]
 8016da6:	50d7      	str	r7, [r2, r3]
 8016da8:	9a08      	ldr	r2, [sp, #32]
 8016daa:	2301      	movs	r3, #1
 8016dac:	7013      	strb	r3, [r2, #0]
 8016dae:	f1b9 0f00 	cmp.w	r9, #0
 8016db2:	d0b8      	beq.n	8016d26 <uxr_receive_reliable_message+0x22>
 8016db4:	89a6      	ldrh	r6, [r4, #12]
 8016db6:	4630      	mov	r0, r6
 8016db8:	2101      	movs	r1, #1
 8016dba:	f000 fc4f 	bl	801765c <uxr_seq_num_add>
 8016dbe:	8922      	ldrh	r2, [r4, #8]
 8016dc0:	6863      	ldr	r3, [r4, #4]
 8016dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8016dc6:	4606      	mov	r6, r0
 8016dc8:	fbb0 f0f2 	udiv	r0, r0, r2
 8016dcc:	fb02 6010 	mls	r0, r2, r0, r6
 8016dd0:	b280      	uxth	r0, r0
 8016dd2:	fb00 f303 	mul.w	r3, r0, r3
 8016dd6:	6820      	ldr	r0, [r4, #0]
 8016dd8:	3304      	adds	r3, #4
 8016dda:	4418      	add	r0, r3
 8016ddc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d0a0      	beq.n	8016d26 <uxr_receive_reliable_message+0x22>
 8016de4:	6923      	ldr	r3, [r4, #16]
 8016de6:	4798      	blx	r3
 8016de8:	2802      	cmp	r0, #2
 8016dea:	d008      	beq.n	8016dfe <uxr_receive_reliable_message+0xfa>
 8016dec:	2801      	cmp	r0, #1
 8016dee:	d0e2      	beq.n	8016db6 <uxr_receive_reliable_message+0xb2>
 8016df0:	e799      	b.n	8016d26 <uxr_receive_reliable_message+0x22>
 8016df2:	9b08      	ldr	r3, [sp, #32]
 8016df4:	81a5      	strh	r5, [r4, #12]
 8016df6:	2601      	movs	r6, #1
 8016df8:	f883 9000 	strb.w	r9, [r3]
 8016dfc:	e794      	b.n	8016d28 <uxr_receive_reliable_message+0x24>
 8016dfe:	2601      	movs	r6, #1
 8016e00:	e792      	b.n	8016d28 <uxr_receive_reliable_message+0x24>
 8016e02:	bf00      	nop

08016e04 <uxr_next_input_reliable_buffer_available>:
 8016e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e08:	4604      	mov	r4, r0
 8016e0a:	460f      	mov	r7, r1
 8016e0c:	8980      	ldrh	r0, [r0, #12]
 8016e0e:	2101      	movs	r1, #1
 8016e10:	4690      	mov	r8, r2
 8016e12:	f000 fc23 	bl	801765c <uxr_seq_num_add>
 8016e16:	8922      	ldrh	r2, [r4, #8]
 8016e18:	fbb0 f6f2 	udiv	r6, r0, r2
 8016e1c:	fb02 0616 	mls	r6, r2, r6, r0
 8016e20:	b2b6      	uxth	r6, r6
 8016e22:	6863      	ldr	r3, [r4, #4]
 8016e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e28:	fb06 f303 	mul.w	r3, r6, r3
 8016e2c:	6826      	ldr	r6, [r4, #0]
 8016e2e:	3304      	adds	r3, #4
 8016e30:	441e      	add	r6, r3
 8016e32:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016e36:	f1b9 0f00 	cmp.w	r9, #0
 8016e3a:	d023      	beq.n	8016e84 <uxr_next_input_reliable_buffer_available+0x80>
 8016e3c:	6923      	ldr	r3, [r4, #16]
 8016e3e:	4605      	mov	r5, r0
 8016e40:	4630      	mov	r0, r6
 8016e42:	4798      	blx	r3
 8016e44:	4682      	mov	sl, r0
 8016e46:	b300      	cbz	r0, 8016e8a <uxr_next_input_reliable_buffer_available+0x86>
 8016e48:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016e4c:	2101      	movs	r1, #1
 8016e4e:	4650      	mov	r0, sl
 8016e50:	f000 fc04 	bl	801765c <uxr_seq_num_add>
 8016e54:	8921      	ldrh	r1, [r4, #8]
 8016e56:	fbb0 f2f1 	udiv	r2, r0, r1
 8016e5a:	4682      	mov	sl, r0
 8016e5c:	fb01 0212 	mls	r2, r1, r2, r0
 8016e60:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016e64:	b292      	uxth	r2, r2
 8016e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8016e6a:	fb02 f303 	mul.w	r3, r2, r3
 8016e6e:	3304      	adds	r3, #4
 8016e70:	4418      	add	r0, r3
 8016e72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016e76:	b12b      	cbz	r3, 8016e84 <uxr_next_input_reliable_buffer_available+0x80>
 8016e78:	6923      	ldr	r3, [r4, #16]
 8016e7a:	4798      	blx	r3
 8016e7c:	2802      	cmp	r0, #2
 8016e7e:	d01b      	beq.n	8016eb8 <uxr_next_input_reliable_buffer_available+0xb4>
 8016e80:	2801      	cmp	r0, #1
 8016e82:	d0e3      	beq.n	8016e4c <uxr_next_input_reliable_buffer_available+0x48>
 8016e84:	2000      	movs	r0, #0
 8016e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e8a:	464a      	mov	r2, r9
 8016e8c:	4631      	mov	r1, r6
 8016e8e:	4638      	mov	r0, r7
 8016e90:	f7f5 f81a 	bl	800bec8 <ucdr_init_buffer>
 8016e94:	8921      	ldrh	r1, [r4, #8]
 8016e96:	fbb5 f2f1 	udiv	r2, r5, r1
 8016e9a:	fb01 5212 	mls	r2, r1, r2, r5
 8016e9e:	b292      	uxth	r2, r2
 8016ea0:	6863      	ldr	r3, [r4, #4]
 8016ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ea6:	fb02 f303 	mul.w	r3, r2, r3
 8016eaa:	6822      	ldr	r2, [r4, #0]
 8016eac:	f842 a003 	str.w	sl, [r2, r3]
 8016eb0:	2001      	movs	r0, #1
 8016eb2:	81a5      	strh	r5, [r4, #12]
 8016eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eb8:	8920      	ldrh	r0, [r4, #8]
 8016eba:	fbb5 f3f0 	udiv	r3, r5, r0
 8016ebe:	fb00 5513 	mls	r5, r0, r3, r5
 8016ec2:	b2ad      	uxth	r5, r5
 8016ec4:	6863      	ldr	r3, [r4, #4]
 8016ec6:	fbb3 f3f0 	udiv	r3, r3, r0
 8016eca:	fb03 f505 	mul.w	r5, r3, r5
 8016ece:	6823      	ldr	r3, [r4, #0]
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	5158      	str	r0, [r3, r5]
 8016ed4:	eb06 0108 	add.w	r1, r6, r8
 8016ed8:	eba9 0208 	sub.w	r2, r9, r8
 8016edc:	4638      	mov	r0, r7
 8016ede:	f7f4 fff3 	bl	800bec8 <ucdr_init_buffer>
 8016ee2:	4638      	mov	r0, r7
 8016ee4:	4903      	ldr	r1, [pc, #12]	@ (8016ef4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016ee6:	4622      	mov	r2, r4
 8016ee8:	f7f4 ffc2 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 8016eec:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016ef0:	2001      	movs	r0, #1
 8016ef2:	e7c8      	b.n	8016e86 <uxr_next_input_reliable_buffer_available+0x82>
 8016ef4:	08016bf9 	.word	0x08016bf9

08016ef8 <uxr_process_heartbeat>:
 8016ef8:	b538      	push	{r3, r4, r5, lr}
 8016efa:	4611      	mov	r1, r2
 8016efc:	4604      	mov	r4, r0
 8016efe:	89c0      	ldrh	r0, [r0, #14]
 8016f00:	4615      	mov	r5, r2
 8016f02:	f000 fbb3 	bl	801766c <uxr_seq_num_cmp>
 8016f06:	2800      	cmp	r0, #0
 8016f08:	bfb8      	it	lt
 8016f0a:	81e5      	strhlt	r5, [r4, #14]
 8016f0c:	bd38      	pop	{r3, r4, r5, pc}
 8016f0e:	bf00      	nop

08016f10 <uxr_compute_acknack>:
 8016f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f14:	8903      	ldrh	r3, [r0, #8]
 8016f16:	8985      	ldrh	r5, [r0, #12]
 8016f18:	4604      	mov	r4, r0
 8016f1a:	460e      	mov	r6, r1
 8016f1c:	b1d3      	cbz	r3, 8016f54 <uxr_compute_acknack+0x44>
 8016f1e:	4628      	mov	r0, r5
 8016f20:	2701      	movs	r7, #1
 8016f22:	e003      	b.n	8016f2c <uxr_compute_acknack+0x1c>
 8016f24:	4567      	cmp	r7, ip
 8016f26:	d215      	bcs.n	8016f54 <uxr_compute_acknack+0x44>
 8016f28:	89a0      	ldrh	r0, [r4, #12]
 8016f2a:	3701      	adds	r7, #1
 8016f2c:	b2b9      	uxth	r1, r7
 8016f2e:	f000 fb95 	bl	801765c <uxr_seq_num_add>
 8016f32:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016f36:	fbb0 f3fc 	udiv	r3, r0, ip
 8016f3a:	fb0c 0313 	mls	r3, ip, r3, r0
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016f44:	fbb3 f3fc 	udiv	r3, r3, ip
 8016f48:	fb02 f303 	mul.w	r3, r2, r3
 8016f4c:	58cb      	ldr	r3, [r1, r3]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1e8      	bne.n	8016f24 <uxr_compute_acknack+0x14>
 8016f52:	4605      	mov	r5, r0
 8016f54:	8035      	strh	r5, [r6, #0]
 8016f56:	2101      	movs	r1, #1
 8016f58:	4628      	mov	r0, r5
 8016f5a:	89e7      	ldrh	r7, [r4, #14]
 8016f5c:	f000 fb82 	bl	8017664 <uxr_seq_num_sub>
 8016f60:	4601      	mov	r1, r0
 8016f62:	4638      	mov	r0, r7
 8016f64:	f000 fb7e 	bl	8017664 <uxr_seq_num_sub>
 8016f68:	4605      	mov	r5, r0
 8016f6a:	b318      	cbz	r0, 8016fb4 <uxr_compute_acknack+0xa4>
 8016f6c:	f04f 0900 	mov.w	r9, #0
 8016f70:	464f      	mov	r7, r9
 8016f72:	f04f 0801 	mov.w	r8, #1
 8016f76:	fa1f f189 	uxth.w	r1, r9
 8016f7a:	8830      	ldrh	r0, [r6, #0]
 8016f7c:	f000 fb6e 	bl	801765c <uxr_seq_num_add>
 8016f80:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016f84:	fbb0 f3fc 	udiv	r3, r0, ip
 8016f88:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016f8c:	fb03 001c 	mls	r0, r3, ip, r0
 8016f90:	b283      	uxth	r3, r0
 8016f92:	fbb2 f2fc 	udiv	r2, r2, ip
 8016f96:	fb02 f303 	mul.w	r3, r2, r3
 8016f9a:	fa08 f209 	lsl.w	r2, r8, r9
 8016f9e:	58cb      	ldr	r3, [r1, r3]
 8016fa0:	f109 0901 	add.w	r9, r9, #1
 8016fa4:	b90b      	cbnz	r3, 8016faa <uxr_compute_acknack+0x9a>
 8016fa6:	4317      	orrs	r7, r2
 8016fa8:	b2bf      	uxth	r7, r7
 8016faa:	454d      	cmp	r5, r9
 8016fac:	d1e3      	bne.n	8016f76 <uxr_compute_acknack+0x66>
 8016fae:	4638      	mov	r0, r7
 8016fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fb4:	4607      	mov	r7, r0
 8016fb6:	4638      	mov	r0, r7
 8016fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016fbc <uxr_init_output_best_effort_stream>:
 8016fbc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016fc0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016fc4:	6001      	str	r1, [r0, #0]
 8016fc6:	7303      	strb	r3, [r0, #12]
 8016fc8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016fcc:	4770      	bx	lr
 8016fce:	bf00      	nop

08016fd0 <uxr_reset_output_best_effort_stream>:
 8016fd0:	7b02      	ldrb	r2, [r0, #12]
 8016fd2:	6042      	str	r2, [r0, #4]
 8016fd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016fd8:	81c3      	strh	r3, [r0, #14]
 8016fda:	4770      	bx	lr

08016fdc <uxr_prepare_best_effort_buffer_to_write>:
 8016fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fde:	4604      	mov	r4, r0
 8016fe0:	b083      	sub	sp, #12
 8016fe2:	6840      	ldr	r0, [r0, #4]
 8016fe4:	460d      	mov	r5, r1
 8016fe6:	4616      	mov	r6, r2
 8016fe8:	f7fa fbcc 	bl	8011784 <uxr_submessage_padding>
 8016fec:	6863      	ldr	r3, [r4, #4]
 8016fee:	4418      	add	r0, r3
 8016ff0:	68a3      	ldr	r3, [r4, #8]
 8016ff2:	1942      	adds	r2, r0, r5
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	bf2c      	ite	cs
 8016ff8:	2701      	movcs	r7, #1
 8016ffa:	2700      	movcc	r7, #0
 8016ffc:	d202      	bcs.n	8017004 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016ffe:	4638      	mov	r0, r7
 8017000:	b003      	add	sp, #12
 8017002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017004:	9000      	str	r0, [sp, #0]
 8017006:	6821      	ldr	r1, [r4, #0]
 8017008:	4630      	mov	r0, r6
 801700a:	2300      	movs	r3, #0
 801700c:	f7f4 ff4a 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 8017010:	6861      	ldr	r1, [r4, #4]
 8017012:	4638      	mov	r0, r7
 8017014:	4429      	add	r1, r5
 8017016:	6061      	str	r1, [r4, #4]
 8017018:	b003      	add	sp, #12
 801701a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801701c <uxr_prepare_best_effort_buffer_to_send>:
 801701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017020:	4604      	mov	r4, r0
 8017022:	461d      	mov	r5, r3
 8017024:	6840      	ldr	r0, [r0, #4]
 8017026:	7b23      	ldrb	r3, [r4, #12]
 8017028:	4298      	cmp	r0, r3
 801702a:	bf8c      	ite	hi
 801702c:	2601      	movhi	r6, #1
 801702e:	2600      	movls	r6, #0
 8017030:	d802      	bhi.n	8017038 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017032:	4630      	mov	r0, r6
 8017034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017038:	4688      	mov	r8, r1
 801703a:	89e0      	ldrh	r0, [r4, #14]
 801703c:	2101      	movs	r1, #1
 801703e:	4617      	mov	r7, r2
 8017040:	f000 fb0c 	bl	801765c <uxr_seq_num_add>
 8017044:	6823      	ldr	r3, [r4, #0]
 8017046:	81e0      	strh	r0, [r4, #14]
 8017048:	8028      	strh	r0, [r5, #0]
 801704a:	f8c8 3000 	str.w	r3, [r8]
 801704e:	6863      	ldr	r3, [r4, #4]
 8017050:	603b      	str	r3, [r7, #0]
 8017052:	7b23      	ldrb	r3, [r4, #12]
 8017054:	6063      	str	r3, [r4, #4]
 8017056:	4630      	mov	r0, r6
 8017058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801705c <on_full_output_buffer>:
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	6802      	ldr	r2, [r0, #0]
 8017060:	460c      	mov	r4, r1
 8017062:	6809      	ldr	r1, [r1, #0]
 8017064:	8923      	ldrh	r3, [r4, #8]
 8017066:	eba2 0c01 	sub.w	ip, r2, r1
 801706a:	6862      	ldr	r2, [r4, #4]
 801706c:	fbb2 f2f3 	udiv	r2, r2, r3
 8017070:	fbbc fcf2 	udiv	ip, ip, r2
 8017074:	f10c 0c01 	add.w	ip, ip, #1
 8017078:	fa1f fc8c 	uxth.w	ip, ip
 801707c:	fbbc fef3 	udiv	lr, ip, r3
 8017080:	fb03 c31e 	mls	r3, r3, lr, ip
 8017084:	b29b      	uxth	r3, r3
 8017086:	fb02 f303 	mul.w	r3, r2, r3
 801708a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801708e:	58ca      	ldr	r2, [r1, r3]
 8017090:	4463      	add	r3, ip
 8017092:	eba2 020c 	sub.w	r2, r2, ip
 8017096:	3308      	adds	r3, #8
 8017098:	4605      	mov	r5, r0
 801709a:	4419      	add	r1, r3
 801709c:	3a04      	subs	r2, #4
 801709e:	6903      	ldr	r3, [r0, #16]
 80170a0:	f7f4 ff0a 	bl	800beb8 <ucdr_init_buffer_origin>
 80170a4:	4628      	mov	r0, r5
 80170a6:	4903      	ldr	r1, [pc, #12]	@ (80170b4 <on_full_output_buffer+0x58>)
 80170a8:	4622      	mov	r2, r4
 80170aa:	f7f4 fee1 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 80170ae:	2000      	movs	r0, #0
 80170b0:	bd38      	pop	{r3, r4, r5, pc}
 80170b2:	bf00      	nop
 80170b4:	0801705d 	.word	0x0801705d

080170b8 <uxr_init_output_reliable_stream>:
 80170b8:	b410      	push	{r4}
 80170ba:	f89d c004 	ldrb.w	ip, [sp, #4]
 80170be:	8103      	strh	r3, [r0, #8]
 80170c0:	e9c0 1200 	strd	r1, r2, [r0]
 80170c4:	f880 c00c 	strb.w	ip, [r0, #12]
 80170c8:	b1d3      	cbz	r3, 8017100 <uxr_init_output_reliable_stream+0x48>
 80170ca:	f8c1 c000 	str.w	ip, [r1]
 80170ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80170d2:	f1bc 0f01 	cmp.w	ip, #1
 80170d6:	d913      	bls.n	8017100 <uxr_init_output_reliable_stream+0x48>
 80170d8:	2301      	movs	r3, #1
 80170da:	fbb3 f1fc 	udiv	r1, r3, ip
 80170de:	fb0c 3111 	mls	r1, ip, r1, r3
 80170e2:	b289      	uxth	r1, r1
 80170e4:	6842      	ldr	r2, [r0, #4]
 80170e6:	6804      	ldr	r4, [r0, #0]
 80170e8:	fbb2 f2fc 	udiv	r2, r2, ip
 80170ec:	fb01 f202 	mul.w	r2, r1, r2
 80170f0:	7b01      	ldrb	r1, [r0, #12]
 80170f2:	50a1      	str	r1, [r4, r2]
 80170f4:	3301      	adds	r3, #1
 80170f6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80170fa:	b29b      	uxth	r3, r3
 80170fc:	459c      	cmp	ip, r3
 80170fe:	d8ec      	bhi.n	80170da <uxr_init_output_reliable_stream+0x22>
 8017100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017104:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017108:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801710c:	4905      	ldr	r1, [pc, #20]	@ (8017124 <uxr_init_output_reliable_stream+0x6c>)
 801710e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017112:	f8c0 100e 	str.w	r1, [r0, #14]
 8017116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801711a:	2300      	movs	r3, #0
 801711c:	8242      	strh	r2, [r0, #18]
 801711e:	8403      	strh	r3, [r0, #32]
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop
 8017124:	ffff0000 	.word	0xffff0000

08017128 <uxr_reset_output_reliable_stream>:
 8017128:	8901      	ldrh	r1, [r0, #8]
 801712a:	b1b1      	cbz	r1, 801715a <uxr_reset_output_reliable_stream+0x32>
 801712c:	f04f 0c00 	mov.w	ip, #0
 8017130:	4663      	mov	r3, ip
 8017132:	fbb3 f2f1 	udiv	r2, r3, r1
 8017136:	fb01 3312 	mls	r3, r1, r2, r3
 801713a:	b29b      	uxth	r3, r3
 801713c:	6842      	ldr	r2, [r0, #4]
 801713e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017142:	6801      	ldr	r1, [r0, #0]
 8017144:	fb02 f303 	mul.w	r3, r2, r3
 8017148:	7b02      	ldrb	r2, [r0, #12]
 801714a:	50ca      	str	r2, [r1, r3]
 801714c:	f10c 0c01 	add.w	ip, ip, #1
 8017150:	8901      	ldrh	r1, [r0, #8]
 8017152:	fa1f f38c 	uxth.w	r3, ip
 8017156:	4299      	cmp	r1, r3
 8017158:	d8eb      	bhi.n	8017132 <uxr_reset_output_reliable_stream+0xa>
 801715a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801715e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017162:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017166:	4904      	ldr	r1, [pc, #16]	@ (8017178 <uxr_reset_output_reliable_stream+0x50>)
 8017168:	f8c0 100e 	str.w	r1, [r0, #14]
 801716c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017170:	2300      	movs	r3, #0
 8017172:	8242      	strh	r2, [r0, #18]
 8017174:	8403      	strh	r3, [r0, #32]
 8017176:	4770      	bx	lr
 8017178:	ffff0000 	.word	0xffff0000

0801717c <uxr_prepare_reliable_buffer_to_write>:
 801717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017180:	4604      	mov	r4, r0
 8017182:	b091      	sub	sp, #68	@ 0x44
 8017184:	8900      	ldrh	r0, [r0, #8]
 8017186:	89e6      	ldrh	r6, [r4, #14]
 8017188:	6823      	ldr	r3, [r4, #0]
 801718a:	9204      	str	r2, [sp, #16]
 801718c:	fbb6 f2f0 	udiv	r2, r6, r0
 8017190:	fb00 6212 	mls	r2, r0, r2, r6
 8017194:	b292      	uxth	r2, r2
 8017196:	6865      	ldr	r5, [r4, #4]
 8017198:	fbb5 f5f0 	udiv	r5, r5, r0
 801719c:	fb05 3202 	mla	r2, r5, r2, r3
 80171a0:	3204      	adds	r2, #4
 80171a2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80171a6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80171aa:	9203      	str	r2, [sp, #12]
 80171ac:	468b      	mov	fp, r1
 80171ae:	1f2f      	subs	r7, r5, #4
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f000 814c 	beq.w	801744e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80171b6:	f04f 0c00 	mov.w	ip, #0
 80171ba:	46e2      	mov	sl, ip
 80171bc:	4661      	mov	r1, ip
 80171be:	fbb1 f2f0 	udiv	r2, r1, r0
 80171c2:	fb00 1212 	mls	r2, r0, r2, r1
 80171c6:	b292      	uxth	r2, r2
 80171c8:	fb05 f202 	mul.w	r2, r5, r2
 80171cc:	f10c 0c01 	add.w	ip, ip, #1
 80171d0:	589a      	ldr	r2, [r3, r2]
 80171d2:	454a      	cmp	r2, r9
 80171d4:	bf08      	it	eq
 80171d6:	f10a 0a01 	addeq.w	sl, sl, #1
 80171da:	fa1f f18c 	uxth.w	r1, ip
 80171de:	bf08      	it	eq
 80171e0:	fa1f fa8a 	uxtheq.w	sl, sl
 80171e4:	4281      	cmp	r1, r0
 80171e6:	d3ea      	bcc.n	80171be <uxr_prepare_reliable_buffer_to_write+0x42>
 80171e8:	4640      	mov	r0, r8
 80171ea:	2104      	movs	r1, #4
 80171ec:	f8cd a014 	str.w	sl, [sp, #20]
 80171f0:	f7f4 fe6e 	bl	800bed0 <ucdr_alignment>
 80171f4:	4480      	add	r8, r0
 80171f6:	eb08 020b 	add.w	r2, r8, fp
 80171fa:	42ba      	cmp	r2, r7
 80171fc:	f240 80cd 	bls.w	801739a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017200:	7b22      	ldrb	r2, [r4, #12]
 8017202:	445a      	add	r2, fp
 8017204:	42ba      	cmp	r2, r7
 8017206:	f240 80b5 	bls.w	8017374 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801720a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801720e:	33fc      	adds	r3, #252	@ 0xfc
 8017210:	b2ba      	uxth	r2, r7
 8017212:	4413      	add	r3, r2
 8017214:	b29b      	uxth	r3, r3
 8017216:	fb0a f903 	mul.w	r9, sl, r3
 801721a:	45d9      	cmp	r9, fp
 801721c:	9305      	str	r3, [sp, #20]
 801721e:	9306      	str	r3, [sp, #24]
 8017220:	f0c0 80b7 	bcc.w	8017392 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017224:	f108 0304 	add.w	r3, r8, #4
 8017228:	42bb      	cmp	r3, r7
 801722a:	f080 80db 	bcs.w	80173e4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801722e:	f1a2 0904 	sub.w	r9, r2, #4
 8017232:	eba9 0908 	sub.w	r9, r9, r8
 8017236:	9b05      	ldr	r3, [sp, #20]
 8017238:	fa1f f989 	uxth.w	r9, r9
 801723c:	ebab 0b09 	sub.w	fp, fp, r9
 8017240:	fbbb f2f3 	udiv	r2, fp, r3
 8017244:	fb03 b312 	mls	r3, r3, r2, fp
 8017248:	2b00      	cmp	r3, #0
 801724a:	f000 80c8 	beq.w	80173de <uxr_prepare_reliable_buffer_to_write+0x262>
 801724e:	3201      	adds	r2, #1
 8017250:	b292      	uxth	r2, r2
 8017252:	9306      	str	r3, [sp, #24]
 8017254:	4552      	cmp	r2, sl
 8017256:	f200 809c 	bhi.w	8017392 <uxr_prepare_reliable_buffer_to_write+0x216>
 801725a:	f10d 0b20 	add.w	fp, sp, #32
 801725e:	2a00      	cmp	r2, #0
 8017260:	d042      	beq.n	80172e8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017262:	f8cd 801c 	str.w	r8, [sp, #28]
 8017266:	f04f 0a00 	mov.w	sl, #0
 801726a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801726e:	9505      	str	r5, [sp, #20]
 8017270:	f10d 0b20 	add.w	fp, sp, #32
 8017274:	4615      	mov	r5, r2
 8017276:	e000      	b.n	801727a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017278:	46c1      	mov	r9, r8
 801727a:	8920      	ldrh	r0, [r4, #8]
 801727c:	fbb6 f2f0 	udiv	r2, r6, r0
 8017280:	fb00 6112 	mls	r1, r0, r2, r6
 8017284:	b28a      	uxth	r2, r1
 8017286:	6863      	ldr	r3, [r4, #4]
 8017288:	fbb3 f1f0 	udiv	r1, r3, r0
 801728c:	6823      	ldr	r3, [r4, #0]
 801728e:	fb02 f101 	mul.w	r1, r2, r1
 8017292:	3104      	adds	r1, #4
 8017294:	4419      	add	r1, r3
 8017296:	4658      	mov	r0, fp
 8017298:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801729c:	9200      	str	r2, [sp, #0]
 801729e:	2300      	movs	r3, #0
 80172a0:	463a      	mov	r2, r7
 80172a2:	f7f4 fdff 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 80172a6:	464a      	mov	r2, r9
 80172a8:	2300      	movs	r3, #0
 80172aa:	210d      	movs	r1, #13
 80172ac:	4658      	mov	r0, fp
 80172ae:	f7fa fa29 	bl	8011704 <uxr_buffer_submessage_header>
 80172b2:	8921      	ldrh	r1, [r4, #8]
 80172b4:	fbb6 f2f1 	udiv	r2, r6, r1
 80172b8:	fb01 6212 	mls	r2, r1, r2, r6
 80172bc:	b292      	uxth	r2, r2
 80172be:	6863      	ldr	r3, [r4, #4]
 80172c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80172c4:	fb02 f303 	mul.w	r3, r2, r3
 80172c8:	6822      	ldr	r2, [r4, #0]
 80172ca:	4630      	mov	r0, r6
 80172cc:	50d7      	str	r7, [r2, r3]
 80172ce:	2101      	movs	r1, #1
 80172d0:	f000 f9c4 	bl	801765c <uxr_seq_num_add>
 80172d4:	f10a 0a01 	add.w	sl, sl, #1
 80172d8:	fa1f f38a 	uxth.w	r3, sl
 80172dc:	429d      	cmp	r5, r3
 80172de:	4606      	mov	r6, r0
 80172e0:	d8ca      	bhi.n	8017278 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80172e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80172e6:	9d05      	ldr	r5, [sp, #20]
 80172e8:	8920      	ldrh	r0, [r4, #8]
 80172ea:	fbb6 f3f0 	udiv	r3, r6, r0
 80172ee:	fb00 6313 	mls	r3, r0, r3, r6
 80172f2:	b299      	uxth	r1, r3
 80172f4:	6863      	ldr	r3, [r4, #4]
 80172f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80172fa:	fb01 f303 	mul.w	r3, r1, r3
 80172fe:	6821      	ldr	r1, [r4, #0]
 8017300:	3304      	adds	r3, #4
 8017302:	4419      	add	r1, r3
 8017304:	463a      	mov	r2, r7
 8017306:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801730a:	9000      	str	r0, [sp, #0]
 801730c:	2300      	movs	r3, #0
 801730e:	4658      	mov	r0, fp
 8017310:	f7f4 fdc8 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 8017314:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017318:	4658      	mov	r0, fp
 801731a:	fa1f f289 	uxth.w	r2, r9
 801731e:	2302      	movs	r3, #2
 8017320:	210d      	movs	r1, #13
 8017322:	f7fa f9ef 	bl	8011704 <uxr_buffer_submessage_header>
 8017326:	9b03      	ldr	r3, [sp, #12]
 8017328:	8927      	ldrh	r7, [r4, #8]
 801732a:	7b20      	ldrb	r0, [r4, #12]
 801732c:	f108 0104 	add.w	r1, r8, #4
 8017330:	440b      	add	r3, r1
 8017332:	4619      	mov	r1, r3
 8017334:	fbb6 f3f7 	udiv	r3, r6, r7
 8017338:	fb07 6313 	mls	r3, r7, r3, r6
 801733c:	f1a5 0208 	sub.w	r2, r5, #8
 8017340:	b29d      	uxth	r5, r3
 8017342:	3004      	adds	r0, #4
 8017344:	6863      	ldr	r3, [r4, #4]
 8017346:	fbb3 f3f7 	udiv	r3, r3, r7
 801734a:	fb05 f303 	mul.w	r3, r5, r3
 801734e:	6825      	ldr	r5, [r4, #0]
 8017350:	4448      	add	r0, r9
 8017352:	50e8      	str	r0, [r5, r3]
 8017354:	9d04      	ldr	r5, [sp, #16]
 8017356:	eba2 0208 	sub.w	r2, r2, r8
 801735a:	4628      	mov	r0, r5
 801735c:	f7f4 fdb4 	bl	800bec8 <ucdr_init_buffer>
 8017360:	4628      	mov	r0, r5
 8017362:	493c      	ldr	r1, [pc, #240]	@ (8017454 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017364:	4622      	mov	r2, r4
 8017366:	f7f4 fd83 	bl	800be70 <ucdr_set_on_full_buffer_callback>
 801736a:	2001      	movs	r0, #1
 801736c:	81e6      	strh	r6, [r4, #14]
 801736e:	b011      	add	sp, #68	@ 0x44
 8017370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017374:	2101      	movs	r1, #1
 8017376:	89e0      	ldrh	r0, [r4, #14]
 8017378:	f000 f970 	bl	801765c <uxr_seq_num_add>
 801737c:	8921      	ldrh	r1, [r4, #8]
 801737e:	4605      	mov	r5, r0
 8017380:	8a60      	ldrh	r0, [r4, #18]
 8017382:	f000 f96b 	bl	801765c <uxr_seq_num_add>
 8017386:	4601      	mov	r1, r0
 8017388:	4628      	mov	r0, r5
 801738a:	f000 f96f 	bl	801766c <uxr_seq_num_cmp>
 801738e:	2800      	cmp	r0, #0
 8017390:	dd42      	ble.n	8017418 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017392:	2000      	movs	r0, #0
 8017394:	b011      	add	sp, #68	@ 0x44
 8017396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739a:	8921      	ldrh	r1, [r4, #8]
 801739c:	8a60      	ldrh	r0, [r4, #18]
 801739e:	9205      	str	r2, [sp, #20]
 80173a0:	f000 f95c 	bl	801765c <uxr_seq_num_add>
 80173a4:	4601      	mov	r1, r0
 80173a6:	4630      	mov	r0, r6
 80173a8:	f000 f960 	bl	801766c <uxr_seq_num_cmp>
 80173ac:	2800      	cmp	r0, #0
 80173ae:	9a05      	ldr	r2, [sp, #20]
 80173b0:	dcef      	bgt.n	8017392 <uxr_prepare_reliable_buffer_to_write+0x216>
 80173b2:	8927      	ldrh	r7, [r4, #8]
 80173b4:	fbb6 f3f7 	udiv	r3, r6, r7
 80173b8:	fb07 6313 	mls	r3, r7, r3, r6
 80173bc:	b29d      	uxth	r5, r3
 80173be:	6863      	ldr	r3, [r4, #4]
 80173c0:	6824      	ldr	r4, [r4, #0]
 80173c2:	fbb3 f3f7 	udiv	r3, r3, r7
 80173c6:	fb05 f303 	mul.w	r3, r5, r3
 80173ca:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80173ce:	50e2      	str	r2, [r4, r3]
 80173d0:	2300      	movs	r3, #0
 80173d2:	f8cd 8000 	str.w	r8, [sp]
 80173d6:	f7f4 fd65 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 80173da:	2001      	movs	r0, #1
 80173dc:	e7da      	b.n	8017394 <uxr_prepare_reliable_buffer_to_write+0x218>
 80173de:	b293      	uxth	r3, r2
 80173e0:	461a      	mov	r2, r3
 80173e2:	e737      	b.n	8017254 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80173e4:	4630      	mov	r0, r6
 80173e6:	2101      	movs	r1, #1
 80173e8:	9207      	str	r2, [sp, #28]
 80173ea:	f000 f937 	bl	801765c <uxr_seq_num_add>
 80173ee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80173f2:	fbb0 f1fc 	udiv	r1, r0, ip
 80173f6:	fb0c 0111 	mls	r1, ip, r1, r0
 80173fa:	4606      	mov	r6, r0
 80173fc:	b288      	uxth	r0, r1
 80173fe:	6863      	ldr	r3, [r4, #4]
 8017400:	fbb3 f1fc 	udiv	r1, r3, ip
 8017404:	6823      	ldr	r3, [r4, #0]
 8017406:	9a07      	ldr	r2, [sp, #28]
 8017408:	fb00 f101 	mul.w	r1, r0, r1
 801740c:	3104      	adds	r1, #4
 801740e:	440b      	add	r3, r1
 8017410:	9303      	str	r3, [sp, #12]
 8017412:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017416:	e70a      	b.n	801722e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017418:	8921      	ldrh	r1, [r4, #8]
 801741a:	fbb5 f3f1 	udiv	r3, r5, r1
 801741e:	fb01 5313 	mls	r3, r1, r3, r5
 8017422:	b29a      	uxth	r2, r3
 8017424:	6863      	ldr	r3, [r4, #4]
 8017426:	fbb3 f3f1 	udiv	r3, r3, r1
 801742a:	6821      	ldr	r1, [r4, #0]
 801742c:	9804      	ldr	r0, [sp, #16]
 801742e:	fb02 f303 	mul.w	r3, r2, r3
 8017432:	3304      	adds	r3, #4
 8017434:	7b22      	ldrb	r2, [r4, #12]
 8017436:	4419      	add	r1, r3
 8017438:	445a      	add	r2, fp
 801743a:	f841 2c04 	str.w	r2, [r1, #-4]
 801743e:	7b23      	ldrb	r3, [r4, #12]
 8017440:	9300      	str	r3, [sp, #0]
 8017442:	2300      	movs	r3, #0
 8017444:	f7f4 fd2e 	bl	800bea4 <ucdr_init_buffer_origin_offset>
 8017448:	81e5      	strh	r5, [r4, #14]
 801744a:	2001      	movs	r0, #1
 801744c:	e7a2      	b.n	8017394 <uxr_prepare_reliable_buffer_to_write+0x218>
 801744e:	4682      	mov	sl, r0
 8017450:	e6ca      	b.n	80171e8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017452:	bf00      	nop
 8017454:	0801705d 	.word	0x0801705d

08017458 <uxr_prepare_next_reliable_buffer_to_send>:
 8017458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801745a:	4604      	mov	r4, r0
 801745c:	460f      	mov	r7, r1
 801745e:	8a00      	ldrh	r0, [r0, #16]
 8017460:	2101      	movs	r1, #1
 8017462:	4616      	mov	r6, r2
 8017464:	461d      	mov	r5, r3
 8017466:	f000 f8f9 	bl	801765c <uxr_seq_num_add>
 801746a:	8028      	strh	r0, [r5, #0]
 801746c:	8922      	ldrh	r2, [r4, #8]
 801746e:	fbb0 f3f2 	udiv	r3, r0, r2
 8017472:	fb02 0c13 	mls	ip, r2, r3, r0
 8017476:	fa1f fc8c 	uxth.w	ip, ip
 801747a:	6863      	ldr	r3, [r4, #4]
 801747c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017480:	fb0c fc03 	mul.w	ip, ip, r3
 8017484:	6823      	ldr	r3, [r4, #0]
 8017486:	89e1      	ldrh	r1, [r4, #14]
 8017488:	f10c 0c04 	add.w	ip, ip, #4
 801748c:	4463      	add	r3, ip
 801748e:	603b      	str	r3, [r7, #0]
 8017490:	6823      	ldr	r3, [r4, #0]
 8017492:	449c      	add	ip, r3
 8017494:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017498:	6033      	str	r3, [r6, #0]
 801749a:	f000 f8e7 	bl	801766c <uxr_seq_num_cmp>
 801749e:	2800      	cmp	r0, #0
 80174a0:	dd01      	ble.n	80174a6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80174a2:	2000      	movs	r0, #0
 80174a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a6:	7b23      	ldrb	r3, [r4, #12]
 80174a8:	6832      	ldr	r2, [r6, #0]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d9f9      	bls.n	80174a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80174ae:	8a61      	ldrh	r1, [r4, #18]
 80174b0:	8a20      	ldrh	r0, [r4, #16]
 80174b2:	f000 f8d7 	bl	8017664 <uxr_seq_num_sub>
 80174b6:	8923      	ldrh	r3, [r4, #8]
 80174b8:	4283      	cmp	r3, r0
 80174ba:	d0f2      	beq.n	80174a2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80174bc:	8828      	ldrh	r0, [r5, #0]
 80174be:	89e3      	ldrh	r3, [r4, #14]
 80174c0:	8220      	strh	r0, [r4, #16]
 80174c2:	4298      	cmp	r0, r3
 80174c4:	d001      	beq.n	80174ca <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80174c6:	2001      	movs	r0, #1
 80174c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174ca:	2101      	movs	r1, #1
 80174cc:	f000 f8c6 	bl	801765c <uxr_seq_num_add>
 80174d0:	81e0      	strh	r0, [r4, #14]
 80174d2:	2001      	movs	r0, #1
 80174d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174d6:	bf00      	nop

080174d8 <uxr_update_output_stream_heartbeat_timestamp>:
 80174d8:	b570      	push	{r4, r5, r6, lr}
 80174da:	8a01      	ldrh	r1, [r0, #16]
 80174dc:	4604      	mov	r4, r0
 80174de:	8a40      	ldrh	r0, [r0, #18]
 80174e0:	4615      	mov	r5, r2
 80174e2:	461e      	mov	r6, r3
 80174e4:	f000 f8c2 	bl	801766c <uxr_seq_num_cmp>
 80174e8:	2800      	cmp	r0, #0
 80174ea:	db07      	blt.n	80174fc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80174ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80174f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80174f4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80174f8:	2000      	movs	r0, #0
 80174fa:	bd70      	pop	{r4, r5, r6, pc}
 80174fc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017500:	b940      	cbnz	r0, 8017514 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017502:	2301      	movs	r3, #1
 8017504:	f884 3020 	strb.w	r3, [r4, #32]
 8017508:	3564      	adds	r5, #100	@ 0x64
 801750a:	f146 0600 	adc.w	r6, r6, #0
 801750e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017512:	bd70      	pop	{r4, r5, r6, pc}
 8017514:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017518:	4295      	cmp	r5, r2
 801751a:	eb76 0303 	sbcs.w	r3, r6, r3
 801751e:	bfa5      	ittet	ge
 8017520:	3001      	addge	r0, #1
 8017522:	f884 0020 	strbge.w	r0, [r4, #32]
 8017526:	2000      	movlt	r0, #0
 8017528:	2001      	movge	r0, #1
 801752a:	e7ed      	b.n	8017508 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801752c <uxr_begin_output_nack_buffer_it>:
 801752c:	8a40      	ldrh	r0, [r0, #18]
 801752e:	4770      	bx	lr

08017530 <uxr_next_reliable_nack_buffer_to_send>:
 8017530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017534:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017538:	b082      	sub	sp, #8
 801753a:	f1b8 0f00 	cmp.w	r8, #0
 801753e:	d011      	beq.n	8017564 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017540:	4604      	mov	r4, r0
 8017542:	8818      	ldrh	r0, [r3, #0]
 8017544:	460e      	mov	r6, r1
 8017546:	4617      	mov	r7, r2
 8017548:	461d      	mov	r5, r3
 801754a:	2101      	movs	r1, #1
 801754c:	f000 f886 	bl	801765c <uxr_seq_num_add>
 8017550:	8028      	strh	r0, [r5, #0]
 8017552:	8a21      	ldrh	r1, [r4, #16]
 8017554:	f000 f88a 	bl	801766c <uxr_seq_num_cmp>
 8017558:	2800      	cmp	r0, #0
 801755a:	dd07      	ble.n	801756c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801755c:	f04f 0800 	mov.w	r8, #0
 8017560:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017564:	4640      	mov	r0, r8
 8017566:	b002      	add	sp, #8
 8017568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801756c:	8921      	ldrh	r1, [r4, #8]
 801756e:	8828      	ldrh	r0, [r5, #0]
 8017570:	6823      	ldr	r3, [r4, #0]
 8017572:	fbb0 f2f1 	udiv	r2, r0, r1
 8017576:	fb01 0c12 	mls	ip, r1, r2, r0
 801757a:	fa1f f28c 	uxth.w	r2, ip
 801757e:	9301      	str	r3, [sp, #4]
 8017580:	6863      	ldr	r3, [r4, #4]
 8017582:	fbb3 fcf1 	udiv	ip, r3, r1
 8017586:	9b01      	ldr	r3, [sp, #4]
 8017588:	fb02 fc0c 	mul.w	ip, r2, ip
 801758c:	f10c 0c04 	add.w	ip, ip, #4
 8017590:	4463      	add	r3, ip
 8017592:	6033      	str	r3, [r6, #0]
 8017594:	6823      	ldr	r3, [r4, #0]
 8017596:	4463      	add	r3, ip
 8017598:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801759c:	603b      	str	r3, [r7, #0]
 801759e:	7b22      	ldrb	r2, [r4, #12]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d0d2      	beq.n	801754a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80175a4:	4640      	mov	r0, r8
 80175a6:	b002      	add	sp, #8
 80175a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080175ac <uxr_process_acknack>:
 80175ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ae:	4604      	mov	r4, r0
 80175b0:	460e      	mov	r6, r1
 80175b2:	4610      	mov	r0, r2
 80175b4:	2101      	movs	r1, #1
 80175b6:	f000 f855 	bl	8017664 <uxr_seq_num_sub>
 80175ba:	8a61      	ldrh	r1, [r4, #18]
 80175bc:	f000 f852 	bl	8017664 <uxr_seq_num_sub>
 80175c0:	b1c0      	cbz	r0, 80175f4 <uxr_process_acknack+0x48>
 80175c2:	4605      	mov	r5, r0
 80175c4:	2700      	movs	r7, #0
 80175c6:	2101      	movs	r1, #1
 80175c8:	8a60      	ldrh	r0, [r4, #18]
 80175ca:	f000 f847 	bl	801765c <uxr_seq_num_add>
 80175ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80175d2:	fbb0 f1fc 	udiv	r1, r0, ip
 80175d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80175da:	fb0c 0111 	mls	r1, ip, r1, r0
 80175de:	b289      	uxth	r1, r1
 80175e0:	3701      	adds	r7, #1
 80175e2:	fbb3 f3fc 	udiv	r3, r3, ip
 80175e6:	fb01 f303 	mul.w	r3, r1, r3
 80175ea:	42bd      	cmp	r5, r7
 80175ec:	7b21      	ldrb	r1, [r4, #12]
 80175ee:	8260      	strh	r0, [r4, #18]
 80175f0:	50d1      	str	r1, [r2, r3]
 80175f2:	d1e8      	bne.n	80175c6 <uxr_process_acknack+0x1a>
 80175f4:	3e00      	subs	r6, #0
 80175f6:	f04f 0300 	mov.w	r3, #0
 80175fa:	bf18      	it	ne
 80175fc:	2601      	movne	r6, #1
 80175fe:	f884 3020 	strb.w	r3, [r4, #32]
 8017602:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017608 <uxr_is_output_up_to_date>:
 8017608:	8a01      	ldrh	r1, [r0, #16]
 801760a:	8a40      	ldrh	r0, [r0, #18]
 801760c:	b508      	push	{r3, lr}
 801760e:	f000 f82d 	bl	801766c <uxr_seq_num_cmp>
 8017612:	fab0 f080 	clz	r0, r0
 8017616:	0940      	lsrs	r0, r0, #5
 8017618:	bd08      	pop	{r3, pc}
 801761a:	bf00      	nop

0801761c <get_available_free_slots>:
 801761c:	8902      	ldrh	r2, [r0, #8]
 801761e:	b1da      	cbz	r2, 8017658 <get_available_free_slots+0x3c>
 8017620:	b530      	push	{r4, r5, lr}
 8017622:	2100      	movs	r1, #0
 8017624:	6843      	ldr	r3, [r0, #4]
 8017626:	6805      	ldr	r5, [r0, #0]
 8017628:	7b04      	ldrb	r4, [r0, #12]
 801762a:	fbb3 fef2 	udiv	lr, r3, r2
 801762e:	4608      	mov	r0, r1
 8017630:	460b      	mov	r3, r1
 8017632:	fbb3 fcf2 	udiv	ip, r3, r2
 8017636:	fb02 331c 	mls	r3, r2, ip, r3
 801763a:	b29b      	uxth	r3, r3
 801763c:	fb0e f303 	mul.w	r3, lr, r3
 8017640:	3101      	adds	r1, #1
 8017642:	f855 c003 	ldr.w	ip, [r5, r3]
 8017646:	4564      	cmp	r4, ip
 8017648:	bf08      	it	eq
 801764a:	3001      	addeq	r0, #1
 801764c:	b28b      	uxth	r3, r1
 801764e:	bf08      	it	eq
 8017650:	b280      	uxtheq	r0, r0
 8017652:	4293      	cmp	r3, r2
 8017654:	d3ed      	bcc.n	8017632 <get_available_free_slots+0x16>
 8017656:	bd30      	pop	{r4, r5, pc}
 8017658:	4610      	mov	r0, r2
 801765a:	4770      	bx	lr

0801765c <uxr_seq_num_add>:
 801765c:	4408      	add	r0, r1
 801765e:	b280      	uxth	r0, r0
 8017660:	4770      	bx	lr
 8017662:	bf00      	nop

08017664 <uxr_seq_num_sub>:
 8017664:	1a40      	subs	r0, r0, r1
 8017666:	b280      	uxth	r0, r0
 8017668:	4770      	bx	lr
 801766a:	bf00      	nop

0801766c <uxr_seq_num_cmp>:
 801766c:	4288      	cmp	r0, r1
 801766e:	d011      	beq.n	8017694 <uxr_seq_num_cmp+0x28>
 8017670:	d309      	bcc.n	8017686 <uxr_seq_num_cmp+0x1a>
 8017672:	4288      	cmp	r0, r1
 8017674:	d910      	bls.n	8017698 <uxr_seq_num_cmp+0x2c>
 8017676:	1a40      	subs	r0, r0, r1
 8017678:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801767c:	bfd4      	ite	le
 801767e:	2001      	movle	r0, #1
 8017680:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017684:	4770      	bx	lr
 8017686:	1a0b      	subs	r3, r1, r0
 8017688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801768c:	daf1      	bge.n	8017672 <uxr_seq_num_cmp+0x6>
 801768e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017692:	4770      	bx	lr
 8017694:	2000      	movs	r0, #0
 8017696:	4770      	bx	lr
 8017698:	2001      	movs	r0, #1
 801769a:	4770      	bx	lr

0801769c <rcl_get_default_domain_id>:
 801769c:	b530      	push	{r4, r5, lr}
 801769e:	b083      	sub	sp, #12
 80176a0:	2300      	movs	r3, #0
 80176a2:	9300      	str	r3, [sp, #0]
 80176a4:	b1d0      	cbz	r0, 80176dc <rcl_get_default_domain_id+0x40>
 80176a6:	4604      	mov	r4, r0
 80176a8:	4669      	mov	r1, sp
 80176aa:	4815      	ldr	r0, [pc, #84]	@ (8017700 <rcl_get_default_domain_id+0x64>)
 80176ac:	f7fe f834 	bl	8015718 <rcutils_get_env>
 80176b0:	4602      	mov	r2, r0
 80176b2:	b110      	cbz	r0, 80176ba <rcl_get_default_domain_id+0x1e>
 80176b4:	2001      	movs	r0, #1
 80176b6:	b003      	add	sp, #12
 80176b8:	bd30      	pop	{r4, r5, pc}
 80176ba:	9b00      	ldr	r3, [sp, #0]
 80176bc:	b18b      	cbz	r3, 80176e2 <rcl_get_default_domain_id+0x46>
 80176be:	7818      	ldrb	r0, [r3, #0]
 80176c0:	2800      	cmp	r0, #0
 80176c2:	d0f8      	beq.n	80176b6 <rcl_get_default_domain_id+0x1a>
 80176c4:	a901      	add	r1, sp, #4
 80176c6:	4618      	mov	r0, r3
 80176c8:	9201      	str	r2, [sp, #4]
 80176ca:	f000 fe39 	bl	8018340 <strtoul>
 80176ce:	4605      	mov	r5, r0
 80176d0:	b150      	cbz	r0, 80176e8 <rcl_get_default_domain_id+0x4c>
 80176d2:	1c43      	adds	r3, r0, #1
 80176d4:	d00d      	beq.n	80176f2 <rcl_get_default_domain_id+0x56>
 80176d6:	6025      	str	r5, [r4, #0]
 80176d8:	2000      	movs	r0, #0
 80176da:	e7ec      	b.n	80176b6 <rcl_get_default_domain_id+0x1a>
 80176dc:	200b      	movs	r0, #11
 80176de:	b003      	add	sp, #12
 80176e0:	bd30      	pop	{r4, r5, pc}
 80176e2:	4618      	mov	r0, r3
 80176e4:	b003      	add	sp, #12
 80176e6:	bd30      	pop	{r4, r5, pc}
 80176e8:	9b01      	ldr	r3, [sp, #4]
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d0f2      	beq.n	80176d6 <rcl_get_default_domain_id+0x3a>
 80176f0:	e7e0      	b.n	80176b4 <rcl_get_default_domain_id+0x18>
 80176f2:	f001 f95f 	bl	80189b4 <__errno>
 80176f6:	6803      	ldr	r3, [r0, #0]
 80176f8:	2b22      	cmp	r3, #34	@ 0x22
 80176fa:	d1ec      	bne.n	80176d6 <rcl_get_default_domain_id+0x3a>
 80176fc:	e7da      	b.n	80176b4 <rcl_get_default_domain_id+0x18>
 80176fe:	bf00      	nop
 8017700:	0801bd3c 	.word	0x0801bd3c

08017704 <rcl_expand_topic_name>:
 8017704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017708:	b08b      	sub	sp, #44	@ 0x2c
 801770a:	9306      	str	r3, [sp, #24]
 801770c:	2800      	cmp	r0, #0
 801770e:	f000 80ad 	beq.w	801786c <rcl_expand_topic_name+0x168>
 8017712:	460e      	mov	r6, r1
 8017714:	2900      	cmp	r1, #0
 8017716:	f000 80a9 	beq.w	801786c <rcl_expand_topic_name+0x168>
 801771a:	4617      	mov	r7, r2
 801771c:	2a00      	cmp	r2, #0
 801771e:	f000 80a5 	beq.w	801786c <rcl_expand_topic_name+0x168>
 8017722:	2b00      	cmp	r3, #0
 8017724:	f000 80a2 	beq.w	801786c <rcl_expand_topic_name+0x168>
 8017728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801772a:	2b00      	cmp	r3, #0
 801772c:	f000 809e 	beq.w	801786c <rcl_expand_topic_name+0x168>
 8017730:	2200      	movs	r2, #0
 8017732:	a909      	add	r1, sp, #36	@ 0x24
 8017734:	4680      	mov	r8, r0
 8017736:	f000 fa57 	bl	8017be8 <rcl_validate_topic_name>
 801773a:	4604      	mov	r4, r0
 801773c:	2800      	cmp	r0, #0
 801773e:	f040 8096 	bne.w	801786e <rcl_expand_topic_name+0x16a>
 8017742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017744:	2b00      	cmp	r3, #0
 8017746:	f040 809a 	bne.w	801787e <rcl_expand_topic_name+0x17a>
 801774a:	4602      	mov	r2, r0
 801774c:	a909      	add	r1, sp, #36	@ 0x24
 801774e:	4630      	mov	r0, r6
 8017750:	f7fe fc0c 	bl	8015f6c <rmw_validate_node_name>
 8017754:	2800      	cmp	r0, #0
 8017756:	f040 808e 	bne.w	8017876 <rcl_expand_topic_name+0x172>
 801775a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801775c:	2a00      	cmp	r2, #0
 801775e:	f040 8093 	bne.w	8017888 <rcl_expand_topic_name+0x184>
 8017762:	a909      	add	r1, sp, #36	@ 0x24
 8017764:	4638      	mov	r0, r7
 8017766:	f7fe fbe3 	bl	8015f30 <rmw_validate_namespace>
 801776a:	2800      	cmp	r0, #0
 801776c:	f040 8083 	bne.w	8017876 <rcl_expand_topic_name+0x172>
 8017770:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017772:	2c00      	cmp	r4, #0
 8017774:	f040 80ed 	bne.w	8017952 <rcl_expand_topic_name+0x24e>
 8017778:	217b      	movs	r1, #123	@ 0x7b
 801777a:	4640      	mov	r0, r8
 801777c:	f001 f88e 	bl	801889c <strchr>
 8017780:	f898 3000 	ldrb.w	r3, [r8]
 8017784:	2b2f      	cmp	r3, #47	@ 0x2f
 8017786:	4605      	mov	r5, r0
 8017788:	f000 809e 	beq.w	80178c8 <rcl_expand_topic_name+0x1c4>
 801778c:	2b7e      	cmp	r3, #126	@ 0x7e
 801778e:	f040 80a2 	bne.w	80178d6 <rcl_expand_topic_name+0x1d2>
 8017792:	4638      	mov	r0, r7
 8017794:	f7e8 fd4e 	bl	8000234 <strlen>
 8017798:	4a82      	ldr	r2, [pc, #520]	@ (80179a4 <rcl_expand_topic_name+0x2a0>)
 801779a:	4b83      	ldr	r3, [pc, #524]	@ (80179a8 <rcl_expand_topic_name+0x2a4>)
 801779c:	2801      	cmp	r0, #1
 801779e:	bf18      	it	ne
 80177a0:	4613      	movne	r3, r2
 80177a2:	9302      	str	r3, [sp, #8]
 80177a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80177a6:	9300      	str	r3, [sp, #0]
 80177a8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80177ac:	f108 0301 	add.w	r3, r8, #1
 80177b0:	9305      	str	r3, [sp, #20]
 80177b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80177b6:	9301      	str	r3, [sp, #4]
 80177b8:	ab14      	add	r3, sp, #80	@ 0x50
 80177ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177bc:	f7fd ffd4 	bl	8015768 <rcutils_format_string_limit>
 80177c0:	4682      	mov	sl, r0
 80177c2:	2800      	cmp	r0, #0
 80177c4:	f000 80c7 	beq.w	8017956 <rcl_expand_topic_name+0x252>
 80177c8:	2d00      	cmp	r5, #0
 80177ca:	f000 80a2 	beq.w	8017912 <rcl_expand_topic_name+0x20e>
 80177ce:	217b      	movs	r1, #123	@ 0x7b
 80177d0:	f001 f864 	bl	801889c <strchr>
 80177d4:	46d1      	mov	r9, sl
 80177d6:	4605      	mov	r5, r0
 80177d8:	9407      	str	r4, [sp, #28]
 80177da:	46d3      	mov	fp, sl
 80177dc:	464c      	mov	r4, r9
 80177de:	2d00      	cmp	r5, #0
 80177e0:	f000 80be 	beq.w	8017960 <rcl_expand_topic_name+0x25c>
 80177e4:	217d      	movs	r1, #125	@ 0x7d
 80177e6:	4620      	mov	r0, r4
 80177e8:	f001 f858 	bl	801889c <strchr>
 80177ec:	eba0 0905 	sub.w	r9, r0, r5
 80177f0:	f109 0a01 	add.w	sl, r9, #1
 80177f4:	486d      	ldr	r0, [pc, #436]	@ (80179ac <rcl_expand_topic_name+0x2a8>)
 80177f6:	4652      	mov	r2, sl
 80177f8:	4629      	mov	r1, r5
 80177fa:	f001 f85c 	bl	80188b6 <strncmp>
 80177fe:	2800      	cmp	r0, #0
 8017800:	d067      	beq.n	80178d2 <rcl_expand_topic_name+0x1ce>
 8017802:	486b      	ldr	r0, [pc, #428]	@ (80179b0 <rcl_expand_topic_name+0x2ac>)
 8017804:	4652      	mov	r2, sl
 8017806:	4629      	mov	r1, r5
 8017808:	f001 f855 	bl	80188b6 <strncmp>
 801780c:	b130      	cbz	r0, 801781c <rcl_expand_topic_name+0x118>
 801780e:	4869      	ldr	r0, [pc, #420]	@ (80179b4 <rcl_expand_topic_name+0x2b0>)
 8017810:	4652      	mov	r2, sl
 8017812:	4629      	mov	r1, r5
 8017814:	f001 f84f 	bl	80188b6 <strncmp>
 8017818:	2800      	cmp	r0, #0
 801781a:	d137      	bne.n	801788c <rcl_expand_topic_name+0x188>
 801781c:	46b9      	mov	r9, r7
 801781e:	ab16      	add	r3, sp, #88	@ 0x58
 8017820:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017824:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017828:	ab14      	add	r3, sp, #80	@ 0x50
 801782a:	4628      	mov	r0, r5
 801782c:	cb0c      	ldmia	r3, {r2, r3}
 801782e:	4651      	mov	r1, sl
 8017830:	f7fe f8d6 	bl	80159e0 <rcutils_strndup>
 8017834:	4605      	mov	r5, r0
 8017836:	2800      	cmp	r0, #0
 8017838:	f000 809c 	beq.w	8017974 <rcl_expand_topic_name+0x270>
 801783c:	464a      	mov	r2, r9
 801783e:	4620      	mov	r0, r4
 8017840:	ab14      	add	r3, sp, #80	@ 0x50
 8017842:	4629      	mov	r1, r5
 8017844:	f7fd ffca 	bl	80157dc <rcutils_repl_str>
 8017848:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801784a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801784c:	4604      	mov	r4, r0
 801784e:	4628      	mov	r0, r5
 8017850:	4798      	blx	r3
 8017852:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017854:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017856:	4658      	mov	r0, fp
 8017858:	4798      	blx	r3
 801785a:	2c00      	cmp	r4, #0
 801785c:	d07b      	beq.n	8017956 <rcl_expand_topic_name+0x252>
 801785e:	217b      	movs	r1, #123	@ 0x7b
 8017860:	4620      	mov	r0, r4
 8017862:	f001 f81b 	bl	801889c <strchr>
 8017866:	46a3      	mov	fp, r4
 8017868:	4605      	mov	r5, r0
 801786a:	e7b8      	b.n	80177de <rcl_expand_topic_name+0xda>
 801786c:	240b      	movs	r4, #11
 801786e:	4620      	mov	r0, r4
 8017870:	b00b      	add	sp, #44	@ 0x2c
 8017872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017876:	f7fb f97d 	bl	8012b74 <rcl_convert_rmw_ret_to_rcl_ret>
 801787a:	4604      	mov	r4, r0
 801787c:	e7f7      	b.n	801786e <rcl_expand_topic_name+0x16a>
 801787e:	2467      	movs	r4, #103	@ 0x67
 8017880:	4620      	mov	r0, r4
 8017882:	b00b      	add	sp, #44	@ 0x2c
 8017884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017888:	24c9      	movs	r4, #201	@ 0xc9
 801788a:	e7f0      	b.n	801786e <rcl_expand_topic_name+0x16a>
 801788c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8017890:	9806      	ldr	r0, [sp, #24]
 8017892:	1c69      	adds	r1, r5, #1
 8017894:	f7fe f9be 	bl	8015c14 <rcutils_string_map_getn>
 8017898:	4681      	mov	r9, r0
 801789a:	2800      	cmp	r0, #0
 801789c:	d1bf      	bne.n	801781e <rcl_expand_topic_name+0x11a>
 801789e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80178a0:	aa16      	add	r2, sp, #88	@ 0x58
 80178a2:	6018      	str	r0, [r3, #0]
 80178a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80178a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80178aa:	ab14      	add	r3, sp, #80	@ 0x50
 80178ac:	cb0c      	ldmia	r3, {r2, r3}
 80178ae:	4651      	mov	r1, sl
 80178b0:	4628      	mov	r0, r5
 80178b2:	f7fe f895 	bl	80159e0 <rcutils_strndup>
 80178b6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80178b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80178ba:	4798      	blx	r3
 80178bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80178be:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80178c0:	4658      	mov	r0, fp
 80178c2:	2469      	movs	r4, #105	@ 0x69
 80178c4:	4798      	blx	r3
 80178c6:	e7d2      	b.n	801786e <rcl_expand_topic_name+0x16a>
 80178c8:	2800      	cmp	r0, #0
 80178ca:	d05b      	beq.n	8017984 <rcl_expand_topic_name+0x280>
 80178cc:	46c1      	mov	r9, r8
 80178ce:	46a2      	mov	sl, r4
 80178d0:	e782      	b.n	80177d8 <rcl_expand_topic_name+0xd4>
 80178d2:	46b1      	mov	r9, r6
 80178d4:	e7a3      	b.n	801781e <rcl_expand_topic_name+0x11a>
 80178d6:	2800      	cmp	r0, #0
 80178d8:	d1f8      	bne.n	80178cc <rcl_expand_topic_name+0x1c8>
 80178da:	4638      	mov	r0, r7
 80178dc:	f7e8 fcaa 	bl	8000234 <strlen>
 80178e0:	4a35      	ldr	r2, [pc, #212]	@ (80179b8 <rcl_expand_topic_name+0x2b4>)
 80178e2:	4b36      	ldr	r3, [pc, #216]	@ (80179bc <rcl_expand_topic_name+0x2b8>)
 80178e4:	f8cd 8010 	str.w	r8, [sp, #16]
 80178e8:	2801      	cmp	r0, #1
 80178ea:	bf18      	it	ne
 80178ec:	4613      	movne	r3, r2
 80178ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80178f2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80178f6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80178f8:	9703      	str	r7, [sp, #12]
 80178fa:	9200      	str	r2, [sp, #0]
 80178fc:	ab14      	add	r3, sp, #80	@ 0x50
 80178fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017900:	f7fd ff32 	bl	8015768 <rcutils_format_string_limit>
 8017904:	4682      	mov	sl, r0
 8017906:	4653      	mov	r3, sl
 8017908:	b32b      	cbz	r3, 8017956 <rcl_expand_topic_name+0x252>
 801790a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801790c:	f8c3 a000 	str.w	sl, [r3]
 8017910:	e7ad      	b.n	801786e <rcl_expand_topic_name+0x16a>
 8017912:	f89a 3000 	ldrb.w	r3, [sl]
 8017916:	2b2f      	cmp	r3, #47	@ 0x2f
 8017918:	d0f7      	beq.n	801790a <rcl_expand_topic_name+0x206>
 801791a:	4638      	mov	r0, r7
 801791c:	f7e8 fc8a 	bl	8000234 <strlen>
 8017920:	4a25      	ldr	r2, [pc, #148]	@ (80179b8 <rcl_expand_topic_name+0x2b4>)
 8017922:	4b26      	ldr	r3, [pc, #152]	@ (80179bc <rcl_expand_topic_name+0x2b8>)
 8017924:	f8cd a010 	str.w	sl, [sp, #16]
 8017928:	2801      	cmp	r0, #1
 801792a:	bf18      	it	ne
 801792c:	4613      	movne	r3, r2
 801792e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017932:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017936:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017938:	9703      	str	r7, [sp, #12]
 801793a:	9200      	str	r2, [sp, #0]
 801793c:	ab14      	add	r3, sp, #80	@ 0x50
 801793e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017940:	f7fd ff12 	bl	8015768 <rcutils_format_string_limit>
 8017944:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017946:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017948:	4605      	mov	r5, r0
 801794a:	4650      	mov	r0, sl
 801794c:	4798      	blx	r3
 801794e:	46aa      	mov	sl, r5
 8017950:	e7d9      	b.n	8017906 <rcl_expand_topic_name+0x202>
 8017952:	24ca      	movs	r4, #202	@ 0xca
 8017954:	e78b      	b.n	801786e <rcl_expand_topic_name+0x16a>
 8017956:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017958:	2300      	movs	r3, #0
 801795a:	6013      	str	r3, [r2, #0]
 801795c:	240a      	movs	r4, #10
 801795e:	e786      	b.n	801786e <rcl_expand_topic_name+0x16a>
 8017960:	465b      	mov	r3, fp
 8017962:	9c07      	ldr	r4, [sp, #28]
 8017964:	46da      	mov	sl, fp
 8017966:	2b00      	cmp	r3, #0
 8017968:	d1d3      	bne.n	8017912 <rcl_expand_topic_name+0x20e>
 801796a:	f898 3000 	ldrb.w	r3, [r8]
 801796e:	2b2f      	cmp	r3, #47	@ 0x2f
 8017970:	d0cb      	beq.n	801790a <rcl_expand_topic_name+0x206>
 8017972:	e7b2      	b.n	80178da <rcl_expand_topic_name+0x1d6>
 8017974:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017978:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801797a:	6015      	str	r5, [r2, #0]
 801797c:	4658      	mov	r0, fp
 801797e:	4798      	blx	r3
 8017980:	240a      	movs	r4, #10
 8017982:	e774      	b.n	801786e <rcl_expand_topic_name+0x16a>
 8017984:	ab17      	add	r3, sp, #92	@ 0x5c
 8017986:	e893 0003 	ldmia.w	r3, {r0, r1}
 801798a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801798e:	ab14      	add	r3, sp, #80	@ 0x50
 8017990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017992:	4640      	mov	r0, r8
 8017994:	f7fe f802 	bl	801599c <rcutils_strdup>
 8017998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801799a:	2800      	cmp	r0, #0
 801799c:	6018      	str	r0, [r3, #0]
 801799e:	bf08      	it	eq
 80179a0:	240a      	moveq	r4, #10
 80179a2:	e764      	b.n	801786e <rcl_expand_topic_name+0x16a>
 80179a4:	0801bd4c 	.word	0x0801bd4c
 80179a8:	0801b308 	.word	0x0801b308
 80179ac:	0801bd54 	.word	0x0801bd54
 80179b0:	0801bd5c 	.word	0x0801bd5c
 80179b4:	0801bd64 	.word	0x0801bd64
 80179b8:	0801b2f4 	.word	0x0801b2f4
 80179bc:	0801b318 	.word	0x0801b318

080179c0 <rcl_get_default_topic_name_substitutions>:
 80179c0:	2800      	cmp	r0, #0
 80179c2:	bf0c      	ite	eq
 80179c4:	200b      	moveq	r0, #11
 80179c6:	2000      	movne	r0, #0
 80179c8:	4770      	bx	lr
 80179ca:	bf00      	nop

080179cc <rcl_get_zero_initialized_guard_condition>:
 80179cc:	4a03      	ldr	r2, [pc, #12]	@ (80179dc <rcl_get_zero_initialized_guard_condition+0x10>)
 80179ce:	4603      	mov	r3, r0
 80179d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80179d8:	4618      	mov	r0, r3
 80179da:	4770      	bx	lr
 80179dc:	0801bd70 	.word	0x0801bd70

080179e0 <rcl_guard_condition_init>:
 80179e0:	b082      	sub	sp, #8
 80179e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179e4:	b087      	sub	sp, #28
 80179e6:	ac0c      	add	r4, sp, #48	@ 0x30
 80179e8:	e884 000c 	stmia.w	r4, {r2, r3}
 80179ec:	46a6      	mov	lr, r4
 80179ee:	460d      	mov	r5, r1
 80179f0:	4604      	mov	r4, r0
 80179f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80179f6:	f10d 0c04 	add.w	ip, sp, #4
 80179fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179fe:	f8de 3000 	ldr.w	r3, [lr]
 8017a02:	f8cc 3000 	str.w	r3, [ip]
 8017a06:	a801      	add	r0, sp, #4
 8017a08:	f7f5 fc48 	bl	800d29c <rcutils_allocator_is_valid>
 8017a0c:	b338      	cbz	r0, 8017a5e <rcl_guard_condition_init+0x7e>
 8017a0e:	b334      	cbz	r4, 8017a5e <rcl_guard_condition_init+0x7e>
 8017a10:	6866      	ldr	r6, [r4, #4]
 8017a12:	b9ee      	cbnz	r6, 8017a50 <rcl_guard_condition_init+0x70>
 8017a14:	b31d      	cbz	r5, 8017a5e <rcl_guard_condition_init+0x7e>
 8017a16:	4628      	mov	r0, r5
 8017a18:	f7fb f8ca 	bl	8012bb0 <rcl_context_is_valid>
 8017a1c:	b308      	cbz	r0, 8017a62 <rcl_guard_condition_init+0x82>
 8017a1e:	9b01      	ldr	r3, [sp, #4]
 8017a20:	9905      	ldr	r1, [sp, #20]
 8017a22:	201c      	movs	r0, #28
 8017a24:	4798      	blx	r3
 8017a26:	4607      	mov	r7, r0
 8017a28:	6060      	str	r0, [r4, #4]
 8017a2a:	b310      	cbz	r0, 8017a72 <rcl_guard_condition_init+0x92>
 8017a2c:	6828      	ldr	r0, [r5, #0]
 8017a2e:	3028      	adds	r0, #40	@ 0x28
 8017a30:	f000 f9ac 	bl	8017d8c <rmw_create_guard_condition>
 8017a34:	6038      	str	r0, [r7, #0]
 8017a36:	6860      	ldr	r0, [r4, #4]
 8017a38:	6805      	ldr	r5, [r0, #0]
 8017a3a:	b1a5      	cbz	r5, 8017a66 <rcl_guard_condition_init+0x86>
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	ac01      	add	r4, sp, #4
 8017a40:	7103      	strb	r3, [r0, #4]
 8017a42:	f100 0708 	add.w	r7, r0, #8
 8017a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017a4a:	6823      	ldr	r3, [r4, #0]
 8017a4c:	603b      	str	r3, [r7, #0]
 8017a4e:	e000      	b.n	8017a52 <rcl_guard_condition_init+0x72>
 8017a50:	2664      	movs	r6, #100	@ 0x64
 8017a52:	4630      	mov	r0, r6
 8017a54:	b007      	add	sp, #28
 8017a56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017a5a:	b002      	add	sp, #8
 8017a5c:	4770      	bx	lr
 8017a5e:	260b      	movs	r6, #11
 8017a60:	e7f7      	b.n	8017a52 <rcl_guard_condition_init+0x72>
 8017a62:	2665      	movs	r6, #101	@ 0x65
 8017a64:	e7f5      	b.n	8017a52 <rcl_guard_condition_init+0x72>
 8017a66:	9b02      	ldr	r3, [sp, #8]
 8017a68:	9905      	ldr	r1, [sp, #20]
 8017a6a:	4798      	blx	r3
 8017a6c:	2601      	movs	r6, #1
 8017a6e:	6065      	str	r5, [r4, #4]
 8017a70:	e7ef      	b.n	8017a52 <rcl_guard_condition_init+0x72>
 8017a72:	260a      	movs	r6, #10
 8017a74:	e7ed      	b.n	8017a52 <rcl_guard_condition_init+0x72>
 8017a76:	bf00      	nop

08017a78 <rcl_guard_condition_init_from_rmw>:
 8017a78:	b082      	sub	sp, #8
 8017a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a7e:	b086      	sub	sp, #24
 8017a80:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017a84:	4604      	mov	r4, r0
 8017a86:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017a8a:	460e      	mov	r6, r1
 8017a8c:	4617      	mov	r7, r2
 8017a8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017a92:	f10d 0e04 	add.w	lr, sp, #4
 8017a96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017a9a:	f8dc 3000 	ldr.w	r3, [ip]
 8017a9e:	f8ce 3000 	str.w	r3, [lr]
 8017aa2:	a801      	add	r0, sp, #4
 8017aa4:	f7f5 fbfa 	bl	800d29c <rcutils_allocator_is_valid>
 8017aa8:	b350      	cbz	r0, 8017b00 <rcl_guard_condition_init_from_rmw+0x88>
 8017aaa:	b34c      	cbz	r4, 8017b00 <rcl_guard_condition_init_from_rmw+0x88>
 8017aac:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017ab0:	f1b8 0f00 	cmp.w	r8, #0
 8017ab4:	d11e      	bne.n	8017af4 <rcl_guard_condition_init_from_rmw+0x7c>
 8017ab6:	b31f      	cbz	r7, 8017b00 <rcl_guard_condition_init_from_rmw+0x88>
 8017ab8:	4638      	mov	r0, r7
 8017aba:	f7fb f879 	bl	8012bb0 <rcl_context_is_valid>
 8017abe:	b328      	cbz	r0, 8017b0c <rcl_guard_condition_init_from_rmw+0x94>
 8017ac0:	9b01      	ldr	r3, [sp, #4]
 8017ac2:	9905      	ldr	r1, [sp, #20]
 8017ac4:	201c      	movs	r0, #28
 8017ac6:	4798      	blx	r3
 8017ac8:	4605      	mov	r5, r0
 8017aca:	6060      	str	r0, [r4, #4]
 8017acc:	b358      	cbz	r0, 8017b26 <rcl_guard_condition_init_from_rmw+0xae>
 8017ace:	b1fe      	cbz	r6, 8017b10 <rcl_guard_condition_init_from_rmw+0x98>
 8017ad0:	6006      	str	r6, [r0, #0]
 8017ad2:	f880 8004 	strb.w	r8, [r0, #4]
 8017ad6:	ac01      	add	r4, sp, #4
 8017ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ada:	f105 0c08 	add.w	ip, r5, #8
 8017ade:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ae2:	6823      	ldr	r3, [r4, #0]
 8017ae4:	f8cc 3000 	str.w	r3, [ip]
 8017ae8:	2000      	movs	r0, #0
 8017aea:	b006      	add	sp, #24
 8017aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017af0:	b002      	add	sp, #8
 8017af2:	4770      	bx	lr
 8017af4:	2064      	movs	r0, #100	@ 0x64
 8017af6:	b006      	add	sp, #24
 8017af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017afc:	b002      	add	sp, #8
 8017afe:	4770      	bx	lr
 8017b00:	200b      	movs	r0, #11
 8017b02:	b006      	add	sp, #24
 8017b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b08:	b002      	add	sp, #8
 8017b0a:	4770      	bx	lr
 8017b0c:	2065      	movs	r0, #101	@ 0x65
 8017b0e:	e7f2      	b.n	8017af6 <rcl_guard_condition_init_from_rmw+0x7e>
 8017b10:	6838      	ldr	r0, [r7, #0]
 8017b12:	3028      	adds	r0, #40	@ 0x28
 8017b14:	f000 f93a 	bl	8017d8c <rmw_create_guard_condition>
 8017b18:	6028      	str	r0, [r5, #0]
 8017b1a:	6865      	ldr	r5, [r4, #4]
 8017b1c:	682e      	ldr	r6, [r5, #0]
 8017b1e:	b126      	cbz	r6, 8017b2a <rcl_guard_condition_init_from_rmw+0xb2>
 8017b20:	2301      	movs	r3, #1
 8017b22:	712b      	strb	r3, [r5, #4]
 8017b24:	e7d7      	b.n	8017ad6 <rcl_guard_condition_init_from_rmw+0x5e>
 8017b26:	200a      	movs	r0, #10
 8017b28:	e7e5      	b.n	8017af6 <rcl_guard_condition_init_from_rmw+0x7e>
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	9b02      	ldr	r3, [sp, #8]
 8017b2e:	9905      	ldr	r1, [sp, #20]
 8017b30:	4798      	blx	r3
 8017b32:	6066      	str	r6, [r4, #4]
 8017b34:	2001      	movs	r0, #1
 8017b36:	e7de      	b.n	8017af6 <rcl_guard_condition_init_from_rmw+0x7e>

08017b38 <rcl_guard_condition_fini>:
 8017b38:	b570      	push	{r4, r5, r6, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	b1f0      	cbz	r0, 8017b7c <rcl_guard_condition_fini+0x44>
 8017b3e:	6843      	ldr	r3, [r0, #4]
 8017b40:	4604      	mov	r4, r0
 8017b42:	b163      	cbz	r3, 8017b5e <rcl_guard_condition_fini+0x26>
 8017b44:	6818      	ldr	r0, [r3, #0]
 8017b46:	68de      	ldr	r6, [r3, #12]
 8017b48:	6999      	ldr	r1, [r3, #24]
 8017b4a:	b160      	cbz	r0, 8017b66 <rcl_guard_condition_fini+0x2e>
 8017b4c:	791d      	ldrb	r5, [r3, #4]
 8017b4e:	b965      	cbnz	r5, 8017b6a <rcl_guard_condition_fini+0x32>
 8017b50:	4618      	mov	r0, r3
 8017b52:	47b0      	blx	r6
 8017b54:	2300      	movs	r3, #0
 8017b56:	4628      	mov	r0, r5
 8017b58:	6063      	str	r3, [r4, #4]
 8017b5a:	b002      	add	sp, #8
 8017b5c:	bd70      	pop	{r4, r5, r6, pc}
 8017b5e:	461d      	mov	r5, r3
 8017b60:	4628      	mov	r0, r5
 8017b62:	b002      	add	sp, #8
 8017b64:	bd70      	pop	{r4, r5, r6, pc}
 8017b66:	4605      	mov	r5, r0
 8017b68:	e7f2      	b.n	8017b50 <rcl_guard_condition_fini+0x18>
 8017b6a:	9101      	str	r1, [sp, #4]
 8017b6c:	f000 f922 	bl	8017db4 <rmw_destroy_guard_condition>
 8017b70:	1e05      	subs	r5, r0, #0
 8017b72:	6863      	ldr	r3, [r4, #4]
 8017b74:	9901      	ldr	r1, [sp, #4]
 8017b76:	bf18      	it	ne
 8017b78:	2501      	movne	r5, #1
 8017b7a:	e7e9      	b.n	8017b50 <rcl_guard_condition_fini+0x18>
 8017b7c:	250b      	movs	r5, #11
 8017b7e:	4628      	mov	r0, r5
 8017b80:	b002      	add	sp, #8
 8017b82:	bd70      	pop	{r4, r5, r6, pc}

08017b84 <rcl_guard_condition_get_default_options>:
 8017b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b86:	b087      	sub	sp, #28
 8017b88:	4606      	mov	r6, r0
 8017b8a:	4668      	mov	r0, sp
 8017b8c:	f7f5 fb78 	bl	800d280 <rcutils_get_default_allocator>
 8017b90:	4b09      	ldr	r3, [pc, #36]	@ (8017bb8 <rcl_guard_condition_get_default_options+0x34>)
 8017b92:	46ee      	mov	lr, sp
 8017b94:	469c      	mov	ip, r3
 8017b96:	461d      	mov	r5, r3
 8017b98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017b9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ba2:	4634      	mov	r4, r6
 8017ba4:	f8de 7000 	ldr.w	r7, [lr]
 8017ba8:	f8cc 7000 	str.w	r7, [ip]
 8017bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017bae:	4630      	mov	r0, r6
 8017bb0:	6027      	str	r7, [r4, #0]
 8017bb2:	b007      	add	sp, #28
 8017bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	2000b3d8 	.word	0x2000b3d8

08017bbc <rcl_trigger_guard_condition>:
 8017bbc:	b148      	cbz	r0, 8017bd2 <rcl_trigger_guard_condition+0x16>
 8017bbe:	b508      	push	{r3, lr}
 8017bc0:	6843      	ldr	r3, [r0, #4]
 8017bc2:	b143      	cbz	r3, 8017bd6 <rcl_trigger_guard_condition+0x1a>
 8017bc4:	6818      	ldr	r0, [r3, #0]
 8017bc6:	f000 f909 	bl	8017ddc <rmw_trigger_guard_condition>
 8017bca:	3800      	subs	r0, #0
 8017bcc:	bf18      	it	ne
 8017bce:	2001      	movne	r0, #1
 8017bd0:	bd08      	pop	{r3, pc}
 8017bd2:	200b      	movs	r0, #11
 8017bd4:	4770      	bx	lr
 8017bd6:	200b      	movs	r0, #11
 8017bd8:	bd08      	pop	{r3, pc}
 8017bda:	bf00      	nop

08017bdc <rcl_guard_condition_get_rmw_handle>:
 8017bdc:	b110      	cbz	r0, 8017be4 <rcl_guard_condition_get_rmw_handle+0x8>
 8017bde:	6840      	ldr	r0, [r0, #4]
 8017be0:	b100      	cbz	r0, 8017be4 <rcl_guard_condition_get_rmw_handle+0x8>
 8017be2:	6800      	ldr	r0, [r0, #0]
 8017be4:	4770      	bx	lr
 8017be6:	bf00      	nop

08017be8 <rcl_validate_topic_name>:
 8017be8:	2800      	cmp	r0, #0
 8017bea:	d07a      	beq.n	8017ce2 <rcl_validate_topic_name+0xfa>
 8017bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bf0:	460e      	mov	r6, r1
 8017bf2:	2900      	cmp	r1, #0
 8017bf4:	d07c      	beq.n	8017cf0 <rcl_validate_topic_name+0x108>
 8017bf6:	4617      	mov	r7, r2
 8017bf8:	4605      	mov	r5, r0
 8017bfa:	f7e8 fb1b 	bl	8000234 <strlen>
 8017bfe:	b1b0      	cbz	r0, 8017c2e <rcl_validate_topic_name+0x46>
 8017c00:	f895 9000 	ldrb.w	r9, [r5]
 8017c04:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017d88 <rcl_validate_topic_name+0x1a0>
 8017c08:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017c0c:	f013 0304 	ands.w	r3, r3, #4
 8017c10:	d169      	bne.n	8017ce6 <rcl_validate_topic_name+0xfe>
 8017c12:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017c16:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017c1a:	2a2f      	cmp	r2, #47	@ 0x2f
 8017c1c:	d10e      	bne.n	8017c3c <rcl_validate_topic_name+0x54>
 8017c1e:	2202      	movs	r2, #2
 8017c20:	6032      	str	r2, [r6, #0]
 8017c22:	b36f      	cbz	r7, 8017c80 <rcl_validate_topic_name+0x98>
 8017c24:	f8c7 8000 	str.w	r8, [r7]
 8017c28:	4618      	mov	r0, r3
 8017c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c2e:	2301      	movs	r3, #1
 8017c30:	6033      	str	r3, [r6, #0]
 8017c32:	b32f      	cbz	r7, 8017c80 <rcl_validate_topic_name+0x98>
 8017c34:	2000      	movs	r0, #0
 8017c36:	6038      	str	r0, [r7, #0]
 8017c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c3c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017c40:	461c      	mov	r4, r3
 8017c42:	4619      	mov	r1, r3
 8017c44:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017c48:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017c4c:	f1be 0f09 	cmp.w	lr, #9
 8017c50:	d919      	bls.n	8017c86 <rcl_validate_topic_name+0x9e>
 8017c52:	f022 0e20 	bic.w	lr, r2, #32
 8017c56:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017c5a:	f1be 0f19 	cmp.w	lr, #25
 8017c5e:	d912      	bls.n	8017c86 <rcl_validate_topic_name+0x9e>
 8017c60:	2a5f      	cmp	r2, #95	@ 0x5f
 8017c62:	d019      	beq.n	8017c98 <rcl_validate_topic_name+0xb0>
 8017c64:	2a2f      	cmp	r2, #47	@ 0x2f
 8017c66:	d051      	beq.n	8017d0c <rcl_validate_topic_name+0x124>
 8017c68:	2a7e      	cmp	r2, #126	@ 0x7e
 8017c6a:	d048      	beq.n	8017cfe <rcl_validate_topic_name+0x116>
 8017c6c:	2a7b      	cmp	r2, #123	@ 0x7b
 8017c6e:	d054      	beq.n	8017d1a <rcl_validate_topic_name+0x132>
 8017c70:	2a7d      	cmp	r2, #125	@ 0x7d
 8017c72:	d161      	bne.n	8017d38 <rcl_validate_topic_name+0x150>
 8017c74:	2c00      	cmp	r4, #0
 8017c76:	d155      	bne.n	8017d24 <rcl_validate_topic_name+0x13c>
 8017c78:	2305      	movs	r3, #5
 8017c7a:	6033      	str	r3, [r6, #0]
 8017c7c:	b107      	cbz	r7, 8017c80 <rcl_validate_topic_name+0x98>
 8017c7e:	6039      	str	r1, [r7, #0]
 8017c80:	2000      	movs	r0, #0
 8017c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c86:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017c8a:	0752      	lsls	r2, r2, #29
 8017c8c:	d504      	bpl.n	8017c98 <rcl_validate_topic_name+0xb0>
 8017c8e:	b11c      	cbz	r4, 8017c98 <rcl_validate_topic_name+0xb0>
 8017c90:	b111      	cbz	r1, 8017c98 <rcl_validate_topic_name+0xb0>
 8017c92:	1e4a      	subs	r2, r1, #1
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d02d      	beq.n	8017cf4 <rcl_validate_topic_name+0x10c>
 8017c98:	3101      	adds	r1, #1
 8017c9a:	4288      	cmp	r0, r1
 8017c9c:	d1d2      	bne.n	8017c44 <rcl_validate_topic_name+0x5c>
 8017c9e:	2c00      	cmp	r4, #0
 8017ca0:	d145      	bne.n	8017d2e <rcl_validate_topic_name+0x146>
 8017ca2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017ca6:	d04f      	beq.n	8017d48 <rcl_validate_topic_name+0x160>
 8017ca8:	4620      	mov	r0, r4
 8017caa:	2301      	movs	r3, #1
 8017cac:	e006      	b.n	8017cbc <rcl_validate_topic_name+0xd4>
 8017cae:	428b      	cmp	r3, r1
 8017cb0:	f105 0501 	add.w	r5, r5, #1
 8017cb4:	f103 0201 	add.w	r2, r3, #1
 8017cb8:	d236      	bcs.n	8017d28 <rcl_validate_topic_name+0x140>
 8017cba:	4613      	mov	r3, r2
 8017cbc:	4580      	cmp	r8, r0
 8017cbe:	f100 0001 	add.w	r0, r0, #1
 8017cc2:	d0f4      	beq.n	8017cae <rcl_validate_topic_name+0xc6>
 8017cc4:	782a      	ldrb	r2, [r5, #0]
 8017cc6:	2a2f      	cmp	r2, #47	@ 0x2f
 8017cc8:	d1f1      	bne.n	8017cae <rcl_validate_topic_name+0xc6>
 8017cca:	786a      	ldrb	r2, [r5, #1]
 8017ccc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017cd0:	0754      	lsls	r4, r2, #29
 8017cd2:	d5ec      	bpl.n	8017cae <rcl_validate_topic_name+0xc6>
 8017cd4:	2204      	movs	r2, #4
 8017cd6:	6032      	str	r2, [r6, #0]
 8017cd8:	2f00      	cmp	r7, #0
 8017cda:	d0d1      	beq.n	8017c80 <rcl_validate_topic_name+0x98>
 8017cdc:	603b      	str	r3, [r7, #0]
 8017cde:	2000      	movs	r0, #0
 8017ce0:	e7aa      	b.n	8017c38 <rcl_validate_topic_name+0x50>
 8017ce2:	200b      	movs	r0, #11
 8017ce4:	4770      	bx	lr
 8017ce6:	2304      	movs	r3, #4
 8017ce8:	6033      	str	r3, [r6, #0]
 8017cea:	2f00      	cmp	r7, #0
 8017cec:	d1a2      	bne.n	8017c34 <rcl_validate_topic_name+0x4c>
 8017cee:	e7c7      	b.n	8017c80 <rcl_validate_topic_name+0x98>
 8017cf0:	200b      	movs	r0, #11
 8017cf2:	e7a1      	b.n	8017c38 <rcl_validate_topic_name+0x50>
 8017cf4:	2309      	movs	r3, #9
 8017cf6:	6033      	str	r3, [r6, #0]
 8017cf8:	2f00      	cmp	r7, #0
 8017cfa:	d1c0      	bne.n	8017c7e <rcl_validate_topic_name+0x96>
 8017cfc:	e7c0      	b.n	8017c80 <rcl_validate_topic_name+0x98>
 8017cfe:	2900      	cmp	r1, #0
 8017d00:	d0ca      	beq.n	8017c98 <rcl_validate_topic_name+0xb0>
 8017d02:	2306      	movs	r3, #6
 8017d04:	6033      	str	r3, [r6, #0]
 8017d06:	2f00      	cmp	r7, #0
 8017d08:	d1b9      	bne.n	8017c7e <rcl_validate_topic_name+0x96>
 8017d0a:	e7b9      	b.n	8017c80 <rcl_validate_topic_name+0x98>
 8017d0c:	2c00      	cmp	r4, #0
 8017d0e:	d0c3      	beq.n	8017c98 <rcl_validate_topic_name+0xb0>
 8017d10:	2308      	movs	r3, #8
 8017d12:	6033      	str	r3, [r6, #0]
 8017d14:	2f00      	cmp	r7, #0
 8017d16:	d1b2      	bne.n	8017c7e <rcl_validate_topic_name+0x96>
 8017d18:	e7b2      	b.n	8017c80 <rcl_validate_topic_name+0x98>
 8017d1a:	2c00      	cmp	r4, #0
 8017d1c:	d1f8      	bne.n	8017d10 <rcl_validate_topic_name+0x128>
 8017d1e:	460b      	mov	r3, r1
 8017d20:	2401      	movs	r4, #1
 8017d22:	e7b9      	b.n	8017c98 <rcl_validate_topic_name+0xb0>
 8017d24:	2400      	movs	r4, #0
 8017d26:	e7b7      	b.n	8017c98 <rcl_validate_topic_name+0xb0>
 8017d28:	2000      	movs	r0, #0
 8017d2a:	6030      	str	r0, [r6, #0]
 8017d2c:	e784      	b.n	8017c38 <rcl_validate_topic_name+0x50>
 8017d2e:	2205      	movs	r2, #5
 8017d30:	6032      	str	r2, [r6, #0]
 8017d32:	2f00      	cmp	r7, #0
 8017d34:	d1d2      	bne.n	8017cdc <rcl_validate_topic_name+0xf4>
 8017d36:	e7a3      	b.n	8017c80 <rcl_validate_topic_name+0x98>
 8017d38:	2c00      	cmp	r4, #0
 8017d3a:	bf14      	ite	ne
 8017d3c:	2308      	movne	r3, #8
 8017d3e:	2303      	moveq	r3, #3
 8017d40:	6033      	str	r3, [r6, #0]
 8017d42:	2f00      	cmp	r7, #0
 8017d44:	d19b      	bne.n	8017c7e <rcl_validate_topic_name+0x96>
 8017d46:	e79b      	b.n	8017c80 <rcl_validate_topic_name+0x98>
 8017d48:	2301      	movs	r3, #1
 8017d4a:	e00a      	b.n	8017d62 <rcl_validate_topic_name+0x17a>
 8017d4c:	2c01      	cmp	r4, #1
 8017d4e:	d013      	beq.n	8017d78 <rcl_validate_topic_name+0x190>
 8017d50:	4299      	cmp	r1, r3
 8017d52:	f104 0401 	add.w	r4, r4, #1
 8017d56:	f105 0501 	add.w	r5, r5, #1
 8017d5a:	f103 0201 	add.w	r2, r3, #1
 8017d5e:	d9e3      	bls.n	8017d28 <rcl_validate_topic_name+0x140>
 8017d60:	4613      	mov	r3, r2
 8017d62:	45a0      	cmp	r8, r4
 8017d64:	d0f4      	beq.n	8017d50 <rcl_validate_topic_name+0x168>
 8017d66:	782a      	ldrb	r2, [r5, #0]
 8017d68:	2a2f      	cmp	r2, #47	@ 0x2f
 8017d6a:	d1ef      	bne.n	8017d4c <rcl_validate_topic_name+0x164>
 8017d6c:	786a      	ldrb	r2, [r5, #1]
 8017d6e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017d72:	0752      	lsls	r2, r2, #29
 8017d74:	d5ec      	bpl.n	8017d50 <rcl_validate_topic_name+0x168>
 8017d76:	e7ad      	b.n	8017cd4 <rcl_validate_topic_name+0xec>
 8017d78:	2307      	movs	r3, #7
 8017d7a:	6033      	str	r3, [r6, #0]
 8017d7c:	2f00      	cmp	r7, #0
 8017d7e:	f43f af7f 	beq.w	8017c80 <rcl_validate_topic_name+0x98>
 8017d82:	603c      	str	r4, [r7, #0]
 8017d84:	2000      	movs	r0, #0
 8017d86:	e757      	b.n	8017c38 <rcl_validate_topic_name+0x50>
 8017d88:	0801beda 	.word	0x0801beda

08017d8c <rmw_create_guard_condition>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	4605      	mov	r5, r0
 8017d90:	4807      	ldr	r0, [pc, #28]	@ (8017db0 <rmw_create_guard_condition+0x24>)
 8017d92:	f7fe fa31 	bl	80161f8 <get_memory>
 8017d96:	b148      	cbz	r0, 8017dac <rmw_create_guard_condition+0x20>
 8017d98:	6884      	ldr	r4, [r0, #8]
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	7423      	strb	r3, [r4, #16]
 8017d9e:	61e5      	str	r5, [r4, #28]
 8017da0:	f7fe fa92 	bl	80162c8 <rmw_get_implementation_identifier>
 8017da4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017da8:	f104 0014 	add.w	r0, r4, #20
 8017dac:	bd38      	pop	{r3, r4, r5, pc}
 8017dae:	bf00      	nop
 8017db0:	2000b274 	.word	0x2000b274

08017db4 <rmw_destroy_guard_condition>:
 8017db4:	b508      	push	{r3, lr}
 8017db6:	4b08      	ldr	r3, [pc, #32]	@ (8017dd8 <rmw_destroy_guard_condition+0x24>)
 8017db8:	6819      	ldr	r1, [r3, #0]
 8017dba:	b911      	cbnz	r1, 8017dc2 <rmw_destroy_guard_condition+0xe>
 8017dbc:	e00a      	b.n	8017dd4 <rmw_destroy_guard_condition+0x20>
 8017dbe:	6849      	ldr	r1, [r1, #4]
 8017dc0:	b141      	cbz	r1, 8017dd4 <rmw_destroy_guard_condition+0x20>
 8017dc2:	688b      	ldr	r3, [r1, #8]
 8017dc4:	3314      	adds	r3, #20
 8017dc6:	4298      	cmp	r0, r3
 8017dc8:	d1f9      	bne.n	8017dbe <rmw_destroy_guard_condition+0xa>
 8017dca:	4803      	ldr	r0, [pc, #12]	@ (8017dd8 <rmw_destroy_guard_condition+0x24>)
 8017dcc:	f7fe fa24 	bl	8016218 <put_memory>
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	bd08      	pop	{r3, pc}
 8017dd4:	2001      	movs	r0, #1
 8017dd6:	bd08      	pop	{r3, pc}
 8017dd8:	2000b274 	.word	0x2000b274

08017ddc <rmw_trigger_guard_condition>:
 8017ddc:	b160      	cbz	r0, 8017df8 <rmw_trigger_guard_condition+0x1c>
 8017dde:	b510      	push	{r4, lr}
 8017de0:	4604      	mov	r4, r0
 8017de2:	6800      	ldr	r0, [r0, #0]
 8017de4:	f7f6 fc72 	bl	800e6cc <is_uxrce_rmw_identifier_valid>
 8017de8:	b908      	cbnz	r0, 8017dee <rmw_trigger_guard_condition+0x12>
 8017dea:	2001      	movs	r0, #1
 8017dec:	bd10      	pop	{r4, pc}
 8017dee:	6863      	ldr	r3, [r4, #4]
 8017df0:	2201      	movs	r2, #1
 8017df2:	741a      	strb	r2, [r3, #16]
 8017df4:	2000      	movs	r0, #0
 8017df6:	bd10      	pop	{r4, pc}
 8017df8:	2001      	movs	r0, #1
 8017dfa:	4770      	bx	lr

08017dfc <rosidl_runtime_c__String__init>:
 8017dfc:	b510      	push	{r4, lr}
 8017dfe:	4604      	mov	r4, r0
 8017e00:	b086      	sub	sp, #24
 8017e02:	b170      	cbz	r0, 8017e22 <rosidl_runtime_c__String__init+0x26>
 8017e04:	a801      	add	r0, sp, #4
 8017e06:	f7f5 fa3b 	bl	800d280 <rcutils_get_default_allocator>
 8017e0a:	9b01      	ldr	r3, [sp, #4]
 8017e0c:	9905      	ldr	r1, [sp, #20]
 8017e0e:	2001      	movs	r0, #1
 8017e10:	4798      	blx	r3
 8017e12:	6020      	str	r0, [r4, #0]
 8017e14:	b128      	cbz	r0, 8017e22 <rosidl_runtime_c__String__init+0x26>
 8017e16:	2100      	movs	r1, #0
 8017e18:	2201      	movs	r2, #1
 8017e1a:	7001      	strb	r1, [r0, #0]
 8017e1c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017e20:	4610      	mov	r0, r2
 8017e22:	b006      	add	sp, #24
 8017e24:	bd10      	pop	{r4, pc}
 8017e26:	bf00      	nop

08017e28 <rosidl_runtime_c__String__fini>:
 8017e28:	b320      	cbz	r0, 8017e74 <rosidl_runtime_c__String__fini+0x4c>
 8017e2a:	b510      	push	{r4, lr}
 8017e2c:	6803      	ldr	r3, [r0, #0]
 8017e2e:	b086      	sub	sp, #24
 8017e30:	4604      	mov	r4, r0
 8017e32:	b173      	cbz	r3, 8017e52 <rosidl_runtime_c__String__fini+0x2a>
 8017e34:	6883      	ldr	r3, [r0, #8]
 8017e36:	b1f3      	cbz	r3, 8017e76 <rosidl_runtime_c__String__fini+0x4e>
 8017e38:	a801      	add	r0, sp, #4
 8017e3a:	f7f5 fa21 	bl	800d280 <rcutils_get_default_allocator>
 8017e3e:	9b02      	ldr	r3, [sp, #8]
 8017e40:	9905      	ldr	r1, [sp, #20]
 8017e42:	6820      	ldr	r0, [r4, #0]
 8017e44:	4798      	blx	r3
 8017e46:	2300      	movs	r3, #0
 8017e48:	e9c4 3300 	strd	r3, r3, [r4]
 8017e4c:	60a3      	str	r3, [r4, #8]
 8017e4e:	b006      	add	sp, #24
 8017e50:	bd10      	pop	{r4, pc}
 8017e52:	6843      	ldr	r3, [r0, #4]
 8017e54:	b9db      	cbnz	r3, 8017e8e <rosidl_runtime_c__String__fini+0x66>
 8017e56:	6883      	ldr	r3, [r0, #8]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d0f8      	beq.n	8017e4e <rosidl_runtime_c__String__fini+0x26>
 8017e5c:	4b12      	ldr	r3, [pc, #72]	@ (8017ea8 <rosidl_runtime_c__String__fini+0x80>)
 8017e5e:	4813      	ldr	r0, [pc, #76]	@ (8017eac <rosidl_runtime_c__String__fini+0x84>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2251      	movs	r2, #81	@ 0x51
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	2101      	movs	r1, #1
 8017e68:	f000 fb82 	bl	8018570 <fwrite>
 8017e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e70:	f000 f83e 	bl	8017ef0 <exit>
 8017e74:	4770      	bx	lr
 8017e76:	4b0c      	ldr	r3, [pc, #48]	@ (8017ea8 <rosidl_runtime_c__String__fini+0x80>)
 8017e78:	480d      	ldr	r0, [pc, #52]	@ (8017eb0 <rosidl_runtime_c__String__fini+0x88>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	224c      	movs	r2, #76	@ 0x4c
 8017e7e:	68db      	ldr	r3, [r3, #12]
 8017e80:	2101      	movs	r1, #1
 8017e82:	f000 fb75 	bl	8018570 <fwrite>
 8017e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e8a:	f000 f831 	bl	8017ef0 <exit>
 8017e8e:	4b06      	ldr	r3, [pc, #24]	@ (8017ea8 <rosidl_runtime_c__String__fini+0x80>)
 8017e90:	4808      	ldr	r0, [pc, #32]	@ (8017eb4 <rosidl_runtime_c__String__fini+0x8c>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	224e      	movs	r2, #78	@ 0x4e
 8017e96:	68db      	ldr	r3, [r3, #12]
 8017e98:	2101      	movs	r1, #1
 8017e9a:	f000 fb69 	bl	8018570 <fwrite>
 8017e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ea2:	f000 f825 	bl	8017ef0 <exit>
 8017ea6:	bf00      	nop
 8017ea8:	200006dc 	.word	0x200006dc
 8017eac:	0801be18 	.word	0x0801be18
 8017eb0:	0801bd78 	.word	0x0801bd78
 8017eb4:	0801bdc8 	.word	0x0801bdc8

08017eb8 <calloc>:
 8017eb8:	4b02      	ldr	r3, [pc, #8]	@ (8017ec4 <calloc+0xc>)
 8017eba:	460a      	mov	r2, r1
 8017ebc:	4601      	mov	r1, r0
 8017ebe:	6818      	ldr	r0, [r3, #0]
 8017ec0:	f000 b802 	b.w	8017ec8 <_calloc_r>
 8017ec4:	200006dc 	.word	0x200006dc

08017ec8 <_calloc_r>:
 8017ec8:	b570      	push	{r4, r5, r6, lr}
 8017eca:	fba1 5402 	umull	r5, r4, r1, r2
 8017ece:	b93c      	cbnz	r4, 8017ee0 <_calloc_r+0x18>
 8017ed0:	4629      	mov	r1, r5
 8017ed2:	f000 f899 	bl	8018008 <_malloc_r>
 8017ed6:	4606      	mov	r6, r0
 8017ed8:	b928      	cbnz	r0, 8017ee6 <_calloc_r+0x1e>
 8017eda:	2600      	movs	r6, #0
 8017edc:	4630      	mov	r0, r6
 8017ede:	bd70      	pop	{r4, r5, r6, pc}
 8017ee0:	220c      	movs	r2, #12
 8017ee2:	6002      	str	r2, [r0, #0]
 8017ee4:	e7f9      	b.n	8017eda <_calloc_r+0x12>
 8017ee6:	462a      	mov	r2, r5
 8017ee8:	4621      	mov	r1, r4
 8017eea:	f000 fccf 	bl	801888c <memset>
 8017eee:	e7f5      	b.n	8017edc <_calloc_r+0x14>

08017ef0 <exit>:
 8017ef0:	b508      	push	{r3, lr}
 8017ef2:	4b06      	ldr	r3, [pc, #24]	@ (8017f0c <exit+0x1c>)
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	b113      	cbz	r3, 8017efe <exit+0xe>
 8017ef8:	2100      	movs	r1, #0
 8017efa:	f3af 8000 	nop.w
 8017efe:	4b04      	ldr	r3, [pc, #16]	@ (8017f10 <exit+0x20>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	b103      	cbz	r3, 8017f06 <exit+0x16>
 8017f04:	4798      	blx	r3
 8017f06:	4620      	mov	r0, r4
 8017f08:	f7ea f9d0 	bl	80022ac <_exit>
 8017f0c:	00000000 	.word	0x00000000
 8017f10:	2000b52c 	.word	0x2000b52c

08017f14 <getenv>:
 8017f14:	b507      	push	{r0, r1, r2, lr}
 8017f16:	4b04      	ldr	r3, [pc, #16]	@ (8017f28 <getenv+0x14>)
 8017f18:	4601      	mov	r1, r0
 8017f1a:	aa01      	add	r2, sp, #4
 8017f1c:	6818      	ldr	r0, [r3, #0]
 8017f1e:	f000 f805 	bl	8017f2c <_findenv_r>
 8017f22:	b003      	add	sp, #12
 8017f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f28:	200006dc 	.word	0x200006dc

08017f2c <_findenv_r>:
 8017f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f30:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017fa0 <_findenv_r+0x74>
 8017f34:	4606      	mov	r6, r0
 8017f36:	4689      	mov	r9, r1
 8017f38:	4617      	mov	r7, r2
 8017f3a:	f000 fd9d 	bl	8018a78 <__env_lock>
 8017f3e:	f8da 4000 	ldr.w	r4, [sl]
 8017f42:	b134      	cbz	r4, 8017f52 <_findenv_r+0x26>
 8017f44:	464b      	mov	r3, r9
 8017f46:	4698      	mov	r8, r3
 8017f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f4c:	b13a      	cbz	r2, 8017f5e <_findenv_r+0x32>
 8017f4e:	2a3d      	cmp	r2, #61	@ 0x3d
 8017f50:	d1f9      	bne.n	8017f46 <_findenv_r+0x1a>
 8017f52:	4630      	mov	r0, r6
 8017f54:	f000 fd96 	bl	8018a84 <__env_unlock>
 8017f58:	2000      	movs	r0, #0
 8017f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5e:	eba8 0809 	sub.w	r8, r8, r9
 8017f62:	46a3      	mov	fp, r4
 8017f64:	f854 0b04 	ldr.w	r0, [r4], #4
 8017f68:	2800      	cmp	r0, #0
 8017f6a:	d0f2      	beq.n	8017f52 <_findenv_r+0x26>
 8017f6c:	4642      	mov	r2, r8
 8017f6e:	4649      	mov	r1, r9
 8017f70:	f000 fca1 	bl	80188b6 <strncmp>
 8017f74:	2800      	cmp	r0, #0
 8017f76:	d1f4      	bne.n	8017f62 <_findenv_r+0x36>
 8017f78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017f7c:	eb03 0508 	add.w	r5, r3, r8
 8017f80:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017f84:	2b3d      	cmp	r3, #61	@ 0x3d
 8017f86:	d1ec      	bne.n	8017f62 <_findenv_r+0x36>
 8017f88:	f8da 3000 	ldr.w	r3, [sl]
 8017f8c:	ebab 0303 	sub.w	r3, fp, r3
 8017f90:	109b      	asrs	r3, r3, #2
 8017f92:	4630      	mov	r0, r6
 8017f94:	603b      	str	r3, [r7, #0]
 8017f96:	f000 fd75 	bl	8018a84 <__env_unlock>
 8017f9a:	1c68      	adds	r0, r5, #1
 8017f9c:	e7dd      	b.n	8017f5a <_findenv_r+0x2e>
 8017f9e:	bf00      	nop
 8017fa0:	20000000 	.word	0x20000000

08017fa4 <malloc>:
 8017fa4:	4b02      	ldr	r3, [pc, #8]	@ (8017fb0 <malloc+0xc>)
 8017fa6:	4601      	mov	r1, r0
 8017fa8:	6818      	ldr	r0, [r3, #0]
 8017faa:	f000 b82d 	b.w	8018008 <_malloc_r>
 8017fae:	bf00      	nop
 8017fb0:	200006dc 	.word	0x200006dc

08017fb4 <free>:
 8017fb4:	4b02      	ldr	r3, [pc, #8]	@ (8017fc0 <free+0xc>)
 8017fb6:	4601      	mov	r1, r0
 8017fb8:	6818      	ldr	r0, [r3, #0]
 8017fba:	f000 bd69 	b.w	8018a90 <_free_r>
 8017fbe:	bf00      	nop
 8017fc0:	200006dc 	.word	0x200006dc

08017fc4 <sbrk_aligned>:
 8017fc4:	b570      	push	{r4, r5, r6, lr}
 8017fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8018004 <sbrk_aligned+0x40>)
 8017fc8:	460c      	mov	r4, r1
 8017fca:	6831      	ldr	r1, [r6, #0]
 8017fcc:	4605      	mov	r5, r0
 8017fce:	b911      	cbnz	r1, 8017fd6 <sbrk_aligned+0x12>
 8017fd0:	f000 fcce 	bl	8018970 <_sbrk_r>
 8017fd4:	6030      	str	r0, [r6, #0]
 8017fd6:	4621      	mov	r1, r4
 8017fd8:	4628      	mov	r0, r5
 8017fda:	f000 fcc9 	bl	8018970 <_sbrk_r>
 8017fde:	1c43      	adds	r3, r0, #1
 8017fe0:	d103      	bne.n	8017fea <sbrk_aligned+0x26>
 8017fe2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	bd70      	pop	{r4, r5, r6, pc}
 8017fea:	1cc4      	adds	r4, r0, #3
 8017fec:	f024 0403 	bic.w	r4, r4, #3
 8017ff0:	42a0      	cmp	r0, r4
 8017ff2:	d0f8      	beq.n	8017fe6 <sbrk_aligned+0x22>
 8017ff4:	1a21      	subs	r1, r4, r0
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	f000 fcba 	bl	8018970 <_sbrk_r>
 8017ffc:	3001      	adds	r0, #1
 8017ffe:	d1f2      	bne.n	8017fe6 <sbrk_aligned+0x22>
 8018000:	e7ef      	b.n	8017fe2 <sbrk_aligned+0x1e>
 8018002:	bf00      	nop
 8018004:	2000b3ec 	.word	0x2000b3ec

08018008 <_malloc_r>:
 8018008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801800c:	1ccd      	adds	r5, r1, #3
 801800e:	f025 0503 	bic.w	r5, r5, #3
 8018012:	3508      	adds	r5, #8
 8018014:	2d0c      	cmp	r5, #12
 8018016:	bf38      	it	cc
 8018018:	250c      	movcc	r5, #12
 801801a:	2d00      	cmp	r5, #0
 801801c:	4606      	mov	r6, r0
 801801e:	db01      	blt.n	8018024 <_malloc_r+0x1c>
 8018020:	42a9      	cmp	r1, r5
 8018022:	d904      	bls.n	801802e <_malloc_r+0x26>
 8018024:	230c      	movs	r3, #12
 8018026:	6033      	str	r3, [r6, #0]
 8018028:	2000      	movs	r0, #0
 801802a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801802e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018104 <_malloc_r+0xfc>
 8018032:	f000 f869 	bl	8018108 <__malloc_lock>
 8018036:	f8d8 3000 	ldr.w	r3, [r8]
 801803a:	461c      	mov	r4, r3
 801803c:	bb44      	cbnz	r4, 8018090 <_malloc_r+0x88>
 801803e:	4629      	mov	r1, r5
 8018040:	4630      	mov	r0, r6
 8018042:	f7ff ffbf 	bl	8017fc4 <sbrk_aligned>
 8018046:	1c43      	adds	r3, r0, #1
 8018048:	4604      	mov	r4, r0
 801804a:	d158      	bne.n	80180fe <_malloc_r+0xf6>
 801804c:	f8d8 4000 	ldr.w	r4, [r8]
 8018050:	4627      	mov	r7, r4
 8018052:	2f00      	cmp	r7, #0
 8018054:	d143      	bne.n	80180de <_malloc_r+0xd6>
 8018056:	2c00      	cmp	r4, #0
 8018058:	d04b      	beq.n	80180f2 <_malloc_r+0xea>
 801805a:	6823      	ldr	r3, [r4, #0]
 801805c:	4639      	mov	r1, r7
 801805e:	4630      	mov	r0, r6
 8018060:	eb04 0903 	add.w	r9, r4, r3
 8018064:	f000 fc84 	bl	8018970 <_sbrk_r>
 8018068:	4581      	cmp	r9, r0
 801806a:	d142      	bne.n	80180f2 <_malloc_r+0xea>
 801806c:	6821      	ldr	r1, [r4, #0]
 801806e:	1a6d      	subs	r5, r5, r1
 8018070:	4629      	mov	r1, r5
 8018072:	4630      	mov	r0, r6
 8018074:	f7ff ffa6 	bl	8017fc4 <sbrk_aligned>
 8018078:	3001      	adds	r0, #1
 801807a:	d03a      	beq.n	80180f2 <_malloc_r+0xea>
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	442b      	add	r3, r5
 8018080:	6023      	str	r3, [r4, #0]
 8018082:	f8d8 3000 	ldr.w	r3, [r8]
 8018086:	685a      	ldr	r2, [r3, #4]
 8018088:	bb62      	cbnz	r2, 80180e4 <_malloc_r+0xdc>
 801808a:	f8c8 7000 	str.w	r7, [r8]
 801808e:	e00f      	b.n	80180b0 <_malloc_r+0xa8>
 8018090:	6822      	ldr	r2, [r4, #0]
 8018092:	1b52      	subs	r2, r2, r5
 8018094:	d420      	bmi.n	80180d8 <_malloc_r+0xd0>
 8018096:	2a0b      	cmp	r2, #11
 8018098:	d917      	bls.n	80180ca <_malloc_r+0xc2>
 801809a:	1961      	adds	r1, r4, r5
 801809c:	42a3      	cmp	r3, r4
 801809e:	6025      	str	r5, [r4, #0]
 80180a0:	bf18      	it	ne
 80180a2:	6059      	strne	r1, [r3, #4]
 80180a4:	6863      	ldr	r3, [r4, #4]
 80180a6:	bf08      	it	eq
 80180a8:	f8c8 1000 	streq.w	r1, [r8]
 80180ac:	5162      	str	r2, [r4, r5]
 80180ae:	604b      	str	r3, [r1, #4]
 80180b0:	4630      	mov	r0, r6
 80180b2:	f000 f82f 	bl	8018114 <__malloc_unlock>
 80180b6:	f104 000b 	add.w	r0, r4, #11
 80180ba:	1d23      	adds	r3, r4, #4
 80180bc:	f020 0007 	bic.w	r0, r0, #7
 80180c0:	1ac2      	subs	r2, r0, r3
 80180c2:	bf1c      	itt	ne
 80180c4:	1a1b      	subne	r3, r3, r0
 80180c6:	50a3      	strne	r3, [r4, r2]
 80180c8:	e7af      	b.n	801802a <_malloc_r+0x22>
 80180ca:	6862      	ldr	r2, [r4, #4]
 80180cc:	42a3      	cmp	r3, r4
 80180ce:	bf0c      	ite	eq
 80180d0:	f8c8 2000 	streq.w	r2, [r8]
 80180d4:	605a      	strne	r2, [r3, #4]
 80180d6:	e7eb      	b.n	80180b0 <_malloc_r+0xa8>
 80180d8:	4623      	mov	r3, r4
 80180da:	6864      	ldr	r4, [r4, #4]
 80180dc:	e7ae      	b.n	801803c <_malloc_r+0x34>
 80180de:	463c      	mov	r4, r7
 80180e0:	687f      	ldr	r7, [r7, #4]
 80180e2:	e7b6      	b.n	8018052 <_malloc_r+0x4a>
 80180e4:	461a      	mov	r2, r3
 80180e6:	685b      	ldr	r3, [r3, #4]
 80180e8:	42a3      	cmp	r3, r4
 80180ea:	d1fb      	bne.n	80180e4 <_malloc_r+0xdc>
 80180ec:	2300      	movs	r3, #0
 80180ee:	6053      	str	r3, [r2, #4]
 80180f0:	e7de      	b.n	80180b0 <_malloc_r+0xa8>
 80180f2:	230c      	movs	r3, #12
 80180f4:	6033      	str	r3, [r6, #0]
 80180f6:	4630      	mov	r0, r6
 80180f8:	f000 f80c 	bl	8018114 <__malloc_unlock>
 80180fc:	e794      	b.n	8018028 <_malloc_r+0x20>
 80180fe:	6005      	str	r5, [r0, #0]
 8018100:	e7d6      	b.n	80180b0 <_malloc_r+0xa8>
 8018102:	bf00      	nop
 8018104:	2000b3f0 	.word	0x2000b3f0

08018108 <__malloc_lock>:
 8018108:	4801      	ldr	r0, [pc, #4]	@ (8018110 <__malloc_lock+0x8>)
 801810a:	f000 bc7e 	b.w	8018a0a <__retarget_lock_acquire_recursive>
 801810e:	bf00      	nop
 8018110:	2000b535 	.word	0x2000b535

08018114 <__malloc_unlock>:
 8018114:	4801      	ldr	r0, [pc, #4]	@ (801811c <__malloc_unlock+0x8>)
 8018116:	f000 bc79 	b.w	8018a0c <__retarget_lock_release_recursive>
 801811a:	bf00      	nop
 801811c:	2000b535 	.word	0x2000b535

08018120 <srand>:
 8018120:	b538      	push	{r3, r4, r5, lr}
 8018122:	4b10      	ldr	r3, [pc, #64]	@ (8018164 <srand+0x44>)
 8018124:	681d      	ldr	r5, [r3, #0]
 8018126:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018128:	4604      	mov	r4, r0
 801812a:	b9b3      	cbnz	r3, 801815a <srand+0x3a>
 801812c:	2018      	movs	r0, #24
 801812e:	f7ff ff39 	bl	8017fa4 <malloc>
 8018132:	4602      	mov	r2, r0
 8018134:	6328      	str	r0, [r5, #48]	@ 0x30
 8018136:	b920      	cbnz	r0, 8018142 <srand+0x22>
 8018138:	4b0b      	ldr	r3, [pc, #44]	@ (8018168 <srand+0x48>)
 801813a:	480c      	ldr	r0, [pc, #48]	@ (801816c <srand+0x4c>)
 801813c:	2146      	movs	r1, #70	@ 0x46
 801813e:	f000 fc7d 	bl	8018a3c <__assert_func>
 8018142:	490b      	ldr	r1, [pc, #44]	@ (8018170 <srand+0x50>)
 8018144:	4b0b      	ldr	r3, [pc, #44]	@ (8018174 <srand+0x54>)
 8018146:	e9c0 1300 	strd	r1, r3, [r0]
 801814a:	4b0b      	ldr	r3, [pc, #44]	@ (8018178 <srand+0x58>)
 801814c:	6083      	str	r3, [r0, #8]
 801814e:	230b      	movs	r3, #11
 8018150:	8183      	strh	r3, [r0, #12]
 8018152:	2100      	movs	r1, #0
 8018154:	2001      	movs	r0, #1
 8018156:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801815a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801815c:	2200      	movs	r2, #0
 801815e:	611c      	str	r4, [r3, #16]
 8018160:	615a      	str	r2, [r3, #20]
 8018162:	bd38      	pop	{r3, r4, r5, pc}
 8018164:	200006dc 	.word	0x200006dc
 8018168:	0801be6a 	.word	0x0801be6a
 801816c:	0801be81 	.word	0x0801be81
 8018170:	abcd330e 	.word	0xabcd330e
 8018174:	e66d1234 	.word	0xe66d1234
 8018178:	0005deec 	.word	0x0005deec

0801817c <rand>:
 801817c:	4b16      	ldr	r3, [pc, #88]	@ (80181d8 <rand+0x5c>)
 801817e:	b510      	push	{r4, lr}
 8018180:	681c      	ldr	r4, [r3, #0]
 8018182:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018184:	b9b3      	cbnz	r3, 80181b4 <rand+0x38>
 8018186:	2018      	movs	r0, #24
 8018188:	f7ff ff0c 	bl	8017fa4 <malloc>
 801818c:	4602      	mov	r2, r0
 801818e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018190:	b920      	cbnz	r0, 801819c <rand+0x20>
 8018192:	4b12      	ldr	r3, [pc, #72]	@ (80181dc <rand+0x60>)
 8018194:	4812      	ldr	r0, [pc, #72]	@ (80181e0 <rand+0x64>)
 8018196:	2152      	movs	r1, #82	@ 0x52
 8018198:	f000 fc50 	bl	8018a3c <__assert_func>
 801819c:	4911      	ldr	r1, [pc, #68]	@ (80181e4 <rand+0x68>)
 801819e:	4b12      	ldr	r3, [pc, #72]	@ (80181e8 <rand+0x6c>)
 80181a0:	e9c0 1300 	strd	r1, r3, [r0]
 80181a4:	4b11      	ldr	r3, [pc, #68]	@ (80181ec <rand+0x70>)
 80181a6:	6083      	str	r3, [r0, #8]
 80181a8:	230b      	movs	r3, #11
 80181aa:	8183      	strh	r3, [r0, #12]
 80181ac:	2100      	movs	r1, #0
 80181ae:	2001      	movs	r0, #1
 80181b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80181b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80181b6:	480e      	ldr	r0, [pc, #56]	@ (80181f0 <rand+0x74>)
 80181b8:	690b      	ldr	r3, [r1, #16]
 80181ba:	694c      	ldr	r4, [r1, #20]
 80181bc:	4a0d      	ldr	r2, [pc, #52]	@ (80181f4 <rand+0x78>)
 80181be:	4358      	muls	r0, r3
 80181c0:	fb02 0004 	mla	r0, r2, r4, r0
 80181c4:	fba3 3202 	umull	r3, r2, r3, r2
 80181c8:	3301      	adds	r3, #1
 80181ca:	eb40 0002 	adc.w	r0, r0, r2
 80181ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80181d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80181d6:	bd10      	pop	{r4, pc}
 80181d8:	200006dc 	.word	0x200006dc
 80181dc:	0801be6a 	.word	0x0801be6a
 80181e0:	0801be81 	.word	0x0801be81
 80181e4:	abcd330e 	.word	0xabcd330e
 80181e8:	e66d1234 	.word	0xe66d1234
 80181ec:	0005deec 	.word	0x0005deec
 80181f0:	5851f42d 	.word	0x5851f42d
 80181f4:	4c957f2d 	.word	0x4c957f2d

080181f8 <realloc>:
 80181f8:	4b02      	ldr	r3, [pc, #8]	@ (8018204 <realloc+0xc>)
 80181fa:	460a      	mov	r2, r1
 80181fc:	4601      	mov	r1, r0
 80181fe:	6818      	ldr	r0, [r3, #0]
 8018200:	f000 b802 	b.w	8018208 <_realloc_r>
 8018204:	200006dc 	.word	0x200006dc

08018208 <_realloc_r>:
 8018208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820c:	4680      	mov	r8, r0
 801820e:	4615      	mov	r5, r2
 8018210:	460c      	mov	r4, r1
 8018212:	b921      	cbnz	r1, 801821e <_realloc_r+0x16>
 8018214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018218:	4611      	mov	r1, r2
 801821a:	f7ff bef5 	b.w	8018008 <_malloc_r>
 801821e:	b92a      	cbnz	r2, 801822c <_realloc_r+0x24>
 8018220:	f000 fc36 	bl	8018a90 <_free_r>
 8018224:	2400      	movs	r4, #0
 8018226:	4620      	mov	r0, r4
 8018228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801822c:	f000 fc7a 	bl	8018b24 <_malloc_usable_size_r>
 8018230:	4285      	cmp	r5, r0
 8018232:	4606      	mov	r6, r0
 8018234:	d802      	bhi.n	801823c <_realloc_r+0x34>
 8018236:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801823a:	d8f4      	bhi.n	8018226 <_realloc_r+0x1e>
 801823c:	4629      	mov	r1, r5
 801823e:	4640      	mov	r0, r8
 8018240:	f7ff fee2 	bl	8018008 <_malloc_r>
 8018244:	4607      	mov	r7, r0
 8018246:	2800      	cmp	r0, #0
 8018248:	d0ec      	beq.n	8018224 <_realloc_r+0x1c>
 801824a:	42b5      	cmp	r5, r6
 801824c:	462a      	mov	r2, r5
 801824e:	4621      	mov	r1, r4
 8018250:	bf28      	it	cs
 8018252:	4632      	movcs	r2, r6
 8018254:	f000 fbe3 	bl	8018a1e <memcpy>
 8018258:	4621      	mov	r1, r4
 801825a:	4640      	mov	r0, r8
 801825c:	f000 fc18 	bl	8018a90 <_free_r>
 8018260:	463c      	mov	r4, r7
 8018262:	e7e0      	b.n	8018226 <_realloc_r+0x1e>

08018264 <_strtoul_l.constprop.0>:
 8018264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018268:	4e34      	ldr	r6, [pc, #208]	@ (801833c <_strtoul_l.constprop.0+0xd8>)
 801826a:	4686      	mov	lr, r0
 801826c:	460d      	mov	r5, r1
 801826e:	4628      	mov	r0, r5
 8018270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018274:	5d37      	ldrb	r7, [r6, r4]
 8018276:	f017 0708 	ands.w	r7, r7, #8
 801827a:	d1f8      	bne.n	801826e <_strtoul_l.constprop.0+0xa>
 801827c:	2c2d      	cmp	r4, #45	@ 0x2d
 801827e:	d12f      	bne.n	80182e0 <_strtoul_l.constprop.0+0x7c>
 8018280:	782c      	ldrb	r4, [r5, #0]
 8018282:	2701      	movs	r7, #1
 8018284:	1c85      	adds	r5, r0, #2
 8018286:	f033 0010 	bics.w	r0, r3, #16
 801828a:	d109      	bne.n	80182a0 <_strtoul_l.constprop.0+0x3c>
 801828c:	2c30      	cmp	r4, #48	@ 0x30
 801828e:	d12c      	bne.n	80182ea <_strtoul_l.constprop.0+0x86>
 8018290:	7828      	ldrb	r0, [r5, #0]
 8018292:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018296:	2858      	cmp	r0, #88	@ 0x58
 8018298:	d127      	bne.n	80182ea <_strtoul_l.constprop.0+0x86>
 801829a:	786c      	ldrb	r4, [r5, #1]
 801829c:	2310      	movs	r3, #16
 801829e:	3502      	adds	r5, #2
 80182a0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80182a4:	2600      	movs	r6, #0
 80182a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80182aa:	fb03 f908 	mul.w	r9, r3, r8
 80182ae:	ea6f 0909 	mvn.w	r9, r9
 80182b2:	4630      	mov	r0, r6
 80182b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80182b8:	f1bc 0f09 	cmp.w	ip, #9
 80182bc:	d81c      	bhi.n	80182f8 <_strtoul_l.constprop.0+0x94>
 80182be:	4664      	mov	r4, ip
 80182c0:	42a3      	cmp	r3, r4
 80182c2:	dd2a      	ble.n	801831a <_strtoul_l.constprop.0+0xb6>
 80182c4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80182c8:	d007      	beq.n	80182da <_strtoul_l.constprop.0+0x76>
 80182ca:	4580      	cmp	r8, r0
 80182cc:	d322      	bcc.n	8018314 <_strtoul_l.constprop.0+0xb0>
 80182ce:	d101      	bne.n	80182d4 <_strtoul_l.constprop.0+0x70>
 80182d0:	45a1      	cmp	r9, r4
 80182d2:	db1f      	blt.n	8018314 <_strtoul_l.constprop.0+0xb0>
 80182d4:	fb00 4003 	mla	r0, r0, r3, r4
 80182d8:	2601      	movs	r6, #1
 80182da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182de:	e7e9      	b.n	80182b4 <_strtoul_l.constprop.0+0x50>
 80182e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80182e2:	bf04      	itt	eq
 80182e4:	782c      	ldrbeq	r4, [r5, #0]
 80182e6:	1c85      	addeq	r5, r0, #2
 80182e8:	e7cd      	b.n	8018286 <_strtoul_l.constprop.0+0x22>
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d1d8      	bne.n	80182a0 <_strtoul_l.constprop.0+0x3c>
 80182ee:	2c30      	cmp	r4, #48	@ 0x30
 80182f0:	bf0c      	ite	eq
 80182f2:	2308      	moveq	r3, #8
 80182f4:	230a      	movne	r3, #10
 80182f6:	e7d3      	b.n	80182a0 <_strtoul_l.constprop.0+0x3c>
 80182f8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80182fc:	f1bc 0f19 	cmp.w	ip, #25
 8018300:	d801      	bhi.n	8018306 <_strtoul_l.constprop.0+0xa2>
 8018302:	3c37      	subs	r4, #55	@ 0x37
 8018304:	e7dc      	b.n	80182c0 <_strtoul_l.constprop.0+0x5c>
 8018306:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801830a:	f1bc 0f19 	cmp.w	ip, #25
 801830e:	d804      	bhi.n	801831a <_strtoul_l.constprop.0+0xb6>
 8018310:	3c57      	subs	r4, #87	@ 0x57
 8018312:	e7d5      	b.n	80182c0 <_strtoul_l.constprop.0+0x5c>
 8018314:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018318:	e7df      	b.n	80182da <_strtoul_l.constprop.0+0x76>
 801831a:	1c73      	adds	r3, r6, #1
 801831c:	d106      	bne.n	801832c <_strtoul_l.constprop.0+0xc8>
 801831e:	2322      	movs	r3, #34	@ 0x22
 8018320:	f8ce 3000 	str.w	r3, [lr]
 8018324:	4630      	mov	r0, r6
 8018326:	b932      	cbnz	r2, 8018336 <_strtoul_l.constprop.0+0xd2>
 8018328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801832c:	b107      	cbz	r7, 8018330 <_strtoul_l.constprop.0+0xcc>
 801832e:	4240      	negs	r0, r0
 8018330:	2a00      	cmp	r2, #0
 8018332:	d0f9      	beq.n	8018328 <_strtoul_l.constprop.0+0xc4>
 8018334:	b106      	cbz	r6, 8018338 <_strtoul_l.constprop.0+0xd4>
 8018336:	1e69      	subs	r1, r5, #1
 8018338:	6011      	str	r1, [r2, #0]
 801833a:	e7f5      	b.n	8018328 <_strtoul_l.constprop.0+0xc4>
 801833c:	0801beda 	.word	0x0801beda

08018340 <strtoul>:
 8018340:	4613      	mov	r3, r2
 8018342:	460a      	mov	r2, r1
 8018344:	4601      	mov	r1, r0
 8018346:	4802      	ldr	r0, [pc, #8]	@ (8018350 <strtoul+0x10>)
 8018348:	6800      	ldr	r0, [r0, #0]
 801834a:	f7ff bf8b 	b.w	8018264 <_strtoul_l.constprop.0>
 801834e:	bf00      	nop
 8018350:	200006dc 	.word	0x200006dc

08018354 <std>:
 8018354:	2300      	movs	r3, #0
 8018356:	b510      	push	{r4, lr}
 8018358:	4604      	mov	r4, r0
 801835a:	e9c0 3300 	strd	r3, r3, [r0]
 801835e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018362:	6083      	str	r3, [r0, #8]
 8018364:	8181      	strh	r1, [r0, #12]
 8018366:	6643      	str	r3, [r0, #100]	@ 0x64
 8018368:	81c2      	strh	r2, [r0, #14]
 801836a:	6183      	str	r3, [r0, #24]
 801836c:	4619      	mov	r1, r3
 801836e:	2208      	movs	r2, #8
 8018370:	305c      	adds	r0, #92	@ 0x5c
 8018372:	f000 fa8b 	bl	801888c <memset>
 8018376:	4b0d      	ldr	r3, [pc, #52]	@ (80183ac <std+0x58>)
 8018378:	6263      	str	r3, [r4, #36]	@ 0x24
 801837a:	4b0d      	ldr	r3, [pc, #52]	@ (80183b0 <std+0x5c>)
 801837c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801837e:	4b0d      	ldr	r3, [pc, #52]	@ (80183b4 <std+0x60>)
 8018380:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018382:	4b0d      	ldr	r3, [pc, #52]	@ (80183b8 <std+0x64>)
 8018384:	6323      	str	r3, [r4, #48]	@ 0x30
 8018386:	4b0d      	ldr	r3, [pc, #52]	@ (80183bc <std+0x68>)
 8018388:	6224      	str	r4, [r4, #32]
 801838a:	429c      	cmp	r4, r3
 801838c:	d006      	beq.n	801839c <std+0x48>
 801838e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018392:	4294      	cmp	r4, r2
 8018394:	d002      	beq.n	801839c <std+0x48>
 8018396:	33d0      	adds	r3, #208	@ 0xd0
 8018398:	429c      	cmp	r4, r3
 801839a:	d105      	bne.n	80183a8 <std+0x54>
 801839c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80183a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183a4:	f000 bb30 	b.w	8018a08 <__retarget_lock_init_recursive>
 80183a8:	bd10      	pop	{r4, pc}
 80183aa:	bf00      	nop
 80183ac:	08018619 	.word	0x08018619
 80183b0:	0801863b 	.word	0x0801863b
 80183b4:	08018673 	.word	0x08018673
 80183b8:	08018697 	.word	0x08018697
 80183bc:	2000b3f4 	.word	0x2000b3f4

080183c0 <stdio_exit_handler>:
 80183c0:	4a02      	ldr	r2, [pc, #8]	@ (80183cc <stdio_exit_handler+0xc>)
 80183c2:	4903      	ldr	r1, [pc, #12]	@ (80183d0 <stdio_exit_handler+0x10>)
 80183c4:	4803      	ldr	r0, [pc, #12]	@ (80183d4 <stdio_exit_handler+0x14>)
 80183c6:	f000 b869 	b.w	801849c <_fwalk_sglue>
 80183ca:	bf00      	nop
 80183cc:	200006d0 	.word	0x200006d0
 80183d0:	0801948d 	.word	0x0801948d
 80183d4:	200006e0 	.word	0x200006e0

080183d8 <cleanup_stdio>:
 80183d8:	6841      	ldr	r1, [r0, #4]
 80183da:	4b0c      	ldr	r3, [pc, #48]	@ (801840c <cleanup_stdio+0x34>)
 80183dc:	4299      	cmp	r1, r3
 80183de:	b510      	push	{r4, lr}
 80183e0:	4604      	mov	r4, r0
 80183e2:	d001      	beq.n	80183e8 <cleanup_stdio+0x10>
 80183e4:	f001 f852 	bl	801948c <_fflush_r>
 80183e8:	68a1      	ldr	r1, [r4, #8]
 80183ea:	4b09      	ldr	r3, [pc, #36]	@ (8018410 <cleanup_stdio+0x38>)
 80183ec:	4299      	cmp	r1, r3
 80183ee:	d002      	beq.n	80183f6 <cleanup_stdio+0x1e>
 80183f0:	4620      	mov	r0, r4
 80183f2:	f001 f84b 	bl	801948c <_fflush_r>
 80183f6:	68e1      	ldr	r1, [r4, #12]
 80183f8:	4b06      	ldr	r3, [pc, #24]	@ (8018414 <cleanup_stdio+0x3c>)
 80183fa:	4299      	cmp	r1, r3
 80183fc:	d004      	beq.n	8018408 <cleanup_stdio+0x30>
 80183fe:	4620      	mov	r0, r4
 8018400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018404:	f001 b842 	b.w	801948c <_fflush_r>
 8018408:	bd10      	pop	{r4, pc}
 801840a:	bf00      	nop
 801840c:	2000b3f4 	.word	0x2000b3f4
 8018410:	2000b45c 	.word	0x2000b45c
 8018414:	2000b4c4 	.word	0x2000b4c4

08018418 <global_stdio_init.part.0>:
 8018418:	b510      	push	{r4, lr}
 801841a:	4b0b      	ldr	r3, [pc, #44]	@ (8018448 <global_stdio_init.part.0+0x30>)
 801841c:	4c0b      	ldr	r4, [pc, #44]	@ (801844c <global_stdio_init.part.0+0x34>)
 801841e:	4a0c      	ldr	r2, [pc, #48]	@ (8018450 <global_stdio_init.part.0+0x38>)
 8018420:	601a      	str	r2, [r3, #0]
 8018422:	4620      	mov	r0, r4
 8018424:	2200      	movs	r2, #0
 8018426:	2104      	movs	r1, #4
 8018428:	f7ff ff94 	bl	8018354 <std>
 801842c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018430:	2201      	movs	r2, #1
 8018432:	2109      	movs	r1, #9
 8018434:	f7ff ff8e 	bl	8018354 <std>
 8018438:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801843c:	2202      	movs	r2, #2
 801843e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018442:	2112      	movs	r1, #18
 8018444:	f7ff bf86 	b.w	8018354 <std>
 8018448:	2000b52c 	.word	0x2000b52c
 801844c:	2000b3f4 	.word	0x2000b3f4
 8018450:	080183c1 	.word	0x080183c1

08018454 <__sfp_lock_acquire>:
 8018454:	4801      	ldr	r0, [pc, #4]	@ (801845c <__sfp_lock_acquire+0x8>)
 8018456:	f000 bad8 	b.w	8018a0a <__retarget_lock_acquire_recursive>
 801845a:	bf00      	nop
 801845c:	2000b536 	.word	0x2000b536

08018460 <__sfp_lock_release>:
 8018460:	4801      	ldr	r0, [pc, #4]	@ (8018468 <__sfp_lock_release+0x8>)
 8018462:	f000 bad3 	b.w	8018a0c <__retarget_lock_release_recursive>
 8018466:	bf00      	nop
 8018468:	2000b536 	.word	0x2000b536

0801846c <__sinit>:
 801846c:	b510      	push	{r4, lr}
 801846e:	4604      	mov	r4, r0
 8018470:	f7ff fff0 	bl	8018454 <__sfp_lock_acquire>
 8018474:	6a23      	ldr	r3, [r4, #32]
 8018476:	b11b      	cbz	r3, 8018480 <__sinit+0x14>
 8018478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801847c:	f7ff bff0 	b.w	8018460 <__sfp_lock_release>
 8018480:	4b04      	ldr	r3, [pc, #16]	@ (8018494 <__sinit+0x28>)
 8018482:	6223      	str	r3, [r4, #32]
 8018484:	4b04      	ldr	r3, [pc, #16]	@ (8018498 <__sinit+0x2c>)
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d1f5      	bne.n	8018478 <__sinit+0xc>
 801848c:	f7ff ffc4 	bl	8018418 <global_stdio_init.part.0>
 8018490:	e7f2      	b.n	8018478 <__sinit+0xc>
 8018492:	bf00      	nop
 8018494:	080183d9 	.word	0x080183d9
 8018498:	2000b52c 	.word	0x2000b52c

0801849c <_fwalk_sglue>:
 801849c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184a0:	4607      	mov	r7, r0
 80184a2:	4688      	mov	r8, r1
 80184a4:	4614      	mov	r4, r2
 80184a6:	2600      	movs	r6, #0
 80184a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80184ac:	f1b9 0901 	subs.w	r9, r9, #1
 80184b0:	d505      	bpl.n	80184be <_fwalk_sglue+0x22>
 80184b2:	6824      	ldr	r4, [r4, #0]
 80184b4:	2c00      	cmp	r4, #0
 80184b6:	d1f7      	bne.n	80184a8 <_fwalk_sglue+0xc>
 80184b8:	4630      	mov	r0, r6
 80184ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184be:	89ab      	ldrh	r3, [r5, #12]
 80184c0:	2b01      	cmp	r3, #1
 80184c2:	d907      	bls.n	80184d4 <_fwalk_sglue+0x38>
 80184c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184c8:	3301      	adds	r3, #1
 80184ca:	d003      	beq.n	80184d4 <_fwalk_sglue+0x38>
 80184cc:	4629      	mov	r1, r5
 80184ce:	4638      	mov	r0, r7
 80184d0:	47c0      	blx	r8
 80184d2:	4306      	orrs	r6, r0
 80184d4:	3568      	adds	r5, #104	@ 0x68
 80184d6:	e7e9      	b.n	80184ac <_fwalk_sglue+0x10>

080184d8 <_fwrite_r>:
 80184d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184dc:	9c08      	ldr	r4, [sp, #32]
 80184de:	468a      	mov	sl, r1
 80184e0:	4690      	mov	r8, r2
 80184e2:	fb02 f903 	mul.w	r9, r2, r3
 80184e6:	4606      	mov	r6, r0
 80184e8:	b118      	cbz	r0, 80184f2 <_fwrite_r+0x1a>
 80184ea:	6a03      	ldr	r3, [r0, #32]
 80184ec:	b90b      	cbnz	r3, 80184f2 <_fwrite_r+0x1a>
 80184ee:	f7ff ffbd 	bl	801846c <__sinit>
 80184f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80184f4:	07dd      	lsls	r5, r3, #31
 80184f6:	d405      	bmi.n	8018504 <_fwrite_r+0x2c>
 80184f8:	89a3      	ldrh	r3, [r4, #12]
 80184fa:	0598      	lsls	r0, r3, #22
 80184fc:	d402      	bmi.n	8018504 <_fwrite_r+0x2c>
 80184fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018500:	f000 fa83 	bl	8018a0a <__retarget_lock_acquire_recursive>
 8018504:	89a3      	ldrh	r3, [r4, #12]
 8018506:	0719      	lsls	r1, r3, #28
 8018508:	d516      	bpl.n	8018538 <_fwrite_r+0x60>
 801850a:	6923      	ldr	r3, [r4, #16]
 801850c:	b1a3      	cbz	r3, 8018538 <_fwrite_r+0x60>
 801850e:	2500      	movs	r5, #0
 8018510:	454d      	cmp	r5, r9
 8018512:	d01f      	beq.n	8018554 <_fwrite_r+0x7c>
 8018514:	68a7      	ldr	r7, [r4, #8]
 8018516:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801851a:	3f01      	subs	r7, #1
 801851c:	2f00      	cmp	r7, #0
 801851e:	60a7      	str	r7, [r4, #8]
 8018520:	da04      	bge.n	801852c <_fwrite_r+0x54>
 8018522:	69a3      	ldr	r3, [r4, #24]
 8018524:	429f      	cmp	r7, r3
 8018526:	db0f      	blt.n	8018548 <_fwrite_r+0x70>
 8018528:	290a      	cmp	r1, #10
 801852a:	d00d      	beq.n	8018548 <_fwrite_r+0x70>
 801852c:	6823      	ldr	r3, [r4, #0]
 801852e:	1c5a      	adds	r2, r3, #1
 8018530:	6022      	str	r2, [r4, #0]
 8018532:	7019      	strb	r1, [r3, #0]
 8018534:	3501      	adds	r5, #1
 8018536:	e7eb      	b.n	8018510 <_fwrite_r+0x38>
 8018538:	4621      	mov	r1, r4
 801853a:	4630      	mov	r0, r6
 801853c:	f000 f926 	bl	801878c <__swsetup_r>
 8018540:	2800      	cmp	r0, #0
 8018542:	d0e4      	beq.n	801850e <_fwrite_r+0x36>
 8018544:	2500      	movs	r5, #0
 8018546:	e005      	b.n	8018554 <_fwrite_r+0x7c>
 8018548:	4622      	mov	r2, r4
 801854a:	4630      	mov	r0, r6
 801854c:	f000 f8e0 	bl	8018710 <__swbuf_r>
 8018550:	3001      	adds	r0, #1
 8018552:	d1ef      	bne.n	8018534 <_fwrite_r+0x5c>
 8018554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018556:	07da      	lsls	r2, r3, #31
 8018558:	d405      	bmi.n	8018566 <_fwrite_r+0x8e>
 801855a:	89a3      	ldrh	r3, [r4, #12]
 801855c:	059b      	lsls	r3, r3, #22
 801855e:	d402      	bmi.n	8018566 <_fwrite_r+0x8e>
 8018560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018562:	f000 fa53 	bl	8018a0c <__retarget_lock_release_recursive>
 8018566:	fbb5 f0f8 	udiv	r0, r5, r8
 801856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018570 <fwrite>:
 8018570:	b507      	push	{r0, r1, r2, lr}
 8018572:	9300      	str	r3, [sp, #0]
 8018574:	4613      	mov	r3, r2
 8018576:	460a      	mov	r2, r1
 8018578:	4601      	mov	r1, r0
 801857a:	4803      	ldr	r0, [pc, #12]	@ (8018588 <fwrite+0x18>)
 801857c:	6800      	ldr	r0, [r0, #0]
 801857e:	f7ff ffab 	bl	80184d8 <_fwrite_r>
 8018582:	b003      	add	sp, #12
 8018584:	f85d fb04 	ldr.w	pc, [sp], #4
 8018588:	200006dc 	.word	0x200006dc

0801858c <iprintf>:
 801858c:	b40f      	push	{r0, r1, r2, r3}
 801858e:	b507      	push	{r0, r1, r2, lr}
 8018590:	4906      	ldr	r1, [pc, #24]	@ (80185ac <iprintf+0x20>)
 8018592:	ab04      	add	r3, sp, #16
 8018594:	6808      	ldr	r0, [r1, #0]
 8018596:	f853 2b04 	ldr.w	r2, [r3], #4
 801859a:	6881      	ldr	r1, [r0, #8]
 801859c:	9301      	str	r3, [sp, #4]
 801859e:	f000 fc4b 	bl	8018e38 <_vfiprintf_r>
 80185a2:	b003      	add	sp, #12
 80185a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80185a8:	b004      	add	sp, #16
 80185aa:	4770      	bx	lr
 80185ac:	200006dc 	.word	0x200006dc

080185b0 <sniprintf>:
 80185b0:	b40c      	push	{r2, r3}
 80185b2:	b530      	push	{r4, r5, lr}
 80185b4:	4b17      	ldr	r3, [pc, #92]	@ (8018614 <sniprintf+0x64>)
 80185b6:	1e0c      	subs	r4, r1, #0
 80185b8:	681d      	ldr	r5, [r3, #0]
 80185ba:	b09d      	sub	sp, #116	@ 0x74
 80185bc:	da08      	bge.n	80185d0 <sniprintf+0x20>
 80185be:	238b      	movs	r3, #139	@ 0x8b
 80185c0:	602b      	str	r3, [r5, #0]
 80185c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80185c6:	b01d      	add	sp, #116	@ 0x74
 80185c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80185cc:	b002      	add	sp, #8
 80185ce:	4770      	bx	lr
 80185d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80185d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80185d8:	bf14      	ite	ne
 80185da:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80185de:	4623      	moveq	r3, r4
 80185e0:	9304      	str	r3, [sp, #16]
 80185e2:	9307      	str	r3, [sp, #28]
 80185e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80185e8:	9002      	str	r0, [sp, #8]
 80185ea:	9006      	str	r0, [sp, #24]
 80185ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80185f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80185f2:	ab21      	add	r3, sp, #132	@ 0x84
 80185f4:	a902      	add	r1, sp, #8
 80185f6:	4628      	mov	r0, r5
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	f000 faf7 	bl	8018bec <_svfiprintf_r>
 80185fe:	1c43      	adds	r3, r0, #1
 8018600:	bfbc      	itt	lt
 8018602:	238b      	movlt	r3, #139	@ 0x8b
 8018604:	602b      	strlt	r3, [r5, #0]
 8018606:	2c00      	cmp	r4, #0
 8018608:	d0dd      	beq.n	80185c6 <sniprintf+0x16>
 801860a:	9b02      	ldr	r3, [sp, #8]
 801860c:	2200      	movs	r2, #0
 801860e:	701a      	strb	r2, [r3, #0]
 8018610:	e7d9      	b.n	80185c6 <sniprintf+0x16>
 8018612:	bf00      	nop
 8018614:	200006dc 	.word	0x200006dc

08018618 <__sread>:
 8018618:	b510      	push	{r4, lr}
 801861a:	460c      	mov	r4, r1
 801861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018620:	f000 f994 	bl	801894c <_read_r>
 8018624:	2800      	cmp	r0, #0
 8018626:	bfab      	itete	ge
 8018628:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801862a:	89a3      	ldrhlt	r3, [r4, #12]
 801862c:	181b      	addge	r3, r3, r0
 801862e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018632:	bfac      	ite	ge
 8018634:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018636:	81a3      	strhlt	r3, [r4, #12]
 8018638:	bd10      	pop	{r4, pc}

0801863a <__swrite>:
 801863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801863e:	461f      	mov	r7, r3
 8018640:	898b      	ldrh	r3, [r1, #12]
 8018642:	05db      	lsls	r3, r3, #23
 8018644:	4605      	mov	r5, r0
 8018646:	460c      	mov	r4, r1
 8018648:	4616      	mov	r6, r2
 801864a:	d505      	bpl.n	8018658 <__swrite+0x1e>
 801864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018650:	2302      	movs	r3, #2
 8018652:	2200      	movs	r2, #0
 8018654:	f000 f968 	bl	8018928 <_lseek_r>
 8018658:	89a3      	ldrh	r3, [r4, #12]
 801865a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801865e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018662:	81a3      	strh	r3, [r4, #12]
 8018664:	4632      	mov	r2, r6
 8018666:	463b      	mov	r3, r7
 8018668:	4628      	mov	r0, r5
 801866a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801866e:	f000 b98f 	b.w	8018990 <_write_r>

08018672 <__sseek>:
 8018672:	b510      	push	{r4, lr}
 8018674:	460c      	mov	r4, r1
 8018676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801867a:	f000 f955 	bl	8018928 <_lseek_r>
 801867e:	1c43      	adds	r3, r0, #1
 8018680:	89a3      	ldrh	r3, [r4, #12]
 8018682:	bf15      	itete	ne
 8018684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801868a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801868e:	81a3      	strheq	r3, [r4, #12]
 8018690:	bf18      	it	ne
 8018692:	81a3      	strhne	r3, [r4, #12]
 8018694:	bd10      	pop	{r4, pc}

08018696 <__sclose>:
 8018696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801869a:	f000 b935 	b.w	8018908 <_close_r>

0801869e <_vsniprintf_r>:
 801869e:	b530      	push	{r4, r5, lr}
 80186a0:	4614      	mov	r4, r2
 80186a2:	2c00      	cmp	r4, #0
 80186a4:	b09b      	sub	sp, #108	@ 0x6c
 80186a6:	4605      	mov	r5, r0
 80186a8:	461a      	mov	r2, r3
 80186aa:	da05      	bge.n	80186b8 <_vsniprintf_r+0x1a>
 80186ac:	238b      	movs	r3, #139	@ 0x8b
 80186ae:	6003      	str	r3, [r0, #0]
 80186b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80186b4:	b01b      	add	sp, #108	@ 0x6c
 80186b6:	bd30      	pop	{r4, r5, pc}
 80186b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80186bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80186c0:	bf14      	ite	ne
 80186c2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80186c6:	4623      	moveq	r3, r4
 80186c8:	9302      	str	r3, [sp, #8]
 80186ca:	9305      	str	r3, [sp, #20]
 80186cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80186d0:	9100      	str	r1, [sp, #0]
 80186d2:	9104      	str	r1, [sp, #16]
 80186d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80186d8:	4669      	mov	r1, sp
 80186da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80186dc:	f000 fa86 	bl	8018bec <_svfiprintf_r>
 80186e0:	1c43      	adds	r3, r0, #1
 80186e2:	bfbc      	itt	lt
 80186e4:	238b      	movlt	r3, #139	@ 0x8b
 80186e6:	602b      	strlt	r3, [r5, #0]
 80186e8:	2c00      	cmp	r4, #0
 80186ea:	d0e3      	beq.n	80186b4 <_vsniprintf_r+0x16>
 80186ec:	9b00      	ldr	r3, [sp, #0]
 80186ee:	2200      	movs	r2, #0
 80186f0:	701a      	strb	r2, [r3, #0]
 80186f2:	e7df      	b.n	80186b4 <_vsniprintf_r+0x16>

080186f4 <vsniprintf>:
 80186f4:	b507      	push	{r0, r1, r2, lr}
 80186f6:	9300      	str	r3, [sp, #0]
 80186f8:	4613      	mov	r3, r2
 80186fa:	460a      	mov	r2, r1
 80186fc:	4601      	mov	r1, r0
 80186fe:	4803      	ldr	r0, [pc, #12]	@ (801870c <vsniprintf+0x18>)
 8018700:	6800      	ldr	r0, [r0, #0]
 8018702:	f7ff ffcc 	bl	801869e <_vsniprintf_r>
 8018706:	b003      	add	sp, #12
 8018708:	f85d fb04 	ldr.w	pc, [sp], #4
 801870c:	200006dc 	.word	0x200006dc

08018710 <__swbuf_r>:
 8018710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018712:	460e      	mov	r6, r1
 8018714:	4614      	mov	r4, r2
 8018716:	4605      	mov	r5, r0
 8018718:	b118      	cbz	r0, 8018722 <__swbuf_r+0x12>
 801871a:	6a03      	ldr	r3, [r0, #32]
 801871c:	b90b      	cbnz	r3, 8018722 <__swbuf_r+0x12>
 801871e:	f7ff fea5 	bl	801846c <__sinit>
 8018722:	69a3      	ldr	r3, [r4, #24]
 8018724:	60a3      	str	r3, [r4, #8]
 8018726:	89a3      	ldrh	r3, [r4, #12]
 8018728:	071a      	lsls	r2, r3, #28
 801872a:	d501      	bpl.n	8018730 <__swbuf_r+0x20>
 801872c:	6923      	ldr	r3, [r4, #16]
 801872e:	b943      	cbnz	r3, 8018742 <__swbuf_r+0x32>
 8018730:	4621      	mov	r1, r4
 8018732:	4628      	mov	r0, r5
 8018734:	f000 f82a 	bl	801878c <__swsetup_r>
 8018738:	b118      	cbz	r0, 8018742 <__swbuf_r+0x32>
 801873a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801873e:	4638      	mov	r0, r7
 8018740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018742:	6823      	ldr	r3, [r4, #0]
 8018744:	6922      	ldr	r2, [r4, #16]
 8018746:	1a98      	subs	r0, r3, r2
 8018748:	6963      	ldr	r3, [r4, #20]
 801874a:	b2f6      	uxtb	r6, r6
 801874c:	4283      	cmp	r3, r0
 801874e:	4637      	mov	r7, r6
 8018750:	dc05      	bgt.n	801875e <__swbuf_r+0x4e>
 8018752:	4621      	mov	r1, r4
 8018754:	4628      	mov	r0, r5
 8018756:	f000 fe99 	bl	801948c <_fflush_r>
 801875a:	2800      	cmp	r0, #0
 801875c:	d1ed      	bne.n	801873a <__swbuf_r+0x2a>
 801875e:	68a3      	ldr	r3, [r4, #8]
 8018760:	3b01      	subs	r3, #1
 8018762:	60a3      	str	r3, [r4, #8]
 8018764:	6823      	ldr	r3, [r4, #0]
 8018766:	1c5a      	adds	r2, r3, #1
 8018768:	6022      	str	r2, [r4, #0]
 801876a:	701e      	strb	r6, [r3, #0]
 801876c:	6962      	ldr	r2, [r4, #20]
 801876e:	1c43      	adds	r3, r0, #1
 8018770:	429a      	cmp	r2, r3
 8018772:	d004      	beq.n	801877e <__swbuf_r+0x6e>
 8018774:	89a3      	ldrh	r3, [r4, #12]
 8018776:	07db      	lsls	r3, r3, #31
 8018778:	d5e1      	bpl.n	801873e <__swbuf_r+0x2e>
 801877a:	2e0a      	cmp	r6, #10
 801877c:	d1df      	bne.n	801873e <__swbuf_r+0x2e>
 801877e:	4621      	mov	r1, r4
 8018780:	4628      	mov	r0, r5
 8018782:	f000 fe83 	bl	801948c <_fflush_r>
 8018786:	2800      	cmp	r0, #0
 8018788:	d0d9      	beq.n	801873e <__swbuf_r+0x2e>
 801878a:	e7d6      	b.n	801873a <__swbuf_r+0x2a>

0801878c <__swsetup_r>:
 801878c:	b538      	push	{r3, r4, r5, lr}
 801878e:	4b29      	ldr	r3, [pc, #164]	@ (8018834 <__swsetup_r+0xa8>)
 8018790:	4605      	mov	r5, r0
 8018792:	6818      	ldr	r0, [r3, #0]
 8018794:	460c      	mov	r4, r1
 8018796:	b118      	cbz	r0, 80187a0 <__swsetup_r+0x14>
 8018798:	6a03      	ldr	r3, [r0, #32]
 801879a:	b90b      	cbnz	r3, 80187a0 <__swsetup_r+0x14>
 801879c:	f7ff fe66 	bl	801846c <__sinit>
 80187a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187a4:	0719      	lsls	r1, r3, #28
 80187a6:	d422      	bmi.n	80187ee <__swsetup_r+0x62>
 80187a8:	06da      	lsls	r2, r3, #27
 80187aa:	d407      	bmi.n	80187bc <__swsetup_r+0x30>
 80187ac:	2209      	movs	r2, #9
 80187ae:	602a      	str	r2, [r5, #0]
 80187b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187b4:	81a3      	strh	r3, [r4, #12]
 80187b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187ba:	e033      	b.n	8018824 <__swsetup_r+0x98>
 80187bc:	0758      	lsls	r0, r3, #29
 80187be:	d512      	bpl.n	80187e6 <__swsetup_r+0x5a>
 80187c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80187c2:	b141      	cbz	r1, 80187d6 <__swsetup_r+0x4a>
 80187c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80187c8:	4299      	cmp	r1, r3
 80187ca:	d002      	beq.n	80187d2 <__swsetup_r+0x46>
 80187cc:	4628      	mov	r0, r5
 80187ce:	f000 f95f 	bl	8018a90 <_free_r>
 80187d2:	2300      	movs	r3, #0
 80187d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80187d6:	89a3      	ldrh	r3, [r4, #12]
 80187d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80187dc:	81a3      	strh	r3, [r4, #12]
 80187de:	2300      	movs	r3, #0
 80187e0:	6063      	str	r3, [r4, #4]
 80187e2:	6923      	ldr	r3, [r4, #16]
 80187e4:	6023      	str	r3, [r4, #0]
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	f043 0308 	orr.w	r3, r3, #8
 80187ec:	81a3      	strh	r3, [r4, #12]
 80187ee:	6923      	ldr	r3, [r4, #16]
 80187f0:	b94b      	cbnz	r3, 8018806 <__swsetup_r+0x7a>
 80187f2:	89a3      	ldrh	r3, [r4, #12]
 80187f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80187f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187fc:	d003      	beq.n	8018806 <__swsetup_r+0x7a>
 80187fe:	4621      	mov	r1, r4
 8018800:	4628      	mov	r0, r5
 8018802:	f000 fea3 	bl	801954c <__smakebuf_r>
 8018806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801880a:	f013 0201 	ands.w	r2, r3, #1
 801880e:	d00a      	beq.n	8018826 <__swsetup_r+0x9a>
 8018810:	2200      	movs	r2, #0
 8018812:	60a2      	str	r2, [r4, #8]
 8018814:	6962      	ldr	r2, [r4, #20]
 8018816:	4252      	negs	r2, r2
 8018818:	61a2      	str	r2, [r4, #24]
 801881a:	6922      	ldr	r2, [r4, #16]
 801881c:	b942      	cbnz	r2, 8018830 <__swsetup_r+0xa4>
 801881e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018822:	d1c5      	bne.n	80187b0 <__swsetup_r+0x24>
 8018824:	bd38      	pop	{r3, r4, r5, pc}
 8018826:	0799      	lsls	r1, r3, #30
 8018828:	bf58      	it	pl
 801882a:	6962      	ldrpl	r2, [r4, #20]
 801882c:	60a2      	str	r2, [r4, #8]
 801882e:	e7f4      	b.n	801881a <__swsetup_r+0x8e>
 8018830:	2000      	movs	r0, #0
 8018832:	e7f7      	b.n	8018824 <__swsetup_r+0x98>
 8018834:	200006dc 	.word	0x200006dc

08018838 <memcmp>:
 8018838:	b510      	push	{r4, lr}
 801883a:	3901      	subs	r1, #1
 801883c:	4402      	add	r2, r0
 801883e:	4290      	cmp	r0, r2
 8018840:	d101      	bne.n	8018846 <memcmp+0xe>
 8018842:	2000      	movs	r0, #0
 8018844:	e005      	b.n	8018852 <memcmp+0x1a>
 8018846:	7803      	ldrb	r3, [r0, #0]
 8018848:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801884c:	42a3      	cmp	r3, r4
 801884e:	d001      	beq.n	8018854 <memcmp+0x1c>
 8018850:	1b18      	subs	r0, r3, r4
 8018852:	bd10      	pop	{r4, pc}
 8018854:	3001      	adds	r0, #1
 8018856:	e7f2      	b.n	801883e <memcmp+0x6>

08018858 <memmove>:
 8018858:	4288      	cmp	r0, r1
 801885a:	b510      	push	{r4, lr}
 801885c:	eb01 0402 	add.w	r4, r1, r2
 8018860:	d902      	bls.n	8018868 <memmove+0x10>
 8018862:	4284      	cmp	r4, r0
 8018864:	4623      	mov	r3, r4
 8018866:	d807      	bhi.n	8018878 <memmove+0x20>
 8018868:	1e43      	subs	r3, r0, #1
 801886a:	42a1      	cmp	r1, r4
 801886c:	d008      	beq.n	8018880 <memmove+0x28>
 801886e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018876:	e7f8      	b.n	801886a <memmove+0x12>
 8018878:	4402      	add	r2, r0
 801887a:	4601      	mov	r1, r0
 801887c:	428a      	cmp	r2, r1
 801887e:	d100      	bne.n	8018882 <memmove+0x2a>
 8018880:	bd10      	pop	{r4, pc}
 8018882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801888a:	e7f7      	b.n	801887c <memmove+0x24>

0801888c <memset>:
 801888c:	4402      	add	r2, r0
 801888e:	4603      	mov	r3, r0
 8018890:	4293      	cmp	r3, r2
 8018892:	d100      	bne.n	8018896 <memset+0xa>
 8018894:	4770      	bx	lr
 8018896:	f803 1b01 	strb.w	r1, [r3], #1
 801889a:	e7f9      	b.n	8018890 <memset+0x4>

0801889c <strchr>:
 801889c:	b2c9      	uxtb	r1, r1
 801889e:	4603      	mov	r3, r0
 80188a0:	4618      	mov	r0, r3
 80188a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188a6:	b112      	cbz	r2, 80188ae <strchr+0x12>
 80188a8:	428a      	cmp	r2, r1
 80188aa:	d1f9      	bne.n	80188a0 <strchr+0x4>
 80188ac:	4770      	bx	lr
 80188ae:	2900      	cmp	r1, #0
 80188b0:	bf18      	it	ne
 80188b2:	2000      	movne	r0, #0
 80188b4:	4770      	bx	lr

080188b6 <strncmp>:
 80188b6:	b510      	push	{r4, lr}
 80188b8:	b16a      	cbz	r2, 80188d6 <strncmp+0x20>
 80188ba:	3901      	subs	r1, #1
 80188bc:	1884      	adds	r4, r0, r2
 80188be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80188c6:	429a      	cmp	r2, r3
 80188c8:	d103      	bne.n	80188d2 <strncmp+0x1c>
 80188ca:	42a0      	cmp	r0, r4
 80188cc:	d001      	beq.n	80188d2 <strncmp+0x1c>
 80188ce:	2a00      	cmp	r2, #0
 80188d0:	d1f5      	bne.n	80188be <strncmp+0x8>
 80188d2:	1ad0      	subs	r0, r2, r3
 80188d4:	bd10      	pop	{r4, pc}
 80188d6:	4610      	mov	r0, r2
 80188d8:	e7fc      	b.n	80188d4 <strncmp+0x1e>

080188da <strstr>:
 80188da:	780a      	ldrb	r2, [r1, #0]
 80188dc:	b570      	push	{r4, r5, r6, lr}
 80188de:	b96a      	cbnz	r2, 80188fc <strstr+0x22>
 80188e0:	bd70      	pop	{r4, r5, r6, pc}
 80188e2:	429a      	cmp	r2, r3
 80188e4:	d109      	bne.n	80188fa <strstr+0x20>
 80188e6:	460c      	mov	r4, r1
 80188e8:	4605      	mov	r5, r0
 80188ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d0f6      	beq.n	80188e0 <strstr+0x6>
 80188f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80188f6:	429e      	cmp	r6, r3
 80188f8:	d0f7      	beq.n	80188ea <strstr+0x10>
 80188fa:	3001      	adds	r0, #1
 80188fc:	7803      	ldrb	r3, [r0, #0]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d1ef      	bne.n	80188e2 <strstr+0x8>
 8018902:	4618      	mov	r0, r3
 8018904:	e7ec      	b.n	80188e0 <strstr+0x6>
	...

08018908 <_close_r>:
 8018908:	b538      	push	{r3, r4, r5, lr}
 801890a:	4d06      	ldr	r5, [pc, #24]	@ (8018924 <_close_r+0x1c>)
 801890c:	2300      	movs	r3, #0
 801890e:	4604      	mov	r4, r0
 8018910:	4608      	mov	r0, r1
 8018912:	602b      	str	r3, [r5, #0]
 8018914:	f7e9 fd0e 	bl	8002334 <_close>
 8018918:	1c43      	adds	r3, r0, #1
 801891a:	d102      	bne.n	8018922 <_close_r+0x1a>
 801891c:	682b      	ldr	r3, [r5, #0]
 801891e:	b103      	cbz	r3, 8018922 <_close_r+0x1a>
 8018920:	6023      	str	r3, [r4, #0]
 8018922:	bd38      	pop	{r3, r4, r5, pc}
 8018924:	2000b530 	.word	0x2000b530

08018928 <_lseek_r>:
 8018928:	b538      	push	{r3, r4, r5, lr}
 801892a:	4d07      	ldr	r5, [pc, #28]	@ (8018948 <_lseek_r+0x20>)
 801892c:	4604      	mov	r4, r0
 801892e:	4608      	mov	r0, r1
 8018930:	4611      	mov	r1, r2
 8018932:	2200      	movs	r2, #0
 8018934:	602a      	str	r2, [r5, #0]
 8018936:	461a      	mov	r2, r3
 8018938:	f7e9 fd23 	bl	8002382 <_lseek>
 801893c:	1c43      	adds	r3, r0, #1
 801893e:	d102      	bne.n	8018946 <_lseek_r+0x1e>
 8018940:	682b      	ldr	r3, [r5, #0]
 8018942:	b103      	cbz	r3, 8018946 <_lseek_r+0x1e>
 8018944:	6023      	str	r3, [r4, #0]
 8018946:	bd38      	pop	{r3, r4, r5, pc}
 8018948:	2000b530 	.word	0x2000b530

0801894c <_read_r>:
 801894c:	b538      	push	{r3, r4, r5, lr}
 801894e:	4d07      	ldr	r5, [pc, #28]	@ (801896c <_read_r+0x20>)
 8018950:	4604      	mov	r4, r0
 8018952:	4608      	mov	r0, r1
 8018954:	4611      	mov	r1, r2
 8018956:	2200      	movs	r2, #0
 8018958:	602a      	str	r2, [r5, #0]
 801895a:	461a      	mov	r2, r3
 801895c:	f7e9 fcb1 	bl	80022c2 <_read>
 8018960:	1c43      	adds	r3, r0, #1
 8018962:	d102      	bne.n	801896a <_read_r+0x1e>
 8018964:	682b      	ldr	r3, [r5, #0]
 8018966:	b103      	cbz	r3, 801896a <_read_r+0x1e>
 8018968:	6023      	str	r3, [r4, #0]
 801896a:	bd38      	pop	{r3, r4, r5, pc}
 801896c:	2000b530 	.word	0x2000b530

08018970 <_sbrk_r>:
 8018970:	b538      	push	{r3, r4, r5, lr}
 8018972:	4d06      	ldr	r5, [pc, #24]	@ (801898c <_sbrk_r+0x1c>)
 8018974:	2300      	movs	r3, #0
 8018976:	4604      	mov	r4, r0
 8018978:	4608      	mov	r0, r1
 801897a:	602b      	str	r3, [r5, #0]
 801897c:	f7e9 fd0e 	bl	800239c <_sbrk>
 8018980:	1c43      	adds	r3, r0, #1
 8018982:	d102      	bne.n	801898a <_sbrk_r+0x1a>
 8018984:	682b      	ldr	r3, [r5, #0]
 8018986:	b103      	cbz	r3, 801898a <_sbrk_r+0x1a>
 8018988:	6023      	str	r3, [r4, #0]
 801898a:	bd38      	pop	{r3, r4, r5, pc}
 801898c:	2000b530 	.word	0x2000b530

08018990 <_write_r>:
 8018990:	b538      	push	{r3, r4, r5, lr}
 8018992:	4d07      	ldr	r5, [pc, #28]	@ (80189b0 <_write_r+0x20>)
 8018994:	4604      	mov	r4, r0
 8018996:	4608      	mov	r0, r1
 8018998:	4611      	mov	r1, r2
 801899a:	2200      	movs	r2, #0
 801899c:	602a      	str	r2, [r5, #0]
 801899e:	461a      	mov	r2, r3
 80189a0:	f7e9 fcac 	bl	80022fc <_write>
 80189a4:	1c43      	adds	r3, r0, #1
 80189a6:	d102      	bne.n	80189ae <_write_r+0x1e>
 80189a8:	682b      	ldr	r3, [r5, #0]
 80189aa:	b103      	cbz	r3, 80189ae <_write_r+0x1e>
 80189ac:	6023      	str	r3, [r4, #0]
 80189ae:	bd38      	pop	{r3, r4, r5, pc}
 80189b0:	2000b530 	.word	0x2000b530

080189b4 <__errno>:
 80189b4:	4b01      	ldr	r3, [pc, #4]	@ (80189bc <__errno+0x8>)
 80189b6:	6818      	ldr	r0, [r3, #0]
 80189b8:	4770      	bx	lr
 80189ba:	bf00      	nop
 80189bc:	200006dc 	.word	0x200006dc

080189c0 <__libc_init_array>:
 80189c0:	b570      	push	{r4, r5, r6, lr}
 80189c2:	4d0d      	ldr	r5, [pc, #52]	@ (80189f8 <__libc_init_array+0x38>)
 80189c4:	4c0d      	ldr	r4, [pc, #52]	@ (80189fc <__libc_init_array+0x3c>)
 80189c6:	1b64      	subs	r4, r4, r5
 80189c8:	10a4      	asrs	r4, r4, #2
 80189ca:	2600      	movs	r6, #0
 80189cc:	42a6      	cmp	r6, r4
 80189ce:	d109      	bne.n	80189e4 <__libc_init_array+0x24>
 80189d0:	4d0b      	ldr	r5, [pc, #44]	@ (8018a00 <__libc_init_array+0x40>)
 80189d2:	4c0c      	ldr	r4, [pc, #48]	@ (8018a04 <__libc_init_array+0x44>)
 80189d4:	f002 fa54 	bl	801ae80 <_init>
 80189d8:	1b64      	subs	r4, r4, r5
 80189da:	10a4      	asrs	r4, r4, #2
 80189dc:	2600      	movs	r6, #0
 80189de:	42a6      	cmp	r6, r4
 80189e0:	d105      	bne.n	80189ee <__libc_init_array+0x2e>
 80189e2:	bd70      	pop	{r4, r5, r6, pc}
 80189e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80189e8:	4798      	blx	r3
 80189ea:	3601      	adds	r6, #1
 80189ec:	e7ee      	b.n	80189cc <__libc_init_array+0xc>
 80189ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80189f2:	4798      	blx	r3
 80189f4:	3601      	adds	r6, #1
 80189f6:	e7f2      	b.n	80189de <__libc_init_array+0x1e>
 80189f8:	0801c2a0 	.word	0x0801c2a0
 80189fc:	0801c2a0 	.word	0x0801c2a0
 8018a00:	0801c2a0 	.word	0x0801c2a0
 8018a04:	0801c2ac 	.word	0x0801c2ac

08018a08 <__retarget_lock_init_recursive>:
 8018a08:	4770      	bx	lr

08018a0a <__retarget_lock_acquire_recursive>:
 8018a0a:	4770      	bx	lr

08018a0c <__retarget_lock_release_recursive>:
 8018a0c:	4770      	bx	lr

08018a0e <strcpy>:
 8018a0e:	4603      	mov	r3, r0
 8018a10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a14:	f803 2b01 	strb.w	r2, [r3], #1
 8018a18:	2a00      	cmp	r2, #0
 8018a1a:	d1f9      	bne.n	8018a10 <strcpy+0x2>
 8018a1c:	4770      	bx	lr

08018a1e <memcpy>:
 8018a1e:	440a      	add	r2, r1
 8018a20:	4291      	cmp	r1, r2
 8018a22:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018a26:	d100      	bne.n	8018a2a <memcpy+0xc>
 8018a28:	4770      	bx	lr
 8018a2a:	b510      	push	{r4, lr}
 8018a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a34:	4291      	cmp	r1, r2
 8018a36:	d1f9      	bne.n	8018a2c <memcpy+0xe>
 8018a38:	bd10      	pop	{r4, pc}
	...

08018a3c <__assert_func>:
 8018a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a3e:	4614      	mov	r4, r2
 8018a40:	461a      	mov	r2, r3
 8018a42:	4b09      	ldr	r3, [pc, #36]	@ (8018a68 <__assert_func+0x2c>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	4605      	mov	r5, r0
 8018a48:	68d8      	ldr	r0, [r3, #12]
 8018a4a:	b954      	cbnz	r4, 8018a62 <__assert_func+0x26>
 8018a4c:	4b07      	ldr	r3, [pc, #28]	@ (8018a6c <__assert_func+0x30>)
 8018a4e:	461c      	mov	r4, r3
 8018a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018a54:	9100      	str	r1, [sp, #0]
 8018a56:	462b      	mov	r3, r5
 8018a58:	4905      	ldr	r1, [pc, #20]	@ (8018a70 <__assert_func+0x34>)
 8018a5a:	f000 fd3f 	bl	80194dc <fiprintf>
 8018a5e:	f000 fdd3 	bl	8019608 <abort>
 8018a62:	4b04      	ldr	r3, [pc, #16]	@ (8018a74 <__assert_func+0x38>)
 8018a64:	e7f4      	b.n	8018a50 <__assert_func+0x14>
 8018a66:	bf00      	nop
 8018a68:	200006dc 	.word	0x200006dc
 8018a6c:	0801c015 	.word	0x0801c015
 8018a70:	0801bfe7 	.word	0x0801bfe7
 8018a74:	0801bfda 	.word	0x0801bfda

08018a78 <__env_lock>:
 8018a78:	4801      	ldr	r0, [pc, #4]	@ (8018a80 <__env_lock+0x8>)
 8018a7a:	f7ff bfc6 	b.w	8018a0a <__retarget_lock_acquire_recursive>
 8018a7e:	bf00      	nop
 8018a80:	2000b534 	.word	0x2000b534

08018a84 <__env_unlock>:
 8018a84:	4801      	ldr	r0, [pc, #4]	@ (8018a8c <__env_unlock+0x8>)
 8018a86:	f7ff bfc1 	b.w	8018a0c <__retarget_lock_release_recursive>
 8018a8a:	bf00      	nop
 8018a8c:	2000b534 	.word	0x2000b534

08018a90 <_free_r>:
 8018a90:	b538      	push	{r3, r4, r5, lr}
 8018a92:	4605      	mov	r5, r0
 8018a94:	2900      	cmp	r1, #0
 8018a96:	d041      	beq.n	8018b1c <_free_r+0x8c>
 8018a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a9c:	1f0c      	subs	r4, r1, #4
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	bfb8      	it	lt
 8018aa2:	18e4      	addlt	r4, r4, r3
 8018aa4:	f7ff fb30 	bl	8018108 <__malloc_lock>
 8018aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8018b20 <_free_r+0x90>)
 8018aaa:	6813      	ldr	r3, [r2, #0]
 8018aac:	b933      	cbnz	r3, 8018abc <_free_r+0x2c>
 8018aae:	6063      	str	r3, [r4, #4]
 8018ab0:	6014      	str	r4, [r2, #0]
 8018ab2:	4628      	mov	r0, r5
 8018ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ab8:	f7ff bb2c 	b.w	8018114 <__malloc_unlock>
 8018abc:	42a3      	cmp	r3, r4
 8018abe:	d908      	bls.n	8018ad2 <_free_r+0x42>
 8018ac0:	6820      	ldr	r0, [r4, #0]
 8018ac2:	1821      	adds	r1, r4, r0
 8018ac4:	428b      	cmp	r3, r1
 8018ac6:	bf01      	itttt	eq
 8018ac8:	6819      	ldreq	r1, [r3, #0]
 8018aca:	685b      	ldreq	r3, [r3, #4]
 8018acc:	1809      	addeq	r1, r1, r0
 8018ace:	6021      	streq	r1, [r4, #0]
 8018ad0:	e7ed      	b.n	8018aae <_free_r+0x1e>
 8018ad2:	461a      	mov	r2, r3
 8018ad4:	685b      	ldr	r3, [r3, #4]
 8018ad6:	b10b      	cbz	r3, 8018adc <_free_r+0x4c>
 8018ad8:	42a3      	cmp	r3, r4
 8018ada:	d9fa      	bls.n	8018ad2 <_free_r+0x42>
 8018adc:	6811      	ldr	r1, [r2, #0]
 8018ade:	1850      	adds	r0, r2, r1
 8018ae0:	42a0      	cmp	r0, r4
 8018ae2:	d10b      	bne.n	8018afc <_free_r+0x6c>
 8018ae4:	6820      	ldr	r0, [r4, #0]
 8018ae6:	4401      	add	r1, r0
 8018ae8:	1850      	adds	r0, r2, r1
 8018aea:	4283      	cmp	r3, r0
 8018aec:	6011      	str	r1, [r2, #0]
 8018aee:	d1e0      	bne.n	8018ab2 <_free_r+0x22>
 8018af0:	6818      	ldr	r0, [r3, #0]
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	6053      	str	r3, [r2, #4]
 8018af6:	4408      	add	r0, r1
 8018af8:	6010      	str	r0, [r2, #0]
 8018afa:	e7da      	b.n	8018ab2 <_free_r+0x22>
 8018afc:	d902      	bls.n	8018b04 <_free_r+0x74>
 8018afe:	230c      	movs	r3, #12
 8018b00:	602b      	str	r3, [r5, #0]
 8018b02:	e7d6      	b.n	8018ab2 <_free_r+0x22>
 8018b04:	6820      	ldr	r0, [r4, #0]
 8018b06:	1821      	adds	r1, r4, r0
 8018b08:	428b      	cmp	r3, r1
 8018b0a:	bf04      	itt	eq
 8018b0c:	6819      	ldreq	r1, [r3, #0]
 8018b0e:	685b      	ldreq	r3, [r3, #4]
 8018b10:	6063      	str	r3, [r4, #4]
 8018b12:	bf04      	itt	eq
 8018b14:	1809      	addeq	r1, r1, r0
 8018b16:	6021      	streq	r1, [r4, #0]
 8018b18:	6054      	str	r4, [r2, #4]
 8018b1a:	e7ca      	b.n	8018ab2 <_free_r+0x22>
 8018b1c:	bd38      	pop	{r3, r4, r5, pc}
 8018b1e:	bf00      	nop
 8018b20:	2000b3f0 	.word	0x2000b3f0

08018b24 <_malloc_usable_size_r>:
 8018b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b28:	1f18      	subs	r0, r3, #4
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	bfbc      	itt	lt
 8018b2e:	580b      	ldrlt	r3, [r1, r0]
 8018b30:	18c0      	addlt	r0, r0, r3
 8018b32:	4770      	bx	lr

08018b34 <__ssputs_r>:
 8018b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b38:	688e      	ldr	r6, [r1, #8]
 8018b3a:	461f      	mov	r7, r3
 8018b3c:	42be      	cmp	r6, r7
 8018b3e:	680b      	ldr	r3, [r1, #0]
 8018b40:	4682      	mov	sl, r0
 8018b42:	460c      	mov	r4, r1
 8018b44:	4690      	mov	r8, r2
 8018b46:	d82d      	bhi.n	8018ba4 <__ssputs_r+0x70>
 8018b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018b4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018b50:	d026      	beq.n	8018ba0 <__ssputs_r+0x6c>
 8018b52:	6965      	ldr	r5, [r4, #20]
 8018b54:	6909      	ldr	r1, [r1, #16]
 8018b56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b5a:	eba3 0901 	sub.w	r9, r3, r1
 8018b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b62:	1c7b      	adds	r3, r7, #1
 8018b64:	444b      	add	r3, r9
 8018b66:	106d      	asrs	r5, r5, #1
 8018b68:	429d      	cmp	r5, r3
 8018b6a:	bf38      	it	cc
 8018b6c:	461d      	movcc	r5, r3
 8018b6e:	0553      	lsls	r3, r2, #21
 8018b70:	d527      	bpl.n	8018bc2 <__ssputs_r+0x8e>
 8018b72:	4629      	mov	r1, r5
 8018b74:	f7ff fa48 	bl	8018008 <_malloc_r>
 8018b78:	4606      	mov	r6, r0
 8018b7a:	b360      	cbz	r0, 8018bd6 <__ssputs_r+0xa2>
 8018b7c:	6921      	ldr	r1, [r4, #16]
 8018b7e:	464a      	mov	r2, r9
 8018b80:	f7ff ff4d 	bl	8018a1e <memcpy>
 8018b84:	89a3      	ldrh	r3, [r4, #12]
 8018b86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b8e:	81a3      	strh	r3, [r4, #12]
 8018b90:	6126      	str	r6, [r4, #16]
 8018b92:	6165      	str	r5, [r4, #20]
 8018b94:	444e      	add	r6, r9
 8018b96:	eba5 0509 	sub.w	r5, r5, r9
 8018b9a:	6026      	str	r6, [r4, #0]
 8018b9c:	60a5      	str	r5, [r4, #8]
 8018b9e:	463e      	mov	r6, r7
 8018ba0:	42be      	cmp	r6, r7
 8018ba2:	d900      	bls.n	8018ba6 <__ssputs_r+0x72>
 8018ba4:	463e      	mov	r6, r7
 8018ba6:	6820      	ldr	r0, [r4, #0]
 8018ba8:	4632      	mov	r2, r6
 8018baa:	4641      	mov	r1, r8
 8018bac:	f7ff fe54 	bl	8018858 <memmove>
 8018bb0:	68a3      	ldr	r3, [r4, #8]
 8018bb2:	1b9b      	subs	r3, r3, r6
 8018bb4:	60a3      	str	r3, [r4, #8]
 8018bb6:	6823      	ldr	r3, [r4, #0]
 8018bb8:	4433      	add	r3, r6
 8018bba:	6023      	str	r3, [r4, #0]
 8018bbc:	2000      	movs	r0, #0
 8018bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bc2:	462a      	mov	r2, r5
 8018bc4:	f7ff fb20 	bl	8018208 <_realloc_r>
 8018bc8:	4606      	mov	r6, r0
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d1e0      	bne.n	8018b90 <__ssputs_r+0x5c>
 8018bce:	6921      	ldr	r1, [r4, #16]
 8018bd0:	4650      	mov	r0, sl
 8018bd2:	f7ff ff5d 	bl	8018a90 <_free_r>
 8018bd6:	230c      	movs	r3, #12
 8018bd8:	f8ca 3000 	str.w	r3, [sl]
 8018bdc:	89a3      	ldrh	r3, [r4, #12]
 8018bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018be2:	81a3      	strh	r3, [r4, #12]
 8018be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018be8:	e7e9      	b.n	8018bbe <__ssputs_r+0x8a>
	...

08018bec <_svfiprintf_r>:
 8018bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf0:	4698      	mov	r8, r3
 8018bf2:	898b      	ldrh	r3, [r1, #12]
 8018bf4:	061b      	lsls	r3, r3, #24
 8018bf6:	b09d      	sub	sp, #116	@ 0x74
 8018bf8:	4607      	mov	r7, r0
 8018bfa:	460d      	mov	r5, r1
 8018bfc:	4614      	mov	r4, r2
 8018bfe:	d510      	bpl.n	8018c22 <_svfiprintf_r+0x36>
 8018c00:	690b      	ldr	r3, [r1, #16]
 8018c02:	b973      	cbnz	r3, 8018c22 <_svfiprintf_r+0x36>
 8018c04:	2140      	movs	r1, #64	@ 0x40
 8018c06:	f7ff f9ff 	bl	8018008 <_malloc_r>
 8018c0a:	6028      	str	r0, [r5, #0]
 8018c0c:	6128      	str	r0, [r5, #16]
 8018c0e:	b930      	cbnz	r0, 8018c1e <_svfiprintf_r+0x32>
 8018c10:	230c      	movs	r3, #12
 8018c12:	603b      	str	r3, [r7, #0]
 8018c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c18:	b01d      	add	sp, #116	@ 0x74
 8018c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c1e:	2340      	movs	r3, #64	@ 0x40
 8018c20:	616b      	str	r3, [r5, #20]
 8018c22:	2300      	movs	r3, #0
 8018c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c26:	2320      	movs	r3, #32
 8018c28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c30:	2330      	movs	r3, #48	@ 0x30
 8018c32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018dd0 <_svfiprintf_r+0x1e4>
 8018c36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018c3a:	f04f 0901 	mov.w	r9, #1
 8018c3e:	4623      	mov	r3, r4
 8018c40:	469a      	mov	sl, r3
 8018c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c46:	b10a      	cbz	r2, 8018c4c <_svfiprintf_r+0x60>
 8018c48:	2a25      	cmp	r2, #37	@ 0x25
 8018c4a:	d1f9      	bne.n	8018c40 <_svfiprintf_r+0x54>
 8018c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8018c50:	d00b      	beq.n	8018c6a <_svfiprintf_r+0x7e>
 8018c52:	465b      	mov	r3, fp
 8018c54:	4622      	mov	r2, r4
 8018c56:	4629      	mov	r1, r5
 8018c58:	4638      	mov	r0, r7
 8018c5a:	f7ff ff6b 	bl	8018b34 <__ssputs_r>
 8018c5e:	3001      	adds	r0, #1
 8018c60:	f000 80a7 	beq.w	8018db2 <_svfiprintf_r+0x1c6>
 8018c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c66:	445a      	add	r2, fp
 8018c68:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	f000 809f 	beq.w	8018db2 <_svfiprintf_r+0x1c6>
 8018c74:	2300      	movs	r3, #0
 8018c76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c7e:	f10a 0a01 	add.w	sl, sl, #1
 8018c82:	9304      	str	r3, [sp, #16]
 8018c84:	9307      	str	r3, [sp, #28]
 8018c86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c8c:	4654      	mov	r4, sl
 8018c8e:	2205      	movs	r2, #5
 8018c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c94:	484e      	ldr	r0, [pc, #312]	@ (8018dd0 <_svfiprintf_r+0x1e4>)
 8018c96:	f7e7 fadb 	bl	8000250 <memchr>
 8018c9a:	9a04      	ldr	r2, [sp, #16]
 8018c9c:	b9d8      	cbnz	r0, 8018cd6 <_svfiprintf_r+0xea>
 8018c9e:	06d0      	lsls	r0, r2, #27
 8018ca0:	bf44      	itt	mi
 8018ca2:	2320      	movmi	r3, #32
 8018ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ca8:	0711      	lsls	r1, r2, #28
 8018caa:	bf44      	itt	mi
 8018cac:	232b      	movmi	r3, #43	@ 0x2b
 8018cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8018cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cb8:	d015      	beq.n	8018ce6 <_svfiprintf_r+0xfa>
 8018cba:	9a07      	ldr	r2, [sp, #28]
 8018cbc:	4654      	mov	r4, sl
 8018cbe:	2000      	movs	r0, #0
 8018cc0:	f04f 0c0a 	mov.w	ip, #10
 8018cc4:	4621      	mov	r1, r4
 8018cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018cca:	3b30      	subs	r3, #48	@ 0x30
 8018ccc:	2b09      	cmp	r3, #9
 8018cce:	d94b      	bls.n	8018d68 <_svfiprintf_r+0x17c>
 8018cd0:	b1b0      	cbz	r0, 8018d00 <_svfiprintf_r+0x114>
 8018cd2:	9207      	str	r2, [sp, #28]
 8018cd4:	e014      	b.n	8018d00 <_svfiprintf_r+0x114>
 8018cd6:	eba0 0308 	sub.w	r3, r0, r8
 8018cda:	fa09 f303 	lsl.w	r3, r9, r3
 8018cde:	4313      	orrs	r3, r2
 8018ce0:	9304      	str	r3, [sp, #16]
 8018ce2:	46a2      	mov	sl, r4
 8018ce4:	e7d2      	b.n	8018c8c <_svfiprintf_r+0xa0>
 8018ce6:	9b03      	ldr	r3, [sp, #12]
 8018ce8:	1d19      	adds	r1, r3, #4
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	9103      	str	r1, [sp, #12]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	bfbb      	ittet	lt
 8018cf2:	425b      	neglt	r3, r3
 8018cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8018cf8:	9307      	strge	r3, [sp, #28]
 8018cfa:	9307      	strlt	r3, [sp, #28]
 8018cfc:	bfb8      	it	lt
 8018cfe:	9204      	strlt	r2, [sp, #16]
 8018d00:	7823      	ldrb	r3, [r4, #0]
 8018d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8018d04:	d10a      	bne.n	8018d1c <_svfiprintf_r+0x130>
 8018d06:	7863      	ldrb	r3, [r4, #1]
 8018d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8018d0a:	d132      	bne.n	8018d72 <_svfiprintf_r+0x186>
 8018d0c:	9b03      	ldr	r3, [sp, #12]
 8018d0e:	1d1a      	adds	r2, r3, #4
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	9203      	str	r2, [sp, #12]
 8018d14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018d18:	3402      	adds	r4, #2
 8018d1a:	9305      	str	r3, [sp, #20]
 8018d1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018de0 <_svfiprintf_r+0x1f4>
 8018d20:	7821      	ldrb	r1, [r4, #0]
 8018d22:	2203      	movs	r2, #3
 8018d24:	4650      	mov	r0, sl
 8018d26:	f7e7 fa93 	bl	8000250 <memchr>
 8018d2a:	b138      	cbz	r0, 8018d3c <_svfiprintf_r+0x150>
 8018d2c:	9b04      	ldr	r3, [sp, #16]
 8018d2e:	eba0 000a 	sub.w	r0, r0, sl
 8018d32:	2240      	movs	r2, #64	@ 0x40
 8018d34:	4082      	lsls	r2, r0
 8018d36:	4313      	orrs	r3, r2
 8018d38:	3401      	adds	r4, #1
 8018d3a:	9304      	str	r3, [sp, #16]
 8018d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d40:	4824      	ldr	r0, [pc, #144]	@ (8018dd4 <_svfiprintf_r+0x1e8>)
 8018d42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018d46:	2206      	movs	r2, #6
 8018d48:	f7e7 fa82 	bl	8000250 <memchr>
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	d036      	beq.n	8018dbe <_svfiprintf_r+0x1d2>
 8018d50:	4b21      	ldr	r3, [pc, #132]	@ (8018dd8 <_svfiprintf_r+0x1ec>)
 8018d52:	bb1b      	cbnz	r3, 8018d9c <_svfiprintf_r+0x1b0>
 8018d54:	9b03      	ldr	r3, [sp, #12]
 8018d56:	3307      	adds	r3, #7
 8018d58:	f023 0307 	bic.w	r3, r3, #7
 8018d5c:	3308      	adds	r3, #8
 8018d5e:	9303      	str	r3, [sp, #12]
 8018d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d62:	4433      	add	r3, r6
 8018d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d66:	e76a      	b.n	8018c3e <_svfiprintf_r+0x52>
 8018d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d6c:	460c      	mov	r4, r1
 8018d6e:	2001      	movs	r0, #1
 8018d70:	e7a8      	b.n	8018cc4 <_svfiprintf_r+0xd8>
 8018d72:	2300      	movs	r3, #0
 8018d74:	3401      	adds	r4, #1
 8018d76:	9305      	str	r3, [sp, #20]
 8018d78:	4619      	mov	r1, r3
 8018d7a:	f04f 0c0a 	mov.w	ip, #10
 8018d7e:	4620      	mov	r0, r4
 8018d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d84:	3a30      	subs	r2, #48	@ 0x30
 8018d86:	2a09      	cmp	r2, #9
 8018d88:	d903      	bls.n	8018d92 <_svfiprintf_r+0x1a6>
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d0c6      	beq.n	8018d1c <_svfiprintf_r+0x130>
 8018d8e:	9105      	str	r1, [sp, #20]
 8018d90:	e7c4      	b.n	8018d1c <_svfiprintf_r+0x130>
 8018d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d96:	4604      	mov	r4, r0
 8018d98:	2301      	movs	r3, #1
 8018d9a:	e7f0      	b.n	8018d7e <_svfiprintf_r+0x192>
 8018d9c:	ab03      	add	r3, sp, #12
 8018d9e:	9300      	str	r3, [sp, #0]
 8018da0:	462a      	mov	r2, r5
 8018da2:	4b0e      	ldr	r3, [pc, #56]	@ (8018ddc <_svfiprintf_r+0x1f0>)
 8018da4:	a904      	add	r1, sp, #16
 8018da6:	4638      	mov	r0, r7
 8018da8:	f3af 8000 	nop.w
 8018dac:	1c42      	adds	r2, r0, #1
 8018dae:	4606      	mov	r6, r0
 8018db0:	d1d6      	bne.n	8018d60 <_svfiprintf_r+0x174>
 8018db2:	89ab      	ldrh	r3, [r5, #12]
 8018db4:	065b      	lsls	r3, r3, #25
 8018db6:	f53f af2d 	bmi.w	8018c14 <_svfiprintf_r+0x28>
 8018dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018dbc:	e72c      	b.n	8018c18 <_svfiprintf_r+0x2c>
 8018dbe:	ab03      	add	r3, sp, #12
 8018dc0:	9300      	str	r3, [sp, #0]
 8018dc2:	462a      	mov	r2, r5
 8018dc4:	4b05      	ldr	r3, [pc, #20]	@ (8018ddc <_svfiprintf_r+0x1f0>)
 8018dc6:	a904      	add	r1, sp, #16
 8018dc8:	4638      	mov	r0, r7
 8018dca:	f000 f9bb 	bl	8019144 <_printf_i>
 8018dce:	e7ed      	b.n	8018dac <_svfiprintf_r+0x1c0>
 8018dd0:	0801c016 	.word	0x0801c016
 8018dd4:	0801c020 	.word	0x0801c020
 8018dd8:	00000000 	.word	0x00000000
 8018ddc:	08018b35 	.word	0x08018b35
 8018de0:	0801c01c 	.word	0x0801c01c

08018de4 <__sfputc_r>:
 8018de4:	6893      	ldr	r3, [r2, #8]
 8018de6:	3b01      	subs	r3, #1
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	b410      	push	{r4}
 8018dec:	6093      	str	r3, [r2, #8]
 8018dee:	da08      	bge.n	8018e02 <__sfputc_r+0x1e>
 8018df0:	6994      	ldr	r4, [r2, #24]
 8018df2:	42a3      	cmp	r3, r4
 8018df4:	db01      	blt.n	8018dfa <__sfputc_r+0x16>
 8018df6:	290a      	cmp	r1, #10
 8018df8:	d103      	bne.n	8018e02 <__sfputc_r+0x1e>
 8018dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dfe:	f7ff bc87 	b.w	8018710 <__swbuf_r>
 8018e02:	6813      	ldr	r3, [r2, #0]
 8018e04:	1c58      	adds	r0, r3, #1
 8018e06:	6010      	str	r0, [r2, #0]
 8018e08:	7019      	strb	r1, [r3, #0]
 8018e0a:	4608      	mov	r0, r1
 8018e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e10:	4770      	bx	lr

08018e12 <__sfputs_r>:
 8018e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e14:	4606      	mov	r6, r0
 8018e16:	460f      	mov	r7, r1
 8018e18:	4614      	mov	r4, r2
 8018e1a:	18d5      	adds	r5, r2, r3
 8018e1c:	42ac      	cmp	r4, r5
 8018e1e:	d101      	bne.n	8018e24 <__sfputs_r+0x12>
 8018e20:	2000      	movs	r0, #0
 8018e22:	e007      	b.n	8018e34 <__sfputs_r+0x22>
 8018e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e28:	463a      	mov	r2, r7
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f7ff ffda 	bl	8018de4 <__sfputc_r>
 8018e30:	1c43      	adds	r3, r0, #1
 8018e32:	d1f3      	bne.n	8018e1c <__sfputs_r+0xa>
 8018e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e38 <_vfiprintf_r>:
 8018e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e3c:	460d      	mov	r5, r1
 8018e3e:	b09d      	sub	sp, #116	@ 0x74
 8018e40:	4614      	mov	r4, r2
 8018e42:	4698      	mov	r8, r3
 8018e44:	4606      	mov	r6, r0
 8018e46:	b118      	cbz	r0, 8018e50 <_vfiprintf_r+0x18>
 8018e48:	6a03      	ldr	r3, [r0, #32]
 8018e4a:	b90b      	cbnz	r3, 8018e50 <_vfiprintf_r+0x18>
 8018e4c:	f7ff fb0e 	bl	801846c <__sinit>
 8018e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e52:	07d9      	lsls	r1, r3, #31
 8018e54:	d405      	bmi.n	8018e62 <_vfiprintf_r+0x2a>
 8018e56:	89ab      	ldrh	r3, [r5, #12]
 8018e58:	059a      	lsls	r2, r3, #22
 8018e5a:	d402      	bmi.n	8018e62 <_vfiprintf_r+0x2a>
 8018e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e5e:	f7ff fdd4 	bl	8018a0a <__retarget_lock_acquire_recursive>
 8018e62:	89ab      	ldrh	r3, [r5, #12]
 8018e64:	071b      	lsls	r3, r3, #28
 8018e66:	d501      	bpl.n	8018e6c <_vfiprintf_r+0x34>
 8018e68:	692b      	ldr	r3, [r5, #16]
 8018e6a:	b99b      	cbnz	r3, 8018e94 <_vfiprintf_r+0x5c>
 8018e6c:	4629      	mov	r1, r5
 8018e6e:	4630      	mov	r0, r6
 8018e70:	f7ff fc8c 	bl	801878c <__swsetup_r>
 8018e74:	b170      	cbz	r0, 8018e94 <_vfiprintf_r+0x5c>
 8018e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e78:	07dc      	lsls	r4, r3, #31
 8018e7a:	d504      	bpl.n	8018e86 <_vfiprintf_r+0x4e>
 8018e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e80:	b01d      	add	sp, #116	@ 0x74
 8018e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e86:	89ab      	ldrh	r3, [r5, #12]
 8018e88:	0598      	lsls	r0, r3, #22
 8018e8a:	d4f7      	bmi.n	8018e7c <_vfiprintf_r+0x44>
 8018e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e8e:	f7ff fdbd 	bl	8018a0c <__retarget_lock_release_recursive>
 8018e92:	e7f3      	b.n	8018e7c <_vfiprintf_r+0x44>
 8018e94:	2300      	movs	r3, #0
 8018e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e98:	2320      	movs	r3, #32
 8018e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ea2:	2330      	movs	r3, #48	@ 0x30
 8018ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019054 <_vfiprintf_r+0x21c>
 8018ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018eac:	f04f 0901 	mov.w	r9, #1
 8018eb0:	4623      	mov	r3, r4
 8018eb2:	469a      	mov	sl, r3
 8018eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018eb8:	b10a      	cbz	r2, 8018ebe <_vfiprintf_r+0x86>
 8018eba:	2a25      	cmp	r2, #37	@ 0x25
 8018ebc:	d1f9      	bne.n	8018eb2 <_vfiprintf_r+0x7a>
 8018ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8018ec2:	d00b      	beq.n	8018edc <_vfiprintf_r+0xa4>
 8018ec4:	465b      	mov	r3, fp
 8018ec6:	4622      	mov	r2, r4
 8018ec8:	4629      	mov	r1, r5
 8018eca:	4630      	mov	r0, r6
 8018ecc:	f7ff ffa1 	bl	8018e12 <__sfputs_r>
 8018ed0:	3001      	adds	r0, #1
 8018ed2:	f000 80a7 	beq.w	8019024 <_vfiprintf_r+0x1ec>
 8018ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ed8:	445a      	add	r2, fp
 8018eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8018edc:	f89a 3000 	ldrb.w	r3, [sl]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	f000 809f 	beq.w	8019024 <_vfiprintf_r+0x1ec>
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ef0:	f10a 0a01 	add.w	sl, sl, #1
 8018ef4:	9304      	str	r3, [sp, #16]
 8018ef6:	9307      	str	r3, [sp, #28]
 8018ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8018efe:	4654      	mov	r4, sl
 8018f00:	2205      	movs	r2, #5
 8018f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f06:	4853      	ldr	r0, [pc, #332]	@ (8019054 <_vfiprintf_r+0x21c>)
 8018f08:	f7e7 f9a2 	bl	8000250 <memchr>
 8018f0c:	9a04      	ldr	r2, [sp, #16]
 8018f0e:	b9d8      	cbnz	r0, 8018f48 <_vfiprintf_r+0x110>
 8018f10:	06d1      	lsls	r1, r2, #27
 8018f12:	bf44      	itt	mi
 8018f14:	2320      	movmi	r3, #32
 8018f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f1a:	0713      	lsls	r3, r2, #28
 8018f1c:	bf44      	itt	mi
 8018f1e:	232b      	movmi	r3, #43	@ 0x2b
 8018f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f24:	f89a 3000 	ldrb.w	r3, [sl]
 8018f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f2a:	d015      	beq.n	8018f58 <_vfiprintf_r+0x120>
 8018f2c:	9a07      	ldr	r2, [sp, #28]
 8018f2e:	4654      	mov	r4, sl
 8018f30:	2000      	movs	r0, #0
 8018f32:	f04f 0c0a 	mov.w	ip, #10
 8018f36:	4621      	mov	r1, r4
 8018f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f3c:	3b30      	subs	r3, #48	@ 0x30
 8018f3e:	2b09      	cmp	r3, #9
 8018f40:	d94b      	bls.n	8018fda <_vfiprintf_r+0x1a2>
 8018f42:	b1b0      	cbz	r0, 8018f72 <_vfiprintf_r+0x13a>
 8018f44:	9207      	str	r2, [sp, #28]
 8018f46:	e014      	b.n	8018f72 <_vfiprintf_r+0x13a>
 8018f48:	eba0 0308 	sub.w	r3, r0, r8
 8018f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8018f50:	4313      	orrs	r3, r2
 8018f52:	9304      	str	r3, [sp, #16]
 8018f54:	46a2      	mov	sl, r4
 8018f56:	e7d2      	b.n	8018efe <_vfiprintf_r+0xc6>
 8018f58:	9b03      	ldr	r3, [sp, #12]
 8018f5a:	1d19      	adds	r1, r3, #4
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	9103      	str	r1, [sp, #12]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	bfbb      	ittet	lt
 8018f64:	425b      	neglt	r3, r3
 8018f66:	f042 0202 	orrlt.w	r2, r2, #2
 8018f6a:	9307      	strge	r3, [sp, #28]
 8018f6c:	9307      	strlt	r3, [sp, #28]
 8018f6e:	bfb8      	it	lt
 8018f70:	9204      	strlt	r2, [sp, #16]
 8018f72:	7823      	ldrb	r3, [r4, #0]
 8018f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8018f76:	d10a      	bne.n	8018f8e <_vfiprintf_r+0x156>
 8018f78:	7863      	ldrb	r3, [r4, #1]
 8018f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f7c:	d132      	bne.n	8018fe4 <_vfiprintf_r+0x1ac>
 8018f7e:	9b03      	ldr	r3, [sp, #12]
 8018f80:	1d1a      	adds	r2, r3, #4
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	9203      	str	r2, [sp, #12]
 8018f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018f8a:	3402      	adds	r4, #2
 8018f8c:	9305      	str	r3, [sp, #20]
 8018f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019064 <_vfiprintf_r+0x22c>
 8018f92:	7821      	ldrb	r1, [r4, #0]
 8018f94:	2203      	movs	r2, #3
 8018f96:	4650      	mov	r0, sl
 8018f98:	f7e7 f95a 	bl	8000250 <memchr>
 8018f9c:	b138      	cbz	r0, 8018fae <_vfiprintf_r+0x176>
 8018f9e:	9b04      	ldr	r3, [sp, #16]
 8018fa0:	eba0 000a 	sub.w	r0, r0, sl
 8018fa4:	2240      	movs	r2, #64	@ 0x40
 8018fa6:	4082      	lsls	r2, r0
 8018fa8:	4313      	orrs	r3, r2
 8018faa:	3401      	adds	r4, #1
 8018fac:	9304      	str	r3, [sp, #16]
 8018fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fb2:	4829      	ldr	r0, [pc, #164]	@ (8019058 <_vfiprintf_r+0x220>)
 8018fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018fb8:	2206      	movs	r2, #6
 8018fba:	f7e7 f949 	bl	8000250 <memchr>
 8018fbe:	2800      	cmp	r0, #0
 8018fc0:	d03f      	beq.n	8019042 <_vfiprintf_r+0x20a>
 8018fc2:	4b26      	ldr	r3, [pc, #152]	@ (801905c <_vfiprintf_r+0x224>)
 8018fc4:	bb1b      	cbnz	r3, 801900e <_vfiprintf_r+0x1d6>
 8018fc6:	9b03      	ldr	r3, [sp, #12]
 8018fc8:	3307      	adds	r3, #7
 8018fca:	f023 0307 	bic.w	r3, r3, #7
 8018fce:	3308      	adds	r3, #8
 8018fd0:	9303      	str	r3, [sp, #12]
 8018fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fd4:	443b      	add	r3, r7
 8018fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8018fd8:	e76a      	b.n	8018eb0 <_vfiprintf_r+0x78>
 8018fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8018fde:	460c      	mov	r4, r1
 8018fe0:	2001      	movs	r0, #1
 8018fe2:	e7a8      	b.n	8018f36 <_vfiprintf_r+0xfe>
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	3401      	adds	r4, #1
 8018fe8:	9305      	str	r3, [sp, #20]
 8018fea:	4619      	mov	r1, r3
 8018fec:	f04f 0c0a 	mov.w	ip, #10
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ff6:	3a30      	subs	r2, #48	@ 0x30
 8018ff8:	2a09      	cmp	r2, #9
 8018ffa:	d903      	bls.n	8019004 <_vfiprintf_r+0x1cc>
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d0c6      	beq.n	8018f8e <_vfiprintf_r+0x156>
 8019000:	9105      	str	r1, [sp, #20]
 8019002:	e7c4      	b.n	8018f8e <_vfiprintf_r+0x156>
 8019004:	fb0c 2101 	mla	r1, ip, r1, r2
 8019008:	4604      	mov	r4, r0
 801900a:	2301      	movs	r3, #1
 801900c:	e7f0      	b.n	8018ff0 <_vfiprintf_r+0x1b8>
 801900e:	ab03      	add	r3, sp, #12
 8019010:	9300      	str	r3, [sp, #0]
 8019012:	462a      	mov	r2, r5
 8019014:	4b12      	ldr	r3, [pc, #72]	@ (8019060 <_vfiprintf_r+0x228>)
 8019016:	a904      	add	r1, sp, #16
 8019018:	4630      	mov	r0, r6
 801901a:	f3af 8000 	nop.w
 801901e:	4607      	mov	r7, r0
 8019020:	1c78      	adds	r0, r7, #1
 8019022:	d1d6      	bne.n	8018fd2 <_vfiprintf_r+0x19a>
 8019024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019026:	07d9      	lsls	r1, r3, #31
 8019028:	d405      	bmi.n	8019036 <_vfiprintf_r+0x1fe>
 801902a:	89ab      	ldrh	r3, [r5, #12]
 801902c:	059a      	lsls	r2, r3, #22
 801902e:	d402      	bmi.n	8019036 <_vfiprintf_r+0x1fe>
 8019030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019032:	f7ff fceb 	bl	8018a0c <__retarget_lock_release_recursive>
 8019036:	89ab      	ldrh	r3, [r5, #12]
 8019038:	065b      	lsls	r3, r3, #25
 801903a:	f53f af1f 	bmi.w	8018e7c <_vfiprintf_r+0x44>
 801903e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019040:	e71e      	b.n	8018e80 <_vfiprintf_r+0x48>
 8019042:	ab03      	add	r3, sp, #12
 8019044:	9300      	str	r3, [sp, #0]
 8019046:	462a      	mov	r2, r5
 8019048:	4b05      	ldr	r3, [pc, #20]	@ (8019060 <_vfiprintf_r+0x228>)
 801904a:	a904      	add	r1, sp, #16
 801904c:	4630      	mov	r0, r6
 801904e:	f000 f879 	bl	8019144 <_printf_i>
 8019052:	e7e4      	b.n	801901e <_vfiprintf_r+0x1e6>
 8019054:	0801c016 	.word	0x0801c016
 8019058:	0801c020 	.word	0x0801c020
 801905c:	00000000 	.word	0x00000000
 8019060:	08018e13 	.word	0x08018e13
 8019064:	0801c01c 	.word	0x0801c01c

08019068 <_printf_common>:
 8019068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801906c:	4616      	mov	r6, r2
 801906e:	4698      	mov	r8, r3
 8019070:	688a      	ldr	r2, [r1, #8]
 8019072:	690b      	ldr	r3, [r1, #16]
 8019074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019078:	4293      	cmp	r3, r2
 801907a:	bfb8      	it	lt
 801907c:	4613      	movlt	r3, r2
 801907e:	6033      	str	r3, [r6, #0]
 8019080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019084:	4607      	mov	r7, r0
 8019086:	460c      	mov	r4, r1
 8019088:	b10a      	cbz	r2, 801908e <_printf_common+0x26>
 801908a:	3301      	adds	r3, #1
 801908c:	6033      	str	r3, [r6, #0]
 801908e:	6823      	ldr	r3, [r4, #0]
 8019090:	0699      	lsls	r1, r3, #26
 8019092:	bf42      	ittt	mi
 8019094:	6833      	ldrmi	r3, [r6, #0]
 8019096:	3302      	addmi	r3, #2
 8019098:	6033      	strmi	r3, [r6, #0]
 801909a:	6825      	ldr	r5, [r4, #0]
 801909c:	f015 0506 	ands.w	r5, r5, #6
 80190a0:	d106      	bne.n	80190b0 <_printf_common+0x48>
 80190a2:	f104 0a19 	add.w	sl, r4, #25
 80190a6:	68e3      	ldr	r3, [r4, #12]
 80190a8:	6832      	ldr	r2, [r6, #0]
 80190aa:	1a9b      	subs	r3, r3, r2
 80190ac:	42ab      	cmp	r3, r5
 80190ae:	dc26      	bgt.n	80190fe <_printf_common+0x96>
 80190b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80190b4:	6822      	ldr	r2, [r4, #0]
 80190b6:	3b00      	subs	r3, #0
 80190b8:	bf18      	it	ne
 80190ba:	2301      	movne	r3, #1
 80190bc:	0692      	lsls	r2, r2, #26
 80190be:	d42b      	bmi.n	8019118 <_printf_common+0xb0>
 80190c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80190c4:	4641      	mov	r1, r8
 80190c6:	4638      	mov	r0, r7
 80190c8:	47c8      	blx	r9
 80190ca:	3001      	adds	r0, #1
 80190cc:	d01e      	beq.n	801910c <_printf_common+0xa4>
 80190ce:	6823      	ldr	r3, [r4, #0]
 80190d0:	6922      	ldr	r2, [r4, #16]
 80190d2:	f003 0306 	and.w	r3, r3, #6
 80190d6:	2b04      	cmp	r3, #4
 80190d8:	bf02      	ittt	eq
 80190da:	68e5      	ldreq	r5, [r4, #12]
 80190dc:	6833      	ldreq	r3, [r6, #0]
 80190de:	1aed      	subeq	r5, r5, r3
 80190e0:	68a3      	ldr	r3, [r4, #8]
 80190e2:	bf0c      	ite	eq
 80190e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80190e8:	2500      	movne	r5, #0
 80190ea:	4293      	cmp	r3, r2
 80190ec:	bfc4      	itt	gt
 80190ee:	1a9b      	subgt	r3, r3, r2
 80190f0:	18ed      	addgt	r5, r5, r3
 80190f2:	2600      	movs	r6, #0
 80190f4:	341a      	adds	r4, #26
 80190f6:	42b5      	cmp	r5, r6
 80190f8:	d11a      	bne.n	8019130 <_printf_common+0xc8>
 80190fa:	2000      	movs	r0, #0
 80190fc:	e008      	b.n	8019110 <_printf_common+0xa8>
 80190fe:	2301      	movs	r3, #1
 8019100:	4652      	mov	r2, sl
 8019102:	4641      	mov	r1, r8
 8019104:	4638      	mov	r0, r7
 8019106:	47c8      	blx	r9
 8019108:	3001      	adds	r0, #1
 801910a:	d103      	bne.n	8019114 <_printf_common+0xac>
 801910c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019114:	3501      	adds	r5, #1
 8019116:	e7c6      	b.n	80190a6 <_printf_common+0x3e>
 8019118:	18e1      	adds	r1, r4, r3
 801911a:	1c5a      	adds	r2, r3, #1
 801911c:	2030      	movs	r0, #48	@ 0x30
 801911e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019122:	4422      	add	r2, r4
 8019124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801912c:	3302      	adds	r3, #2
 801912e:	e7c7      	b.n	80190c0 <_printf_common+0x58>
 8019130:	2301      	movs	r3, #1
 8019132:	4622      	mov	r2, r4
 8019134:	4641      	mov	r1, r8
 8019136:	4638      	mov	r0, r7
 8019138:	47c8      	blx	r9
 801913a:	3001      	adds	r0, #1
 801913c:	d0e6      	beq.n	801910c <_printf_common+0xa4>
 801913e:	3601      	adds	r6, #1
 8019140:	e7d9      	b.n	80190f6 <_printf_common+0x8e>
	...

08019144 <_printf_i>:
 8019144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019148:	7e0f      	ldrb	r7, [r1, #24]
 801914a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801914c:	2f78      	cmp	r7, #120	@ 0x78
 801914e:	4691      	mov	r9, r2
 8019150:	4680      	mov	r8, r0
 8019152:	460c      	mov	r4, r1
 8019154:	469a      	mov	sl, r3
 8019156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801915a:	d807      	bhi.n	801916c <_printf_i+0x28>
 801915c:	2f62      	cmp	r7, #98	@ 0x62
 801915e:	d80a      	bhi.n	8019176 <_printf_i+0x32>
 8019160:	2f00      	cmp	r7, #0
 8019162:	f000 80d2 	beq.w	801930a <_printf_i+0x1c6>
 8019166:	2f58      	cmp	r7, #88	@ 0x58
 8019168:	f000 80b9 	beq.w	80192de <_printf_i+0x19a>
 801916c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019174:	e03a      	b.n	80191ec <_printf_i+0xa8>
 8019176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801917a:	2b15      	cmp	r3, #21
 801917c:	d8f6      	bhi.n	801916c <_printf_i+0x28>
 801917e:	a101      	add	r1, pc, #4	@ (adr r1, 8019184 <_printf_i+0x40>)
 8019180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019184:	080191dd 	.word	0x080191dd
 8019188:	080191f1 	.word	0x080191f1
 801918c:	0801916d 	.word	0x0801916d
 8019190:	0801916d 	.word	0x0801916d
 8019194:	0801916d 	.word	0x0801916d
 8019198:	0801916d 	.word	0x0801916d
 801919c:	080191f1 	.word	0x080191f1
 80191a0:	0801916d 	.word	0x0801916d
 80191a4:	0801916d 	.word	0x0801916d
 80191a8:	0801916d 	.word	0x0801916d
 80191ac:	0801916d 	.word	0x0801916d
 80191b0:	080192f1 	.word	0x080192f1
 80191b4:	0801921b 	.word	0x0801921b
 80191b8:	080192ab 	.word	0x080192ab
 80191bc:	0801916d 	.word	0x0801916d
 80191c0:	0801916d 	.word	0x0801916d
 80191c4:	08019313 	.word	0x08019313
 80191c8:	0801916d 	.word	0x0801916d
 80191cc:	0801921b 	.word	0x0801921b
 80191d0:	0801916d 	.word	0x0801916d
 80191d4:	0801916d 	.word	0x0801916d
 80191d8:	080192b3 	.word	0x080192b3
 80191dc:	6833      	ldr	r3, [r6, #0]
 80191de:	1d1a      	adds	r2, r3, #4
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	6032      	str	r2, [r6, #0]
 80191e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80191e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80191ec:	2301      	movs	r3, #1
 80191ee:	e09d      	b.n	801932c <_printf_i+0x1e8>
 80191f0:	6833      	ldr	r3, [r6, #0]
 80191f2:	6820      	ldr	r0, [r4, #0]
 80191f4:	1d19      	adds	r1, r3, #4
 80191f6:	6031      	str	r1, [r6, #0]
 80191f8:	0606      	lsls	r6, r0, #24
 80191fa:	d501      	bpl.n	8019200 <_printf_i+0xbc>
 80191fc:	681d      	ldr	r5, [r3, #0]
 80191fe:	e003      	b.n	8019208 <_printf_i+0xc4>
 8019200:	0645      	lsls	r5, r0, #25
 8019202:	d5fb      	bpl.n	80191fc <_printf_i+0xb8>
 8019204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019208:	2d00      	cmp	r5, #0
 801920a:	da03      	bge.n	8019214 <_printf_i+0xd0>
 801920c:	232d      	movs	r3, #45	@ 0x2d
 801920e:	426d      	negs	r5, r5
 8019210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019214:	4859      	ldr	r0, [pc, #356]	@ (801937c <_printf_i+0x238>)
 8019216:	230a      	movs	r3, #10
 8019218:	e011      	b.n	801923e <_printf_i+0xfa>
 801921a:	6821      	ldr	r1, [r4, #0]
 801921c:	6833      	ldr	r3, [r6, #0]
 801921e:	0608      	lsls	r0, r1, #24
 8019220:	f853 5b04 	ldr.w	r5, [r3], #4
 8019224:	d402      	bmi.n	801922c <_printf_i+0xe8>
 8019226:	0649      	lsls	r1, r1, #25
 8019228:	bf48      	it	mi
 801922a:	b2ad      	uxthmi	r5, r5
 801922c:	2f6f      	cmp	r7, #111	@ 0x6f
 801922e:	4853      	ldr	r0, [pc, #332]	@ (801937c <_printf_i+0x238>)
 8019230:	6033      	str	r3, [r6, #0]
 8019232:	bf14      	ite	ne
 8019234:	230a      	movne	r3, #10
 8019236:	2308      	moveq	r3, #8
 8019238:	2100      	movs	r1, #0
 801923a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801923e:	6866      	ldr	r6, [r4, #4]
 8019240:	60a6      	str	r6, [r4, #8]
 8019242:	2e00      	cmp	r6, #0
 8019244:	bfa2      	ittt	ge
 8019246:	6821      	ldrge	r1, [r4, #0]
 8019248:	f021 0104 	bicge.w	r1, r1, #4
 801924c:	6021      	strge	r1, [r4, #0]
 801924e:	b90d      	cbnz	r5, 8019254 <_printf_i+0x110>
 8019250:	2e00      	cmp	r6, #0
 8019252:	d04b      	beq.n	80192ec <_printf_i+0x1a8>
 8019254:	4616      	mov	r6, r2
 8019256:	fbb5 f1f3 	udiv	r1, r5, r3
 801925a:	fb03 5711 	mls	r7, r3, r1, r5
 801925e:	5dc7      	ldrb	r7, [r0, r7]
 8019260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019264:	462f      	mov	r7, r5
 8019266:	42bb      	cmp	r3, r7
 8019268:	460d      	mov	r5, r1
 801926a:	d9f4      	bls.n	8019256 <_printf_i+0x112>
 801926c:	2b08      	cmp	r3, #8
 801926e:	d10b      	bne.n	8019288 <_printf_i+0x144>
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	07df      	lsls	r7, r3, #31
 8019274:	d508      	bpl.n	8019288 <_printf_i+0x144>
 8019276:	6923      	ldr	r3, [r4, #16]
 8019278:	6861      	ldr	r1, [r4, #4]
 801927a:	4299      	cmp	r1, r3
 801927c:	bfde      	ittt	le
 801927e:	2330      	movle	r3, #48	@ 0x30
 8019280:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019284:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019288:	1b92      	subs	r2, r2, r6
 801928a:	6122      	str	r2, [r4, #16]
 801928c:	f8cd a000 	str.w	sl, [sp]
 8019290:	464b      	mov	r3, r9
 8019292:	aa03      	add	r2, sp, #12
 8019294:	4621      	mov	r1, r4
 8019296:	4640      	mov	r0, r8
 8019298:	f7ff fee6 	bl	8019068 <_printf_common>
 801929c:	3001      	adds	r0, #1
 801929e:	d14a      	bne.n	8019336 <_printf_i+0x1f2>
 80192a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192a4:	b004      	add	sp, #16
 80192a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192aa:	6823      	ldr	r3, [r4, #0]
 80192ac:	f043 0320 	orr.w	r3, r3, #32
 80192b0:	6023      	str	r3, [r4, #0]
 80192b2:	4833      	ldr	r0, [pc, #204]	@ (8019380 <_printf_i+0x23c>)
 80192b4:	2778      	movs	r7, #120	@ 0x78
 80192b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80192ba:	6823      	ldr	r3, [r4, #0]
 80192bc:	6831      	ldr	r1, [r6, #0]
 80192be:	061f      	lsls	r7, r3, #24
 80192c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80192c4:	d402      	bmi.n	80192cc <_printf_i+0x188>
 80192c6:	065f      	lsls	r7, r3, #25
 80192c8:	bf48      	it	mi
 80192ca:	b2ad      	uxthmi	r5, r5
 80192cc:	6031      	str	r1, [r6, #0]
 80192ce:	07d9      	lsls	r1, r3, #31
 80192d0:	bf44      	itt	mi
 80192d2:	f043 0320 	orrmi.w	r3, r3, #32
 80192d6:	6023      	strmi	r3, [r4, #0]
 80192d8:	b11d      	cbz	r5, 80192e2 <_printf_i+0x19e>
 80192da:	2310      	movs	r3, #16
 80192dc:	e7ac      	b.n	8019238 <_printf_i+0xf4>
 80192de:	4827      	ldr	r0, [pc, #156]	@ (801937c <_printf_i+0x238>)
 80192e0:	e7e9      	b.n	80192b6 <_printf_i+0x172>
 80192e2:	6823      	ldr	r3, [r4, #0]
 80192e4:	f023 0320 	bic.w	r3, r3, #32
 80192e8:	6023      	str	r3, [r4, #0]
 80192ea:	e7f6      	b.n	80192da <_printf_i+0x196>
 80192ec:	4616      	mov	r6, r2
 80192ee:	e7bd      	b.n	801926c <_printf_i+0x128>
 80192f0:	6833      	ldr	r3, [r6, #0]
 80192f2:	6825      	ldr	r5, [r4, #0]
 80192f4:	6961      	ldr	r1, [r4, #20]
 80192f6:	1d18      	adds	r0, r3, #4
 80192f8:	6030      	str	r0, [r6, #0]
 80192fa:	062e      	lsls	r6, r5, #24
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	d501      	bpl.n	8019304 <_printf_i+0x1c0>
 8019300:	6019      	str	r1, [r3, #0]
 8019302:	e002      	b.n	801930a <_printf_i+0x1c6>
 8019304:	0668      	lsls	r0, r5, #25
 8019306:	d5fb      	bpl.n	8019300 <_printf_i+0x1bc>
 8019308:	8019      	strh	r1, [r3, #0]
 801930a:	2300      	movs	r3, #0
 801930c:	6123      	str	r3, [r4, #16]
 801930e:	4616      	mov	r6, r2
 8019310:	e7bc      	b.n	801928c <_printf_i+0x148>
 8019312:	6833      	ldr	r3, [r6, #0]
 8019314:	1d1a      	adds	r2, r3, #4
 8019316:	6032      	str	r2, [r6, #0]
 8019318:	681e      	ldr	r6, [r3, #0]
 801931a:	6862      	ldr	r2, [r4, #4]
 801931c:	2100      	movs	r1, #0
 801931e:	4630      	mov	r0, r6
 8019320:	f7e6 ff96 	bl	8000250 <memchr>
 8019324:	b108      	cbz	r0, 801932a <_printf_i+0x1e6>
 8019326:	1b80      	subs	r0, r0, r6
 8019328:	6060      	str	r0, [r4, #4]
 801932a:	6863      	ldr	r3, [r4, #4]
 801932c:	6123      	str	r3, [r4, #16]
 801932e:	2300      	movs	r3, #0
 8019330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019334:	e7aa      	b.n	801928c <_printf_i+0x148>
 8019336:	6923      	ldr	r3, [r4, #16]
 8019338:	4632      	mov	r2, r6
 801933a:	4649      	mov	r1, r9
 801933c:	4640      	mov	r0, r8
 801933e:	47d0      	blx	sl
 8019340:	3001      	adds	r0, #1
 8019342:	d0ad      	beq.n	80192a0 <_printf_i+0x15c>
 8019344:	6823      	ldr	r3, [r4, #0]
 8019346:	079b      	lsls	r3, r3, #30
 8019348:	d413      	bmi.n	8019372 <_printf_i+0x22e>
 801934a:	68e0      	ldr	r0, [r4, #12]
 801934c:	9b03      	ldr	r3, [sp, #12]
 801934e:	4298      	cmp	r0, r3
 8019350:	bfb8      	it	lt
 8019352:	4618      	movlt	r0, r3
 8019354:	e7a6      	b.n	80192a4 <_printf_i+0x160>
 8019356:	2301      	movs	r3, #1
 8019358:	4632      	mov	r2, r6
 801935a:	4649      	mov	r1, r9
 801935c:	4640      	mov	r0, r8
 801935e:	47d0      	blx	sl
 8019360:	3001      	adds	r0, #1
 8019362:	d09d      	beq.n	80192a0 <_printf_i+0x15c>
 8019364:	3501      	adds	r5, #1
 8019366:	68e3      	ldr	r3, [r4, #12]
 8019368:	9903      	ldr	r1, [sp, #12]
 801936a:	1a5b      	subs	r3, r3, r1
 801936c:	42ab      	cmp	r3, r5
 801936e:	dcf2      	bgt.n	8019356 <_printf_i+0x212>
 8019370:	e7eb      	b.n	801934a <_printf_i+0x206>
 8019372:	2500      	movs	r5, #0
 8019374:	f104 0619 	add.w	r6, r4, #25
 8019378:	e7f5      	b.n	8019366 <_printf_i+0x222>
 801937a:	bf00      	nop
 801937c:	0801c027 	.word	0x0801c027
 8019380:	0801c038 	.word	0x0801c038

08019384 <__sflush_r>:
 8019384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801938c:	0716      	lsls	r6, r2, #28
 801938e:	4605      	mov	r5, r0
 8019390:	460c      	mov	r4, r1
 8019392:	d454      	bmi.n	801943e <__sflush_r+0xba>
 8019394:	684b      	ldr	r3, [r1, #4]
 8019396:	2b00      	cmp	r3, #0
 8019398:	dc02      	bgt.n	80193a0 <__sflush_r+0x1c>
 801939a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801939c:	2b00      	cmp	r3, #0
 801939e:	dd48      	ble.n	8019432 <__sflush_r+0xae>
 80193a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80193a2:	2e00      	cmp	r6, #0
 80193a4:	d045      	beq.n	8019432 <__sflush_r+0xae>
 80193a6:	2300      	movs	r3, #0
 80193a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80193ac:	682f      	ldr	r7, [r5, #0]
 80193ae:	6a21      	ldr	r1, [r4, #32]
 80193b0:	602b      	str	r3, [r5, #0]
 80193b2:	d030      	beq.n	8019416 <__sflush_r+0x92>
 80193b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80193b6:	89a3      	ldrh	r3, [r4, #12]
 80193b8:	0759      	lsls	r1, r3, #29
 80193ba:	d505      	bpl.n	80193c8 <__sflush_r+0x44>
 80193bc:	6863      	ldr	r3, [r4, #4]
 80193be:	1ad2      	subs	r2, r2, r3
 80193c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80193c2:	b10b      	cbz	r3, 80193c8 <__sflush_r+0x44>
 80193c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80193c6:	1ad2      	subs	r2, r2, r3
 80193c8:	2300      	movs	r3, #0
 80193ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80193cc:	6a21      	ldr	r1, [r4, #32]
 80193ce:	4628      	mov	r0, r5
 80193d0:	47b0      	blx	r6
 80193d2:	1c43      	adds	r3, r0, #1
 80193d4:	89a3      	ldrh	r3, [r4, #12]
 80193d6:	d106      	bne.n	80193e6 <__sflush_r+0x62>
 80193d8:	6829      	ldr	r1, [r5, #0]
 80193da:	291d      	cmp	r1, #29
 80193dc:	d82b      	bhi.n	8019436 <__sflush_r+0xb2>
 80193de:	4a2a      	ldr	r2, [pc, #168]	@ (8019488 <__sflush_r+0x104>)
 80193e0:	410a      	asrs	r2, r1
 80193e2:	07d6      	lsls	r6, r2, #31
 80193e4:	d427      	bmi.n	8019436 <__sflush_r+0xb2>
 80193e6:	2200      	movs	r2, #0
 80193e8:	6062      	str	r2, [r4, #4]
 80193ea:	04d9      	lsls	r1, r3, #19
 80193ec:	6922      	ldr	r2, [r4, #16]
 80193ee:	6022      	str	r2, [r4, #0]
 80193f0:	d504      	bpl.n	80193fc <__sflush_r+0x78>
 80193f2:	1c42      	adds	r2, r0, #1
 80193f4:	d101      	bne.n	80193fa <__sflush_r+0x76>
 80193f6:	682b      	ldr	r3, [r5, #0]
 80193f8:	b903      	cbnz	r3, 80193fc <__sflush_r+0x78>
 80193fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80193fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80193fe:	602f      	str	r7, [r5, #0]
 8019400:	b1b9      	cbz	r1, 8019432 <__sflush_r+0xae>
 8019402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019406:	4299      	cmp	r1, r3
 8019408:	d002      	beq.n	8019410 <__sflush_r+0x8c>
 801940a:	4628      	mov	r0, r5
 801940c:	f7ff fb40 	bl	8018a90 <_free_r>
 8019410:	2300      	movs	r3, #0
 8019412:	6363      	str	r3, [r4, #52]	@ 0x34
 8019414:	e00d      	b.n	8019432 <__sflush_r+0xae>
 8019416:	2301      	movs	r3, #1
 8019418:	4628      	mov	r0, r5
 801941a:	47b0      	blx	r6
 801941c:	4602      	mov	r2, r0
 801941e:	1c50      	adds	r0, r2, #1
 8019420:	d1c9      	bne.n	80193b6 <__sflush_r+0x32>
 8019422:	682b      	ldr	r3, [r5, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d0c6      	beq.n	80193b6 <__sflush_r+0x32>
 8019428:	2b1d      	cmp	r3, #29
 801942a:	d001      	beq.n	8019430 <__sflush_r+0xac>
 801942c:	2b16      	cmp	r3, #22
 801942e:	d11e      	bne.n	801946e <__sflush_r+0xea>
 8019430:	602f      	str	r7, [r5, #0]
 8019432:	2000      	movs	r0, #0
 8019434:	e022      	b.n	801947c <__sflush_r+0xf8>
 8019436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801943a:	b21b      	sxth	r3, r3
 801943c:	e01b      	b.n	8019476 <__sflush_r+0xf2>
 801943e:	690f      	ldr	r7, [r1, #16]
 8019440:	2f00      	cmp	r7, #0
 8019442:	d0f6      	beq.n	8019432 <__sflush_r+0xae>
 8019444:	0793      	lsls	r3, r2, #30
 8019446:	680e      	ldr	r6, [r1, #0]
 8019448:	bf08      	it	eq
 801944a:	694b      	ldreq	r3, [r1, #20]
 801944c:	600f      	str	r7, [r1, #0]
 801944e:	bf18      	it	ne
 8019450:	2300      	movne	r3, #0
 8019452:	eba6 0807 	sub.w	r8, r6, r7
 8019456:	608b      	str	r3, [r1, #8]
 8019458:	f1b8 0f00 	cmp.w	r8, #0
 801945c:	dde9      	ble.n	8019432 <__sflush_r+0xae>
 801945e:	6a21      	ldr	r1, [r4, #32]
 8019460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019462:	4643      	mov	r3, r8
 8019464:	463a      	mov	r2, r7
 8019466:	4628      	mov	r0, r5
 8019468:	47b0      	blx	r6
 801946a:	2800      	cmp	r0, #0
 801946c:	dc08      	bgt.n	8019480 <__sflush_r+0xfc>
 801946e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019476:	81a3      	strh	r3, [r4, #12]
 8019478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019480:	4407      	add	r7, r0
 8019482:	eba8 0800 	sub.w	r8, r8, r0
 8019486:	e7e7      	b.n	8019458 <__sflush_r+0xd4>
 8019488:	dfbffffe 	.word	0xdfbffffe

0801948c <_fflush_r>:
 801948c:	b538      	push	{r3, r4, r5, lr}
 801948e:	690b      	ldr	r3, [r1, #16]
 8019490:	4605      	mov	r5, r0
 8019492:	460c      	mov	r4, r1
 8019494:	b913      	cbnz	r3, 801949c <_fflush_r+0x10>
 8019496:	2500      	movs	r5, #0
 8019498:	4628      	mov	r0, r5
 801949a:	bd38      	pop	{r3, r4, r5, pc}
 801949c:	b118      	cbz	r0, 80194a6 <_fflush_r+0x1a>
 801949e:	6a03      	ldr	r3, [r0, #32]
 80194a0:	b90b      	cbnz	r3, 80194a6 <_fflush_r+0x1a>
 80194a2:	f7fe ffe3 	bl	801846c <__sinit>
 80194a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d0f3      	beq.n	8019496 <_fflush_r+0xa>
 80194ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80194b0:	07d0      	lsls	r0, r2, #31
 80194b2:	d404      	bmi.n	80194be <_fflush_r+0x32>
 80194b4:	0599      	lsls	r1, r3, #22
 80194b6:	d402      	bmi.n	80194be <_fflush_r+0x32>
 80194b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194ba:	f7ff faa6 	bl	8018a0a <__retarget_lock_acquire_recursive>
 80194be:	4628      	mov	r0, r5
 80194c0:	4621      	mov	r1, r4
 80194c2:	f7ff ff5f 	bl	8019384 <__sflush_r>
 80194c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80194c8:	07da      	lsls	r2, r3, #31
 80194ca:	4605      	mov	r5, r0
 80194cc:	d4e4      	bmi.n	8019498 <_fflush_r+0xc>
 80194ce:	89a3      	ldrh	r3, [r4, #12]
 80194d0:	059b      	lsls	r3, r3, #22
 80194d2:	d4e1      	bmi.n	8019498 <_fflush_r+0xc>
 80194d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194d6:	f7ff fa99 	bl	8018a0c <__retarget_lock_release_recursive>
 80194da:	e7dd      	b.n	8019498 <_fflush_r+0xc>

080194dc <fiprintf>:
 80194dc:	b40e      	push	{r1, r2, r3}
 80194de:	b503      	push	{r0, r1, lr}
 80194e0:	4601      	mov	r1, r0
 80194e2:	ab03      	add	r3, sp, #12
 80194e4:	4805      	ldr	r0, [pc, #20]	@ (80194fc <fiprintf+0x20>)
 80194e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ea:	6800      	ldr	r0, [r0, #0]
 80194ec:	9301      	str	r3, [sp, #4]
 80194ee:	f7ff fca3 	bl	8018e38 <_vfiprintf_r>
 80194f2:	b002      	add	sp, #8
 80194f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194f8:	b003      	add	sp, #12
 80194fa:	4770      	bx	lr
 80194fc:	200006dc 	.word	0x200006dc

08019500 <__swhatbuf_r>:
 8019500:	b570      	push	{r4, r5, r6, lr}
 8019502:	460c      	mov	r4, r1
 8019504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019508:	2900      	cmp	r1, #0
 801950a:	b096      	sub	sp, #88	@ 0x58
 801950c:	4615      	mov	r5, r2
 801950e:	461e      	mov	r6, r3
 8019510:	da0d      	bge.n	801952e <__swhatbuf_r+0x2e>
 8019512:	89a3      	ldrh	r3, [r4, #12]
 8019514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019518:	f04f 0100 	mov.w	r1, #0
 801951c:	bf14      	ite	ne
 801951e:	2340      	movne	r3, #64	@ 0x40
 8019520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019524:	2000      	movs	r0, #0
 8019526:	6031      	str	r1, [r6, #0]
 8019528:	602b      	str	r3, [r5, #0]
 801952a:	b016      	add	sp, #88	@ 0x58
 801952c:	bd70      	pop	{r4, r5, r6, pc}
 801952e:	466a      	mov	r2, sp
 8019530:	f000 f848 	bl	80195c4 <_fstat_r>
 8019534:	2800      	cmp	r0, #0
 8019536:	dbec      	blt.n	8019512 <__swhatbuf_r+0x12>
 8019538:	9901      	ldr	r1, [sp, #4]
 801953a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801953e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019542:	4259      	negs	r1, r3
 8019544:	4159      	adcs	r1, r3
 8019546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801954a:	e7eb      	b.n	8019524 <__swhatbuf_r+0x24>

0801954c <__smakebuf_r>:
 801954c:	898b      	ldrh	r3, [r1, #12]
 801954e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019550:	079d      	lsls	r5, r3, #30
 8019552:	4606      	mov	r6, r0
 8019554:	460c      	mov	r4, r1
 8019556:	d507      	bpl.n	8019568 <__smakebuf_r+0x1c>
 8019558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801955c:	6023      	str	r3, [r4, #0]
 801955e:	6123      	str	r3, [r4, #16]
 8019560:	2301      	movs	r3, #1
 8019562:	6163      	str	r3, [r4, #20]
 8019564:	b003      	add	sp, #12
 8019566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019568:	ab01      	add	r3, sp, #4
 801956a:	466a      	mov	r2, sp
 801956c:	f7ff ffc8 	bl	8019500 <__swhatbuf_r>
 8019570:	9f00      	ldr	r7, [sp, #0]
 8019572:	4605      	mov	r5, r0
 8019574:	4639      	mov	r1, r7
 8019576:	4630      	mov	r0, r6
 8019578:	f7fe fd46 	bl	8018008 <_malloc_r>
 801957c:	b948      	cbnz	r0, 8019592 <__smakebuf_r+0x46>
 801957e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019582:	059a      	lsls	r2, r3, #22
 8019584:	d4ee      	bmi.n	8019564 <__smakebuf_r+0x18>
 8019586:	f023 0303 	bic.w	r3, r3, #3
 801958a:	f043 0302 	orr.w	r3, r3, #2
 801958e:	81a3      	strh	r3, [r4, #12]
 8019590:	e7e2      	b.n	8019558 <__smakebuf_r+0xc>
 8019592:	89a3      	ldrh	r3, [r4, #12]
 8019594:	6020      	str	r0, [r4, #0]
 8019596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801959a:	81a3      	strh	r3, [r4, #12]
 801959c:	9b01      	ldr	r3, [sp, #4]
 801959e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80195a2:	b15b      	cbz	r3, 80195bc <__smakebuf_r+0x70>
 80195a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195a8:	4630      	mov	r0, r6
 80195aa:	f000 f81d 	bl	80195e8 <_isatty_r>
 80195ae:	b128      	cbz	r0, 80195bc <__smakebuf_r+0x70>
 80195b0:	89a3      	ldrh	r3, [r4, #12]
 80195b2:	f023 0303 	bic.w	r3, r3, #3
 80195b6:	f043 0301 	orr.w	r3, r3, #1
 80195ba:	81a3      	strh	r3, [r4, #12]
 80195bc:	89a3      	ldrh	r3, [r4, #12]
 80195be:	431d      	orrs	r5, r3
 80195c0:	81a5      	strh	r5, [r4, #12]
 80195c2:	e7cf      	b.n	8019564 <__smakebuf_r+0x18>

080195c4 <_fstat_r>:
 80195c4:	b538      	push	{r3, r4, r5, lr}
 80195c6:	4d07      	ldr	r5, [pc, #28]	@ (80195e4 <_fstat_r+0x20>)
 80195c8:	2300      	movs	r3, #0
 80195ca:	4604      	mov	r4, r0
 80195cc:	4608      	mov	r0, r1
 80195ce:	4611      	mov	r1, r2
 80195d0:	602b      	str	r3, [r5, #0]
 80195d2:	f7e8 febb 	bl	800234c <_fstat>
 80195d6:	1c43      	adds	r3, r0, #1
 80195d8:	d102      	bne.n	80195e0 <_fstat_r+0x1c>
 80195da:	682b      	ldr	r3, [r5, #0]
 80195dc:	b103      	cbz	r3, 80195e0 <_fstat_r+0x1c>
 80195de:	6023      	str	r3, [r4, #0]
 80195e0:	bd38      	pop	{r3, r4, r5, pc}
 80195e2:	bf00      	nop
 80195e4:	2000b530 	.word	0x2000b530

080195e8 <_isatty_r>:
 80195e8:	b538      	push	{r3, r4, r5, lr}
 80195ea:	4d06      	ldr	r5, [pc, #24]	@ (8019604 <_isatty_r+0x1c>)
 80195ec:	2300      	movs	r3, #0
 80195ee:	4604      	mov	r4, r0
 80195f0:	4608      	mov	r0, r1
 80195f2:	602b      	str	r3, [r5, #0]
 80195f4:	f7e8 feba 	bl	800236c <_isatty>
 80195f8:	1c43      	adds	r3, r0, #1
 80195fa:	d102      	bne.n	8019602 <_isatty_r+0x1a>
 80195fc:	682b      	ldr	r3, [r5, #0]
 80195fe:	b103      	cbz	r3, 8019602 <_isatty_r+0x1a>
 8019600:	6023      	str	r3, [r4, #0]
 8019602:	bd38      	pop	{r3, r4, r5, pc}
 8019604:	2000b530 	.word	0x2000b530

08019608 <abort>:
 8019608:	b508      	push	{r3, lr}
 801960a:	2006      	movs	r0, #6
 801960c:	f000 f82c 	bl	8019668 <raise>
 8019610:	2001      	movs	r0, #1
 8019612:	f7e8 fe4b 	bl	80022ac <_exit>

08019616 <_raise_r>:
 8019616:	291f      	cmp	r1, #31
 8019618:	b538      	push	{r3, r4, r5, lr}
 801961a:	4605      	mov	r5, r0
 801961c:	460c      	mov	r4, r1
 801961e:	d904      	bls.n	801962a <_raise_r+0x14>
 8019620:	2316      	movs	r3, #22
 8019622:	6003      	str	r3, [r0, #0]
 8019624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019628:	bd38      	pop	{r3, r4, r5, pc}
 801962a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801962c:	b112      	cbz	r2, 8019634 <_raise_r+0x1e>
 801962e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019632:	b94b      	cbnz	r3, 8019648 <_raise_r+0x32>
 8019634:	4628      	mov	r0, r5
 8019636:	f000 f831 	bl	801969c <_getpid_r>
 801963a:	4622      	mov	r2, r4
 801963c:	4601      	mov	r1, r0
 801963e:	4628      	mov	r0, r5
 8019640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019644:	f000 b818 	b.w	8019678 <_kill_r>
 8019648:	2b01      	cmp	r3, #1
 801964a:	d00a      	beq.n	8019662 <_raise_r+0x4c>
 801964c:	1c59      	adds	r1, r3, #1
 801964e:	d103      	bne.n	8019658 <_raise_r+0x42>
 8019650:	2316      	movs	r3, #22
 8019652:	6003      	str	r3, [r0, #0]
 8019654:	2001      	movs	r0, #1
 8019656:	e7e7      	b.n	8019628 <_raise_r+0x12>
 8019658:	2100      	movs	r1, #0
 801965a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801965e:	4620      	mov	r0, r4
 8019660:	4798      	blx	r3
 8019662:	2000      	movs	r0, #0
 8019664:	e7e0      	b.n	8019628 <_raise_r+0x12>
	...

08019668 <raise>:
 8019668:	4b02      	ldr	r3, [pc, #8]	@ (8019674 <raise+0xc>)
 801966a:	4601      	mov	r1, r0
 801966c:	6818      	ldr	r0, [r3, #0]
 801966e:	f7ff bfd2 	b.w	8019616 <_raise_r>
 8019672:	bf00      	nop
 8019674:	200006dc 	.word	0x200006dc

08019678 <_kill_r>:
 8019678:	b538      	push	{r3, r4, r5, lr}
 801967a:	4d07      	ldr	r5, [pc, #28]	@ (8019698 <_kill_r+0x20>)
 801967c:	2300      	movs	r3, #0
 801967e:	4604      	mov	r4, r0
 8019680:	4608      	mov	r0, r1
 8019682:	4611      	mov	r1, r2
 8019684:	602b      	str	r3, [r5, #0]
 8019686:	f7e8 fe01 	bl	800228c <_kill>
 801968a:	1c43      	adds	r3, r0, #1
 801968c:	d102      	bne.n	8019694 <_kill_r+0x1c>
 801968e:	682b      	ldr	r3, [r5, #0]
 8019690:	b103      	cbz	r3, 8019694 <_kill_r+0x1c>
 8019692:	6023      	str	r3, [r4, #0]
 8019694:	bd38      	pop	{r3, r4, r5, pc}
 8019696:	bf00      	nop
 8019698:	2000b530 	.word	0x2000b530

0801969c <_getpid_r>:
 801969c:	f7e8 bdee 	b.w	800227c <_getpid>

080196a0 <atan2>:
 80196a0:	f000 bcd6 	b.w	801a050 <__ieee754_atan2>

080196a4 <sqrt>:
 80196a4:	b538      	push	{r3, r4, r5, lr}
 80196a6:	ed2d 8b02 	vpush	{d8}
 80196aa:	ec55 4b10 	vmov	r4, r5, d0
 80196ae:	f000 fa6f 	bl	8019b90 <__ieee754_sqrt>
 80196b2:	4622      	mov	r2, r4
 80196b4:	462b      	mov	r3, r5
 80196b6:	4620      	mov	r0, r4
 80196b8:	4629      	mov	r1, r5
 80196ba:	eeb0 8a40 	vmov.f32	s16, s0
 80196be:	eef0 8a60 	vmov.f32	s17, s1
 80196c2:	f7e7 fa6b 	bl	8000b9c <__aeabi_dcmpun>
 80196c6:	b990      	cbnz	r0, 80196ee <sqrt+0x4a>
 80196c8:	2200      	movs	r2, #0
 80196ca:	2300      	movs	r3, #0
 80196cc:	4620      	mov	r0, r4
 80196ce:	4629      	mov	r1, r5
 80196d0:	f7e7 fa3c 	bl	8000b4c <__aeabi_dcmplt>
 80196d4:	b158      	cbz	r0, 80196ee <sqrt+0x4a>
 80196d6:	f7ff f96d 	bl	80189b4 <__errno>
 80196da:	2321      	movs	r3, #33	@ 0x21
 80196dc:	6003      	str	r3, [r0, #0]
 80196de:	2200      	movs	r2, #0
 80196e0:	2300      	movs	r3, #0
 80196e2:	4610      	mov	r0, r2
 80196e4:	4619      	mov	r1, r3
 80196e6:	f7e7 f8e9 	bl	80008bc <__aeabi_ddiv>
 80196ea:	ec41 0b18 	vmov	d8, r0, r1
 80196ee:	eeb0 0a48 	vmov.f32	s0, s16
 80196f2:	eef0 0a68 	vmov.f32	s1, s17
 80196f6:	ecbd 8b02 	vpop	{d8}
 80196fa:	bd38      	pop	{r3, r4, r5, pc}
 80196fc:	0000      	movs	r0, r0
	...

08019700 <atan>:
 8019700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019704:	ec55 4b10 	vmov	r4, r5, d0
 8019708:	4bbf      	ldr	r3, [pc, #764]	@ (8019a08 <atan+0x308>)
 801970a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801970e:	429e      	cmp	r6, r3
 8019710:	46ab      	mov	fp, r5
 8019712:	d918      	bls.n	8019746 <atan+0x46>
 8019714:	4bbd      	ldr	r3, [pc, #756]	@ (8019a0c <atan+0x30c>)
 8019716:	429e      	cmp	r6, r3
 8019718:	d801      	bhi.n	801971e <atan+0x1e>
 801971a:	d109      	bne.n	8019730 <atan+0x30>
 801971c:	b144      	cbz	r4, 8019730 <atan+0x30>
 801971e:	4622      	mov	r2, r4
 8019720:	462b      	mov	r3, r5
 8019722:	4620      	mov	r0, r4
 8019724:	4629      	mov	r1, r5
 8019726:	f7e6 fde9 	bl	80002fc <__adddf3>
 801972a:	4604      	mov	r4, r0
 801972c:	460d      	mov	r5, r1
 801972e:	e006      	b.n	801973e <atan+0x3e>
 8019730:	f1bb 0f00 	cmp.w	fp, #0
 8019734:	f340 812b 	ble.w	801998e <atan+0x28e>
 8019738:	a597      	add	r5, pc, #604	@ (adr r5, 8019998 <atan+0x298>)
 801973a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801973e:	ec45 4b10 	vmov	d0, r4, r5
 8019742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019746:	4bb2      	ldr	r3, [pc, #712]	@ (8019a10 <atan+0x310>)
 8019748:	429e      	cmp	r6, r3
 801974a:	d813      	bhi.n	8019774 <atan+0x74>
 801974c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8019750:	429e      	cmp	r6, r3
 8019752:	d80c      	bhi.n	801976e <atan+0x6e>
 8019754:	a392      	add	r3, pc, #584	@ (adr r3, 80199a0 <atan+0x2a0>)
 8019756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975a:	4620      	mov	r0, r4
 801975c:	4629      	mov	r1, r5
 801975e:	f7e6 fdcd 	bl	80002fc <__adddf3>
 8019762:	4bac      	ldr	r3, [pc, #688]	@ (8019a14 <atan+0x314>)
 8019764:	2200      	movs	r2, #0
 8019766:	f7e7 fa0f 	bl	8000b88 <__aeabi_dcmpgt>
 801976a:	2800      	cmp	r0, #0
 801976c:	d1e7      	bne.n	801973e <atan+0x3e>
 801976e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8019772:	e029      	b.n	80197c8 <atan+0xc8>
 8019774:	f000 f9b0 	bl	8019ad8 <fabs>
 8019778:	4ba7      	ldr	r3, [pc, #668]	@ (8019a18 <atan+0x318>)
 801977a:	429e      	cmp	r6, r3
 801977c:	ec55 4b10 	vmov	r4, r5, d0
 8019780:	f200 80bc 	bhi.w	80198fc <atan+0x1fc>
 8019784:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8019788:	429e      	cmp	r6, r3
 801978a:	f200 809e 	bhi.w	80198ca <atan+0x1ca>
 801978e:	4622      	mov	r2, r4
 8019790:	462b      	mov	r3, r5
 8019792:	4620      	mov	r0, r4
 8019794:	4629      	mov	r1, r5
 8019796:	f7e6 fdb1 	bl	80002fc <__adddf3>
 801979a:	4b9e      	ldr	r3, [pc, #632]	@ (8019a14 <atan+0x314>)
 801979c:	2200      	movs	r2, #0
 801979e:	f7e6 fdab 	bl	80002f8 <__aeabi_dsub>
 80197a2:	2200      	movs	r2, #0
 80197a4:	4606      	mov	r6, r0
 80197a6:	460f      	mov	r7, r1
 80197a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80197ac:	4620      	mov	r0, r4
 80197ae:	4629      	mov	r1, r5
 80197b0:	f7e6 fda4 	bl	80002fc <__adddf3>
 80197b4:	4602      	mov	r2, r0
 80197b6:	460b      	mov	r3, r1
 80197b8:	4630      	mov	r0, r6
 80197ba:	4639      	mov	r1, r7
 80197bc:	f7e7 f87e 	bl	80008bc <__aeabi_ddiv>
 80197c0:	f04f 0a00 	mov.w	sl, #0
 80197c4:	4604      	mov	r4, r0
 80197c6:	460d      	mov	r5, r1
 80197c8:	4622      	mov	r2, r4
 80197ca:	462b      	mov	r3, r5
 80197cc:	4620      	mov	r0, r4
 80197ce:	4629      	mov	r1, r5
 80197d0:	f7e6 ff4a 	bl	8000668 <__aeabi_dmul>
 80197d4:	4602      	mov	r2, r0
 80197d6:	460b      	mov	r3, r1
 80197d8:	4680      	mov	r8, r0
 80197da:	4689      	mov	r9, r1
 80197dc:	f7e6 ff44 	bl	8000668 <__aeabi_dmul>
 80197e0:	a371      	add	r3, pc, #452	@ (adr r3, 80199a8 <atan+0x2a8>)
 80197e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e6:	4606      	mov	r6, r0
 80197e8:	460f      	mov	r7, r1
 80197ea:	f7e6 ff3d 	bl	8000668 <__aeabi_dmul>
 80197ee:	a370      	add	r3, pc, #448	@ (adr r3, 80199b0 <atan+0x2b0>)
 80197f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f4:	f7e6 fd82 	bl	80002fc <__adddf3>
 80197f8:	4632      	mov	r2, r6
 80197fa:	463b      	mov	r3, r7
 80197fc:	f7e6 ff34 	bl	8000668 <__aeabi_dmul>
 8019800:	a36d      	add	r3, pc, #436	@ (adr r3, 80199b8 <atan+0x2b8>)
 8019802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019806:	f7e6 fd79 	bl	80002fc <__adddf3>
 801980a:	4632      	mov	r2, r6
 801980c:	463b      	mov	r3, r7
 801980e:	f7e6 ff2b 	bl	8000668 <__aeabi_dmul>
 8019812:	a36b      	add	r3, pc, #428	@ (adr r3, 80199c0 <atan+0x2c0>)
 8019814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019818:	f7e6 fd70 	bl	80002fc <__adddf3>
 801981c:	4632      	mov	r2, r6
 801981e:	463b      	mov	r3, r7
 8019820:	f7e6 ff22 	bl	8000668 <__aeabi_dmul>
 8019824:	a368      	add	r3, pc, #416	@ (adr r3, 80199c8 <atan+0x2c8>)
 8019826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801982a:	f7e6 fd67 	bl	80002fc <__adddf3>
 801982e:	4632      	mov	r2, r6
 8019830:	463b      	mov	r3, r7
 8019832:	f7e6 ff19 	bl	8000668 <__aeabi_dmul>
 8019836:	a366      	add	r3, pc, #408	@ (adr r3, 80199d0 <atan+0x2d0>)
 8019838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801983c:	f7e6 fd5e 	bl	80002fc <__adddf3>
 8019840:	4642      	mov	r2, r8
 8019842:	464b      	mov	r3, r9
 8019844:	f7e6 ff10 	bl	8000668 <__aeabi_dmul>
 8019848:	a363      	add	r3, pc, #396	@ (adr r3, 80199d8 <atan+0x2d8>)
 801984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984e:	4680      	mov	r8, r0
 8019850:	4689      	mov	r9, r1
 8019852:	4630      	mov	r0, r6
 8019854:	4639      	mov	r1, r7
 8019856:	f7e6 ff07 	bl	8000668 <__aeabi_dmul>
 801985a:	a361      	add	r3, pc, #388	@ (adr r3, 80199e0 <atan+0x2e0>)
 801985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019860:	f7e6 fd4a 	bl	80002f8 <__aeabi_dsub>
 8019864:	4632      	mov	r2, r6
 8019866:	463b      	mov	r3, r7
 8019868:	f7e6 fefe 	bl	8000668 <__aeabi_dmul>
 801986c:	a35e      	add	r3, pc, #376	@ (adr r3, 80199e8 <atan+0x2e8>)
 801986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019872:	f7e6 fd41 	bl	80002f8 <__aeabi_dsub>
 8019876:	4632      	mov	r2, r6
 8019878:	463b      	mov	r3, r7
 801987a:	f7e6 fef5 	bl	8000668 <__aeabi_dmul>
 801987e:	a35c      	add	r3, pc, #368	@ (adr r3, 80199f0 <atan+0x2f0>)
 8019880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019884:	f7e6 fd38 	bl	80002f8 <__aeabi_dsub>
 8019888:	4632      	mov	r2, r6
 801988a:	463b      	mov	r3, r7
 801988c:	f7e6 feec 	bl	8000668 <__aeabi_dmul>
 8019890:	a359      	add	r3, pc, #356	@ (adr r3, 80199f8 <atan+0x2f8>)
 8019892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019896:	f7e6 fd2f 	bl	80002f8 <__aeabi_dsub>
 801989a:	4632      	mov	r2, r6
 801989c:	463b      	mov	r3, r7
 801989e:	f7e6 fee3 	bl	8000668 <__aeabi_dmul>
 80198a2:	4602      	mov	r2, r0
 80198a4:	460b      	mov	r3, r1
 80198a6:	4640      	mov	r0, r8
 80198a8:	4649      	mov	r1, r9
 80198aa:	f7e6 fd27 	bl	80002fc <__adddf3>
 80198ae:	4622      	mov	r2, r4
 80198b0:	462b      	mov	r3, r5
 80198b2:	f7e6 fed9 	bl	8000668 <__aeabi_dmul>
 80198b6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 80198ba:	4602      	mov	r2, r0
 80198bc:	460b      	mov	r3, r1
 80198be:	d148      	bne.n	8019952 <atan+0x252>
 80198c0:	4620      	mov	r0, r4
 80198c2:	4629      	mov	r1, r5
 80198c4:	f7e6 fd18 	bl	80002f8 <__aeabi_dsub>
 80198c8:	e72f      	b.n	801972a <atan+0x2a>
 80198ca:	4b52      	ldr	r3, [pc, #328]	@ (8019a14 <atan+0x314>)
 80198cc:	2200      	movs	r2, #0
 80198ce:	4620      	mov	r0, r4
 80198d0:	4629      	mov	r1, r5
 80198d2:	f7e6 fd11 	bl	80002f8 <__aeabi_dsub>
 80198d6:	4b4f      	ldr	r3, [pc, #316]	@ (8019a14 <atan+0x314>)
 80198d8:	4606      	mov	r6, r0
 80198da:	460f      	mov	r7, r1
 80198dc:	2200      	movs	r2, #0
 80198de:	4620      	mov	r0, r4
 80198e0:	4629      	mov	r1, r5
 80198e2:	f7e6 fd0b 	bl	80002fc <__adddf3>
 80198e6:	4602      	mov	r2, r0
 80198e8:	460b      	mov	r3, r1
 80198ea:	4630      	mov	r0, r6
 80198ec:	4639      	mov	r1, r7
 80198ee:	f7e6 ffe5 	bl	80008bc <__aeabi_ddiv>
 80198f2:	f04f 0a01 	mov.w	sl, #1
 80198f6:	4604      	mov	r4, r0
 80198f8:	460d      	mov	r5, r1
 80198fa:	e765      	b.n	80197c8 <atan+0xc8>
 80198fc:	4b47      	ldr	r3, [pc, #284]	@ (8019a1c <atan+0x31c>)
 80198fe:	429e      	cmp	r6, r3
 8019900:	d21c      	bcs.n	801993c <atan+0x23c>
 8019902:	4b47      	ldr	r3, [pc, #284]	@ (8019a20 <atan+0x320>)
 8019904:	2200      	movs	r2, #0
 8019906:	4620      	mov	r0, r4
 8019908:	4629      	mov	r1, r5
 801990a:	f7e6 fcf5 	bl	80002f8 <__aeabi_dsub>
 801990e:	4b44      	ldr	r3, [pc, #272]	@ (8019a20 <atan+0x320>)
 8019910:	4606      	mov	r6, r0
 8019912:	460f      	mov	r7, r1
 8019914:	2200      	movs	r2, #0
 8019916:	4620      	mov	r0, r4
 8019918:	4629      	mov	r1, r5
 801991a:	f7e6 fea5 	bl	8000668 <__aeabi_dmul>
 801991e:	4b3d      	ldr	r3, [pc, #244]	@ (8019a14 <atan+0x314>)
 8019920:	2200      	movs	r2, #0
 8019922:	f7e6 fceb 	bl	80002fc <__adddf3>
 8019926:	4602      	mov	r2, r0
 8019928:	460b      	mov	r3, r1
 801992a:	4630      	mov	r0, r6
 801992c:	4639      	mov	r1, r7
 801992e:	f7e6 ffc5 	bl	80008bc <__aeabi_ddiv>
 8019932:	f04f 0a02 	mov.w	sl, #2
 8019936:	4604      	mov	r4, r0
 8019938:	460d      	mov	r5, r1
 801993a:	e745      	b.n	80197c8 <atan+0xc8>
 801993c:	4622      	mov	r2, r4
 801993e:	462b      	mov	r3, r5
 8019940:	4938      	ldr	r1, [pc, #224]	@ (8019a24 <atan+0x324>)
 8019942:	2000      	movs	r0, #0
 8019944:	f7e6 ffba 	bl	80008bc <__aeabi_ddiv>
 8019948:	f04f 0a03 	mov.w	sl, #3
 801994c:	4604      	mov	r4, r0
 801994e:	460d      	mov	r5, r1
 8019950:	e73a      	b.n	80197c8 <atan+0xc8>
 8019952:	4b35      	ldr	r3, [pc, #212]	@ (8019a28 <atan+0x328>)
 8019954:	4e35      	ldr	r6, [pc, #212]	@ (8019a2c <atan+0x32c>)
 8019956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801995e:	f7e6 fccb 	bl	80002f8 <__aeabi_dsub>
 8019962:	4622      	mov	r2, r4
 8019964:	462b      	mov	r3, r5
 8019966:	f7e6 fcc7 	bl	80002f8 <__aeabi_dsub>
 801996a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801996e:	4602      	mov	r2, r0
 8019970:	460b      	mov	r3, r1
 8019972:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019976:	f7e6 fcbf 	bl	80002f8 <__aeabi_dsub>
 801997a:	f1bb 0f00 	cmp.w	fp, #0
 801997e:	4604      	mov	r4, r0
 8019980:	460d      	mov	r5, r1
 8019982:	f6bf aedc 	bge.w	801973e <atan+0x3e>
 8019986:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801998a:	461d      	mov	r5, r3
 801998c:	e6d7      	b.n	801973e <atan+0x3e>
 801998e:	a51c      	add	r5, pc, #112	@ (adr r5, 8019a00 <atan+0x300>)
 8019990:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019994:	e6d3      	b.n	801973e <atan+0x3e>
 8019996:	bf00      	nop
 8019998:	54442d18 	.word	0x54442d18
 801999c:	3ff921fb 	.word	0x3ff921fb
 80199a0:	8800759c 	.word	0x8800759c
 80199a4:	7e37e43c 	.word	0x7e37e43c
 80199a8:	e322da11 	.word	0xe322da11
 80199ac:	3f90ad3a 	.word	0x3f90ad3a
 80199b0:	24760deb 	.word	0x24760deb
 80199b4:	3fa97b4b 	.word	0x3fa97b4b
 80199b8:	a0d03d51 	.word	0xa0d03d51
 80199bc:	3fb10d66 	.word	0x3fb10d66
 80199c0:	c54c206e 	.word	0xc54c206e
 80199c4:	3fb745cd 	.word	0x3fb745cd
 80199c8:	920083ff 	.word	0x920083ff
 80199cc:	3fc24924 	.word	0x3fc24924
 80199d0:	5555550d 	.word	0x5555550d
 80199d4:	3fd55555 	.word	0x3fd55555
 80199d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80199dc:	bfa2b444 	.word	0xbfa2b444
 80199e0:	52defd9a 	.word	0x52defd9a
 80199e4:	3fadde2d 	.word	0x3fadde2d
 80199e8:	af749a6d 	.word	0xaf749a6d
 80199ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80199f0:	fe231671 	.word	0xfe231671
 80199f4:	3fbc71c6 	.word	0x3fbc71c6
 80199f8:	9998ebc4 	.word	0x9998ebc4
 80199fc:	3fc99999 	.word	0x3fc99999
 8019a00:	54442d18 	.word	0x54442d18
 8019a04:	bff921fb 	.word	0xbff921fb
 8019a08:	440fffff 	.word	0x440fffff
 8019a0c:	7ff00000 	.word	0x7ff00000
 8019a10:	3fdbffff 	.word	0x3fdbffff
 8019a14:	3ff00000 	.word	0x3ff00000
 8019a18:	3ff2ffff 	.word	0x3ff2ffff
 8019a1c:	40038000 	.word	0x40038000
 8019a20:	3ff80000 	.word	0x3ff80000
 8019a24:	bff00000 	.word	0xbff00000
 8019a28:	0801c050 	.word	0x0801c050
 8019a2c:	0801c070 	.word	0x0801c070

08019a30 <cos>:
 8019a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a32:	ec53 2b10 	vmov	r2, r3, d0
 8019a36:	4826      	ldr	r0, [pc, #152]	@ (8019ad0 <cos+0xa0>)
 8019a38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019a3c:	4281      	cmp	r1, r0
 8019a3e:	d806      	bhi.n	8019a4e <cos+0x1e>
 8019a40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019ac8 <cos+0x98>
 8019a44:	b005      	add	sp, #20
 8019a46:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a4a:	f000 b97d 	b.w	8019d48 <__kernel_cos>
 8019a4e:	4821      	ldr	r0, [pc, #132]	@ (8019ad4 <cos+0xa4>)
 8019a50:	4281      	cmp	r1, r0
 8019a52:	d908      	bls.n	8019a66 <cos+0x36>
 8019a54:	4610      	mov	r0, r2
 8019a56:	4619      	mov	r1, r3
 8019a58:	f7e6 fc4e 	bl	80002f8 <__aeabi_dsub>
 8019a5c:	ec41 0b10 	vmov	d0, r0, r1
 8019a60:	b005      	add	sp, #20
 8019a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a66:	4668      	mov	r0, sp
 8019a68:	f000 fbba 	bl	801a1e0 <__ieee754_rem_pio2>
 8019a6c:	f000 0003 	and.w	r0, r0, #3
 8019a70:	2801      	cmp	r0, #1
 8019a72:	d00b      	beq.n	8019a8c <cos+0x5c>
 8019a74:	2802      	cmp	r0, #2
 8019a76:	d015      	beq.n	8019aa4 <cos+0x74>
 8019a78:	b9d8      	cbnz	r0, 8019ab2 <cos+0x82>
 8019a7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a7e:	ed9d 0b00 	vldr	d0, [sp]
 8019a82:	f000 f961 	bl	8019d48 <__kernel_cos>
 8019a86:	ec51 0b10 	vmov	r0, r1, d0
 8019a8a:	e7e7      	b.n	8019a5c <cos+0x2c>
 8019a8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a90:	ed9d 0b00 	vldr	d0, [sp]
 8019a94:	f000 fa20 	bl	8019ed8 <__kernel_sin>
 8019a98:	ec53 2b10 	vmov	r2, r3, d0
 8019a9c:	4610      	mov	r0, r2
 8019a9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019aa2:	e7db      	b.n	8019a5c <cos+0x2c>
 8019aa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019aa8:	ed9d 0b00 	vldr	d0, [sp]
 8019aac:	f000 f94c 	bl	8019d48 <__kernel_cos>
 8019ab0:	e7f2      	b.n	8019a98 <cos+0x68>
 8019ab2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ab6:	ed9d 0b00 	vldr	d0, [sp]
 8019aba:	2001      	movs	r0, #1
 8019abc:	f000 fa0c 	bl	8019ed8 <__kernel_sin>
 8019ac0:	e7e1      	b.n	8019a86 <cos+0x56>
 8019ac2:	bf00      	nop
 8019ac4:	f3af 8000 	nop.w
	...
 8019ad0:	3fe921fb 	.word	0x3fe921fb
 8019ad4:	7fefffff 	.word	0x7fefffff

08019ad8 <fabs>:
 8019ad8:	ec51 0b10 	vmov	r0, r1, d0
 8019adc:	4602      	mov	r2, r0
 8019ade:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019ae2:	ec43 2b10 	vmov	d0, r2, r3
 8019ae6:	4770      	bx	lr

08019ae8 <sin>:
 8019ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019aea:	ec53 2b10 	vmov	r2, r3, d0
 8019aee:	4826      	ldr	r0, [pc, #152]	@ (8019b88 <sin+0xa0>)
 8019af0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019af4:	4281      	cmp	r1, r0
 8019af6:	d807      	bhi.n	8019b08 <sin+0x20>
 8019af8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019b80 <sin+0x98>
 8019afc:	2000      	movs	r0, #0
 8019afe:	b005      	add	sp, #20
 8019b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b04:	f000 b9e8 	b.w	8019ed8 <__kernel_sin>
 8019b08:	4820      	ldr	r0, [pc, #128]	@ (8019b8c <sin+0xa4>)
 8019b0a:	4281      	cmp	r1, r0
 8019b0c:	d908      	bls.n	8019b20 <sin+0x38>
 8019b0e:	4610      	mov	r0, r2
 8019b10:	4619      	mov	r1, r3
 8019b12:	f7e6 fbf1 	bl	80002f8 <__aeabi_dsub>
 8019b16:	ec41 0b10 	vmov	d0, r0, r1
 8019b1a:	b005      	add	sp, #20
 8019b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b20:	4668      	mov	r0, sp
 8019b22:	f000 fb5d 	bl	801a1e0 <__ieee754_rem_pio2>
 8019b26:	f000 0003 	and.w	r0, r0, #3
 8019b2a:	2801      	cmp	r0, #1
 8019b2c:	d00c      	beq.n	8019b48 <sin+0x60>
 8019b2e:	2802      	cmp	r0, #2
 8019b30:	d011      	beq.n	8019b56 <sin+0x6e>
 8019b32:	b9e8      	cbnz	r0, 8019b70 <sin+0x88>
 8019b34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b38:	ed9d 0b00 	vldr	d0, [sp]
 8019b3c:	2001      	movs	r0, #1
 8019b3e:	f000 f9cb 	bl	8019ed8 <__kernel_sin>
 8019b42:	ec51 0b10 	vmov	r0, r1, d0
 8019b46:	e7e6      	b.n	8019b16 <sin+0x2e>
 8019b48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b4c:	ed9d 0b00 	vldr	d0, [sp]
 8019b50:	f000 f8fa 	bl	8019d48 <__kernel_cos>
 8019b54:	e7f5      	b.n	8019b42 <sin+0x5a>
 8019b56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b5a:	ed9d 0b00 	vldr	d0, [sp]
 8019b5e:	2001      	movs	r0, #1
 8019b60:	f000 f9ba 	bl	8019ed8 <__kernel_sin>
 8019b64:	ec53 2b10 	vmov	r2, r3, d0
 8019b68:	4610      	mov	r0, r2
 8019b6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019b6e:	e7d2      	b.n	8019b16 <sin+0x2e>
 8019b70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b74:	ed9d 0b00 	vldr	d0, [sp]
 8019b78:	f000 f8e6 	bl	8019d48 <__kernel_cos>
 8019b7c:	e7f2      	b.n	8019b64 <sin+0x7c>
 8019b7e:	bf00      	nop
	...
 8019b88:	3fe921fb 	.word	0x3fe921fb
 8019b8c:	7fefffff 	.word	0x7fefffff

08019b90 <__ieee754_sqrt>:
 8019b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b94:	4a68      	ldr	r2, [pc, #416]	@ (8019d38 <__ieee754_sqrt+0x1a8>)
 8019b96:	ec55 4b10 	vmov	r4, r5, d0
 8019b9a:	43aa      	bics	r2, r5
 8019b9c:	462b      	mov	r3, r5
 8019b9e:	4621      	mov	r1, r4
 8019ba0:	d110      	bne.n	8019bc4 <__ieee754_sqrt+0x34>
 8019ba2:	4622      	mov	r2, r4
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	4629      	mov	r1, r5
 8019ba8:	f7e6 fd5e 	bl	8000668 <__aeabi_dmul>
 8019bac:	4602      	mov	r2, r0
 8019bae:	460b      	mov	r3, r1
 8019bb0:	4620      	mov	r0, r4
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	f7e6 fba2 	bl	80002fc <__adddf3>
 8019bb8:	4604      	mov	r4, r0
 8019bba:	460d      	mov	r5, r1
 8019bbc:	ec45 4b10 	vmov	d0, r4, r5
 8019bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bc4:	2d00      	cmp	r5, #0
 8019bc6:	dc0e      	bgt.n	8019be6 <__ieee754_sqrt+0x56>
 8019bc8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019bcc:	4322      	orrs	r2, r4
 8019bce:	d0f5      	beq.n	8019bbc <__ieee754_sqrt+0x2c>
 8019bd0:	b19d      	cbz	r5, 8019bfa <__ieee754_sqrt+0x6a>
 8019bd2:	4622      	mov	r2, r4
 8019bd4:	4620      	mov	r0, r4
 8019bd6:	4629      	mov	r1, r5
 8019bd8:	f7e6 fb8e 	bl	80002f8 <__aeabi_dsub>
 8019bdc:	4602      	mov	r2, r0
 8019bde:	460b      	mov	r3, r1
 8019be0:	f7e6 fe6c 	bl	80008bc <__aeabi_ddiv>
 8019be4:	e7e8      	b.n	8019bb8 <__ieee754_sqrt+0x28>
 8019be6:	152a      	asrs	r2, r5, #20
 8019be8:	d115      	bne.n	8019c16 <__ieee754_sqrt+0x86>
 8019bea:	2000      	movs	r0, #0
 8019bec:	e009      	b.n	8019c02 <__ieee754_sqrt+0x72>
 8019bee:	0acb      	lsrs	r3, r1, #11
 8019bf0:	3a15      	subs	r2, #21
 8019bf2:	0549      	lsls	r1, r1, #21
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d0fa      	beq.n	8019bee <__ieee754_sqrt+0x5e>
 8019bf8:	e7f7      	b.n	8019bea <__ieee754_sqrt+0x5a>
 8019bfa:	462a      	mov	r2, r5
 8019bfc:	e7fa      	b.n	8019bf4 <__ieee754_sqrt+0x64>
 8019bfe:	005b      	lsls	r3, r3, #1
 8019c00:	3001      	adds	r0, #1
 8019c02:	02dc      	lsls	r4, r3, #11
 8019c04:	d5fb      	bpl.n	8019bfe <__ieee754_sqrt+0x6e>
 8019c06:	1e44      	subs	r4, r0, #1
 8019c08:	1b12      	subs	r2, r2, r4
 8019c0a:	f1c0 0420 	rsb	r4, r0, #32
 8019c0e:	fa21 f404 	lsr.w	r4, r1, r4
 8019c12:	4323      	orrs	r3, r4
 8019c14:	4081      	lsls	r1, r0
 8019c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019c1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8019c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019c22:	07d2      	lsls	r2, r2, #31
 8019c24:	bf5c      	itt	pl
 8019c26:	005b      	lslpl	r3, r3, #1
 8019c28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8019c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c30:	bf58      	it	pl
 8019c32:	0049      	lslpl	r1, r1, #1
 8019c34:	2600      	movs	r6, #0
 8019c36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8019c3a:	106d      	asrs	r5, r5, #1
 8019c3c:	0049      	lsls	r1, r1, #1
 8019c3e:	2016      	movs	r0, #22
 8019c40:	4632      	mov	r2, r6
 8019c42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8019c46:	1917      	adds	r7, r2, r4
 8019c48:	429f      	cmp	r7, r3
 8019c4a:	bfde      	ittt	le
 8019c4c:	193a      	addle	r2, r7, r4
 8019c4e:	1bdb      	suble	r3, r3, r7
 8019c50:	1936      	addle	r6, r6, r4
 8019c52:	0fcf      	lsrs	r7, r1, #31
 8019c54:	3801      	subs	r0, #1
 8019c56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019c5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019c5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019c62:	d1f0      	bne.n	8019c46 <__ieee754_sqrt+0xb6>
 8019c64:	4604      	mov	r4, r0
 8019c66:	2720      	movs	r7, #32
 8019c68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	eb00 0e0c 	add.w	lr, r0, ip
 8019c72:	db02      	blt.n	8019c7a <__ieee754_sqrt+0xea>
 8019c74:	d113      	bne.n	8019c9e <__ieee754_sqrt+0x10e>
 8019c76:	458e      	cmp	lr, r1
 8019c78:	d811      	bhi.n	8019c9e <__ieee754_sqrt+0x10e>
 8019c7a:	f1be 0f00 	cmp.w	lr, #0
 8019c7e:	eb0e 000c 	add.w	r0, lr, ip
 8019c82:	da42      	bge.n	8019d0a <__ieee754_sqrt+0x17a>
 8019c84:	2800      	cmp	r0, #0
 8019c86:	db40      	blt.n	8019d0a <__ieee754_sqrt+0x17a>
 8019c88:	f102 0801 	add.w	r8, r2, #1
 8019c8c:	1a9b      	subs	r3, r3, r2
 8019c8e:	458e      	cmp	lr, r1
 8019c90:	bf88      	it	hi
 8019c92:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8019c96:	eba1 010e 	sub.w	r1, r1, lr
 8019c9a:	4464      	add	r4, ip
 8019c9c:	4642      	mov	r2, r8
 8019c9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8019ca2:	3f01      	subs	r7, #1
 8019ca4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019ca8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019cac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019cb0:	d1dc      	bne.n	8019c6c <__ieee754_sqrt+0xdc>
 8019cb2:	4319      	orrs	r1, r3
 8019cb4:	d01b      	beq.n	8019cee <__ieee754_sqrt+0x15e>
 8019cb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8019d3c <__ieee754_sqrt+0x1ac>
 8019cba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8019d40 <__ieee754_sqrt+0x1b0>
 8019cbe:	e9da 0100 	ldrd	r0, r1, [sl]
 8019cc2:	e9db 2300 	ldrd	r2, r3, [fp]
 8019cc6:	f7e6 fb17 	bl	80002f8 <__aeabi_dsub>
 8019cca:	e9da 8900 	ldrd	r8, r9, [sl]
 8019cce:	4602      	mov	r2, r0
 8019cd0:	460b      	mov	r3, r1
 8019cd2:	4640      	mov	r0, r8
 8019cd4:	4649      	mov	r1, r9
 8019cd6:	f7e6 ff43 	bl	8000b60 <__aeabi_dcmple>
 8019cda:	b140      	cbz	r0, 8019cee <__ieee754_sqrt+0x15e>
 8019cdc:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8019ce0:	e9da 0100 	ldrd	r0, r1, [sl]
 8019ce4:	e9db 2300 	ldrd	r2, r3, [fp]
 8019ce8:	d111      	bne.n	8019d0e <__ieee754_sqrt+0x17e>
 8019cea:	3601      	adds	r6, #1
 8019cec:	463c      	mov	r4, r7
 8019cee:	1072      	asrs	r2, r6, #1
 8019cf0:	0863      	lsrs	r3, r4, #1
 8019cf2:	07f1      	lsls	r1, r6, #31
 8019cf4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8019cf8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8019cfc:	bf48      	it	mi
 8019cfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8019d02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8019d06:	4618      	mov	r0, r3
 8019d08:	e756      	b.n	8019bb8 <__ieee754_sqrt+0x28>
 8019d0a:	4690      	mov	r8, r2
 8019d0c:	e7be      	b.n	8019c8c <__ieee754_sqrt+0xfc>
 8019d0e:	f7e6 faf5 	bl	80002fc <__adddf3>
 8019d12:	e9da 8900 	ldrd	r8, r9, [sl]
 8019d16:	4602      	mov	r2, r0
 8019d18:	460b      	mov	r3, r1
 8019d1a:	4640      	mov	r0, r8
 8019d1c:	4649      	mov	r1, r9
 8019d1e:	f7e6 ff15 	bl	8000b4c <__aeabi_dcmplt>
 8019d22:	b120      	cbz	r0, 8019d2e <__ieee754_sqrt+0x19e>
 8019d24:	1ca0      	adds	r0, r4, #2
 8019d26:	bf08      	it	eq
 8019d28:	3601      	addeq	r6, #1
 8019d2a:	3402      	adds	r4, #2
 8019d2c:	e7df      	b.n	8019cee <__ieee754_sqrt+0x15e>
 8019d2e:	1c63      	adds	r3, r4, #1
 8019d30:	f023 0401 	bic.w	r4, r3, #1
 8019d34:	e7db      	b.n	8019cee <__ieee754_sqrt+0x15e>
 8019d36:	bf00      	nop
 8019d38:	7ff00000 	.word	0x7ff00000
 8019d3c:	20000738 	.word	0x20000738
 8019d40:	20000730 	.word	0x20000730
 8019d44:	00000000 	.word	0x00000000

08019d48 <__kernel_cos>:
 8019d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d4c:	ec57 6b10 	vmov	r6, r7, d0
 8019d50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8019d54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8019d58:	ed8d 1b00 	vstr	d1, [sp]
 8019d5c:	d206      	bcs.n	8019d6c <__kernel_cos+0x24>
 8019d5e:	4630      	mov	r0, r6
 8019d60:	4639      	mov	r1, r7
 8019d62:	f7e6 ff31 	bl	8000bc8 <__aeabi_d2iz>
 8019d66:	2800      	cmp	r0, #0
 8019d68:	f000 8088 	beq.w	8019e7c <__kernel_cos+0x134>
 8019d6c:	4632      	mov	r2, r6
 8019d6e:	463b      	mov	r3, r7
 8019d70:	4630      	mov	r0, r6
 8019d72:	4639      	mov	r1, r7
 8019d74:	f7e6 fc78 	bl	8000668 <__aeabi_dmul>
 8019d78:	4b51      	ldr	r3, [pc, #324]	@ (8019ec0 <__kernel_cos+0x178>)
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	4604      	mov	r4, r0
 8019d7e:	460d      	mov	r5, r1
 8019d80:	f7e6 fc72 	bl	8000668 <__aeabi_dmul>
 8019d84:	a340      	add	r3, pc, #256	@ (adr r3, 8019e88 <__kernel_cos+0x140>)
 8019d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d8a:	4682      	mov	sl, r0
 8019d8c:	468b      	mov	fp, r1
 8019d8e:	4620      	mov	r0, r4
 8019d90:	4629      	mov	r1, r5
 8019d92:	f7e6 fc69 	bl	8000668 <__aeabi_dmul>
 8019d96:	a33e      	add	r3, pc, #248	@ (adr r3, 8019e90 <__kernel_cos+0x148>)
 8019d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d9c:	f7e6 faae 	bl	80002fc <__adddf3>
 8019da0:	4622      	mov	r2, r4
 8019da2:	462b      	mov	r3, r5
 8019da4:	f7e6 fc60 	bl	8000668 <__aeabi_dmul>
 8019da8:	a33b      	add	r3, pc, #236	@ (adr r3, 8019e98 <__kernel_cos+0x150>)
 8019daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dae:	f7e6 faa3 	bl	80002f8 <__aeabi_dsub>
 8019db2:	4622      	mov	r2, r4
 8019db4:	462b      	mov	r3, r5
 8019db6:	f7e6 fc57 	bl	8000668 <__aeabi_dmul>
 8019dba:	a339      	add	r3, pc, #228	@ (adr r3, 8019ea0 <__kernel_cos+0x158>)
 8019dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc0:	f7e6 fa9c 	bl	80002fc <__adddf3>
 8019dc4:	4622      	mov	r2, r4
 8019dc6:	462b      	mov	r3, r5
 8019dc8:	f7e6 fc4e 	bl	8000668 <__aeabi_dmul>
 8019dcc:	a336      	add	r3, pc, #216	@ (adr r3, 8019ea8 <__kernel_cos+0x160>)
 8019dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd2:	f7e6 fa91 	bl	80002f8 <__aeabi_dsub>
 8019dd6:	4622      	mov	r2, r4
 8019dd8:	462b      	mov	r3, r5
 8019dda:	f7e6 fc45 	bl	8000668 <__aeabi_dmul>
 8019dde:	a334      	add	r3, pc, #208	@ (adr r3, 8019eb0 <__kernel_cos+0x168>)
 8019de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019de4:	f7e6 fa8a 	bl	80002fc <__adddf3>
 8019de8:	4622      	mov	r2, r4
 8019dea:	462b      	mov	r3, r5
 8019dec:	f7e6 fc3c 	bl	8000668 <__aeabi_dmul>
 8019df0:	4622      	mov	r2, r4
 8019df2:	462b      	mov	r3, r5
 8019df4:	f7e6 fc38 	bl	8000668 <__aeabi_dmul>
 8019df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	460d      	mov	r5, r1
 8019e00:	4630      	mov	r0, r6
 8019e02:	4639      	mov	r1, r7
 8019e04:	f7e6 fc30 	bl	8000668 <__aeabi_dmul>
 8019e08:	460b      	mov	r3, r1
 8019e0a:	4602      	mov	r2, r0
 8019e0c:	4629      	mov	r1, r5
 8019e0e:	4620      	mov	r0, r4
 8019e10:	f7e6 fa72 	bl	80002f8 <__aeabi_dsub>
 8019e14:	4b2b      	ldr	r3, [pc, #172]	@ (8019ec4 <__kernel_cos+0x17c>)
 8019e16:	4598      	cmp	r8, r3
 8019e18:	4606      	mov	r6, r0
 8019e1a:	460f      	mov	r7, r1
 8019e1c:	d810      	bhi.n	8019e40 <__kernel_cos+0xf8>
 8019e1e:	4602      	mov	r2, r0
 8019e20:	460b      	mov	r3, r1
 8019e22:	4650      	mov	r0, sl
 8019e24:	4659      	mov	r1, fp
 8019e26:	f7e6 fa67 	bl	80002f8 <__aeabi_dsub>
 8019e2a:	460b      	mov	r3, r1
 8019e2c:	4926      	ldr	r1, [pc, #152]	@ (8019ec8 <__kernel_cos+0x180>)
 8019e2e:	4602      	mov	r2, r0
 8019e30:	2000      	movs	r0, #0
 8019e32:	f7e6 fa61 	bl	80002f8 <__aeabi_dsub>
 8019e36:	ec41 0b10 	vmov	d0, r0, r1
 8019e3a:	b003      	add	sp, #12
 8019e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e40:	4b22      	ldr	r3, [pc, #136]	@ (8019ecc <__kernel_cos+0x184>)
 8019e42:	4921      	ldr	r1, [pc, #132]	@ (8019ec8 <__kernel_cos+0x180>)
 8019e44:	4598      	cmp	r8, r3
 8019e46:	bf8c      	ite	hi
 8019e48:	4d21      	ldrhi	r5, [pc, #132]	@ (8019ed0 <__kernel_cos+0x188>)
 8019e4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8019e4e:	2400      	movs	r4, #0
 8019e50:	4622      	mov	r2, r4
 8019e52:	462b      	mov	r3, r5
 8019e54:	2000      	movs	r0, #0
 8019e56:	f7e6 fa4f 	bl	80002f8 <__aeabi_dsub>
 8019e5a:	4622      	mov	r2, r4
 8019e5c:	4680      	mov	r8, r0
 8019e5e:	4689      	mov	r9, r1
 8019e60:	462b      	mov	r3, r5
 8019e62:	4650      	mov	r0, sl
 8019e64:	4659      	mov	r1, fp
 8019e66:	f7e6 fa47 	bl	80002f8 <__aeabi_dsub>
 8019e6a:	4632      	mov	r2, r6
 8019e6c:	463b      	mov	r3, r7
 8019e6e:	f7e6 fa43 	bl	80002f8 <__aeabi_dsub>
 8019e72:	4602      	mov	r2, r0
 8019e74:	460b      	mov	r3, r1
 8019e76:	4640      	mov	r0, r8
 8019e78:	4649      	mov	r1, r9
 8019e7a:	e7da      	b.n	8019e32 <__kernel_cos+0xea>
 8019e7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8019eb8 <__kernel_cos+0x170>
 8019e80:	e7db      	b.n	8019e3a <__kernel_cos+0xf2>
 8019e82:	bf00      	nop
 8019e84:	f3af 8000 	nop.w
 8019e88:	be8838d4 	.word	0xbe8838d4
 8019e8c:	bda8fae9 	.word	0xbda8fae9
 8019e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8019e94:	3e21ee9e 	.word	0x3e21ee9e
 8019e98:	809c52ad 	.word	0x809c52ad
 8019e9c:	3e927e4f 	.word	0x3e927e4f
 8019ea0:	19cb1590 	.word	0x19cb1590
 8019ea4:	3efa01a0 	.word	0x3efa01a0
 8019ea8:	16c15177 	.word	0x16c15177
 8019eac:	3f56c16c 	.word	0x3f56c16c
 8019eb0:	5555554c 	.word	0x5555554c
 8019eb4:	3fa55555 	.word	0x3fa55555
 8019eb8:	00000000 	.word	0x00000000
 8019ebc:	3ff00000 	.word	0x3ff00000
 8019ec0:	3fe00000 	.word	0x3fe00000
 8019ec4:	3fd33332 	.word	0x3fd33332
 8019ec8:	3ff00000 	.word	0x3ff00000
 8019ecc:	3fe90000 	.word	0x3fe90000
 8019ed0:	3fd20000 	.word	0x3fd20000
 8019ed4:	00000000 	.word	0x00000000

08019ed8 <__kernel_sin>:
 8019ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019edc:	ec55 4b10 	vmov	r4, r5, d0
 8019ee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019ee4:	b085      	sub	sp, #20
 8019ee6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8019eea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8019eee:	4680      	mov	r8, r0
 8019ef0:	d205      	bcs.n	8019efe <__kernel_sin+0x26>
 8019ef2:	4620      	mov	r0, r4
 8019ef4:	4629      	mov	r1, r5
 8019ef6:	f7e6 fe67 	bl	8000bc8 <__aeabi_d2iz>
 8019efa:	2800      	cmp	r0, #0
 8019efc:	d052      	beq.n	8019fa4 <__kernel_sin+0xcc>
 8019efe:	4622      	mov	r2, r4
 8019f00:	462b      	mov	r3, r5
 8019f02:	4620      	mov	r0, r4
 8019f04:	4629      	mov	r1, r5
 8019f06:	f7e6 fbaf 	bl	8000668 <__aeabi_dmul>
 8019f0a:	4682      	mov	sl, r0
 8019f0c:	468b      	mov	fp, r1
 8019f0e:	4602      	mov	r2, r0
 8019f10:	460b      	mov	r3, r1
 8019f12:	4620      	mov	r0, r4
 8019f14:	4629      	mov	r1, r5
 8019f16:	f7e6 fba7 	bl	8000668 <__aeabi_dmul>
 8019f1a:	a342      	add	r3, pc, #264	@ (adr r3, 801a024 <__kernel_sin+0x14c>)
 8019f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f20:	e9cd 0100 	strd	r0, r1, [sp]
 8019f24:	4650      	mov	r0, sl
 8019f26:	4659      	mov	r1, fp
 8019f28:	f7e6 fb9e 	bl	8000668 <__aeabi_dmul>
 8019f2c:	a33f      	add	r3, pc, #252	@ (adr r3, 801a02c <__kernel_sin+0x154>)
 8019f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f32:	f7e6 f9e1 	bl	80002f8 <__aeabi_dsub>
 8019f36:	4652      	mov	r2, sl
 8019f38:	465b      	mov	r3, fp
 8019f3a:	f7e6 fb95 	bl	8000668 <__aeabi_dmul>
 8019f3e:	a33d      	add	r3, pc, #244	@ (adr r3, 801a034 <__kernel_sin+0x15c>)
 8019f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f44:	f7e6 f9da 	bl	80002fc <__adddf3>
 8019f48:	4652      	mov	r2, sl
 8019f4a:	465b      	mov	r3, fp
 8019f4c:	f7e6 fb8c 	bl	8000668 <__aeabi_dmul>
 8019f50:	a33a      	add	r3, pc, #232	@ (adr r3, 801a03c <__kernel_sin+0x164>)
 8019f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f56:	f7e6 f9cf 	bl	80002f8 <__aeabi_dsub>
 8019f5a:	4652      	mov	r2, sl
 8019f5c:	465b      	mov	r3, fp
 8019f5e:	f7e6 fb83 	bl	8000668 <__aeabi_dmul>
 8019f62:	a338      	add	r3, pc, #224	@ (adr r3, 801a044 <__kernel_sin+0x16c>)
 8019f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f68:	f7e6 f9c8 	bl	80002fc <__adddf3>
 8019f6c:	4606      	mov	r6, r0
 8019f6e:	460f      	mov	r7, r1
 8019f70:	f1b8 0f00 	cmp.w	r8, #0
 8019f74:	d11b      	bne.n	8019fae <__kernel_sin+0xd6>
 8019f76:	4602      	mov	r2, r0
 8019f78:	460b      	mov	r3, r1
 8019f7a:	4650      	mov	r0, sl
 8019f7c:	4659      	mov	r1, fp
 8019f7e:	f7e6 fb73 	bl	8000668 <__aeabi_dmul>
 8019f82:	a325      	add	r3, pc, #148	@ (adr r3, 801a018 <__kernel_sin+0x140>)
 8019f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f88:	f7e6 f9b6 	bl	80002f8 <__aeabi_dsub>
 8019f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019f90:	f7e6 fb6a 	bl	8000668 <__aeabi_dmul>
 8019f94:	4602      	mov	r2, r0
 8019f96:	460b      	mov	r3, r1
 8019f98:	4620      	mov	r0, r4
 8019f9a:	4629      	mov	r1, r5
 8019f9c:	f7e6 f9ae 	bl	80002fc <__adddf3>
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	460d      	mov	r5, r1
 8019fa4:	ec45 4b10 	vmov	d0, r4, r5
 8019fa8:	b005      	add	sp, #20
 8019faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019fb2:	4b1b      	ldr	r3, [pc, #108]	@ (801a020 <__kernel_sin+0x148>)
 8019fb4:	2200      	movs	r2, #0
 8019fb6:	f7e6 fb57 	bl	8000668 <__aeabi_dmul>
 8019fba:	4632      	mov	r2, r6
 8019fbc:	4680      	mov	r8, r0
 8019fbe:	4689      	mov	r9, r1
 8019fc0:	463b      	mov	r3, r7
 8019fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019fc6:	f7e6 fb4f 	bl	8000668 <__aeabi_dmul>
 8019fca:	4602      	mov	r2, r0
 8019fcc:	460b      	mov	r3, r1
 8019fce:	4640      	mov	r0, r8
 8019fd0:	4649      	mov	r1, r9
 8019fd2:	f7e6 f991 	bl	80002f8 <__aeabi_dsub>
 8019fd6:	4652      	mov	r2, sl
 8019fd8:	465b      	mov	r3, fp
 8019fda:	f7e6 fb45 	bl	8000668 <__aeabi_dmul>
 8019fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019fe2:	f7e6 f989 	bl	80002f8 <__aeabi_dsub>
 8019fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 801a018 <__kernel_sin+0x140>)
 8019fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fec:	4606      	mov	r6, r0
 8019fee:	460f      	mov	r7, r1
 8019ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ff4:	f7e6 fb38 	bl	8000668 <__aeabi_dmul>
 8019ff8:	4602      	mov	r2, r0
 8019ffa:	460b      	mov	r3, r1
 8019ffc:	4630      	mov	r0, r6
 8019ffe:	4639      	mov	r1, r7
 801a000:	f7e6 f97c 	bl	80002fc <__adddf3>
 801a004:	4602      	mov	r2, r0
 801a006:	460b      	mov	r3, r1
 801a008:	4620      	mov	r0, r4
 801a00a:	4629      	mov	r1, r5
 801a00c:	f7e6 f974 	bl	80002f8 <__aeabi_dsub>
 801a010:	e7c6      	b.n	8019fa0 <__kernel_sin+0xc8>
 801a012:	bf00      	nop
 801a014:	f3af 8000 	nop.w
 801a018:	55555549 	.word	0x55555549
 801a01c:	3fc55555 	.word	0x3fc55555
 801a020:	3fe00000 	.word	0x3fe00000
 801a024:	5acfd57c 	.word	0x5acfd57c
 801a028:	3de5d93a 	.word	0x3de5d93a
 801a02c:	8a2b9ceb 	.word	0x8a2b9ceb
 801a030:	3e5ae5e6 	.word	0x3e5ae5e6
 801a034:	57b1fe7d 	.word	0x57b1fe7d
 801a038:	3ec71de3 	.word	0x3ec71de3
 801a03c:	19c161d5 	.word	0x19c161d5
 801a040:	3f2a01a0 	.word	0x3f2a01a0
 801a044:	1110f8a6 	.word	0x1110f8a6
 801a048:	3f811111 	.word	0x3f811111
 801a04c:	00000000 	.word	0x00000000

0801a050 <__ieee754_atan2>:
 801a050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a054:	ec57 6b11 	vmov	r6, r7, d1
 801a058:	4273      	negs	r3, r6
 801a05a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a1d8 <__ieee754_atan2+0x188>
 801a05e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a062:	4333      	orrs	r3, r6
 801a064:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a068:	4543      	cmp	r3, r8
 801a06a:	ec51 0b10 	vmov	r0, r1, d0
 801a06e:	4635      	mov	r5, r6
 801a070:	d809      	bhi.n	801a086 <__ieee754_atan2+0x36>
 801a072:	4244      	negs	r4, r0
 801a074:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a078:	4304      	orrs	r4, r0
 801a07a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a07e:	4544      	cmp	r4, r8
 801a080:	468e      	mov	lr, r1
 801a082:	4681      	mov	r9, r0
 801a084:	d907      	bls.n	801a096 <__ieee754_atan2+0x46>
 801a086:	4632      	mov	r2, r6
 801a088:	463b      	mov	r3, r7
 801a08a:	f7e6 f937 	bl	80002fc <__adddf3>
 801a08e:	ec41 0b10 	vmov	d0, r0, r1
 801a092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a096:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a09a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a09e:	4334      	orrs	r4, r6
 801a0a0:	d103      	bne.n	801a0aa <__ieee754_atan2+0x5a>
 801a0a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0a6:	f7ff bb2b 	b.w	8019700 <atan>
 801a0aa:	17bc      	asrs	r4, r7, #30
 801a0ac:	f004 0402 	and.w	r4, r4, #2
 801a0b0:	ea53 0909 	orrs.w	r9, r3, r9
 801a0b4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a0b8:	d107      	bne.n	801a0ca <__ieee754_atan2+0x7a>
 801a0ba:	2c02      	cmp	r4, #2
 801a0bc:	d05f      	beq.n	801a17e <__ieee754_atan2+0x12e>
 801a0be:	2c03      	cmp	r4, #3
 801a0c0:	d1e5      	bne.n	801a08e <__ieee754_atan2+0x3e>
 801a0c2:	a141      	add	r1, pc, #260	@ (adr r1, 801a1c8 <__ieee754_atan2+0x178>)
 801a0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0c8:	e7e1      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a0ca:	4315      	orrs	r5, r2
 801a0cc:	d106      	bne.n	801a0dc <__ieee754_atan2+0x8c>
 801a0ce:	f1be 0f00 	cmp.w	lr, #0
 801a0d2:	da5f      	bge.n	801a194 <__ieee754_atan2+0x144>
 801a0d4:	a13e      	add	r1, pc, #248	@ (adr r1, 801a1d0 <__ieee754_atan2+0x180>)
 801a0d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0da:	e7d8      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a0dc:	4542      	cmp	r2, r8
 801a0de:	d10f      	bne.n	801a100 <__ieee754_atan2+0xb0>
 801a0e0:	4293      	cmp	r3, r2
 801a0e2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a0e6:	d107      	bne.n	801a0f8 <__ieee754_atan2+0xa8>
 801a0e8:	2c02      	cmp	r4, #2
 801a0ea:	d84c      	bhi.n	801a186 <__ieee754_atan2+0x136>
 801a0ec:	4b34      	ldr	r3, [pc, #208]	@ (801a1c0 <__ieee754_atan2+0x170>)
 801a0ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a0f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a0f6:	e7ca      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a0f8:	2c02      	cmp	r4, #2
 801a0fa:	d848      	bhi.n	801a18e <__ieee754_atan2+0x13e>
 801a0fc:	4b31      	ldr	r3, [pc, #196]	@ (801a1c4 <__ieee754_atan2+0x174>)
 801a0fe:	e7f6      	b.n	801a0ee <__ieee754_atan2+0x9e>
 801a100:	4543      	cmp	r3, r8
 801a102:	d0e4      	beq.n	801a0ce <__ieee754_atan2+0x7e>
 801a104:	1a9b      	subs	r3, r3, r2
 801a106:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a10a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a10e:	da1e      	bge.n	801a14e <__ieee754_atan2+0xfe>
 801a110:	2f00      	cmp	r7, #0
 801a112:	da01      	bge.n	801a118 <__ieee754_atan2+0xc8>
 801a114:	323c      	adds	r2, #60	@ 0x3c
 801a116:	db1e      	blt.n	801a156 <__ieee754_atan2+0x106>
 801a118:	4632      	mov	r2, r6
 801a11a:	463b      	mov	r3, r7
 801a11c:	f7e6 fbce 	bl	80008bc <__aeabi_ddiv>
 801a120:	ec41 0b10 	vmov	d0, r0, r1
 801a124:	f7ff fcd8 	bl	8019ad8 <fabs>
 801a128:	f7ff faea 	bl	8019700 <atan>
 801a12c:	ec51 0b10 	vmov	r0, r1, d0
 801a130:	2c01      	cmp	r4, #1
 801a132:	d013      	beq.n	801a15c <__ieee754_atan2+0x10c>
 801a134:	2c02      	cmp	r4, #2
 801a136:	d015      	beq.n	801a164 <__ieee754_atan2+0x114>
 801a138:	2c00      	cmp	r4, #0
 801a13a:	d0a8      	beq.n	801a08e <__ieee754_atan2+0x3e>
 801a13c:	a318      	add	r3, pc, #96	@ (adr r3, 801a1a0 <__ieee754_atan2+0x150>)
 801a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a142:	f7e6 f8d9 	bl	80002f8 <__aeabi_dsub>
 801a146:	a318      	add	r3, pc, #96	@ (adr r3, 801a1a8 <__ieee754_atan2+0x158>)
 801a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a14c:	e014      	b.n	801a178 <__ieee754_atan2+0x128>
 801a14e:	a118      	add	r1, pc, #96	@ (adr r1, 801a1b0 <__ieee754_atan2+0x160>)
 801a150:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a154:	e7ec      	b.n	801a130 <__ieee754_atan2+0xe0>
 801a156:	2000      	movs	r0, #0
 801a158:	2100      	movs	r1, #0
 801a15a:	e7e9      	b.n	801a130 <__ieee754_atan2+0xe0>
 801a15c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a160:	4619      	mov	r1, r3
 801a162:	e794      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a164:	a30e      	add	r3, pc, #56	@ (adr r3, 801a1a0 <__ieee754_atan2+0x150>)
 801a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a16a:	f7e6 f8c5 	bl	80002f8 <__aeabi_dsub>
 801a16e:	4602      	mov	r2, r0
 801a170:	460b      	mov	r3, r1
 801a172:	a10d      	add	r1, pc, #52	@ (adr r1, 801a1a8 <__ieee754_atan2+0x158>)
 801a174:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a178:	f7e6 f8be 	bl	80002f8 <__aeabi_dsub>
 801a17c:	e787      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a17e:	a10a      	add	r1, pc, #40	@ (adr r1, 801a1a8 <__ieee754_atan2+0x158>)
 801a180:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a184:	e783      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a186:	a10c      	add	r1, pc, #48	@ (adr r1, 801a1b8 <__ieee754_atan2+0x168>)
 801a188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a18c:	e77f      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a18e:	2000      	movs	r0, #0
 801a190:	2100      	movs	r1, #0
 801a192:	e77c      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a194:	a106      	add	r1, pc, #24	@ (adr r1, 801a1b0 <__ieee754_atan2+0x160>)
 801a196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a19a:	e778      	b.n	801a08e <__ieee754_atan2+0x3e>
 801a19c:	f3af 8000 	nop.w
 801a1a0:	33145c07 	.word	0x33145c07
 801a1a4:	3ca1a626 	.word	0x3ca1a626
 801a1a8:	54442d18 	.word	0x54442d18
 801a1ac:	400921fb 	.word	0x400921fb
 801a1b0:	54442d18 	.word	0x54442d18
 801a1b4:	3ff921fb 	.word	0x3ff921fb
 801a1b8:	54442d18 	.word	0x54442d18
 801a1bc:	3fe921fb 	.word	0x3fe921fb
 801a1c0:	0801c0a8 	.word	0x0801c0a8
 801a1c4:	0801c090 	.word	0x0801c090
 801a1c8:	54442d18 	.word	0x54442d18
 801a1cc:	c00921fb 	.word	0xc00921fb
 801a1d0:	54442d18 	.word	0x54442d18
 801a1d4:	bff921fb 	.word	0xbff921fb
 801a1d8:	7ff00000 	.word	0x7ff00000
 801a1dc:	00000000 	.word	0x00000000

0801a1e0 <__ieee754_rem_pio2>:
 801a1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1e4:	ec57 6b10 	vmov	r6, r7, d0
 801a1e8:	4bc5      	ldr	r3, [pc, #788]	@ (801a500 <__ieee754_rem_pio2+0x320>)
 801a1ea:	b08d      	sub	sp, #52	@ 0x34
 801a1ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801a1f0:	4598      	cmp	r8, r3
 801a1f2:	4604      	mov	r4, r0
 801a1f4:	9704      	str	r7, [sp, #16]
 801a1f6:	d807      	bhi.n	801a208 <__ieee754_rem_pio2+0x28>
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	ed80 0b00 	vstr	d0, [r0]
 801a200:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a204:	2500      	movs	r5, #0
 801a206:	e028      	b.n	801a25a <__ieee754_rem_pio2+0x7a>
 801a208:	4bbe      	ldr	r3, [pc, #760]	@ (801a504 <__ieee754_rem_pio2+0x324>)
 801a20a:	4598      	cmp	r8, r3
 801a20c:	d878      	bhi.n	801a300 <__ieee754_rem_pio2+0x120>
 801a20e:	9b04      	ldr	r3, [sp, #16]
 801a210:	4dbd      	ldr	r5, [pc, #756]	@ (801a508 <__ieee754_rem_pio2+0x328>)
 801a212:	2b00      	cmp	r3, #0
 801a214:	4630      	mov	r0, r6
 801a216:	a3ac      	add	r3, pc, #688	@ (adr r3, 801a4c8 <__ieee754_rem_pio2+0x2e8>)
 801a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21c:	4639      	mov	r1, r7
 801a21e:	dd38      	ble.n	801a292 <__ieee754_rem_pio2+0xb2>
 801a220:	f7e6 f86a 	bl	80002f8 <__aeabi_dsub>
 801a224:	45a8      	cmp	r8, r5
 801a226:	4606      	mov	r6, r0
 801a228:	460f      	mov	r7, r1
 801a22a:	d01a      	beq.n	801a262 <__ieee754_rem_pio2+0x82>
 801a22c:	a3a8      	add	r3, pc, #672	@ (adr r3, 801a4d0 <__ieee754_rem_pio2+0x2f0>)
 801a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a232:	f7e6 f861 	bl	80002f8 <__aeabi_dsub>
 801a236:	4602      	mov	r2, r0
 801a238:	460b      	mov	r3, r1
 801a23a:	4680      	mov	r8, r0
 801a23c:	4689      	mov	r9, r1
 801a23e:	4630      	mov	r0, r6
 801a240:	4639      	mov	r1, r7
 801a242:	f7e6 f859 	bl	80002f8 <__aeabi_dsub>
 801a246:	a3a2      	add	r3, pc, #648	@ (adr r3, 801a4d0 <__ieee754_rem_pio2+0x2f0>)
 801a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a24c:	f7e6 f854 	bl	80002f8 <__aeabi_dsub>
 801a250:	e9c4 8900 	strd	r8, r9, [r4]
 801a254:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a258:	2501      	movs	r5, #1
 801a25a:	4628      	mov	r0, r5
 801a25c:	b00d      	add	sp, #52	@ 0x34
 801a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a262:	a39d      	add	r3, pc, #628	@ (adr r3, 801a4d8 <__ieee754_rem_pio2+0x2f8>)
 801a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a268:	f7e6 f846 	bl	80002f8 <__aeabi_dsub>
 801a26c:	a39c      	add	r3, pc, #624	@ (adr r3, 801a4e0 <__ieee754_rem_pio2+0x300>)
 801a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a272:	4606      	mov	r6, r0
 801a274:	460f      	mov	r7, r1
 801a276:	f7e6 f83f 	bl	80002f8 <__aeabi_dsub>
 801a27a:	4602      	mov	r2, r0
 801a27c:	460b      	mov	r3, r1
 801a27e:	4680      	mov	r8, r0
 801a280:	4689      	mov	r9, r1
 801a282:	4630      	mov	r0, r6
 801a284:	4639      	mov	r1, r7
 801a286:	f7e6 f837 	bl	80002f8 <__aeabi_dsub>
 801a28a:	a395      	add	r3, pc, #596	@ (adr r3, 801a4e0 <__ieee754_rem_pio2+0x300>)
 801a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a290:	e7dc      	b.n	801a24c <__ieee754_rem_pio2+0x6c>
 801a292:	f7e6 f833 	bl	80002fc <__adddf3>
 801a296:	45a8      	cmp	r8, r5
 801a298:	4606      	mov	r6, r0
 801a29a:	460f      	mov	r7, r1
 801a29c:	d018      	beq.n	801a2d0 <__ieee754_rem_pio2+0xf0>
 801a29e:	a38c      	add	r3, pc, #560	@ (adr r3, 801a4d0 <__ieee754_rem_pio2+0x2f0>)
 801a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a4:	f7e6 f82a 	bl	80002fc <__adddf3>
 801a2a8:	4602      	mov	r2, r0
 801a2aa:	460b      	mov	r3, r1
 801a2ac:	4680      	mov	r8, r0
 801a2ae:	4689      	mov	r9, r1
 801a2b0:	4630      	mov	r0, r6
 801a2b2:	4639      	mov	r1, r7
 801a2b4:	f7e6 f820 	bl	80002f8 <__aeabi_dsub>
 801a2b8:	a385      	add	r3, pc, #532	@ (adr r3, 801a4d0 <__ieee754_rem_pio2+0x2f0>)
 801a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2be:	f7e6 f81d 	bl	80002fc <__adddf3>
 801a2c2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a2c6:	e9c4 8900 	strd	r8, r9, [r4]
 801a2ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a2ce:	e7c4      	b.n	801a25a <__ieee754_rem_pio2+0x7a>
 801a2d0:	a381      	add	r3, pc, #516	@ (adr r3, 801a4d8 <__ieee754_rem_pio2+0x2f8>)
 801a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d6:	f7e6 f811 	bl	80002fc <__adddf3>
 801a2da:	a381      	add	r3, pc, #516	@ (adr r3, 801a4e0 <__ieee754_rem_pio2+0x300>)
 801a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e0:	4606      	mov	r6, r0
 801a2e2:	460f      	mov	r7, r1
 801a2e4:	f7e6 f80a 	bl	80002fc <__adddf3>
 801a2e8:	4602      	mov	r2, r0
 801a2ea:	460b      	mov	r3, r1
 801a2ec:	4680      	mov	r8, r0
 801a2ee:	4689      	mov	r9, r1
 801a2f0:	4630      	mov	r0, r6
 801a2f2:	4639      	mov	r1, r7
 801a2f4:	f7e6 f800 	bl	80002f8 <__aeabi_dsub>
 801a2f8:	a379      	add	r3, pc, #484	@ (adr r3, 801a4e0 <__ieee754_rem_pio2+0x300>)
 801a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2fe:	e7de      	b.n	801a2be <__ieee754_rem_pio2+0xde>
 801a300:	4b82      	ldr	r3, [pc, #520]	@ (801a50c <__ieee754_rem_pio2+0x32c>)
 801a302:	4598      	cmp	r8, r3
 801a304:	f200 80d1 	bhi.w	801a4aa <__ieee754_rem_pio2+0x2ca>
 801a308:	f7ff fbe6 	bl	8019ad8 <fabs>
 801a30c:	ec57 6b10 	vmov	r6, r7, d0
 801a310:	a375      	add	r3, pc, #468	@ (adr r3, 801a4e8 <__ieee754_rem_pio2+0x308>)
 801a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a316:	4630      	mov	r0, r6
 801a318:	4639      	mov	r1, r7
 801a31a:	f7e6 f9a5 	bl	8000668 <__aeabi_dmul>
 801a31e:	4b7c      	ldr	r3, [pc, #496]	@ (801a510 <__ieee754_rem_pio2+0x330>)
 801a320:	2200      	movs	r2, #0
 801a322:	f7e5 ffeb 	bl	80002fc <__adddf3>
 801a326:	f7e6 fc4f 	bl	8000bc8 <__aeabi_d2iz>
 801a32a:	4605      	mov	r5, r0
 801a32c:	f7e6 f932 	bl	8000594 <__aeabi_i2d>
 801a330:	4602      	mov	r2, r0
 801a332:	460b      	mov	r3, r1
 801a334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a338:	a363      	add	r3, pc, #396	@ (adr r3, 801a4c8 <__ieee754_rem_pio2+0x2e8>)
 801a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a33e:	f7e6 f993 	bl	8000668 <__aeabi_dmul>
 801a342:	4602      	mov	r2, r0
 801a344:	460b      	mov	r3, r1
 801a346:	4630      	mov	r0, r6
 801a348:	4639      	mov	r1, r7
 801a34a:	f7e5 ffd5 	bl	80002f8 <__aeabi_dsub>
 801a34e:	a360      	add	r3, pc, #384	@ (adr r3, 801a4d0 <__ieee754_rem_pio2+0x2f0>)
 801a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a354:	4682      	mov	sl, r0
 801a356:	468b      	mov	fp, r1
 801a358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a35c:	f7e6 f984 	bl	8000668 <__aeabi_dmul>
 801a360:	2d1f      	cmp	r5, #31
 801a362:	4606      	mov	r6, r0
 801a364:	460f      	mov	r7, r1
 801a366:	dc0c      	bgt.n	801a382 <__ieee754_rem_pio2+0x1a2>
 801a368:	4b6a      	ldr	r3, [pc, #424]	@ (801a514 <__ieee754_rem_pio2+0x334>)
 801a36a:	1e6a      	subs	r2, r5, #1
 801a36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a370:	4543      	cmp	r3, r8
 801a372:	d006      	beq.n	801a382 <__ieee754_rem_pio2+0x1a2>
 801a374:	4632      	mov	r2, r6
 801a376:	463b      	mov	r3, r7
 801a378:	4650      	mov	r0, sl
 801a37a:	4659      	mov	r1, fp
 801a37c:	f7e5 ffbc 	bl	80002f8 <__aeabi_dsub>
 801a380:	e00e      	b.n	801a3a0 <__ieee754_rem_pio2+0x1c0>
 801a382:	463b      	mov	r3, r7
 801a384:	4632      	mov	r2, r6
 801a386:	4650      	mov	r0, sl
 801a388:	4659      	mov	r1, fp
 801a38a:	f7e5 ffb5 	bl	80002f8 <__aeabi_dsub>
 801a38e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a392:	9305      	str	r3, [sp, #20]
 801a394:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a398:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a39c:	2b10      	cmp	r3, #16
 801a39e:	dc02      	bgt.n	801a3a6 <__ieee754_rem_pio2+0x1c6>
 801a3a0:	e9c4 0100 	strd	r0, r1, [r4]
 801a3a4:	e039      	b.n	801a41a <__ieee754_rem_pio2+0x23a>
 801a3a6:	a34c      	add	r3, pc, #304	@ (adr r3, 801a4d8 <__ieee754_rem_pio2+0x2f8>)
 801a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a3b0:	f7e6 f95a 	bl	8000668 <__aeabi_dmul>
 801a3b4:	4606      	mov	r6, r0
 801a3b6:	460f      	mov	r7, r1
 801a3b8:	4602      	mov	r2, r0
 801a3ba:	460b      	mov	r3, r1
 801a3bc:	4650      	mov	r0, sl
 801a3be:	4659      	mov	r1, fp
 801a3c0:	f7e5 ff9a 	bl	80002f8 <__aeabi_dsub>
 801a3c4:	4602      	mov	r2, r0
 801a3c6:	460b      	mov	r3, r1
 801a3c8:	4680      	mov	r8, r0
 801a3ca:	4689      	mov	r9, r1
 801a3cc:	4650      	mov	r0, sl
 801a3ce:	4659      	mov	r1, fp
 801a3d0:	f7e5 ff92 	bl	80002f8 <__aeabi_dsub>
 801a3d4:	4632      	mov	r2, r6
 801a3d6:	463b      	mov	r3, r7
 801a3d8:	f7e5 ff8e 	bl	80002f8 <__aeabi_dsub>
 801a3dc:	a340      	add	r3, pc, #256	@ (adr r3, 801a4e0 <__ieee754_rem_pio2+0x300>)
 801a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e2:	4606      	mov	r6, r0
 801a3e4:	460f      	mov	r7, r1
 801a3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a3ea:	f7e6 f93d 	bl	8000668 <__aeabi_dmul>
 801a3ee:	4632      	mov	r2, r6
 801a3f0:	463b      	mov	r3, r7
 801a3f2:	f7e5 ff81 	bl	80002f8 <__aeabi_dsub>
 801a3f6:	4602      	mov	r2, r0
 801a3f8:	460b      	mov	r3, r1
 801a3fa:	4606      	mov	r6, r0
 801a3fc:	460f      	mov	r7, r1
 801a3fe:	4640      	mov	r0, r8
 801a400:	4649      	mov	r1, r9
 801a402:	f7e5 ff79 	bl	80002f8 <__aeabi_dsub>
 801a406:	9a05      	ldr	r2, [sp, #20]
 801a408:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a40c:	1ad3      	subs	r3, r2, r3
 801a40e:	2b31      	cmp	r3, #49	@ 0x31
 801a410:	dc20      	bgt.n	801a454 <__ieee754_rem_pio2+0x274>
 801a412:	e9c4 0100 	strd	r0, r1, [r4]
 801a416:	46c2      	mov	sl, r8
 801a418:	46cb      	mov	fp, r9
 801a41a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a41e:	4650      	mov	r0, sl
 801a420:	4642      	mov	r2, r8
 801a422:	464b      	mov	r3, r9
 801a424:	4659      	mov	r1, fp
 801a426:	f7e5 ff67 	bl	80002f8 <__aeabi_dsub>
 801a42a:	463b      	mov	r3, r7
 801a42c:	4632      	mov	r2, r6
 801a42e:	f7e5 ff63 	bl	80002f8 <__aeabi_dsub>
 801a432:	9b04      	ldr	r3, [sp, #16]
 801a434:	2b00      	cmp	r3, #0
 801a436:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a43a:	f6bf af0e 	bge.w	801a25a <__ieee754_rem_pio2+0x7a>
 801a43e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801a442:	6063      	str	r3, [r4, #4]
 801a444:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a448:	f8c4 8000 	str.w	r8, [r4]
 801a44c:	60a0      	str	r0, [r4, #8]
 801a44e:	60e3      	str	r3, [r4, #12]
 801a450:	426d      	negs	r5, r5
 801a452:	e702      	b.n	801a25a <__ieee754_rem_pio2+0x7a>
 801a454:	a326      	add	r3, pc, #152	@ (adr r3, 801a4f0 <__ieee754_rem_pio2+0x310>)
 801a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a45e:	f7e6 f903 	bl	8000668 <__aeabi_dmul>
 801a462:	4606      	mov	r6, r0
 801a464:	460f      	mov	r7, r1
 801a466:	4602      	mov	r2, r0
 801a468:	460b      	mov	r3, r1
 801a46a:	4640      	mov	r0, r8
 801a46c:	4649      	mov	r1, r9
 801a46e:	f7e5 ff43 	bl	80002f8 <__aeabi_dsub>
 801a472:	4602      	mov	r2, r0
 801a474:	460b      	mov	r3, r1
 801a476:	4682      	mov	sl, r0
 801a478:	468b      	mov	fp, r1
 801a47a:	4640      	mov	r0, r8
 801a47c:	4649      	mov	r1, r9
 801a47e:	f7e5 ff3b 	bl	80002f8 <__aeabi_dsub>
 801a482:	4632      	mov	r2, r6
 801a484:	463b      	mov	r3, r7
 801a486:	f7e5 ff37 	bl	80002f8 <__aeabi_dsub>
 801a48a:	a31b      	add	r3, pc, #108	@ (adr r3, 801a4f8 <__ieee754_rem_pio2+0x318>)
 801a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a490:	4606      	mov	r6, r0
 801a492:	460f      	mov	r7, r1
 801a494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a498:	f7e6 f8e6 	bl	8000668 <__aeabi_dmul>
 801a49c:	4632      	mov	r2, r6
 801a49e:	463b      	mov	r3, r7
 801a4a0:	f7e5 ff2a 	bl	80002f8 <__aeabi_dsub>
 801a4a4:	4606      	mov	r6, r0
 801a4a6:	460f      	mov	r7, r1
 801a4a8:	e764      	b.n	801a374 <__ieee754_rem_pio2+0x194>
 801a4aa:	4b1b      	ldr	r3, [pc, #108]	@ (801a518 <__ieee754_rem_pio2+0x338>)
 801a4ac:	4598      	cmp	r8, r3
 801a4ae:	d935      	bls.n	801a51c <__ieee754_rem_pio2+0x33c>
 801a4b0:	4632      	mov	r2, r6
 801a4b2:	463b      	mov	r3, r7
 801a4b4:	4630      	mov	r0, r6
 801a4b6:	4639      	mov	r1, r7
 801a4b8:	f7e5 ff1e 	bl	80002f8 <__aeabi_dsub>
 801a4bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a4c0:	e9c4 0100 	strd	r0, r1, [r4]
 801a4c4:	e69e      	b.n	801a204 <__ieee754_rem_pio2+0x24>
 801a4c6:	bf00      	nop
 801a4c8:	54400000 	.word	0x54400000
 801a4cc:	3ff921fb 	.word	0x3ff921fb
 801a4d0:	1a626331 	.word	0x1a626331
 801a4d4:	3dd0b461 	.word	0x3dd0b461
 801a4d8:	1a600000 	.word	0x1a600000
 801a4dc:	3dd0b461 	.word	0x3dd0b461
 801a4e0:	2e037073 	.word	0x2e037073
 801a4e4:	3ba3198a 	.word	0x3ba3198a
 801a4e8:	6dc9c883 	.word	0x6dc9c883
 801a4ec:	3fe45f30 	.word	0x3fe45f30
 801a4f0:	2e000000 	.word	0x2e000000
 801a4f4:	3ba3198a 	.word	0x3ba3198a
 801a4f8:	252049c1 	.word	0x252049c1
 801a4fc:	397b839a 	.word	0x397b839a
 801a500:	3fe921fb 	.word	0x3fe921fb
 801a504:	4002d97b 	.word	0x4002d97b
 801a508:	3ff921fb 	.word	0x3ff921fb
 801a50c:	413921fb 	.word	0x413921fb
 801a510:	3fe00000 	.word	0x3fe00000
 801a514:	0801c0c0 	.word	0x0801c0c0
 801a518:	7fefffff 	.word	0x7fefffff
 801a51c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a520:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801a524:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a528:	4630      	mov	r0, r6
 801a52a:	460f      	mov	r7, r1
 801a52c:	f7e6 fb4c 	bl	8000bc8 <__aeabi_d2iz>
 801a530:	f7e6 f830 	bl	8000594 <__aeabi_i2d>
 801a534:	4602      	mov	r2, r0
 801a536:	460b      	mov	r3, r1
 801a538:	4630      	mov	r0, r6
 801a53a:	4639      	mov	r1, r7
 801a53c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a540:	f7e5 feda 	bl	80002f8 <__aeabi_dsub>
 801a544:	4b22      	ldr	r3, [pc, #136]	@ (801a5d0 <__ieee754_rem_pio2+0x3f0>)
 801a546:	2200      	movs	r2, #0
 801a548:	f7e6 f88e 	bl	8000668 <__aeabi_dmul>
 801a54c:	460f      	mov	r7, r1
 801a54e:	4606      	mov	r6, r0
 801a550:	f7e6 fb3a 	bl	8000bc8 <__aeabi_d2iz>
 801a554:	f7e6 f81e 	bl	8000594 <__aeabi_i2d>
 801a558:	4602      	mov	r2, r0
 801a55a:	460b      	mov	r3, r1
 801a55c:	4630      	mov	r0, r6
 801a55e:	4639      	mov	r1, r7
 801a560:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a564:	f7e5 fec8 	bl	80002f8 <__aeabi_dsub>
 801a568:	4b19      	ldr	r3, [pc, #100]	@ (801a5d0 <__ieee754_rem_pio2+0x3f0>)
 801a56a:	2200      	movs	r2, #0
 801a56c:	f7e6 f87c 	bl	8000668 <__aeabi_dmul>
 801a570:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801a574:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801a578:	f04f 0803 	mov.w	r8, #3
 801a57c:	2600      	movs	r6, #0
 801a57e:	2700      	movs	r7, #0
 801a580:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a584:	4632      	mov	r2, r6
 801a586:	463b      	mov	r3, r7
 801a588:	46c2      	mov	sl, r8
 801a58a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a58e:	f7e6 fad3 	bl	8000b38 <__aeabi_dcmpeq>
 801a592:	2800      	cmp	r0, #0
 801a594:	d1f4      	bne.n	801a580 <__ieee754_rem_pio2+0x3a0>
 801a596:	4b0f      	ldr	r3, [pc, #60]	@ (801a5d4 <__ieee754_rem_pio2+0x3f4>)
 801a598:	9301      	str	r3, [sp, #4]
 801a59a:	2302      	movs	r3, #2
 801a59c:	9300      	str	r3, [sp, #0]
 801a59e:	462a      	mov	r2, r5
 801a5a0:	4653      	mov	r3, sl
 801a5a2:	4621      	mov	r1, r4
 801a5a4:	a806      	add	r0, sp, #24
 801a5a6:	f000 f817 	bl	801a5d8 <__kernel_rem_pio2>
 801a5aa:	9b04      	ldr	r3, [sp, #16]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	4605      	mov	r5, r0
 801a5b0:	f6bf ae53 	bge.w	801a25a <__ieee754_rem_pio2+0x7a>
 801a5b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 801a5b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a5bc:	e9c4 2300 	strd	r2, r3, [r4]
 801a5c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801a5c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a5c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801a5cc:	e740      	b.n	801a450 <__ieee754_rem_pio2+0x270>
 801a5ce:	bf00      	nop
 801a5d0:	41700000 	.word	0x41700000
 801a5d4:	0801c140 	.word	0x0801c140

0801a5d8 <__kernel_rem_pio2>:
 801a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5dc:	ed2d 8b02 	vpush	{d8}
 801a5e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801a5e4:	f112 0f14 	cmn.w	r2, #20
 801a5e8:	9306      	str	r3, [sp, #24]
 801a5ea:	9104      	str	r1, [sp, #16]
 801a5ec:	4bbe      	ldr	r3, [pc, #760]	@ (801a8e8 <__kernel_rem_pio2+0x310>)
 801a5ee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801a5f0:	9008      	str	r0, [sp, #32]
 801a5f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a5f6:	9300      	str	r3, [sp, #0]
 801a5f8:	9b06      	ldr	r3, [sp, #24]
 801a5fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a5fe:	bfa8      	it	ge
 801a600:	1ed4      	subge	r4, r2, #3
 801a602:	9305      	str	r3, [sp, #20]
 801a604:	bfb2      	itee	lt
 801a606:	2400      	movlt	r4, #0
 801a608:	2318      	movge	r3, #24
 801a60a:	fb94 f4f3 	sdivge	r4, r4, r3
 801a60e:	f06f 0317 	mvn.w	r3, #23
 801a612:	fb04 3303 	mla	r3, r4, r3, r3
 801a616:	eb03 0b02 	add.w	fp, r3, r2
 801a61a:	9b00      	ldr	r3, [sp, #0]
 801a61c:	9a05      	ldr	r2, [sp, #20]
 801a61e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801a8d8 <__kernel_rem_pio2+0x300>
 801a622:	eb03 0802 	add.w	r8, r3, r2
 801a626:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a628:	1aa7      	subs	r7, r4, r2
 801a62a:	ae20      	add	r6, sp, #128	@ 0x80
 801a62c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a630:	2500      	movs	r5, #0
 801a632:	4545      	cmp	r5, r8
 801a634:	dd13      	ble.n	801a65e <__kernel_rem_pio2+0x86>
 801a636:	9b06      	ldr	r3, [sp, #24]
 801a638:	aa20      	add	r2, sp, #128	@ 0x80
 801a63a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a63e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801a642:	f04f 0800 	mov.w	r8, #0
 801a646:	9b00      	ldr	r3, [sp, #0]
 801a648:	4598      	cmp	r8, r3
 801a64a:	dc31      	bgt.n	801a6b0 <__kernel_rem_pio2+0xd8>
 801a64c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801a8d8 <__kernel_rem_pio2+0x300>
 801a650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a654:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a658:	462f      	mov	r7, r5
 801a65a:	2600      	movs	r6, #0
 801a65c:	e01b      	b.n	801a696 <__kernel_rem_pio2+0xbe>
 801a65e:	42ef      	cmn	r7, r5
 801a660:	d407      	bmi.n	801a672 <__kernel_rem_pio2+0x9a>
 801a662:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a666:	f7e5 ff95 	bl	8000594 <__aeabi_i2d>
 801a66a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a66e:	3501      	adds	r5, #1
 801a670:	e7df      	b.n	801a632 <__kernel_rem_pio2+0x5a>
 801a672:	ec51 0b18 	vmov	r0, r1, d8
 801a676:	e7f8      	b.n	801a66a <__kernel_rem_pio2+0x92>
 801a678:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a67c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a680:	f7e5 fff2 	bl	8000668 <__aeabi_dmul>
 801a684:	4602      	mov	r2, r0
 801a686:	460b      	mov	r3, r1
 801a688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a68c:	f7e5 fe36 	bl	80002fc <__adddf3>
 801a690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a694:	3601      	adds	r6, #1
 801a696:	9b05      	ldr	r3, [sp, #20]
 801a698:	429e      	cmp	r6, r3
 801a69a:	f1a7 0708 	sub.w	r7, r7, #8
 801a69e:	ddeb      	ble.n	801a678 <__kernel_rem_pio2+0xa0>
 801a6a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a6a4:	f108 0801 	add.w	r8, r8, #1
 801a6a8:	ecaa 7b02 	vstmia	sl!, {d7}
 801a6ac:	3508      	adds	r5, #8
 801a6ae:	e7ca      	b.n	801a646 <__kernel_rem_pio2+0x6e>
 801a6b0:	9b00      	ldr	r3, [sp, #0]
 801a6b2:	f8dd 8000 	ldr.w	r8, [sp]
 801a6b6:	aa0c      	add	r2, sp, #48	@ 0x30
 801a6b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a6bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801a6be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801a6c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a6c6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a6ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6cc:	ab98      	add	r3, sp, #608	@ 0x260
 801a6ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a6d2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801a6d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6da:	ac0c      	add	r4, sp, #48	@ 0x30
 801a6dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a6de:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801a6e2:	46a1      	mov	r9, r4
 801a6e4:	46c2      	mov	sl, r8
 801a6e6:	f1ba 0f00 	cmp.w	sl, #0
 801a6ea:	f1a5 0508 	sub.w	r5, r5, #8
 801a6ee:	dc77      	bgt.n	801a7e0 <__kernel_rem_pio2+0x208>
 801a6f0:	4658      	mov	r0, fp
 801a6f2:	ed9d 0b02 	vldr	d0, [sp, #8]
 801a6f6:	f000 fac7 	bl	801ac88 <scalbn>
 801a6fa:	ec57 6b10 	vmov	r6, r7, d0
 801a6fe:	2200      	movs	r2, #0
 801a700:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801a704:	4630      	mov	r0, r6
 801a706:	4639      	mov	r1, r7
 801a708:	f7e5 ffae 	bl	8000668 <__aeabi_dmul>
 801a70c:	ec41 0b10 	vmov	d0, r0, r1
 801a710:	f000 fb3a 	bl	801ad88 <floor>
 801a714:	4b75      	ldr	r3, [pc, #468]	@ (801a8ec <__kernel_rem_pio2+0x314>)
 801a716:	ec51 0b10 	vmov	r0, r1, d0
 801a71a:	2200      	movs	r2, #0
 801a71c:	f7e5 ffa4 	bl	8000668 <__aeabi_dmul>
 801a720:	4602      	mov	r2, r0
 801a722:	460b      	mov	r3, r1
 801a724:	4630      	mov	r0, r6
 801a726:	4639      	mov	r1, r7
 801a728:	f7e5 fde6 	bl	80002f8 <__aeabi_dsub>
 801a72c:	460f      	mov	r7, r1
 801a72e:	4606      	mov	r6, r0
 801a730:	f7e6 fa4a 	bl	8000bc8 <__aeabi_d2iz>
 801a734:	9002      	str	r0, [sp, #8]
 801a736:	f7e5 ff2d 	bl	8000594 <__aeabi_i2d>
 801a73a:	4602      	mov	r2, r0
 801a73c:	460b      	mov	r3, r1
 801a73e:	4630      	mov	r0, r6
 801a740:	4639      	mov	r1, r7
 801a742:	f7e5 fdd9 	bl	80002f8 <__aeabi_dsub>
 801a746:	f1bb 0f00 	cmp.w	fp, #0
 801a74a:	4606      	mov	r6, r0
 801a74c:	460f      	mov	r7, r1
 801a74e:	dd6c      	ble.n	801a82a <__kernel_rem_pio2+0x252>
 801a750:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801a754:	ab0c      	add	r3, sp, #48	@ 0x30
 801a756:	9d02      	ldr	r5, [sp, #8]
 801a758:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a75c:	f1cb 0018 	rsb	r0, fp, #24
 801a760:	fa43 f200 	asr.w	r2, r3, r0
 801a764:	4415      	add	r5, r2
 801a766:	4082      	lsls	r2, r0
 801a768:	1a9b      	subs	r3, r3, r2
 801a76a:	aa0c      	add	r2, sp, #48	@ 0x30
 801a76c:	9502      	str	r5, [sp, #8]
 801a76e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a772:	f1cb 0217 	rsb	r2, fp, #23
 801a776:	fa43 f902 	asr.w	r9, r3, r2
 801a77a:	f1b9 0f00 	cmp.w	r9, #0
 801a77e:	dd64      	ble.n	801a84a <__kernel_rem_pio2+0x272>
 801a780:	9b02      	ldr	r3, [sp, #8]
 801a782:	2200      	movs	r2, #0
 801a784:	3301      	adds	r3, #1
 801a786:	9302      	str	r3, [sp, #8]
 801a788:	4615      	mov	r5, r2
 801a78a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801a78e:	4590      	cmp	r8, r2
 801a790:	f300 80b8 	bgt.w	801a904 <__kernel_rem_pio2+0x32c>
 801a794:	f1bb 0f00 	cmp.w	fp, #0
 801a798:	dd07      	ble.n	801a7aa <__kernel_rem_pio2+0x1d2>
 801a79a:	f1bb 0f01 	cmp.w	fp, #1
 801a79e:	f000 80bf 	beq.w	801a920 <__kernel_rem_pio2+0x348>
 801a7a2:	f1bb 0f02 	cmp.w	fp, #2
 801a7a6:	f000 80c6 	beq.w	801a936 <__kernel_rem_pio2+0x35e>
 801a7aa:	f1b9 0f02 	cmp.w	r9, #2
 801a7ae:	d14c      	bne.n	801a84a <__kernel_rem_pio2+0x272>
 801a7b0:	4632      	mov	r2, r6
 801a7b2:	463b      	mov	r3, r7
 801a7b4:	494e      	ldr	r1, [pc, #312]	@ (801a8f0 <__kernel_rem_pio2+0x318>)
 801a7b6:	2000      	movs	r0, #0
 801a7b8:	f7e5 fd9e 	bl	80002f8 <__aeabi_dsub>
 801a7bc:	4606      	mov	r6, r0
 801a7be:	460f      	mov	r7, r1
 801a7c0:	2d00      	cmp	r5, #0
 801a7c2:	d042      	beq.n	801a84a <__kernel_rem_pio2+0x272>
 801a7c4:	4658      	mov	r0, fp
 801a7c6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801a8e0 <__kernel_rem_pio2+0x308>
 801a7ca:	f000 fa5d 	bl	801ac88 <scalbn>
 801a7ce:	4630      	mov	r0, r6
 801a7d0:	4639      	mov	r1, r7
 801a7d2:	ec53 2b10 	vmov	r2, r3, d0
 801a7d6:	f7e5 fd8f 	bl	80002f8 <__aeabi_dsub>
 801a7da:	4606      	mov	r6, r0
 801a7dc:	460f      	mov	r7, r1
 801a7de:	e034      	b.n	801a84a <__kernel_rem_pio2+0x272>
 801a7e0:	4b44      	ldr	r3, [pc, #272]	@ (801a8f4 <__kernel_rem_pio2+0x31c>)
 801a7e2:	2200      	movs	r2, #0
 801a7e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7e8:	f7e5 ff3e 	bl	8000668 <__aeabi_dmul>
 801a7ec:	f7e6 f9ec 	bl	8000bc8 <__aeabi_d2iz>
 801a7f0:	f7e5 fed0 	bl	8000594 <__aeabi_i2d>
 801a7f4:	4b40      	ldr	r3, [pc, #256]	@ (801a8f8 <__kernel_rem_pio2+0x320>)
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	4606      	mov	r6, r0
 801a7fa:	460f      	mov	r7, r1
 801a7fc:	f7e5 ff34 	bl	8000668 <__aeabi_dmul>
 801a800:	4602      	mov	r2, r0
 801a802:	460b      	mov	r3, r1
 801a804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a808:	f7e5 fd76 	bl	80002f8 <__aeabi_dsub>
 801a80c:	f7e6 f9dc 	bl	8000bc8 <__aeabi_d2iz>
 801a810:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a814:	f849 0b04 	str.w	r0, [r9], #4
 801a818:	4639      	mov	r1, r7
 801a81a:	4630      	mov	r0, r6
 801a81c:	f7e5 fd6e 	bl	80002fc <__adddf3>
 801a820:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a828:	e75d      	b.n	801a6e6 <__kernel_rem_pio2+0x10e>
 801a82a:	d107      	bne.n	801a83c <__kernel_rem_pio2+0x264>
 801a82c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801a830:	aa0c      	add	r2, sp, #48	@ 0x30
 801a832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a836:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801a83a:	e79e      	b.n	801a77a <__kernel_rem_pio2+0x1a2>
 801a83c:	4b2f      	ldr	r3, [pc, #188]	@ (801a8fc <__kernel_rem_pio2+0x324>)
 801a83e:	2200      	movs	r2, #0
 801a840:	f7e6 f998 	bl	8000b74 <__aeabi_dcmpge>
 801a844:	2800      	cmp	r0, #0
 801a846:	d143      	bne.n	801a8d0 <__kernel_rem_pio2+0x2f8>
 801a848:	4681      	mov	r9, r0
 801a84a:	2200      	movs	r2, #0
 801a84c:	2300      	movs	r3, #0
 801a84e:	4630      	mov	r0, r6
 801a850:	4639      	mov	r1, r7
 801a852:	f7e6 f971 	bl	8000b38 <__aeabi_dcmpeq>
 801a856:	2800      	cmp	r0, #0
 801a858:	f000 80bf 	beq.w	801a9da <__kernel_rem_pio2+0x402>
 801a85c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801a860:	2200      	movs	r2, #0
 801a862:	9900      	ldr	r1, [sp, #0]
 801a864:	428b      	cmp	r3, r1
 801a866:	da6e      	bge.n	801a946 <__kernel_rem_pio2+0x36e>
 801a868:	2a00      	cmp	r2, #0
 801a86a:	f000 8089 	beq.w	801a980 <__kernel_rem_pio2+0x3a8>
 801a86e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801a872:	ab0c      	add	r3, sp, #48	@ 0x30
 801a874:	f1ab 0b18 	sub.w	fp, fp, #24
 801a878:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d0f6      	beq.n	801a86e <__kernel_rem_pio2+0x296>
 801a880:	4658      	mov	r0, fp
 801a882:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801a8e0 <__kernel_rem_pio2+0x308>
 801a886:	f000 f9ff 	bl	801ac88 <scalbn>
 801a88a:	f108 0301 	add.w	r3, r8, #1
 801a88e:	00da      	lsls	r2, r3, #3
 801a890:	9205      	str	r2, [sp, #20]
 801a892:	ec55 4b10 	vmov	r4, r5, d0
 801a896:	aa70      	add	r2, sp, #448	@ 0x1c0
 801a898:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801a8f4 <__kernel_rem_pio2+0x31c>
 801a89c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801a8a0:	4646      	mov	r6, r8
 801a8a2:	f04f 0a00 	mov.w	sl, #0
 801a8a6:	2e00      	cmp	r6, #0
 801a8a8:	f280 80cf 	bge.w	801aa4a <__kernel_rem_pio2+0x472>
 801a8ac:	4644      	mov	r4, r8
 801a8ae:	2c00      	cmp	r4, #0
 801a8b0:	f2c0 80fd 	blt.w	801aaae <__kernel_rem_pio2+0x4d6>
 801a8b4:	4b12      	ldr	r3, [pc, #72]	@ (801a900 <__kernel_rem_pio2+0x328>)
 801a8b6:	461f      	mov	r7, r3
 801a8b8:	ab70      	add	r3, sp, #448	@ 0x1c0
 801a8ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a8be:	9306      	str	r3, [sp, #24]
 801a8c0:	f04f 0a00 	mov.w	sl, #0
 801a8c4:	f04f 0b00 	mov.w	fp, #0
 801a8c8:	2600      	movs	r6, #0
 801a8ca:	eba8 0504 	sub.w	r5, r8, r4
 801a8ce:	e0e2      	b.n	801aa96 <__kernel_rem_pio2+0x4be>
 801a8d0:	f04f 0902 	mov.w	r9, #2
 801a8d4:	e754      	b.n	801a780 <__kernel_rem_pio2+0x1a8>
 801a8d6:	bf00      	nop
	...
 801a8e4:	3ff00000 	.word	0x3ff00000
 801a8e8:	0801c288 	.word	0x0801c288
 801a8ec:	40200000 	.word	0x40200000
 801a8f0:	3ff00000 	.word	0x3ff00000
 801a8f4:	3e700000 	.word	0x3e700000
 801a8f8:	41700000 	.word	0x41700000
 801a8fc:	3fe00000 	.word	0x3fe00000
 801a900:	0801c248 	.word	0x0801c248
 801a904:	f854 3b04 	ldr.w	r3, [r4], #4
 801a908:	b945      	cbnz	r5, 801a91c <__kernel_rem_pio2+0x344>
 801a90a:	b123      	cbz	r3, 801a916 <__kernel_rem_pio2+0x33e>
 801a90c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801a910:	f844 3c04 	str.w	r3, [r4, #-4]
 801a914:	2301      	movs	r3, #1
 801a916:	3201      	adds	r2, #1
 801a918:	461d      	mov	r5, r3
 801a91a:	e738      	b.n	801a78e <__kernel_rem_pio2+0x1b6>
 801a91c:	1acb      	subs	r3, r1, r3
 801a91e:	e7f7      	b.n	801a910 <__kernel_rem_pio2+0x338>
 801a920:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801a924:	ab0c      	add	r3, sp, #48	@ 0x30
 801a926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a92a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a92e:	a90c      	add	r1, sp, #48	@ 0x30
 801a930:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a934:	e739      	b.n	801a7aa <__kernel_rem_pio2+0x1d2>
 801a936:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801a93a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a940:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a944:	e7f3      	b.n	801a92e <__kernel_rem_pio2+0x356>
 801a946:	a90c      	add	r1, sp, #48	@ 0x30
 801a948:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a94c:	3b01      	subs	r3, #1
 801a94e:	430a      	orrs	r2, r1
 801a950:	e787      	b.n	801a862 <__kernel_rem_pio2+0x28a>
 801a952:	3401      	adds	r4, #1
 801a954:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a958:	2a00      	cmp	r2, #0
 801a95a:	d0fa      	beq.n	801a952 <__kernel_rem_pio2+0x37a>
 801a95c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a95e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a962:	eb0d 0503 	add.w	r5, sp, r3
 801a966:	9b06      	ldr	r3, [sp, #24]
 801a968:	aa20      	add	r2, sp, #128	@ 0x80
 801a96a:	4443      	add	r3, r8
 801a96c:	f108 0701 	add.w	r7, r8, #1
 801a970:	3d98      	subs	r5, #152	@ 0x98
 801a972:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801a976:	4444      	add	r4, r8
 801a978:	42bc      	cmp	r4, r7
 801a97a:	da04      	bge.n	801a986 <__kernel_rem_pio2+0x3ae>
 801a97c:	46a0      	mov	r8, r4
 801a97e:	e6a2      	b.n	801a6c6 <__kernel_rem_pio2+0xee>
 801a980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a982:	2401      	movs	r4, #1
 801a984:	e7e6      	b.n	801a954 <__kernel_rem_pio2+0x37c>
 801a986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a988:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a98c:	f7e5 fe02 	bl	8000594 <__aeabi_i2d>
 801a990:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801ac58 <__kernel_rem_pio2+0x680>
 801a994:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a998:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a99c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a9a0:	46b2      	mov	sl, r6
 801a9a2:	f04f 0800 	mov.w	r8, #0
 801a9a6:	9b05      	ldr	r3, [sp, #20]
 801a9a8:	4598      	cmp	r8, r3
 801a9aa:	dd05      	ble.n	801a9b8 <__kernel_rem_pio2+0x3e0>
 801a9ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9b0:	3701      	adds	r7, #1
 801a9b2:	eca5 7b02 	vstmia	r5!, {d7}
 801a9b6:	e7df      	b.n	801a978 <__kernel_rem_pio2+0x3a0>
 801a9b8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801a9bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a9c0:	f7e5 fe52 	bl	8000668 <__aeabi_dmul>
 801a9c4:	4602      	mov	r2, r0
 801a9c6:	460b      	mov	r3, r1
 801a9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9cc:	f7e5 fc96 	bl	80002fc <__adddf3>
 801a9d0:	f108 0801 	add.w	r8, r8, #1
 801a9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9d8:	e7e5      	b.n	801a9a6 <__kernel_rem_pio2+0x3ce>
 801a9da:	f1cb 0000 	rsb	r0, fp, #0
 801a9de:	ec47 6b10 	vmov	d0, r6, r7
 801a9e2:	f000 f951 	bl	801ac88 <scalbn>
 801a9e6:	ec55 4b10 	vmov	r4, r5, d0
 801a9ea:	4b9d      	ldr	r3, [pc, #628]	@ (801ac60 <__kernel_rem_pio2+0x688>)
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	4629      	mov	r1, r5
 801a9f2:	f7e6 f8bf 	bl	8000b74 <__aeabi_dcmpge>
 801a9f6:	b300      	cbz	r0, 801aa3a <__kernel_rem_pio2+0x462>
 801a9f8:	4b9a      	ldr	r3, [pc, #616]	@ (801ac64 <__kernel_rem_pio2+0x68c>)
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	4620      	mov	r0, r4
 801a9fe:	4629      	mov	r1, r5
 801aa00:	f7e5 fe32 	bl	8000668 <__aeabi_dmul>
 801aa04:	f7e6 f8e0 	bl	8000bc8 <__aeabi_d2iz>
 801aa08:	4606      	mov	r6, r0
 801aa0a:	f7e5 fdc3 	bl	8000594 <__aeabi_i2d>
 801aa0e:	4b94      	ldr	r3, [pc, #592]	@ (801ac60 <__kernel_rem_pio2+0x688>)
 801aa10:	2200      	movs	r2, #0
 801aa12:	f7e5 fe29 	bl	8000668 <__aeabi_dmul>
 801aa16:	460b      	mov	r3, r1
 801aa18:	4602      	mov	r2, r0
 801aa1a:	4629      	mov	r1, r5
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	f7e5 fc6b 	bl	80002f8 <__aeabi_dsub>
 801aa22:	f7e6 f8d1 	bl	8000bc8 <__aeabi_d2iz>
 801aa26:	ab0c      	add	r3, sp, #48	@ 0x30
 801aa28:	f10b 0b18 	add.w	fp, fp, #24
 801aa2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801aa30:	f108 0801 	add.w	r8, r8, #1
 801aa34:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801aa38:	e722      	b.n	801a880 <__kernel_rem_pio2+0x2a8>
 801aa3a:	4620      	mov	r0, r4
 801aa3c:	4629      	mov	r1, r5
 801aa3e:	f7e6 f8c3 	bl	8000bc8 <__aeabi_d2iz>
 801aa42:	ab0c      	add	r3, sp, #48	@ 0x30
 801aa44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801aa48:	e71a      	b.n	801a880 <__kernel_rem_pio2+0x2a8>
 801aa4a:	ab0c      	add	r3, sp, #48	@ 0x30
 801aa4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801aa50:	f7e5 fda0 	bl	8000594 <__aeabi_i2d>
 801aa54:	4622      	mov	r2, r4
 801aa56:	462b      	mov	r3, r5
 801aa58:	f7e5 fe06 	bl	8000668 <__aeabi_dmul>
 801aa5c:	4652      	mov	r2, sl
 801aa5e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801aa62:	465b      	mov	r3, fp
 801aa64:	4620      	mov	r0, r4
 801aa66:	4629      	mov	r1, r5
 801aa68:	f7e5 fdfe 	bl	8000668 <__aeabi_dmul>
 801aa6c:	3e01      	subs	r6, #1
 801aa6e:	4604      	mov	r4, r0
 801aa70:	460d      	mov	r5, r1
 801aa72:	e718      	b.n	801a8a6 <__kernel_rem_pio2+0x2ce>
 801aa74:	9906      	ldr	r1, [sp, #24]
 801aa76:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801aa7a:	9106      	str	r1, [sp, #24]
 801aa7c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801aa80:	f7e5 fdf2 	bl	8000668 <__aeabi_dmul>
 801aa84:	4602      	mov	r2, r0
 801aa86:	460b      	mov	r3, r1
 801aa88:	4650      	mov	r0, sl
 801aa8a:	4659      	mov	r1, fp
 801aa8c:	f7e5 fc36 	bl	80002fc <__adddf3>
 801aa90:	3601      	adds	r6, #1
 801aa92:	4682      	mov	sl, r0
 801aa94:	468b      	mov	fp, r1
 801aa96:	9b00      	ldr	r3, [sp, #0]
 801aa98:	429e      	cmp	r6, r3
 801aa9a:	dc01      	bgt.n	801aaa0 <__kernel_rem_pio2+0x4c8>
 801aa9c:	42b5      	cmp	r5, r6
 801aa9e:	dae9      	bge.n	801aa74 <__kernel_rem_pio2+0x49c>
 801aaa0:	ab48      	add	r3, sp, #288	@ 0x120
 801aaa2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801aaa6:	e9c5 ab00 	strd	sl, fp, [r5]
 801aaaa:	3c01      	subs	r4, #1
 801aaac:	e6ff      	b.n	801a8ae <__kernel_rem_pio2+0x2d6>
 801aaae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801aab0:	2b02      	cmp	r3, #2
 801aab2:	dc0b      	bgt.n	801aacc <__kernel_rem_pio2+0x4f4>
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dc39      	bgt.n	801ab2c <__kernel_rem_pio2+0x554>
 801aab8:	d05d      	beq.n	801ab76 <__kernel_rem_pio2+0x59e>
 801aaba:	9b02      	ldr	r3, [sp, #8]
 801aabc:	f003 0007 	and.w	r0, r3, #7
 801aac0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801aac4:	ecbd 8b02 	vpop	{d8}
 801aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aacc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801aace:	2b03      	cmp	r3, #3
 801aad0:	d1f3      	bne.n	801aaba <__kernel_rem_pio2+0x4e2>
 801aad2:	9b05      	ldr	r3, [sp, #20]
 801aad4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801aad8:	eb0d 0403 	add.w	r4, sp, r3
 801aadc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801aae0:	4625      	mov	r5, r4
 801aae2:	46c2      	mov	sl, r8
 801aae4:	f1ba 0f00 	cmp.w	sl, #0
 801aae8:	f1a5 0508 	sub.w	r5, r5, #8
 801aaec:	dc6b      	bgt.n	801abc6 <__kernel_rem_pio2+0x5ee>
 801aaee:	4645      	mov	r5, r8
 801aaf0:	2d01      	cmp	r5, #1
 801aaf2:	f1a4 0408 	sub.w	r4, r4, #8
 801aaf6:	f300 8087 	bgt.w	801ac08 <__kernel_rem_pio2+0x630>
 801aafa:	9c05      	ldr	r4, [sp, #20]
 801aafc:	ab48      	add	r3, sp, #288	@ 0x120
 801aafe:	441c      	add	r4, r3
 801ab00:	2000      	movs	r0, #0
 801ab02:	2100      	movs	r1, #0
 801ab04:	f1b8 0f01 	cmp.w	r8, #1
 801ab08:	f300 809c 	bgt.w	801ac44 <__kernel_rem_pio2+0x66c>
 801ab0c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801ab10:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801ab14:	f1b9 0f00 	cmp.w	r9, #0
 801ab18:	f040 80a6 	bne.w	801ac68 <__kernel_rem_pio2+0x690>
 801ab1c:	9b04      	ldr	r3, [sp, #16]
 801ab1e:	e9c3 7800 	strd	r7, r8, [r3]
 801ab22:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801ab26:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ab2a:	e7c6      	b.n	801aaba <__kernel_rem_pio2+0x4e2>
 801ab2c:	9d05      	ldr	r5, [sp, #20]
 801ab2e:	ab48      	add	r3, sp, #288	@ 0x120
 801ab30:	441d      	add	r5, r3
 801ab32:	4644      	mov	r4, r8
 801ab34:	2000      	movs	r0, #0
 801ab36:	2100      	movs	r1, #0
 801ab38:	2c00      	cmp	r4, #0
 801ab3a:	da35      	bge.n	801aba8 <__kernel_rem_pio2+0x5d0>
 801ab3c:	f1b9 0f00 	cmp.w	r9, #0
 801ab40:	d038      	beq.n	801abb4 <__kernel_rem_pio2+0x5dc>
 801ab42:	4602      	mov	r2, r0
 801ab44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ab48:	9c04      	ldr	r4, [sp, #16]
 801ab4a:	e9c4 2300 	strd	r2, r3, [r4]
 801ab4e:	4602      	mov	r2, r0
 801ab50:	460b      	mov	r3, r1
 801ab52:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801ab56:	f7e5 fbcf 	bl	80002f8 <__aeabi_dsub>
 801ab5a:	ad4a      	add	r5, sp, #296	@ 0x128
 801ab5c:	2401      	movs	r4, #1
 801ab5e:	45a0      	cmp	r8, r4
 801ab60:	da2b      	bge.n	801abba <__kernel_rem_pio2+0x5e2>
 801ab62:	f1b9 0f00 	cmp.w	r9, #0
 801ab66:	d002      	beq.n	801ab6e <__kernel_rem_pio2+0x596>
 801ab68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ab6c:	4619      	mov	r1, r3
 801ab6e:	9b04      	ldr	r3, [sp, #16]
 801ab70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ab74:	e7a1      	b.n	801aaba <__kernel_rem_pio2+0x4e2>
 801ab76:	9c05      	ldr	r4, [sp, #20]
 801ab78:	ab48      	add	r3, sp, #288	@ 0x120
 801ab7a:	441c      	add	r4, r3
 801ab7c:	2000      	movs	r0, #0
 801ab7e:	2100      	movs	r1, #0
 801ab80:	f1b8 0f00 	cmp.w	r8, #0
 801ab84:	da09      	bge.n	801ab9a <__kernel_rem_pio2+0x5c2>
 801ab86:	f1b9 0f00 	cmp.w	r9, #0
 801ab8a:	d002      	beq.n	801ab92 <__kernel_rem_pio2+0x5ba>
 801ab8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ab90:	4619      	mov	r1, r3
 801ab92:	9b04      	ldr	r3, [sp, #16]
 801ab94:	e9c3 0100 	strd	r0, r1, [r3]
 801ab98:	e78f      	b.n	801aaba <__kernel_rem_pio2+0x4e2>
 801ab9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ab9e:	f7e5 fbad 	bl	80002fc <__adddf3>
 801aba2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801aba6:	e7eb      	b.n	801ab80 <__kernel_rem_pio2+0x5a8>
 801aba8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801abac:	f7e5 fba6 	bl	80002fc <__adddf3>
 801abb0:	3c01      	subs	r4, #1
 801abb2:	e7c1      	b.n	801ab38 <__kernel_rem_pio2+0x560>
 801abb4:	4602      	mov	r2, r0
 801abb6:	460b      	mov	r3, r1
 801abb8:	e7c6      	b.n	801ab48 <__kernel_rem_pio2+0x570>
 801abba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801abbe:	f7e5 fb9d 	bl	80002fc <__adddf3>
 801abc2:	3401      	adds	r4, #1
 801abc4:	e7cb      	b.n	801ab5e <__kernel_rem_pio2+0x586>
 801abc6:	ed95 7b00 	vldr	d7, [r5]
 801abca:	ed8d 7b00 	vstr	d7, [sp]
 801abce:	ed95 7b02 	vldr	d7, [r5, #8]
 801abd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abd6:	ec53 2b17 	vmov	r2, r3, d7
 801abda:	ed8d 7b06 	vstr	d7, [sp, #24]
 801abde:	f7e5 fb8d 	bl	80002fc <__adddf3>
 801abe2:	4602      	mov	r2, r0
 801abe4:	460b      	mov	r3, r1
 801abe6:	4606      	mov	r6, r0
 801abe8:	460f      	mov	r7, r1
 801abea:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abee:	f7e5 fb83 	bl	80002f8 <__aeabi_dsub>
 801abf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801abf6:	f7e5 fb81 	bl	80002fc <__adddf3>
 801abfa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801abfe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801ac02:	e9c5 6700 	strd	r6, r7, [r5]
 801ac06:	e76d      	b.n	801aae4 <__kernel_rem_pio2+0x50c>
 801ac08:	ed94 7b00 	vldr	d7, [r4]
 801ac0c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801ac10:	ec51 0b17 	vmov	r0, r1, d7
 801ac14:	4652      	mov	r2, sl
 801ac16:	465b      	mov	r3, fp
 801ac18:	ed8d 7b00 	vstr	d7, [sp]
 801ac1c:	f7e5 fb6e 	bl	80002fc <__adddf3>
 801ac20:	4602      	mov	r2, r0
 801ac22:	460b      	mov	r3, r1
 801ac24:	4606      	mov	r6, r0
 801ac26:	460f      	mov	r7, r1
 801ac28:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac2c:	f7e5 fb64 	bl	80002f8 <__aeabi_dsub>
 801ac30:	4652      	mov	r2, sl
 801ac32:	465b      	mov	r3, fp
 801ac34:	f7e5 fb62 	bl	80002fc <__adddf3>
 801ac38:	3d01      	subs	r5, #1
 801ac3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801ac3e:	e9c4 6700 	strd	r6, r7, [r4]
 801ac42:	e755      	b.n	801aaf0 <__kernel_rem_pio2+0x518>
 801ac44:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ac48:	f7e5 fb58 	bl	80002fc <__adddf3>
 801ac4c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801ac50:	e758      	b.n	801ab04 <__kernel_rem_pio2+0x52c>
 801ac52:	bf00      	nop
 801ac54:	f3af 8000 	nop.w
	...
 801ac60:	41700000 	.word	0x41700000
 801ac64:	3e700000 	.word	0x3e700000
 801ac68:	9b04      	ldr	r3, [sp, #16]
 801ac6a:	9a04      	ldr	r2, [sp, #16]
 801ac6c:	601f      	str	r7, [r3, #0]
 801ac6e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801ac72:	605c      	str	r4, [r3, #4]
 801ac74:	609d      	str	r5, [r3, #8]
 801ac76:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ac7a:	60d3      	str	r3, [r2, #12]
 801ac7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ac80:	6110      	str	r0, [r2, #16]
 801ac82:	6153      	str	r3, [r2, #20]
 801ac84:	e719      	b.n	801aaba <__kernel_rem_pio2+0x4e2>
 801ac86:	bf00      	nop

0801ac88 <scalbn>:
 801ac88:	b570      	push	{r4, r5, r6, lr}
 801ac8a:	ec55 4b10 	vmov	r4, r5, d0
 801ac8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801ac92:	4606      	mov	r6, r0
 801ac94:	462b      	mov	r3, r5
 801ac96:	b991      	cbnz	r1, 801acbe <scalbn+0x36>
 801ac98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ac9c:	4323      	orrs	r3, r4
 801ac9e:	d03d      	beq.n	801ad1c <scalbn+0x94>
 801aca0:	4b35      	ldr	r3, [pc, #212]	@ (801ad78 <scalbn+0xf0>)
 801aca2:	4620      	mov	r0, r4
 801aca4:	4629      	mov	r1, r5
 801aca6:	2200      	movs	r2, #0
 801aca8:	f7e5 fcde 	bl	8000668 <__aeabi_dmul>
 801acac:	4b33      	ldr	r3, [pc, #204]	@ (801ad7c <scalbn+0xf4>)
 801acae:	429e      	cmp	r6, r3
 801acb0:	4604      	mov	r4, r0
 801acb2:	460d      	mov	r5, r1
 801acb4:	da0f      	bge.n	801acd6 <scalbn+0x4e>
 801acb6:	a328      	add	r3, pc, #160	@ (adr r3, 801ad58 <scalbn+0xd0>)
 801acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acbc:	e01e      	b.n	801acfc <scalbn+0x74>
 801acbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801acc2:	4291      	cmp	r1, r2
 801acc4:	d10b      	bne.n	801acde <scalbn+0x56>
 801acc6:	4622      	mov	r2, r4
 801acc8:	4620      	mov	r0, r4
 801acca:	4629      	mov	r1, r5
 801accc:	f7e5 fb16 	bl	80002fc <__adddf3>
 801acd0:	4604      	mov	r4, r0
 801acd2:	460d      	mov	r5, r1
 801acd4:	e022      	b.n	801ad1c <scalbn+0x94>
 801acd6:	460b      	mov	r3, r1
 801acd8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801acdc:	3936      	subs	r1, #54	@ 0x36
 801acde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801ace2:	4296      	cmp	r6, r2
 801ace4:	dd0d      	ble.n	801ad02 <scalbn+0x7a>
 801ace6:	2d00      	cmp	r5, #0
 801ace8:	a11d      	add	r1, pc, #116	@ (adr r1, 801ad60 <scalbn+0xd8>)
 801acea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acee:	da02      	bge.n	801acf6 <scalbn+0x6e>
 801acf0:	a11d      	add	r1, pc, #116	@ (adr r1, 801ad68 <scalbn+0xe0>)
 801acf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acf6:	a31a      	add	r3, pc, #104	@ (adr r3, 801ad60 <scalbn+0xd8>)
 801acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfc:	f7e5 fcb4 	bl	8000668 <__aeabi_dmul>
 801ad00:	e7e6      	b.n	801acd0 <scalbn+0x48>
 801ad02:	1872      	adds	r2, r6, r1
 801ad04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801ad08:	428a      	cmp	r2, r1
 801ad0a:	dcec      	bgt.n	801ace6 <scalbn+0x5e>
 801ad0c:	2a00      	cmp	r2, #0
 801ad0e:	dd08      	ble.n	801ad22 <scalbn+0x9a>
 801ad10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ad14:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801ad18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ad1c:	ec45 4b10 	vmov	d0, r4, r5
 801ad20:	bd70      	pop	{r4, r5, r6, pc}
 801ad22:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801ad26:	da08      	bge.n	801ad3a <scalbn+0xb2>
 801ad28:	2d00      	cmp	r5, #0
 801ad2a:	a10b      	add	r1, pc, #44	@ (adr r1, 801ad58 <scalbn+0xd0>)
 801ad2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad30:	dac1      	bge.n	801acb6 <scalbn+0x2e>
 801ad32:	a10f      	add	r1, pc, #60	@ (adr r1, 801ad70 <scalbn+0xe8>)
 801ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad38:	e7bd      	b.n	801acb6 <scalbn+0x2e>
 801ad3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ad3e:	3236      	adds	r2, #54	@ 0x36
 801ad40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801ad44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ad48:	4620      	mov	r0, r4
 801ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (801ad80 <scalbn+0xf8>)
 801ad4c:	4629      	mov	r1, r5
 801ad4e:	2200      	movs	r2, #0
 801ad50:	e7d4      	b.n	801acfc <scalbn+0x74>
 801ad52:	bf00      	nop
 801ad54:	f3af 8000 	nop.w
 801ad58:	c2f8f359 	.word	0xc2f8f359
 801ad5c:	01a56e1f 	.word	0x01a56e1f
 801ad60:	8800759c 	.word	0x8800759c
 801ad64:	7e37e43c 	.word	0x7e37e43c
 801ad68:	8800759c 	.word	0x8800759c
 801ad6c:	fe37e43c 	.word	0xfe37e43c
 801ad70:	c2f8f359 	.word	0xc2f8f359
 801ad74:	81a56e1f 	.word	0x81a56e1f
 801ad78:	43500000 	.word	0x43500000
 801ad7c:	ffff3cb0 	.word	0xffff3cb0
 801ad80:	3c900000 	.word	0x3c900000
 801ad84:	00000000 	.word	0x00000000

0801ad88 <floor>:
 801ad88:	ec51 0b10 	vmov	r0, r1, d0
 801ad8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad94:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801ad98:	2e13      	cmp	r6, #19
 801ad9a:	460c      	mov	r4, r1
 801ad9c:	4605      	mov	r5, r0
 801ad9e:	4680      	mov	r8, r0
 801ada0:	dc34      	bgt.n	801ae0c <floor+0x84>
 801ada2:	2e00      	cmp	r6, #0
 801ada4:	da17      	bge.n	801add6 <floor+0x4e>
 801ada6:	a332      	add	r3, pc, #200	@ (adr r3, 801ae70 <floor+0xe8>)
 801ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adac:	f7e5 faa6 	bl	80002fc <__adddf3>
 801adb0:	2200      	movs	r2, #0
 801adb2:	2300      	movs	r3, #0
 801adb4:	f7e5 fee8 	bl	8000b88 <__aeabi_dcmpgt>
 801adb8:	b150      	cbz	r0, 801add0 <floor+0x48>
 801adba:	2c00      	cmp	r4, #0
 801adbc:	da55      	bge.n	801ae6a <floor+0xe2>
 801adbe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801adc2:	432c      	orrs	r4, r5
 801adc4:	2500      	movs	r5, #0
 801adc6:	42ac      	cmp	r4, r5
 801adc8:	4c2b      	ldr	r4, [pc, #172]	@ (801ae78 <floor+0xf0>)
 801adca:	bf08      	it	eq
 801adcc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801add0:	4621      	mov	r1, r4
 801add2:	4628      	mov	r0, r5
 801add4:	e023      	b.n	801ae1e <floor+0x96>
 801add6:	4f29      	ldr	r7, [pc, #164]	@ (801ae7c <floor+0xf4>)
 801add8:	4137      	asrs	r7, r6
 801adda:	ea01 0307 	and.w	r3, r1, r7
 801adde:	4303      	orrs	r3, r0
 801ade0:	d01d      	beq.n	801ae1e <floor+0x96>
 801ade2:	a323      	add	r3, pc, #140	@ (adr r3, 801ae70 <floor+0xe8>)
 801ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade8:	f7e5 fa88 	bl	80002fc <__adddf3>
 801adec:	2200      	movs	r2, #0
 801adee:	2300      	movs	r3, #0
 801adf0:	f7e5 feca 	bl	8000b88 <__aeabi_dcmpgt>
 801adf4:	2800      	cmp	r0, #0
 801adf6:	d0eb      	beq.n	801add0 <floor+0x48>
 801adf8:	2c00      	cmp	r4, #0
 801adfa:	bfbe      	ittt	lt
 801adfc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801ae00:	4133      	asrlt	r3, r6
 801ae02:	18e4      	addlt	r4, r4, r3
 801ae04:	ea24 0407 	bic.w	r4, r4, r7
 801ae08:	2500      	movs	r5, #0
 801ae0a:	e7e1      	b.n	801add0 <floor+0x48>
 801ae0c:	2e33      	cmp	r6, #51	@ 0x33
 801ae0e:	dd0a      	ble.n	801ae26 <floor+0x9e>
 801ae10:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801ae14:	d103      	bne.n	801ae1e <floor+0x96>
 801ae16:	4602      	mov	r2, r0
 801ae18:	460b      	mov	r3, r1
 801ae1a:	f7e5 fa6f 	bl	80002fc <__adddf3>
 801ae1e:	ec41 0b10 	vmov	d0, r0, r1
 801ae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae26:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801ae2a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ae2e:	40df      	lsrs	r7, r3
 801ae30:	4207      	tst	r7, r0
 801ae32:	d0f4      	beq.n	801ae1e <floor+0x96>
 801ae34:	a30e      	add	r3, pc, #56	@ (adr r3, 801ae70 <floor+0xe8>)
 801ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3a:	f7e5 fa5f 	bl	80002fc <__adddf3>
 801ae3e:	2200      	movs	r2, #0
 801ae40:	2300      	movs	r3, #0
 801ae42:	f7e5 fea1 	bl	8000b88 <__aeabi_dcmpgt>
 801ae46:	2800      	cmp	r0, #0
 801ae48:	d0c2      	beq.n	801add0 <floor+0x48>
 801ae4a:	2c00      	cmp	r4, #0
 801ae4c:	da0a      	bge.n	801ae64 <floor+0xdc>
 801ae4e:	2e14      	cmp	r6, #20
 801ae50:	d101      	bne.n	801ae56 <floor+0xce>
 801ae52:	3401      	adds	r4, #1
 801ae54:	e006      	b.n	801ae64 <floor+0xdc>
 801ae56:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801ae5a:	2301      	movs	r3, #1
 801ae5c:	40b3      	lsls	r3, r6
 801ae5e:	441d      	add	r5, r3
 801ae60:	4545      	cmp	r5, r8
 801ae62:	d3f6      	bcc.n	801ae52 <floor+0xca>
 801ae64:	ea25 0507 	bic.w	r5, r5, r7
 801ae68:	e7b2      	b.n	801add0 <floor+0x48>
 801ae6a:	2500      	movs	r5, #0
 801ae6c:	462c      	mov	r4, r5
 801ae6e:	e7af      	b.n	801add0 <floor+0x48>
 801ae70:	8800759c 	.word	0x8800759c
 801ae74:	7e37e43c 	.word	0x7e37e43c
 801ae78:	bff00000 	.word	0xbff00000
 801ae7c:	000fffff 	.word	0x000fffff

0801ae80 <_init>:
 801ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae82:	bf00      	nop
 801ae84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae86:	bc08      	pop	{r3}
 801ae88:	469e      	mov	lr, r3
 801ae8a:	4770      	bx	lr

0801ae8c <_fini>:
 801ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae8e:	bf00      	nop
 801ae90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae92:	bc08      	pop	{r3}
 801ae94:	469e      	mov	lr, r3
 801ae96:	4770      	bx	lr
